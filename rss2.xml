<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Aaron Lin</title>
    <link>https://aaronlinv.github.io/</link>
    
    <image>
      <url>https://aaronlinv.github.io/favicon.ico</url>
      <title>Aaron Lin</title>
      <link>https://aaronlinv.github.io/</link>
    </image>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Tue, 09 Feb 2021 02:46:45 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>《Effective Java》笔记 2~3</title>
      <link>https://aaronlinv.github.io/2021/02/02/effective-java-2-3/</link>
      <guid>https://aaronlinv.github.io/2021/02/02/effective-java-2-3/</guid>
      <pubDate>Tue, 02 Feb 2021 02:44:56 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;2-创建和销毁对象&quot;&gt;&lt;a href=&quot;#2-创建和销毁对象&quot; class=&quot;headerlink&quot; title=&quot;2. 创建和销毁对象&quot;&gt;&lt;/a&gt;2. 创建和销毁对象&lt;/h1&gt;&lt;h2 id=&quot;1-静态工厂方法替代构造器&quot;&gt;&lt;a href=&quot;#1-静态工厂方法替代
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="2-创建和销毁对象"><a href="#2-创建和销毁对象" class="headerlink" title="2. 创建和销毁对象"></a>2. 创建和销毁对象</h1><h2 id="1-静态工厂方法替代构造器"><a href="#1-静态工厂方法替代构造器" class="headerlink" title="1. 静态工厂方法替代构造器"></a>1. 静态工厂方法替代构造器</h2><p>优点：</p><ol><li>名称清晰</li><li>每次调用不必new对象</li><li>可以返回原返回类型任意子类型对象</li><li>返回的对象可以随着调用而发生改变</li><li>返回的对象所属的类，在编写该静态工厂方法的类时可以不存在</li></ol><p>缺点：</p><ol><li>private 构造器导致，就不能有子类，子类构造器会默认访问父类构造器<h2 id="2-多个构造器参数时可以使用构建器（建造者模式-Builder）"><a href="#2-多个构造器参数时可以使用构建器（建造者模式-Builder）" class="headerlink" title="2. 多个构造器参数时可以使用构建器（建造者模式 Builder）"></a>2. 多个构造器参数时可以使用构建器（建造者模式 Builder）</h2>印象比较深刻的是：之前写安卓用到了OkHttp，使用的OkHttp是用Kotlin写的，其中实例化对象用的就是建造者模式，当时以为是Kotlin链式调用的某种语法特性，后来才知道是设计模式</li></ol><p>主要用于多参数时，避免重叠构造器和避免无参构造器创建对象依次set参数过程中JavaBean可能处于的不一致状态</p><h2 id="3-私有化构造器或者枚举类型强化Singleton属性"><a href="#3-私有化构造器或者枚举类型强化Singleton属性" class="headerlink" title="3. 私有化构造器或者枚举类型强化Singleton属性"></a>3. 私有化构造器或者枚举类型强化Singleton属性</h2><p>Singleton常见实现方法：</p><ol><li>final修饰的公有静态成员</li><li>静态工厂</li><li>单元素Enum</li></ol><p>通过反射调用私有构造器，可以修改构造器，创建第二个实例时抛出异常<br>序列化时除了实现 Serializable接口，还需要提供readResolve，防止反序列化创建新的实例</p><h2 id="4-私有构造器强化不可实例化"><a href="#4-私有构造器强化不可实例化" class="headerlink" title="4. 私有构造器强化不可实例化"></a>4. 私有构造器强化不可实例化</h2><h2 id="5-优先考虑依赖注入来引用资源"><a href="#5-优先考虑依赖注入来引用资源" class="headerlink" title="5. 优先考虑依赖注入来引用资源"></a>5. 优先考虑依赖注入来引用资源</h2><p>SOLID 原则中的 D 依赖反转原则 (Dependency Inversion Principle)，依赖注入是该原则的一种实现方式<br>创建一个新的实例时，就将该资源传到构造器中</p><h2 id="6-避免创建不必要的对象"><a href="#6-避免创建不必要的对象" class="headerlink" title="6. 避免创建不必要的对象"></a>6. 避免创建不必要的对象</h2><ol><li>不使用 new String() 方式创建String实例，使用 String s =”hello”; 方式，同一台虚拟机的代码，字符串字面常量相同，该对象就会被重用</li><li>复用创建成本较高的实例：正则Pattern实例</li><li>优先使用基本类型，自动装箱一定程度降低性能<br>注意！在提倡保护性拷贝时，重用对象付出代价远大于创建重复对象<h2 id="7-清除过期的对象引用"><a href="#7-清除过期的对象引用" class="headerlink" title="7. 清除过期的对象引用"></a>7. 清除过期的对象引用</h2></li><li>栈pop时应将pop的对象设置为null</li><li>避免缓存内存泄漏的一种方式：WeakHashMap，除了WeakHashMap的键之外，如果没有存在对某个键的引用，会被自动删除</li><li>监听器和其他回调造成的内存泄漏：只保留他们的弱引用，例如保存成WeakHashMap的键<h2 id="8-避免使用终结方法和清除方法"><a href="#8-避免使用终结方法和清除方法" class="headerlink" title="8.避免使用终结方法和清除方法"></a>8.避免使用终结方法和清除方法</h2>终结方法 (finalizer) 和 清除方法(cleaner JDK9) 都不可预测且会造成性能损失<br>注重时间的任务不应该使用这两种方法来完成<br>不应该依赖这两种方法来更新重要的持久状态（比如：释放共享资源，可能还没开始释放资源，系统就因为资源不足垮掉了）<br>TODO p25 终结方法攻击(finalizer attack)<br>TODO 合理用途：</li><li>安全网，忘记close</li><li>回收对象的本地对等体(native peer)<h2 id="9-try-with-resources-优先于try-finally"><a href="#9-try-with-resources-优先于try-finally" class="headerlink" title="9. try-with-resources 优先于try-finally"></a>9. try-with-resources 优先于try-finally</h2>实现了AutoCloseable 接口</li><li>优雅</li><li>避免底层物理设备异常导致第一个异常被第二个异常抹除，增加排错成本</li></ol><h1 id="3-对于所有对象都通用的方法"><a href="#3-对于所有对象都通用的方法" class="headerlink" title="3. 对于所有对象都通用的方法"></a>3. 对于所有对象都通用的方法</h1><h2 id="10-覆盖Equals时请注意遵守通用约定"><a href="#10-覆盖Equals时请注意遵守通用约定" class="headerlink" title="10. 覆盖Equals时请注意遵守通用约定"></a>10. 覆盖Equals时请注意遵守通用约定</h2><p>不用覆盖的情况（满足其一即可）</p><ol><li>类的每个实例本质都唯一</li><li>类无需提供逻辑相等功能</li><li>父类的equals方法足够满足使用</li><li>类是私有或者默认权限或确定不会调用到equals</li></ol><p>覆盖equals的通用规范</p><ol><li>自反性 非null值，x.equals(x) 为true 子类和父类不同的equals方法，相互equals会违反自反性</li><li>对称性 非null值，x.equals(y) 等于 y.equals(x) </li><li>传递性 非null值，x.equals(y) 为ture 且 y.equals(z) 为true -&gt; x.equals(z)为true 子类相较于父类增加了一些用于equals的属性，但是子类还使用父类equals，违反传递性</li><li>一致性 非null值，值未修改，多次调用equals 结果应一致</li><li>x非null值，x.equals(null) 返回 false</li></ol><p>子类与父类 自反性和传递性的对立：无法在拓展可实例化的类的同时，既增加新的值组件，同时又保留equals约定</p><p>IDEA 默认子类equals写法就是：使用getClass() 比较对象，然后调用父类equals最后对比子类拓展的属性</p><p>Stream 初始化Set：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Set&lt;Point&gt; unitCircle = Stream.of(</span><br><span class="line">        <span class="keyword">new</span> Point(<span class="number">1</span>, <span class="number">0</span>),</span><br><span class="line">        <span class="keyword">new</span> Point(<span class="number">0</span>, <span class="number">1</span>),</span><br><span class="line">        <span class="keyword">new</span> Point(-<span class="number">1</span>, <span class="number">0</span>),</span><br><span class="line">        <span class="keyword">new</span> Point(<span class="number">0</span>, -<span class="number">1</span>)</span><br><span class="line">).collect(Collectors.toCollection(HashSet::<span class="keyword">new</span>));</span><br></pre></td></tr></table></figure><p>辨析：instanceof    getClass()==</p><ul><li>instanceof 这个对象是否为这个类<strong>或其子类</strong>的实例</li><li>getClass()== 运行时期对象的类</li></ul><p>使用复合优于继承：提供私有Point域以及共有视图（view）方法</p><p>JDK反例：public class Timestamp extends java.util.Date，在同一个集合中使用或者其他方式混合使用，可能有不正确的行为</p><p>instanceof 第一个操作符为null 那么返回的一定为false，使用 instanceof 可以省略 null 判断</p><p>一致性，不要使equals方法依赖于不可靠的资源，JDK反例：URL equals</p><p>高质量equals诀窍</p><ol><li>== 检查是否为这个对象的引用</li><li>instanceof 检查是否为正确类型（同时也可以排除掉null）</li><li>转换为正确的类型</li><li>检查每个关键域<ul><li>基本类型： ==</li><li>浮点数：Float.compare(float,float) Double.compare(double,double) ，使用Float.equals或Double.equals 自动装箱减低性能</li><li>数组域：Arrays.equals</li><li>合法null：Objects.equals(Object,Object) 避免抛出空指针异常</li><li>顺序上按照：最有可能不一致或开销最小的域</li></ul></li></ol><p>注意点：</p><ol><li>覆盖equals时总要覆盖hashCode</li><li>不要过度寻找等价关系，比如考虑别名形式</li><li>不要把equals参数定义为非Object 这样是重载而非重写</li></ol><h2 id="11-覆盖equals时总要覆盖hashCode"><a href="#11-覆盖equals时总要覆盖hashCode" class="headerlink" title="11. 覆盖equals时总要覆盖hashCode"></a>11. 覆盖equals时总要覆盖hashCode</h2><ol><li>同个对象多次调用hashCode返回同一个值</li><li>equals(Object) 相等 hashCode返回整数也相等</li><li>equals(Object) 不相等 hashCode 有可能相等</li></ol><p>Object的hashCode方法为native方法：public native int hashCode();<br>hashCode注释提到：hashCode返回的是由对象存储地址转化得到的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">As much as is reasonably practical, the hashCode method defined by</span><br><span class="line">class &#123;@code Object&#125; does return distinct integers for distinct</span><br><span class="line">objects. (This is typically implemented by converting the internal</span><br><span class="line">address of the object into an integer, but this implementation</span><br><span class="line">technique is not required by the</span><br><span class="line">Java&amp;trade; programming language.)</span><br></pre></td></tr></table></figure><p>如果没有覆盖hashCode导致两个相同实例具有不同散列码，HashMap有一项优化，可以将每个项相关联的散列码缓存起来，如果散列码不匹配，不会校验对象相等性<br>好的散列函数倾向于“为不相等的对象产生不相等的散列码”，每个对象都被映射到同一个散列桶中，会实其退化为链表</p><p>简单解决方法：</p><ol><li>定义 int result ，初试化为对象第一个关键域散列码</li><li>对每个关键域f完成这些步骤，得到散列码c<ul><li>计算f散列值：基本类型 包装类.hashCode(f)；对象引用递归调用hashCode，或者为域计算一个范式，范式调用hashCode；null返回0；数组中没有重要元素用常数代替，都很重要用Arrays.hashCode(f)</li><li>累加：result = 31* result + c;</li></ul></li><li>返回 result</li></ol><p>使用31原因：</p><ol><li>31为奇素数，避免乘以偶数导致的乘法移除信息丢失</li><li>乘以31可以用移位和减法代替 31*i == (i&lt;&lt;5) -1</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">计算机在进行数值运算的时候，是通过补码表示每个数值的</span><br><span class="line">正数原反补相同；负数反码符号位不变，其它位都取反；负数的补码在反码的基础上加<span class="number">1</span></span><br><span class="line"></span><br><span class="line">Java 三种位运算（补码）</span><br><span class="line">&lt;&lt; 左移：丢弃最高位，<span class="number">0</span>补最低位</span><br><span class="line">&gt;&gt; 右移：符号位不变，左边填充符号位</span><br><span class="line">&gt;&gt;&gt; 无符号右移：忽略了符号位，<span class="number">0</span>补最高位</span><br></pre></td></tr></table></figure><p>Objects类：public static int hash(Object… values) 便捷，但是相对速度慢一些：可变参数引发数组创建，基本类型需要拆箱装箱<br>不可变类用使用private 变量 缓存hash值， 延迟初始化(lazily initialize)</p><p>构造器为：PhoneNumber(short areaCode, short prefix, short lineNum) ，必须强转 (short)1<br>直接传入整数，否者报错，没有int类型构造器</p><p>注意：</p><ol><li>不要通过排除关键域来提高性能，反而可能导致实例被映射在极少数散列码上</li><li>不要对hashCode返回值做具体规定，可能影响其在未来的改进</li></ol><h2 id="12-始终要覆盖toString"><a href="#12-始终要覆盖toString" class="headerlink" title="12. 始终要覆盖toString"></a>12. 始终要覆盖toString</h2><p>Object实现：类名称@散列码无符号十六进制表示<br>toString 返回对象中包含的<strong>所有</strong>值得关注的信息</p><p>可以在文档中指定返回的格式，并配套静态工厂或者构造器，便于相互转换，JDK例子：BigInteger、BigDecimal、包装类<br>静态工具类和大多数枚举类编写toString意义不大</p><h2 id="13-谨慎地覆盖clone"><a href="#13-谨慎地覆盖clone" class="headerlink" title="13. 谨慎地覆盖clone"></a>13. 谨慎地覆盖clone</h2><p>记得实现Cloneable接口（空的interface），否者抛出异常：java.lang.CloneNotSupportedException<br>Object中的clone方法：protected native Object clone() throws CloneNotSupportedException;</p><p>TODO p46<br>实现Cloneable接口的类是为了提供一个功能适当复杂的公有clone方法，它无需调用构造器就可以创建对象<br>不变类永远都不应该提供clone方法</p><p>Clone方法就是另一个构造器；必须保证它不会伤害到原始对象，并确保正确地创建被克隆对象中的约束条件</p><ol><li>递归调用clone拷贝内部信息</li><li>如果域含有对象数组，要注意递归或迭代深拷贝</li></ol><p>如果域是final修饰，clone是禁止给final域赋值，Cloneable架构于引用可变对象的final域的正常用法是不相兼容的</p><p>线程安全：Object类 clone 没有同步</p><p>实现了Cloneable接口的类</p><ol><li>都应该覆盖clone方法，且是公有方法，<strong>返回类型为本身</strong></li><li>调用super.clone()</li><li>修正域（深拷贝）</li></ol><p>拷贝对象更好的方法是提供拷贝构造器和拷贝工厂</p><p>最佳实践：用clone复制数组</p><h2 id="14-考虑实现Comparable接口"><a href="#14-考虑实现Comparable接口" class="headerlink" title="14. 考虑实现Comparable接口"></a>14. 考虑实现Comparable接口</h2><p>Comparable接口：public int compareTo(T o);<br>将这个对象与指定对象比较，大于、等于、小于指定对象返回负整数、零和正整数，类型不匹配抛出RuntimeException：ClassCastException</p><p>通用约定</p><ol><li>sgn(x.compareTo(y)) == -sgn(y.compareTo(x))</li><li>可传递：(x.compareTo(y) &gt; 0) &amp;&amp; (y.compareTo(z) &gt; 0) -&gt; (x.compareTo(z) &gt; 0)</li><li>(x.compareTo(y) == 0) 所有的z满足：sgn(x.compareTo(z) == 0) == sgn(y.compareTo(z))</li></ol><p>建议：(x.compareTo(y) == 0) -&gt; x.equals(y)</p><p>依赖比较关系的类有：TreeSet TreeMap Collections Arrays</p><p>与equals相同：无法在用新的值组件拓展课实例化的类时，同时保持compareTo约定，除非放弃面向对象抽象优势；可以通过组合方式实现Comparable接口的类增加值组件（提供“视图” view方法）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">BigDecimal d1 = <span class="keyword">new</span> BigDecimal(<span class="string">"1.0"</span>);</span><br><span class="line">BigDecimal d2 = <span class="keyword">new</span> BigDecimal(<span class="string">"1.00"</span>);</span><br><span class="line">System.out.println(d1.equals(d2)); <span class="comment">// false</span></span><br><span class="line">System.out.println(d1.compareTo(d2)); <span class="comment">// 0</span></span><br><span class="line">Set&lt;BigDecimal&gt; bigDecimals = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"><span class="comment">// equals 比较</span></span><br><span class="line">bigDecimals.add(d1);</span><br><span class="line">bigDecimals.add(d2);</span><br><span class="line">System.out.println(bigDecimals); <span class="comment">// [1.0, 1.00] </span></span><br><span class="line"></span><br><span class="line">Set&lt;BigDecimal&gt; treeSets = <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line"><span class="comment">// compareTo 比较</span></span><br><span class="line">treeSets.add(d1);</span><br><span class="line">treeSets.add(d2);</span><br><span class="line">System.out.println(treeSets); <span class="comment">// [1.0]</span></span><br></pre></td></tr></table></figure><p>注意Double和Float 使用compare比较而非 &lt; &gt;<br>Java7 提供了包装类的静态compare方法，建议在compareTo中使用</p><p>从关键域开始逐步比较所有域，某个域产生非零结果立即返回</p><p>Java 8 提供了Comparator接口，简洁，但是要付出性能成本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Comparator&lt;PhoneNumber&gt; COMPARATOR =</span><br><span class="line">        comparingInt((PhoneNumber pn) -&gt; pn.areaCode)</span><br><span class="line">                .thenComparingInt((PhoneNumber pn) -&gt; pn.prefix)</span><br><span class="line">                .thenComparingInt((PhoneNumber pn) -&gt; pn.lineNum);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(PhoneNumber pn)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> COMPARATOR.compare(<span class="keyword">this</span>, pn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://github.com/jbloch/effective-java-3e-source-code" target="_blank" rel="noopener">GitHub effective-java-3e-source-code</a><br><a href="https://book.douban.com/subject/30412517/" target="_blank" rel="noopener">Effective Java - 豆瓣</a><br><a href="https://www.baeldung.com/java-weakhashmap" target="_blank" rel="noopener">Guide to WeakHashMap in Java</a><br><a href="https://www.cnblogs.com/aoguren/p/4822380.html" target="_blank" rel="noopener">java中instanceof和getClass()的作用</a><br><a href="https://www.baeldung.com/java-initialize-hashset" target="_blank" rel="noopener">Initializing HashSet at the Time of Construction</a><br><a href="https://blog.csdn.net/changrj6/article/details/100043822" target="_blank" rel="noopener">Java Object.hashCode()源码分析</a><br><a href="https://blog.csdn.net/briblue/article/details/70296326" target="_blank" rel="noopener">通俗易懂的 Java 位操作运算讲解</a><br><a href="https://blog.csdn.net/xiaochunyong/article/details/7748713" target="_blank" rel="noopener">Java 位运算(移位、位与、或、异或、非）</a></p>]]></content:encoded>
      
      <comments>https://aaronlinv.github.io/2021/02/02/effective-java-2-3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>再见了 Pages</title>
      <link>https://aaronlinv.github.io/2020/08/31/about-blog/</link>
      <guid>https://aaronlinv.github.io/2020/08/31/about-blog/</guid>
      <pubDate>Mon, 31 Aug 2020 02:23:36 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;再见-Pages&quot;&gt;&lt;a href=&quot;#再见-Pages&quot; class=&quot;headerlink&quot; title=&quot;再见 Pages&quot;&gt;&lt;/a&gt;再见 Pages&lt;/h3&gt;&lt;p&gt;之前一直用 GitHub Pages + Hexo 写博客，但是这段时间又出现了无法访问的问
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h3 id="再见-Pages"><a href="#再见-Pages" class="headerlink" title="再见 Pages"></a>再见 Pages</h3><p>之前一直用 GitHub Pages + Hexo 写博客，但是这段时间又出现了无法访问的问题，非常闹心，于是想把博客迁移到 <a href="https://www.cnblogs.com/aaronlinv/" target="_blank" rel="noopener">博客园</a>，继续简简单单地写东西</p><p>挺感激 Pages ，这个博客方案比较成熟，可以很容易地搜索到各种帮助，让我在这个过程中接触了到挺多东西：Markdown、Node.js、Git、Travis-CI</p><h3 id="写博客的感悟"><a href="#写博客的感悟" class="headerlink" title="写博客的感悟"></a>写博客的感悟</h3><p>写博客是一个输出倒逼输入的过程，很多时候为了讲清楚一个东西或者是确定一个概念，往往要查很多相关的资料，这个过程其实帮助你更深入地了解某个知识，帮助你建立知识体系</p><p>写博客也是一个循序渐进的过程，刚开始可能写不出什么东西，只能摘抄一些笔记，做一些总结，慢慢会找到一些写博客感觉，写的东西可以帮助到一些朋友</p><p>最近准备抽空把 Pages 上零碎的东西整理更新下迁移到博客园，希望能帮助到一些朋友</p>]]></content:encoded>
      
      <comments>https://aaronlinv.github.io/2020/08/31/about-blog/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Semantic-UI 上手</title>
      <link>https://aaronlinv.github.io/2020/08/21/semantic-ui/</link>
      <guid>https://aaronlinv.github.io/2020/08/21/semantic-ui/</guid>
      <pubDate>Fri, 21 Aug 2020 07:38:16 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;Semanti UI官方文档：&lt;a href=&quot;https://semantic-ui.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://semantic-ui.com/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;导入依赖&quot;&gt;&lt;a href=&quot;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>Semanti UI官方文档：<a href="https://semantic-ui.com/" target="_blank" rel="noopener">https://semantic-ui.com/</a></p><h2 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h2><ol><li>导入JQuery和Semantic UI</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/jquery@3.2/dist/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>在head中导入CSS样式</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.css"</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>优化移动端</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width ,initial-scale=1.0"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后是这样</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width ,initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/jquery@3.2/dist/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="在body中设计页面"><a href="#在body中设计页面" class="headerlink" title="在body中设计页面"></a>在body中设计页面</h2><p>先写大体框架，然后填充每个部分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--导航--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--内容--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--尾巴--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h3><p>效果：<img src="/2020/08/21/semantic-ui/01.png" alt="导航"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--segment 代表是一的长条块，默认占满宽度 --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--inverted 反转颜色使其为黑色--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"ui inverted segment "</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui container"</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--secondary menu 横向排列菜单按钮--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui inverted secondary menu"</span>&gt;</span></span><br><span class="line">               <span class="comment">&lt;!--teal 青色--&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"ui teal item header "</span>&gt;</span>Blog <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">               <span class="comment">&lt;!--home icon 家图标--&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"ui item"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"home icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"ui item"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"idea icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>分类<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"ui item"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"target icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>标签<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"ui item"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"info icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>关于我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">               <span class="comment">&lt;!--right 排列在右侧--&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right item"</span>&gt;</span></span><br><span class="line">                   <span class="comment">&lt;!--ui input 美化输入框--&gt;</span></span><br><span class="line">                   <span class="comment">&lt;!--transparent 使搜索框内透明--&gt;</span></span><br><span class="line">                   <span class="comment">&lt;!--inverted 反转文字和图标颜色否则和背景同为黑色--&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui icon inverted transparent input"</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"Search..."</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"search link icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure><p>导航布局可以通过在 secondary menu 中嵌套 header item 和 item 实现</p><h2 id="尾部"><a href="#尾部" class="headerlink" title="尾部"></a>尾部</h2><p>效果图：<img src="/2020/08/21/semantic-ui/02.png" alt="尾部"></p><p>添加me.css自定义样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*------opacity------*/</span></span><br><span class="line"><span class="selector-class">.m-opacity-mini</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.8</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.m-inline-block</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.m-padded-tb-big</span> &#123;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">3em</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">3em</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.m-container</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">72em</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在head中引入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"../static/css/me.css"</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--尾巴--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--vertical 隐藏segment上下的线--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui inverted vertical segment"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--使得每个column中的元素 左右居中--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui center aligned container"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--divided grid 分块 共16块--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui divided grid"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"three wide column"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui list"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!--ui rounded image 圆角图片--&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../static/images/avatar.jpg"</span>  <span class="attr">class</span>=<span class="string">"ui rounded image"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">style</span>=<span class="string">"width: 110px"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"three wide column"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"ui inverted header"</span>&gt;</span>最新博客<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--link 显示灰色--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui inverted link list"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>用户故事<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>用户故事<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>用户故事<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"three wide column"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"ui inverted header"</span>&gt;</span>联系我<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui inverted link list"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>用户故事<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>用户故事<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>用户故事<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"seven wide column"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"ui inverted header"</span>&gt;</span>Blog<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"m-opacity-mini"</span>&gt;</span>这是一个博客，这是一个博客，这是一个博客，这是一个博客<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--divider 分割线--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui inverted section divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--版权声明--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"m-opacity-mini"</span>&gt;</span>Copyright © 2020-2021 Aaron All Rights Reserved<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure><p>水平布局可以通过 divided grid ,将水平空间分割开来，竖直显示文字可以通过 list 内部嵌套item</p><h2 id="博客主体"><a href="#博客主体" class="headerlink" title="博客主体"></a>博客主体</h2><p><img src="/2020/08/21/semantic-ui/03.png" alt="博客主体"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--内容--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui container"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui grid"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--分割成11和5--&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--左侧--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"eleven wide column"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--top 头部--&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--attached 可拼接--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui top attached segment"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui middle aligned two column grid"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui teal header"</span>&gt;</span>博客<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right aligned column"</span>&gt;</span></span><br><span class="line">                            共<span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"orange header m-inline-block"</span>&gt;</span>14<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>篇</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!--博客内容--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui attached segment"</span>&gt;</span></span><br><span class="line">                    博客内容</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui bottom attached segment"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui two column grid"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"ui teal basic mini button"</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right aligned column"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"ui teal basic mini button"</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--右侧--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"five wide column"</span>&gt;</span></span><br><span class="line">                右侧列表</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用grid实现左右分栏的布局，左侧每一块都是一个segment，用attached连接</p><p>博客简介<img src="/2020/08/21/semantic-ui/04.png" alt="博客简介"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--博客内容--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui attached segment"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--padded 增加内边距--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--vertical 去除segment四周的边框线--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui padded vertical segment"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui grid"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--11 5 分割--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"eleven wide column"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"ui header"</span>&gt;</span>文章标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span>文章内容 文章内容 文章内容 文章内容 文章内容 文章内容 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--horizontal 使内部元素竖直居中--&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--list 使得文字与头像同行--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui grid"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"eleven wide column"</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--horizontal 水平摆放内部元素--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui  link horizontal list"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">                                <span class="comment">&lt;!--ui avatar image 小圆头像--&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://lorempixel.com/100/100/"</span> <span class="attr">alt</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag">                                     <span class="attr">class</span>=<span class="string">"ui avatar image"</span>&gt;</span></span><br><span class="line">                                <span class="comment">&lt;!--content 使得文字不会换行 能与图片同行--&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span>Aaron<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"calendar icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>2020.8.22</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"eye icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>2022</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"five wide column"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right aligned column"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui basic teal mini label"</span>&gt;</span>认知升级<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"five wide column"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://lorempixel.com/800/400/"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"ui rounded image"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>先通过grid划分左右分栏比例11:5，左侧再分11:5<br>水平摆放可以使用horizontal list 内部嵌套item</p><p>右侧菜单：<img src="/2020/08/21/semantic-ui/05.png" alt="右侧菜单"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--内容--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"m-container m-padded-tb-big "</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui container"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui grid"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--分割成11和5--&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--左侧--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"eleven wide column"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--top 头部--&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--attached 可拼接--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui top attached segment"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui middle aligned two column grid"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui teal header"</span>&gt;</span>博客<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right aligned column"</span>&gt;</span></span><br><span class="line">                            共<span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"orange header m-inline-block"</span>&gt;</span>14<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>篇</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!--博客内容--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui attached segment"</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--padded 增加内边距--&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--vertical 去除segment四周的边框线--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui padded vertical segment"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui grid"</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!--11 5 分割--&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"eleven wide column"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"ui header"</span>&gt;</span>文章标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span>文章内容 文章内容 文章内容 文章内容 文章内容 文章内容 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                                <span class="comment">&lt;!--horizontal 使内部元素竖直居中--&gt;</span></span><br><span class="line">                                <span class="comment">&lt;!--list 使得文字与头像同行--&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui grid"</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"eleven wide column"</span>&gt;</span></span><br><span class="line">                                        <span class="comment">&lt;!--horizontal 水平摆放内部元素--&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui  horizontal link list"</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">                                                <span class="comment">&lt;!--ui avatar image 小圆头像--&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://lorempixel.com/100/100/"</span> <span class="attr">alt</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag">                                                     <span class="attr">class</span>=<span class="string">"ui avatar image"</span>&gt;</span></span><br><span class="line">                                                <span class="comment">&lt;!--content 使得文字不会换行 能与图片同行--&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span>Aaron<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"calendar icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>2020.8.22</span><br><span class="line">                                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"eye icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>2022</span><br><span class="line">                                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"five wide column"</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right aligned column"</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></span><br><span class="line">                                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui basic teal mini label"</span>&gt;</span>认知升级<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"five wide column"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://lorempixel.com/800/400/"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"ui rounded image"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui bottom attached segment"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui two column grid"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"ui teal basic mini button"</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right aligned column"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"ui teal basic mini button"</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--右侧--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"five wide column"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui segments"</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--secondary segment 是浅灰色背景--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui secondary segment"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui two column grid"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"idea icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>分类</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right aligned column"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>more <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"angle double right icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--teal 间隔线青色--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui teal segment"</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--vertical 合并两个单元 fluid填充满宽度--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui vertical fluid menu"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">                                学习笔记</span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui teal basic left pointing label"</span>&gt;</span>13<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">                                学习笔记</span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui teal basic left pointing label"</span>&gt;</span>13<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">                                学习笔记</span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui teal basic left pointing label"</span>&gt;</span>13<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui segments"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui secondary segment"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui two column grid"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"tags icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>标签</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right aligned column"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>more <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"angle double right icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui teal segment"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">class</span>=<span class="string">"ui teal basic left pointing label"</span>&gt;</span></span><br><span class="line">                                方法论 <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"detail"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">class</span>=<span class="string">"ui teal basic left pointing label"</span>&gt;</span></span><br><span class="line">                                方法论 <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"detail"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">class</span>=<span class="string">"ui teal basic left pointing label"</span>&gt;</span></span><br><span class="line">                                方法论 <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"detail"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">class</span>=<span class="string">"ui teal basic left pointing label"</span>&gt;</span></span><br><span class="line">                                方法论 <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"detail"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui segments"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui secondary segment"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"bookmark icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>最新推荐</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui segment"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> &gt;</span>用户故事<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui segment"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> &gt;</span>用户故事<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui segment"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> &gt;</span>用户故事<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!--二维码--&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--horizontal divider 左右线中间字--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"ui horizontal divider header"</span>&gt;</span></span><br><span class="line">                    扫码关注我</span><br><span class="line">                <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui centered card"</span> <span class="attr">style</span>=<span class="string">"width: 11em"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../static/images/avatar.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"ui rounded image"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同列左右布局可以采用：two column grid 内嵌column和right aligned column的方式<br>一个segments内可以嵌套多个segment</p>]]></content:encoded>
      
      <comments>https://aaronlinv.github.io/2020/08/21/semantic-ui/#disqus_thread</comments>
    </item>
    
    <item>
      <title>CentOS7 初次配置</title>
      <link>https://aaronlinv.github.io/2020/08/10/centos7-initial-configuration/</link>
      <guid>https://aaronlinv.github.io/2020/08/10/centos7-initial-configuration/</guid>
      <pubDate>Mon, 10 Aug 2020 07:32:12 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;基本配置（使用root账户）&quot;&gt;&lt;a href=&quot;#基本配置（使用root账户）&quot; class=&quot;headerlink&quot; title=&quot;基本配置（使用root账户）&quot;&gt;&lt;/a&gt;基本配置（使用root账户）&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;使用静态IP&lt;br&gt;使用vi编辑
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="基本配置（使用root账户）"><a href="#基本配置（使用root账户）" class="headerlink" title="基本配置（使用root账户）"></a>基本配置（使用root账户）</h2><ol><li>使用静态IP<br>使用vi编辑器，编辑配置文件，vi编辑器的逻辑和其他编辑器不太一样，第一次使用推荐先学习一下 <a href="https://segmentfault.com/a/1190000008929397" target="_blank" rel="noopener">Vi 极简入门</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33</span><br></pre></td></tr></table></figure>编辑ifcfg-ens33文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 修改以下内容</span><br><span class="line">BOOTPROTO&#x3D;static           # 启用静态IP地址</span><br><span class="line">ONBOOT&#x3D;yes                 # 开启自动启用网络连接</span><br><span class="line"></span><br><span class="line"># 添加以下内容(要结合自己实际的ip情况配置)</span><br><span class="line">IPADDR&#x3D;192.168.43.137      # 设置IP地址</span><br><span class="line">NETMASK&#x3D;255.255.255.0      # 子网掩码</span><br><span class="line">GATEWAY&#x3D;192.168.43.1       # 设置网关</span><br></pre></td></tr></table></figure></li></ol><p>重启网卡，使配置生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 不要在Xshell中执行，可能会断开</span><br><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure><ol start="2"><li>更改镜像源</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 安装wget（Linux系统中的一个下载文件的工具）</span><br><span class="line">yum install -y wget</span><br><span class="line">       </span><br><span class="line"># 下载Aliyun的repo</span><br><span class="line">wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-7.repo</span><br><span class="line"></span><br><span class="line"># 更新镜像源</span><br><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure><ol start="3"><li>安装Vim编辑器（Vi的进阶版）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y vim</span><br></pre></td></tr></table></figure><ol start="4"><li>防火墙<br>关闭防火墙会简化一些软件的配置过程，但是不安全，生产环境谨慎关闭防火墙，可以通过开放指定端口实现互通<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 关闭防火墙</span><br><span class="line">systemctl stop firewalld</span><br><span class="line"></span><br><span class="line"># 禁止开机启动</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure></li><li>更新或升级CentOS<br>这两个命令可能都会升级内核版本，生产环境要注意<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum update &amp;&amp; yum upgrade</span><br></pre></td></tr></table></figure></li><li>添加普通用户到sudo中<br>解决普通用户使用sudo时提示 “xxx 不在 sudoers 文件中。此事将被报告” (xxx is not in the sudoers file)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 在root用户下</span><br><span class="line">visudo</span><br></pre></td></tr></table></figure>在100行左右添加模仿root账户写法，添加<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># hadoop为需要指定的账户名</span><br><span class="line">hadoop  ALL&#x3D;(ALL)       ALL</span><br></pre></td></tr></table></figure></li></ol><p><img src="/2020/08/10/centos7-initial-configuration/01.png" alt="visudo"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://juejin.im/post/6844904101583519752" target="_blank" rel="noopener">Centos7.7安装及配置教程</a><br><a href="https://blog.csdn.net/chengyuqiang/article/details/55044073" target="_blank" rel="noopener">安装CentOS后的基本配置</a><br><a href="https://blog.csdn.net/summy_J/article/details/72846076?utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">linux下”is not in the sudoers file“问题的解决办法</a></p>]]></content:encoded>
      
      <comments>https://aaronlinv.github.io/2020/08/10/centos7-initial-configuration/#disqus_thread</comments>
    </item>
    
    <item>
      <title>CentOS7 VMware安装</title>
      <link>https://aaronlinv.github.io/2020/08/10/linux-centos7/</link>
      <guid>https://aaronlinv.github.io/2020/08/10/linux-centos7/</guid>
      <pubDate>Mon, 10 Aug 2020 05:51:14 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;环境和软件&quot;&gt;&lt;a href=&quot;#环境和软件&quot; class=&quot;headerlink&quot; title=&quot;环境和软件&quot;&gt;&lt;/a&gt;环境和软件&lt;/h2&gt;&lt;p&gt;宿主机（实体机）：i7 7700HQ（4核8线程 ） 16GB内存 SSD&lt;br&gt;虚拟机：VMware Workst
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="环境和软件"><a href="#环境和软件" class="headerlink" title="环境和软件"></a>环境和软件</h2><p>宿主机（实体机）：i7 7700HQ（4核8线程 ） 16GB内存 SSD<br>虚拟机：VMware Workstaion 15 Pro 15.5.0<br>CentOS7镜像：<a href="http://mirrors.oit.uci.edu/centos/7.7.1908/isos/x86_64/CentOS-7-x86_64-Minimal-1908.iso" target="_blank" rel="noopener">CentOS-7-x86_64-Minimal-1908.iso</a> (Minimal为精简版本，无图形界面)</p><h2 id="配置虚拟机"><a href="#配置虚拟机" class="headerlink" title="配置虚拟机"></a>配置虚拟机</h2><ol><li>点击菜单栏 “文件” - “新建虚拟机” 开始配置虚拟机</li><li>大部分选择默认配置即可，依次配置：配置类型-安装来源-操作系统-虚拟机名称与位置-磁盘容量-自定义配置</li><li>自定义配置：内存可以根据和处理器根据实际配置，打开处理器的虚拟化引擎；在新CD/DVD(IDE) 选择需要安装的镜像的路径</li></ol><p>注意点：</p><ol><li>可以可以根据宿主机实际情况配置分给虚拟机的资源（计划开多台虚拟机，要注意虚拟机配置总和不要超过宿主机配置）</li><li>进入虚拟机后，鼠标会被困在虚拟机内，同时按下 Ctrl和Alt 释放鼠标</li><li>更详细的可以参考这两个教程：<a href="https://blog.csdn.net/babyxue/article/details/80970526" target="_blank" rel="noopener">VMware安装Centos7超详细过程（图文）</a> <a href="https://juejin.im/post/6844904101583519752" target="_blank" rel="noopener">Centos7.7安装及配置教程</a></li></ol><p><img src="/2020/08/10/linux-centos7/01.gif" alt="配置虚拟机"></p><h2 id="安装CentOS"><a href="#安装CentOS" class="headerlink" title="安装CentOS"></a>安装CentOS</h2><ol><li>大部分配置默认即可，需要特别注意的就是：选择安装磁盘、打开网络连接、配置root账户密码（生产环境或者云主机一定不要使用弱密码）、新建普通用户</li></ol><p><img src="/2020/08/10/linux-centos7/02.gif" alt="安装CentOS"></p><ol start="2"><li>配置结束后，等待安装完成，然后按照提示重启即可进入系统</li></ol><h2 id="安装之后"><a href="#安装之后" class="headerlink" title="安装之后"></a>安装之后</h2><ol><li>安装后可以先保存一份快照，左下角的 “正在保存状态” 消失了快照才保存完成</li></ol><p><img src="/2020/08/10/linux-centos7/03.gif" alt="保存快照"></p><ol start="2"><li><p>网络设置<br>通过 ip addr 先查看ip地址，框出来的为本机ip<br><img src="/2020/08/10/linux-centos7/04.png" alt="查看ip"></p></li><li><p>安装 Xshell 和Xftp<br>Xshell可以通过网络连接虚拟机，Xftp可以通过网络传输文件到虚拟机，<a href="https://www.netsarang.com/zh/free-for-home-school/" target="_blank" rel="noopener">非商业用途可免费获取这两款软件</a></p></li><li><p>使用Xshell连接虚拟机<br>在“主机” 输入的是刚才虚拟机的ip，然后输入用户名和密码<br><img src="/2020/08/10/linux-centos7/05.gif" alt="使用Xshell连接虚拟机"></p></li><li><p>记录账户信息<br>账户密码久了容易忘记，可以写在 “描述” （要先关闭虚拟机，注意信息安全）<br><img src="/2020/08/10/linux-centos7/06.png" alt="记录账户信息"></p></li></ol>]]></content:encoded>
      
      <comments>https://aaronlinv.github.io/2020/08/10/linux-centos7/#disqus_thread</comments>
    </item>
    
    <item>
      <title>非暴力沟通</title>
      <link>https://aaronlinv.github.io/2020/08/02/nonviolent-communication/</link>
      <guid>https://aaronlinv.github.io/2020/08/02/nonviolent-communication/</guid>
      <pubDate>Sun, 02 Aug 2020 13:07:07 GMT</pubDate>
      <description>
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;也许我们并不认为自己的谈话方式是暴力的，但我们的语言确实常常引发自己和他人的痛苦&lt;/p&gt;
&lt;p&gt;——马歇尔·卢森堡 《非暴力沟通》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;前段时间看了一些讲述“暴力沟通”的文章和视频，很有感触。在某些
        
      
      </description>
      
      
      <content:encoded><![CDATA[<blockquote><p>也许我们并不认为自己的谈话方式是暴力的，但我们的语言确实常常引发自己和他人的痛苦</p><p>——马歇尔·卢森堡 《非暴力沟通》</p></blockquote><br><p>前段时间看了一些讲述“暴力沟通”的文章和视频，很有感触。在某些情况下，我们很容易被情绪所主导，试图用暴力沟通解决问题，但是问题总会越来越糟糕，等缓过神来，已经说了伤害人的话，只能后悔</p><br><p>被提及比较多的解决方法都是来自马歇尔·卢森堡的<a href="https://book.douban.com/subject/3533221/" target="_blank" rel="noopener">《非暴力沟通》</a>，这本书提出了化解暴力沟通的方法，主要分为四个步骤：1. 陈述事实（不要掺杂自己过激的表达） 2. 表达感受 3.说出哪些需求导致了这样的感受 4. 提出请求</p><p>在实际的生活中我们可能并不会按照这样的模板来说话，这样套公式说出来的话反而怪怪的。但是这个方法也给我们很大的启发：表达的时候陈述事实，不要掺杂自己的观点和过激言语。很可能一开始只是一个小问题，因为没有正确沟通，升级为了暴力沟通，两方都冲昏了头脑，接着翻出了各种各样的往事，两个人互相伤害，还不断地加码。如果我们能对这样的情况有一个概念，那么我们至少在一开始就可以重视表达客观事实和自己的感受</p><p>观察到的情况：在面对没那么亲近的人或者是陌生人的时候心态很平和，反而在一些特定的情况下面对比较亲近的人（比如我们的父母）的时候带着点戾气。在这些情况下很难放下情绪表达客观事实和自己的感受，这个时候或许可以先不着急沟通，先冷静，想想对方的不易，尝试去化解对方说的话，<strong>把对方的暴力沟通转化为上面的4个步骤</strong>，经历了这个过程事情总会慢慢变好。和其他的理论一样，知道了并不会改变什么，还需要在实践中磨合理论，克制本能的反应，一开始可能还是一团糟，但是慢慢地沟通就会越来越平顺</p><br><p>豆瓣读书：<a href="https://book.douban.com/subject/3533221/" target="_blank" rel="noopener">非暴力沟通</a></p><p>知乎相关问答：<a href="https://www.zhihu.com/question/20613214" target="_blank" rel="noopener">如何评价《非暴力沟通》这本书？</a></p><p>最后推荐一部还蛮有意思的跟沟通相关的短片<a href="https://www.bilibili.com/video/BV187411m7zb" target="_blank" rel="noopener">《静音》</a></p>]]></content:encoded>
      
      <comments>https://aaronlinv.github.io/2020/08/02/nonviolent-communication/#disqus_thread</comments>
    </item>
    
    <item>
      <title>安卓初学指南</title>
      <link>https://aaronlinv.github.io/2020/06/01/android-beginner/</link>
      <guid>https://aaronlinv.github.io/2020/06/01/android-beginner/</guid>
      <pubDate>Mon, 01 Jun 2020 06:34:26 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;项目第二阶段即将结束，这段时间遇到挺多坑的，所以整理了一下经验，如果你想尝试安卓开发，希望能帮到你。在此之前可以先看我之前写的&lt;a href=&quot;https://aaronlinv.github.io/2020/03/30/android-note/&quot;&gt;初见安卓开发&lt;/a&gt;，
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>项目第二阶段即将结束，这段时间遇到挺多坑的，所以整理了一下经验，如果你想尝试安卓开发，希望能帮到你。在此之前可以先看我之前写的<a href="https://aaronlinv.github.io/2020/03/30/android-note/">初见安卓开发</a>，了解一下安卓开发目前的情况</p><h2 id="预先准备"><a href="#预先准备" class="headerlink" title="预先准备"></a>预先准备</h2><ol><li>需要熟悉Java基础语法</li><li>安装开发环境（JDK、AndroidStudio(简称AS)、虚拟机等），安装环境比较繁琐，而且需要下载很多东西（默认都是安装到C盘，总共可能会占用20G左右的空间）。安装可能会劝退一部分朋友，这里推荐两个教程跟着做就没问题了</li></ol><p>安装AS之前一般会先安装Java开发工具包(JDK)，可以参考这篇博客<a href="https://www.cnblogs.com/whycxb/p/9032559.html" target="_blank" rel="noopener">【Android Studio安装部署系列】JDK开发环境搭建</a>，比较值得一说的是，现在下载JDK要到Oracle官网，而且还需要注册账号，有点麻烦。然后开始安装AS，参考这个视频教程<a href="https://www.bilibili.com/video/BV18b411H7Fr" target="_blank" rel="noopener">1#Android Studio开发环境 (Attect) Android开发教程</a></p><ol start="3"><li><a href="https://blog.csdn.net/wyf2017/article/details/81355414" target="_blank" rel="noopener">Android Studio 设置代码提示和代码自动补全快捷键</a> </li><li><a href="https://www.cnblogs.com/zlc364624/p/10704980.html" target="_blank" rel="noopener">Android Studio 真机测试/开发者模式</a></li></ol><p>初学比较常用的快捷键：</p><ul><li>智能建议：Alt 回车</li><li>代码整理（格式化代码）： Ctrl Alt L</li><li>注释：Ctrl /</li><li>块注释：Ctrl Shift /</li></ul><h2 id="开始学习"><a href="#开始学习" class="headerlink" title="开始学习"></a>开始学习</h2><p>如果没有任何开发经验，比较推荐看视频<a href="https://www.bilibili.com/video/av50954019" target="_blank" rel="noopener">Android开发教程（2019最新版,使用JetPack）</a>，这个教程使用的是JetPack库，前40集使用Java，从41集开始换为了Kotlin。个人觉得这作者讲的深入浅出，而且教程中也传递了很多规范化的思想，很适合初学者。要注意作者早期视频使用的是内测版本的ViewModel库，而现在默认自带稳定版，所以不需要手动添加ViewModel依赖，视频中使用的ViewModel构造方法已过时，应该使用下面这个：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MyViewModel = myViewModel = <span class="keyword">new</span> ViewModelProvider(<span class="keyword">this</span>).get(MyViewModel.class);</span><br></pre></td></tr></table></figure><p>初学最好按着教程一步一步来，变量名也最好跟着教程来，这样出错了跟着视频，排错起来也比较容易。一定要跟着敲代码，边敲边理解整个逻辑，刚开始可能比较懵，但是到后面，对整个体系有了一定了解，就会豁然开朗，这个时候可以看看<a href="https://developer.android.com/guide" target="_blank" rel="noopener">官方文档</a>，这样会加深对安卓开发或是JetPack的理解</p><p><br>觉得学的差不多了，就可以开始在GitHub上找一些感兴趣的安卓项目（或者是找一些最佳实践），克隆下来，看看别人是怎么写的，模仿这写一写，这个过程会遇到很多问题，解决这些问题，就会收获很大的提升</p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><ol><li>如果开始使用数据库或者网络相关操作就会遇到不能在主线程（UI线程）上运行这些耗时操作的问题，这个时候一般解决方案就是new Thread，但是这样的话在new出来的线程里操作UI控件会报错：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Only the original thread that created a view hierarchy can touch its views.</span><br></pre></td></tr></table></figure>这个时候就需要学习一下<a href="https://www.bilibili.com/video/BV1m4411r73w" target="_blank" rel="noopener">Android多线程和异步任务</a>，Kotlin的话可以用协程</li><li>涉及网络请求推荐看这个系列，从Java原生API到OkHttp再到Retrofit：<a href="https://www.bilibili.com/video/BV1TJ411v75g" target="_blank" rel="noopener">Android开发基础-网络编程</a></li><li>如果界面比较复杂，使用系统自带的控件可能无法直接实现我们的需求，这个时候需要写一些自定义控件，推荐这个系列<a href="https://www.bilibili.com/video/BV1CZ4y1p7n5" target="_blank" rel="noopener">Android开发自定义控件基础课程</a></li><li>页面跳转会使用到Jetpack中的Navigation组件：<a href="https://www.duanyitao.com/2019/03/31/Jetpack-%E4%B9%8B-Navigation/" target="_blank" rel="noopener">Jetpack 之 Navigation</a></li></ol><h2 id="组件库"><a href="#组件库" class="headerlink" title="组件库"></a>组件库</h2><p>安卓有很多成熟的第三方组件库，合理使用可以简化开发，加速开发速度<br>在使用这些组件库时需要考虑安全性、稳定性等问题<br>推荐这个项目，可以帮助你找到适合的组件库<a href="https://github.com/XXApple/AndroidLibs" target="_blank" rel="noopener">AndroidLibs</a></p>]]></content:encoded>
      
      <comments>https://aaronlinv.github.io/2020/06/01/android-beginner/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Git笔记</title>
      <link>https://aaronlinv.github.io/2020/04/04/git-note/</link>
      <guid>https://aaronlinv.github.io/2020/04/04/git-note/</guid>
      <pubDate>Sat, 04 Apr 2020 08:37:57 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;学习建议&quot;&gt;&lt;a href=&quot;#学习建议&quot; class=&quot;headerlink&quot; title=&quot;学习建议&quot;&gt;&lt;/a&gt;学习建议&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.liaoxuefeng.com/wiki/896043488029600&quot; tar
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="学习建议"><a href="#学习建议" class="headerlink" title="学习建议"></a>学习建议</h2><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">廖雪峰Git教程 </a>比较详细，可操作性也比较强，在评论区可以找到勘误<br>Git官方推荐的<a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">《Pro Git》</a>也很不错，推荐掌握了一定Git基础后再看<br>对于没有Linux基础，或者文字版学起来比较困难的朋友可以看系列视频教程 <a href="https://www.bilibili.com/video/BV1HW411f7VJ" target="_blank" rel="noopener">互联网人都该懂点 Git</a></p><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p>Git 2.23 (2019.8.16)<br>git checkout 这个命令被拆分成了两个新命令：git switch 和 git restore<br>创建并切换到dev分支：git checkout -b dev 现在用git switch -c dev 效果相同</p><h2 id="初始配置"><a href="#初始配置" class="headerlink" title="初始配置"></a>初始配置</h2><p>安装Git Bash后需要做初始配置</p><ol><li>用户名邮箱<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 任意文件夹右键 点击“ Git Bash Here ”</span></span><br><span class="line"><span class="comment"># ""内替换为自己的用户名和邮箱</span></span><br><span class="line">git config --global user.name <span class="string">"username"</span></span><br><span class="line">git config --global user.email <span class="string">"email"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看配置是否成功</span></span><br><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure></li><li>SSH 免密登录<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ssh-keygen 用于生成，管理和转换身份验证密钥</span></span><br><span class="line"><span class="comment"># -t：密钥的类型 </span></span><br><span class="line"><span class="comment"># -C：用于识别这个密钥的注释（不添加注释直接ssh-keygen -t rsa也不影响使用）</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">"邮箱地址"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 连续按3次回车</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将用户目录下.ssh文件夹内的id_rsa.pub的内容粘贴到GitHub的SSH Keys中</span></span><br><span class="line"><span class="comment"># 具体位置：GitHub Settings -&gt; SSH and GPG keys -&gt; SSH keys</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试是否成功 Github </span></span><br><span class="line"><span class="comment"># 码云测试命令为：ssh git@gitee.com 反馈的结果与 GitHub 类似</span></span><br><span class="line"></span><br><span class="line">ssh git@github.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># Are you sure you want to continue connecting (yes/no)? </span></span><br><span class="line"><span class="comment"># 这时需要输入：yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#成功会提示成功认证你的账户</span></span><br><span class="line"><span class="comment"># Hi aaronlinv! You've successfully authenticated, but GitHub does not provide shell access.</span></span><br><span class="line"><span class="comment"># Connection to github.com closed.</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="场景0：Git-基本使用"><a href="#场景0：Git-基本使用" class="headerlink" title="场景0：Git 基本使用"></a>场景0：Git 基本使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建文件夹，初始化为Git仓库</span></span><br><span class="line">mkdir learn-git</span><br><span class="line"><span class="built_in">cd</span> learn-git</span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在当前目录添加并编辑文件(不熟悉 vim 编辑器可以用其他编辑器新建文件并编辑文件 )</span></span><br><span class="line">vim test.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看文件状态 test.txt现在为Untracked状态</span></span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加文件到暂存区</span></span><br><span class="line">git add test.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交commit -m 代表添加一个“提交信息”</span></span><br><span class="line">git commit -m <span class="string">"add test.txt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送到 GitHub（在 GitHub 上创建空白仓库，并复制仓库地址）</span></span><br><span class="line"><span class="comment"># "git@github.com:aaronlinv/learn-git.git" 需要替换为自己新建的仓库地址</span></span><br><span class="line"><span class="comment"># 先添加远端仓库</span></span><br><span class="line"><span class="comment"># origin：远端仓库的别名（默认origin）</span></span><br><span class="line">git remote add origin git@github.com:aaronlinv/learn-git.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看远端操作（会显示 fetch和push）</span></span><br><span class="line">git remote -v </span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送到远端仓库（使用SSH协议需要配置SSH免密登录）</span></span><br><span class="line">git push -u origin master</span><br><span class="line"><span class="comment"># -u：指定默认远端仓库别名，下一次推送只需使用git push</span></span><br><span class="line"><span class="comment"># origin：远端仓库的别名（默认origin）</span></span><br><span class="line"><span class="comment"># master：分支名称</span></span><br></pre></td></tr></table></figure><p>push 是可能会遇到报错：refusing to merge unrelated histories<br>原因是远程仓库和本地仓库做了不同的改变并commit，导致本地仓库和远程仓库变成了独立的两个仓库，所以不能直接合并，执行以下命令即可推送</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></table></figure><h2 id="场景1：克隆仓库"><a href="#场景1：克隆仓库" class="headerlink" title="场景1：克隆仓库"></a>场景1：克隆仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 克隆仓库到本地（可以使用HTTPS或者SSH协议）</span></span><br><span class="line"><span class="comment"># "https://github.com/aaronlinv/learn-git.git" 为目标仓库地址</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/aaronlinv/learn-git.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># Git会新建一个与仓库名同名的文件夹，进入文件夹</span></span><br><span class="line"><span class="comment"># "learn-git" 为项目名称</span></span><br><span class="line"><span class="built_in">cd</span> learn-git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果这个仓库已经克隆很久了，本地和远程可能存在差异了，可以拉取远程仓库最新状态到本地仓库</span></span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><h2 id="场景2：分支管理"><a href="#场景2：分支管理" class="headerlink" title="场景2：分支管理"></a>场景2：分支管理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 已经克隆仓库到本地</span></span><br><span class="line"><span class="comment"># 开始工作前，先拉取远程最新修改（可能同事已经修改代码并提交了commit）</span></span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建并跳转到dev分支（也可使用git branch -b dev）</span></span><br><span class="line">git switch -c dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看分支情况</span></span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以在dev 分支上修改代码做add和commit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送dev分支到远程（需要拥有远端仓库的权限）</span></span><br><span class="line">git push origin dev</span><br><span class="line"><span class="comment"># 如果需要重命名远端分支则加上 :f1</span></span><br><span class="line">git push origin dev:f1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远端dev分支</span></span><br><span class="line">git push origin :dev </span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并dev分支到master(需要先切换到master分支，在merge的过程可能需要解决冲突)</span></span><br><span class="line">git switch master</span><br><span class="line">git merge --no-ff dev </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看分支合并情况</span></span><br><span class="line">git <span class="built_in">log</span> --graph --pretty=oneline --abbrev-commit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除本地dev分支</span></span><br><span class="line">git branch -d dev</span><br></pre></td></tr></table></figure><h2 id="merge-和-rebase"><a href="#merge-和-rebase" class="headerlink" title="merge 和 rebase"></a>merge 和 rebase</h2><h4 id="创建冲突场景"><a href="#创建冲突场景" class="headerlink" title="创建冲突场景"></a>创建冲突场景</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建文件夹，初始化为Git仓库</span></span><br><span class="line">mkdir learn-git</span><br><span class="line"><span class="built_in">cd</span> learn-git</span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加并编辑文件 </span></span><br><span class="line">vim c2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加文件到暂存区</span></span><br><span class="line">git add c2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交commit -m 代表添加一个“提交信息”</span></span><br><span class="line">git commit -m <span class="string">"c2"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建并跳转到experiment分支</span></span><br><span class="line">git switch -c experiment</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加并提交c4</span></span><br><span class="line">vim c4</span><br><span class="line">git add c4</span><br><span class="line">git commit -m <span class="string">"c4"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换回master分支</span></span><br><span class="line">git switch master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加并提交c3</span></span><br><span class="line">vim c3</span><br><span class="line">git add c3</span><br><span class="line">git commit -m <span class="string">"c3"</span></span><br></pre></td></tr></table></figure><p>到这c2就产生了分叉，experiment分支推进到了c4，master分支推进到了c3<br>这个时候如果想把两个分支的修改合并到master分支上，可以使用merge或rebase(变基)，两种方式最后合并的结果是一样的，但rebase不会产生分叉，rebase的提交历史也比merge更线性</p><h4 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用merge方式合并分支</span></span><br><span class="line"><span class="comment"># 先切换到master分支</span></span><br><span class="line">git switch master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并分支（会弹出commit message的编辑框，:wq 保存退出）</span></span><br><span class="line">git merge experiment</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看分支合并情况</span></span><br><span class="line">git <span class="built_in">log</span> --graph --pretty=oneline --abbrev-commit</span><br></pre></td></tr></table></figure><blockquote><p><img src="/2020/04/04/git-note/1.png" alt="merge"><br>— merge示意图 引用自《Git Pro》</p></blockquote><p>使用merge合并分支，相当于三方合并，合并c2,c3,c4（未新建experiment分支前的修改c2、新建分支后master分支的修改c3、experiment分支的修改c4）</p><p>直接使用git merge &lt;要被merge的分支名&gt; ，没有冲突的情况下默认使用参数：–f 即：Fast-forward（快进式合并）<br>推荐使用–no-ff 即：git merge –no-ff &lt;要被merge的分支名&gt;<br>这个参数的意思是禁止快进式合并，合并时会自动创建一次commit提交，保证提交链的完整性<br>而Fast-forward合并分支会丢掉分支信息</p><h4 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用rebase方式合并分支</span></span><br><span class="line"><span class="comment"># 先切换到experiment分支</span></span><br><span class="line">git switch experiment</span><br><span class="line"></span><br><span class="line"><span class="comment"># rebase分支</span></span><br><span class="line">git rebase experiment</span><br><span class="line"></span><br><span class="line"><span class="comment"># 先切换到master分支</span></span><br><span class="line">git switch master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将experiment合并到master</span></span><br><span class="line">git merge experiment</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看分支合并情况</span></span><br><span class="line">git <span class="built_in">log</span> --graph --pretty=oneline --abbrev-commit</span><br></pre></td></tr></table></figure><blockquote><p><img src="/2020/04/04/git-note/2.png" alt="rebase"><br><img src="/2020/04/04/git-note/3.png" alt="rebase"><br>— rebase示意图 引用自《Git Pro》</p></blockquote><p>rebase的原理是：找到c3和c4共同的祖先c2，暂存共同祖先c2到当前分支(expriment)的修改内容，然后将分支指向master的c3，并应用之前暂存的修改内容<br>我们可以这么理解：</p><p>rebase就是先把其他分支(master)已经提交的代码（c3）放到前面，把当前分支(experiment)提交的修改(c4)放到后面，这样做的好处就是：自己写代码(experiment分支上的)将出现在master最新的一次commit中，一目了然</p><p>rebase：黄金法则：绝对不要在公共分支使用rebase，rebase会重写提交历史</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/u011118321/article/details/78516303" target="_blank" rel="noopener">ssh-keygen的-C后面的邮箱有什么用？</a><br><a href="https://blog.csdn.net/zombres/article/details/82179122" target="_blank" rel="noopener">Git 合并时 –no-ff 的作用</a><br><a href="https://blog.csdn.net/u012145252/article/details/80628451" target="_blank" rel="noopener">记Git报错-refusing to merge unrelated histories</a></p>]]></content:encoded>
      
      <comments>https://aaronlinv.github.io/2020/04/04/git-note/#disqus_thread</comments>
    </item>
    
    <item>
      <title>初见安卓开发</title>
      <link>https://aaronlinv.github.io/2020/03/30/android-note/</link>
      <guid>https://aaronlinv.github.io/2020/03/30/android-note/</guid>
      <pubDate>Mon, 30 Mar 2020 12:05:45 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;初见安卓开发&quot;&gt;&lt;a href=&quot;#初见安卓开发&quot; class=&quot;headerlink&quot; title=&quot;初见安卓开发&quot;&gt;&lt;/a&gt;初见安卓开发&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/2020/03/30/android-note/01_android_web.png&quot;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="初见安卓开发"><a href="#初见安卓开发" class="headerlink" title="初见安卓开发"></a>初见安卓开发</h2><p><img src="/2020/03/30/android-note/01_android_web.png" alt="安卓开发者官网 2020.6.1"></p><p>从 <a href="https://developer.android.google.cn/" target="_blank" rel="noopener">Android开发者官网</a> 的导航栏我们可以看得出来 Google 在安卓开发方面主推 Jetpack 和 Kotlin</p><p><br><a href="https://developer.android.google.cn/jetpack/" target="_blank" rel="noopener">Android Jetpack</a> 是一套组件库，其中包含了很多组件，比如：LiveData、Room、ViewModel等等，使用这些组件极大简化了开发，消除样板代码，提高应用质量<br><br><a href="https://developer.android.google.cn/kotlin" target="_blank" rel="noopener">Kotlin</a> 是 JetBrains 在 2011 年发布的静态类型编程语言（这是一个开源项目），虽然语法上不能与 Java 兼容，但它是面向JVM，所以它可以和Java代码相互运作。在 Google I/O 2017 中，Google 宣布在 Android 上为 Kotlin 提供最佳支持，后来 Google 就把 Android 开发的官方语言更换为了 Kotlin</p><h2 id="Java-or-Kotlin"><a href="#Java-or-Kotlin" class="headerlink" title="Java or Kotlin"></a>Java or Kotlin</h2><p>选择语言确实比较重要，会极大影响后续的开发工作。目前情况：团队成员有 Java 基础、无 Kotlin 基础、无安卓开发经验，项目有时间限制。这里列举几个我们团队比较可感知的影响因素进行对比</p><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><p>优点：Java安卓开发的资料相对多、遇到问题搜索到的概率比较大、Github 上有大量的 Java 安卓项目可以学习<br>缺点：相对 Kotlin 有很多样板代码、没有 Kotlin 的一些特性代码写起来会比较麻烦、Jetpack 库的资料大多用 Kotlin 举例</p><h4 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h4><p>优点：有很多语法糖、简化 findViewById、简化数据类、空指针安全、函数式编程、协程（解决异步任务处理）…<br>缺点：Kotlin 安卓相关的教程比较少，Kotlin 的资料相对没有 Java 那么多，遇到问题搜索到的概率相对低一点</p><p>结合实际情况，我们最终选择了 Java，对于在这个时间节点，初学安卓使用 Java 没什么太大问题，以后转 Kotlin 也会比较容易，总的来说各有利弊，看取舍</p><h2 id="实际遇到的困难"><a href="#实际遇到的困难" class="headerlink" title="实际遇到的困难"></a>实际遇到的困难</h2><ol><li>虽然 JetPack 已经发布了比较长的时间（2018 年谷歌I/O 上发布），但是相关的资料并不很很好找（中文资料就更难找了），因为我们选择了 Java，在查 JetPack 资料的时候很容看到一些文章写的是 Kotlin，没有学过 Kotlin ，看起来一头雾水</li><li>因为技术更替速度很快，所以搜索一些问题的时候，会出现很多无效的解决方案。如果发布时间是 14、15、16 年或是使用 Eclipse 进行讲解的解决方案，要仔细辨别一下方案的时效性，那如果是讲解思路的话那就没有关系</li><li>安卓手机屏幕尺寸多样化，界面需要对不同屏幕进行适配</li><li>如果应用上架应用市场，需要考虑平台上架的规范，对于一些类型的应用需要资质才能上架，下面为酷安 2020.6.1 截取的上架规范<br><img src="/2020/03/30/android-note/02_coolapk.png" alt="酷安上架规范2020.6.1"></li></ol><h2 id="杂"><a href="#杂" class="headerlink" title="杂"></a>杂</h2><p>这段时间都在学习安卓开发，和小组的其他伙伴协作完成项目<br>第一阶段结束收获颇丰，对于团队协作，Git都有了新的理解<br>纸上得来终觉浅，绝知此事要躬行，运用一门技术去解决问题才是学会一门技术的最佳途径<br><br>在团队协作中，深刻地体会到了好的代码结构的重要性<br>通过这次的实践，更加清楚自己缺乏什么，也知道往哪个方向努力</p>]]></content:encoded>
      
      <comments>https://aaronlinv.github.io/2020/03/30/android-note/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Java笔记</title>
      <link>https://aaronlinv.github.io/2020/03/24/java-note/</link>
      <guid>https://aaronlinv.github.io/2020/03/24/java-note/</guid>
      <pubDate>Tue, 24 Mar 2020 11:51:42 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;创建工程-20问题&quot;&gt;&lt;a href=&quot;#创建工程-20问题&quot; class=&quot;headerlink&quot; title=&quot;创建工程%20问题&quot;&gt;&lt;/a&gt;创建工程%20问题&lt;/h2&gt;&lt;p&gt;创建Maven工程，需要获取 resources 下文件夹路径&lt;/p&gt;
&lt;figur
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="创建工程-20问题"><a href="#创建工程-20问题" class="headerlink" title="创建工程%20问题"></a>创建工程%20问题</h2><p>创建Maven工程，需要获取 resources 下文件夹路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.getClass().getResource(“/”).getPath();</span><br></pre></td></tr></table></figure><p>返回的路径String中含有%20，原因是 resources 完整路径存在空格<br>所以创建项目应尽量避免使用空格和中文</p><p>参考：<a href="https://blog.csdn.net/renminzdb/article/details/88339383" target="_blank" rel="noopener">【整】getResource().getPath() 路径带 %20 问题展开</a></p>]]></content:encoded>
      
      <comments>https://aaronlinv.github.io/2020/03/24/java-note/#disqus_thread</comments>
    </item>
    
    <item>
      <title>MyBatis笔记</title>
      <link>https://aaronlinv.github.io/2020/03/22/mybatis-note-1/</link>
      <guid>https://aaronlinv.github.io/2020/03/22/mybatis-note-1/</guid>
      <pubDate>Sun, 22 Mar 2020 09:23:19 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;MyBatis执行流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建 SqlSessionFactoryBuilder&lt;/li&gt;
&lt;li&gt;通过 SqlSessionFactoryBuilder 读取 SqlMappingConfig.xml 核心配置文件（还需要加载映射文件），创建 S
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>MyBatis执行流程：</p><ol><li>创建 SqlSessionFactoryBuilder</li><li>通过 SqlSessionFactoryBuilder 读取 SqlMappingConfig.xml 核心配置文件（还需要加载映射文件），创建 SqlSessionFactory</li><li>获取 Session</li><li>执行 Sql语句</li><li>关闭 Session</li></ol><p>注意点：</p><ol><li>Session线程不安全，不能定义为字段</li><li>映射文件中 resultType 或 parameterType 为domian 值需要写domain的全限定类名(或用 typeAliases 定义别名)</li><li>涉及修改数据库的操作都需要commit</li><li>不同操作在映射文件中写不同标签 select updata delete</li><li>返回添加过后自增的主键的写法</li></ol><p>#{} 和 ${} 区别</p><ol><li>都可以${}可以接收简单类型值或pojo属性值</li><li>#{}：内部用?作为占位符，执行的时候会给参数两边加单引号，可以防止sql注入，可以实现preparedStatement向占位符中设置值，自动进行Java类型和JDBC类型转换</li><li>${}：表示拼接sql串，将parameterType 传入的内容拼接在sql中且<strong>不进行jdbc类型转换</strong></li><li>parameterType传输单个简单类型值，${}括号中只能为value即：${value}，而#{}括号中<strong>任意</strong><br></li></ol><p>传统方式写DAO</p><ol><li>定义接口</li><li>写接口实现类，在实现类中调用 SqlSession 执行对于语句</li></ol><p>使用Mapper动态代理，避免写实现类，需要满足要求</p><ol><li>namespace 必须为 Mapper接口全限定类名</li><li>id 必须和 Mapper接口方法名一致</li><li>parameterType 与接口方法参数类型一致</li><li>resultType 与接口方法返回值类型一致<br></li></ol><p>传递多个参数</p><ol><li>在映射文件的sql语句中使用#{arg0} #{arg1} 或 #{param1} #{param2} </li><li>在接口方法参数加注解@Param(“”)  在#{}中使用定义好的名称<strong>或 #{param1} #{param2}</strong></li><li>传入 Map&lt;String,Object&gt; put键值对 在#{}中使用定义好的名称</li><li>POJO类 在#{}中使用POJO类字段名</li></ol><p>输出类型</p><ol><li>简单类型</li><li>Map&lt;String,Object&gt; 键值对 resultType=”map”</li><li>Map&lt;Integer,Customer&gt; 需要在接口方法指定Map的键 @MapKey(“”) resultType为bean</li><li>resultMap：表字段名与POJO类属性名不一致（resultMap中的id标签指定为主键）</li></ol><p>MyBatis核心配置文件</p><ul><li>properties</li><li>settings: mapUnderscoreToCamelCase sql打印</li><li>typeAliases: 可批量定义，与子包类名冲突，在类上使用注解@Alias(“别名”)</li><li>typeHandlers</li><li>plugins</li><li>environments</li><li>databaseIDProvider</li><li>mappers:指定package时mapper接口名称和mapper映射文件名称需相同，且放在同一个目录</li></ul><p>多表查询</p><ul><li>表设置外键约束</li><li>bean属性需要引用另一个bean</li><li>连接表后需要用 resultMap 封装数据：直接把连接后的所有列写在resultMap里或<strong>写在association标签里</strong></li></ul><p>分步查询：在association标签的select属性写上查询的接口方法</p>]]></content:encoded>
      
      <comments>https://aaronlinv.github.io/2020/03/22/mybatis-note-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>SpringMVC笔记</title>
      <link>https://aaronlinv.github.io/2020/03/01/springmvc-note-1/</link>
      <guid>https://aaronlinv.github.io/2020/03/01/springmvc-note-1/</guid>
      <pubDate>Sun, 01 Mar 2020 08:40:23 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;上手实践&quot;&gt;&lt;a href=&quot;#上手实践&quot; class=&quot;headerlink&quot; title=&quot;上手实践&quot;&gt;&lt;/a&gt;上手实践&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;WEB-INF/lib/ 添加Spring相关JAR包 &lt;/li&gt;
&lt;li&gt;src或resources下配置sp
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="上手实践"><a href="#上手实践" class="headerlink" title="上手实践"></a>上手实践</h2><ol><li>WEB-INF/lib/ 添加Spring相关JAR包 </li><li>src或resources下配置springmvc.xml (注意：1.要开启对包的注解扫描 2.可配置在返回地址上添加前缀和后缀(视图解析器InternalResourceViewResolver) 3.配置静态资源访问）</li><li>web.xml 配置DispatcherServlet前端控制器(注意：1.配置springmvc.xml位置2.load-on-startup标签 Tomcat启动时加载DispatcherServlet 3.SpringMVC的拦截路径 4.配置编码过滤器解决post提交表单乱码)</li><li>创建类 @Controller @RequestMapping</li></ol><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ol><li>需要传递参数返回ModelAndView 不传递参数可以返回String</li><li>重定向：返回字符串前加redirect:</li><li>@RequestMapping匹配请求.action可省略；浏览器、重定向：redirect 发送请求不可省略</li><li>配置 mvc:view-controller 可设置跳转的页面 (需要添加mvc:annotation-driven 否则不会加载RequestMappingHandlerAdapter 会导致@RequestMapping失效)</li></ol><p>web.xml中SpringMVC的url-patten取值</p><ul><li>/ :拦截所有,不包括jsp，<strong>包含.js .png .css</strong> (推荐) </li><li>/* :拦截所有:jsp .js .png .css  </li><li>*.action *.do: 拦截以do action 结尾的请求</li></ul><h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2><ol><li>通过传入 HttpServletRequest request 可获取网页传递数据 getParameter</li><li>请求参数名称与处理器形参名称一致时会将请求参数与形参进行绑定（表单也可以）</li><li>使用@RequestParam(value = “”) 指定请求参数，其他参数：required,defaultValue </li><li>传递Bean要求表单和属性一致</li><li>表单name属性相同封装数组</li><li>包装类绑定数据需要使用：类名.属性名，包装类List使用：类名[n].属性名 (n&gt;=0)</li></ol><p>自定义Date参数绑定</p><ol><li>网页传输的参数都是String类型，由转换器转换为对应类型，转换失败404(Date默认格式yyyy/MM/dd)</li><li>实现 Converter&lt;String,Date&gt; 类，实现convert方法</li><li>springmvc.xml 注入转换器，添加注解驱动</li></ol><p>RequestMapping参数</p><ol><li>value 设置多个路径共同访问对应方法</li><li>method 限制请求方式</li><li>params 限制请求参数和请求值</li><li>headers 限制请求头</li></ol><p>@RequestHeader<br>@CookieValue</p><p>Ant URL风格</p><ol><li>一个?匹配一个字符</li><li>*匹配任意字符</li><li>**匹配多重路径</li></ol><p>REST 资源定位及资源操作风格</p><ol><li>URL定位资源，HTTP描述操作(POST,GET,PUT,DELETE 分别对应 CRUD)</li><li>RequestMapping方法参数使用 @PathVariable 接收路径参数 </li><li>默认情况下Form表单是不支持PUT请求和DELETE请求的（POST请求转换为PUT或DELETE请求：1.配置过滤器 2.表单添加_method字段）</li><li>Tomcat 8 开始 JSPs 只允许GET,POST,HEAD 需要重定向，否则404</li></ol><p>mvc:annotation-driven<br>会自动注册三个Bean</p><ul><li>RequestMappingHandlerMapping</li><li>RequestMappingHandlerAdapter</li><li>ExceptionHandlerExceptionResolver</li></ul><p>SpringMVC form</p><ul><li>input</li><li>radiobutton</li><li>checkboxes</li><li>select</li><li>error (配合Hibernate Validator)</li></ul><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p>前端使用Ajax发送请求时，服务器以JSON的数据格式响应给浏览器</p><ol><li>方法加 @ResponseBody 注解返回JSON对象</li><li>可以返回对象、Map、List</li><li>表单序列化 方法参数使用@RequestBody 注解接收浏览器发送的JSON</li><li>默认情况发送接收都是简单Key-Value形式（无法发送复杂类型如Array），要指定发送JSON</li><li>需要解决 JSON.stringify() 不会自动解析，识别单个值为字符串，而不是数组的问题</li></ol><p>记：如果没有在接收JSON的RequestMapping方法前没有加 @ResponseBody 注解<br>服务器可以接收到JSON，方法返回字符串，对应的xhr响应 404</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testJson"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testJson</span><span class="params">(@RequestBody User user)</span></span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务器可以接收到JSON，如果方法返回对象，对应的xhr响应 500</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testJson2"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">testJson2</span><span class="params">(@RequestBody User user)</span> </span>&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="值传递"><a href="#值传递" class="headerlink" title="值传递"></a>值传递</h2><p>Request域：一次请求过程中传递处理的数据</p><ol><li>RequestMapping方法参数传入 ModeAndView,Model,Map,Bean 数据都是写入Request域</li><li>键值对、domian(也是放在键值对里，键：类名小写，值：对象)、HashMap、List（元素包装类型小写为key）</li><li>mergeAttributes：Map键相同不会覆盖 </li><li>containsAttribute：是否包含属性</li></ol><p>HttpSession：多个请求之间可以共享这个属性<br>类上添加@SessionAttributes 指定需要存放到Session域中的key值或者类型<br>方法参数也可用用这个注解@SessionAttributes</p><p>RequestMapping方法参数内使用@ModelAttribute 可以给修改存入Request域的键值<br>@ModelAttribute注解注释的方法会在此controller每个方法执行前被执行</p><p>方法参数内使用@ModelAttribute修饰的Bean 会覆盖掉已存在的属性值（表单没有传递这个属性，那么还继续用ModelAttribute中定义的属性值）</p><p>ModelAttribute写的内容会真覆盖Session内容</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>下载<br>文件名中文编码问题<br>上传</p><p>异常处理</p><ol><li>先按继承关系最近的 带@ExceptionHandler注解的方法</li><li>没找到再找带 @ControllerAdvice 的类</li></ol><p>国际化</p><p>拦截器</p><p>如果发生异常<br>    处理器方法执行之前调用 preHandle<br>    / by zero<br>    请求处理完成之后 afterCompletion</p><p>多个拦截器执行顺序</p><ul><li>preHandle 按照 springmvc.xml 配置的顺序执行</li><li>postHandle,afterCompletion 都是倒叙执行<h2 id="SpringMVC执行过程"><a href="#SpringMVC执行过程" class="headerlink" title="SpringMVC执行过程"></a>SpringMVC执行过程</h2></li></ul><ol><li>用户发送请求至 前端控制器DispatcherServlet</li><li>DispatcherServlet 收到请求调用 HandlerMapping处理器映射器</li><li>处理器映射器 根据请求url找到具体的处理器，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet</li><li>DispatcherServlet 通过 HandlerAdapter处理器适配器 调用处理器</li><li>执行处理器(Controller，也叫后端控制器)</li><li>Controller 执行完成返回 ModelAndView</li><li>HandlerAdapter 将 Controller执行结果 ModelAndView返回给 DispatcherServlet</li><li>DispatcherServlet 将 ModelAndView 传给 ViewReslover视图解析器</li><li>ViewReslover 解析后返回具体View</li><li>DispatcherServlet 对View进行渲染视图（即将模型数据填充至视图中）</li><li>DispatcherServlet 响应用户</li></ol><p>自定义部分：前端控制器DispatcherServlet、处理器Handler、视图View</p><p>HandlerMapping：映射@RequestMapping注解，映射成功返回HandlerMethod<br>HandlerAdapter：对@RequestMapping方法进行适配，解析对应方法<br>ViewReslover：在springmvc.xml中配置视图解析器，给返回地址添加前缀和后缀</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/little_pig_lxl/article/details/88249255" target="_blank" rel="noopener">SpringMvc接受json参数报404问题解决</a></p>]]></content:encoded>
      
      <comments>https://aaronlinv.github.io/2020/03/01/springmvc-note-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Linux笔记</title>
      <link>https://aaronlinv.github.io/2020/02/28/linux-note/</link>
      <guid>https://aaronlinv.github.io/2020/02/28/linux-note/</guid>
      <pubDate>Fri, 28 Feb 2020 08:42:30 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;挖坑待填&lt;/p&gt;

        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>挖坑待填</p>]]></content:encoded>
      
      <comments>https://aaronlinv.github.io/2020/02/28/linux-note/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Linux-SSH</title>
      <link>https://aaronlinv.github.io/2020/02/25/linux-ssh/</link>
      <guid>https://aaronlinv.github.io/2020/02/25/linux-ssh/</guid>
      <pubDate>Tue, 25 Feb 2020 00:34:24 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;昨天在配置Hadoop的时候，使用SSH因为权限配置出现了一点问题&lt;br&gt;搜索发现，大家的权限配置都不太一致，所以自己开了两个虚拟机测试一下&lt;br&gt;如果对 SSH原理 不了解可以先看下这个 &lt;a href=&quot;https://www.cnblogs.com/diffx/p/9
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>昨天在配置Hadoop的时候，使用SSH因为权限配置出现了一点问题<br>搜索发现，大家的权限配置都不太一致，所以自己开了两个虚拟机测试一下<br>如果对 SSH原理 不了解可以先看下这个 <a href="https://www.cnblogs.com/diffx/p/9553587.html" target="_blank" rel="noopener">图解SSH原理</a></p><p>两台虚拟机A和B<br>B的ip：192.168.108.140<br>用户都为Hadoop</p><p>A 通过SSH 免密登录B</p><ol><li>在 虚拟机A Hadoop家目录下新建.ssh</li><li>cd .shh 使用 ssh-keygen -t rsa 生成公私钥 (运行 ssh-keygen -t rsa 后直接敲回车)</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@localhost ~]$ mkdir .ssh</span><br><span class="line">[hadoop@localhost ~]$ <span class="built_in">cd</span> .ssh/</span><br><span class="line">[hadoop@localhost .ssh]$ ssh-keygen -t rsa</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/home/hadoop/.ssh/id_rsa): </span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /home/hadoop/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /home/hadoop/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:SKDjW+zcm6hoGpDC4muNMZB5W8INPpv7KRZMN3SVR4w hadoop@localhost.localdomain</span><br><span class="line">The key<span class="string">'s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 2048]----+</span></span><br><span class="line"><span class="string">|    .  ..=.      |</span></span><br><span class="line"><span class="string">|  ..... E o      |</span></span><br><span class="line"><span class="string">| =o+ ..  .       |</span></span><br><span class="line"><span class="string">|=oBo=. .         |</span></span><br><span class="line"><span class="string">|*=.Oo.. S        |</span></span><br><span class="line"><span class="string">|=o*= .           |</span></span><br><span class="line"><span class="string">|..*oo .          |</span></span><br><span class="line"><span class="string">| *=. o o         |</span></span><br><span class="line"><span class="string">|*o.++ o          |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br></pre></td></tr></table></figure><ol start="3"><li>把公钥 id_rsa.pub 通过 scp 拷贝到 B虚拟机 的 /home/hadoop/  如果已存在会覆盖</li><li>第一次连接会提示，输入 yes ，然后输入 B虚拟机 的Hadoop账户的密码，默认是用本机的用户名登录，需要登录其他用户的格式是：用户名@ip地址 如：<a href="mailto:root@192.168.108.140">root@192.168.108.140</a></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@localhost .ssh]$ ll</span><br><span class="line">总用量 8</span><br><span class="line">-rw-------. 1 hadoop hadoop 1675 2月  25 08:38 id_rsa</span><br><span class="line">-rw-r--r--. 1 hadoop hadoop  410 2月  25 08:38 id_rsa.pub</span><br><span class="line">[hadoop@localhost .ssh]$ scp id_rsa.pub 192.168.108.140:/home/hadoop/</span><br><span class="line">The authenticity of host <span class="string">'192.168.108.140 (192.168.108.140)'</span> can<span class="string">'t be established.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is SHA256:tFi+lLLHECXTtozqdB9y5ivkor28HNW6H9j5ooFiaAo.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is MD5:3a:c4:5a:fc:fb:e6:e3:b9:f9:63:f3:0c:2e:f1:d9:51.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)? yes</span></span><br><span class="line"><span class="string">Warning: Permanently added '</span>192.168.108.140<span class="string">' (ECDSA) to the list of known hosts.</span></span><br><span class="line"><span class="string">hadoop@192.168.108.140'</span>s password:</span><br></pre></td></tr></table></figure><ol start="5"><li>切换到 B虚拟机 的Hadoop家目录 新建.ssh</li><li>把 A虚拟机 的公钥 追加 .ssh/authorized_keys （不存在这个文件，会自动创建）</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@localhost ~]$ ls</span><br><span class="line">id_rsa.pub</span><br><span class="line">[hadoop@localhost ~]$ mkdir .ssh</span><br><span class="line">[hadoop@localhost ~]$ cat id_rsa.pub &gt;&gt; .ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>这个时候切换到 A虚拟机 SSH登录B虚拟机</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@localhost .ssh]$ ssh 192.168.108.140</span><br><span class="line">hadoop@192.168.108.140<span class="string">'s password:</span></span><br></pre></td></tr></table></figure><p>发现还是需要密码，原因就是需要修改 虚拟机B 的权限<br>7. 修改 虚拟机B authorized_keys 的权限为644</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@localhost ~]$ <span class="built_in">cd</span> .ssh/</span><br><span class="line">[hadoop@localhost .ssh]$ ll</span><br><span class="line">总用量 4</span><br><span class="line">-rw-rw-r--. 1 hadoop hadoop 410 2月  25 08:42 authorized_keys</span><br><span class="line">[hadoop@localhost .ssh]$ chmod 644 authorized_keys </span><br><span class="line">[hadoop@localhost .ssh]$ </span><br><span class="line">[hadoop@localhost .ssh]$ ll -al</span><br><span class="line">总用量 4</span><br><span class="line">drwxrwxr-x. 2 hadoop hadoop  29 2月  25 08:42 .</span><br><span class="line">drwx------. 3 hadoop hadoop 113 2月  25 08:42 ..</span><br><span class="line">-rw-r--r--. 1 hadoop hadoop 410 2月  25 08:42 authorized_keys</span><br></pre></td></tr></table></figure><p>切换回 虚拟机A 使用SSH登录 B虚拟机 发现还是需要输入密码，因为 .ssh 权限也需要更改<br>8. 修改 虚拟机B .ssh 的权限为700</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@localhost ~]$ chmod 700 .ssh/</span><br><span class="line">[hadoop@localhost ~]$ </span><br><span class="line">[hadoop@localhost ~]$ ll -al</span><br><span class="line">总用量 20</span><br><span class="line">drwx------. 3 hadoop hadoop  113 2月  25 08:42 .</span><br><span class="line">drwxr-xr-x. 3 root   root     20 2月  25 00:12 ..</span><br><span class="line">drwx------. 2 hadoop hadoop   29 2月  25 08:42 .ssh</span><br></pre></td></tr></table></figure><p>切换回 虚拟机A 使用SSH登录 B虚拟机，成功</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[hadoop@localhost .ssh]$ ssh 192.168.108.140</span><br><span class="line">hadoop@192.168.108.140<span class="string">'s password: </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[hadoop@localhost .ssh]$ ssh 192.168.108.140</span></span><br><span class="line"><span class="string">Last login: Tue Feb 25 08:30:57 2020 from 192.168.108.1</span></span><br><span class="line"><span class="string">[hadoop@localhost ~]$ exit</span></span><br><span class="line"><span class="string">登出</span></span><br><span class="line"><span class="string">Connection to 192.168.108.140 closed.</span></span><br></pre></td></tr></table></figure><p>权限为什么要这么配</p><blockquote><p>因为sshd为了安全，对属主的目录和文件权限有所要求。如果权限不对，则ssh的免密码登陆不生效。<br>用户目录权限为 755 或者 700，就是不能是77x、777，需要保障other用户不能有w权限<br>.ssh目录权限一般为755或者700。<br>rsa_id.pub 及authorized_keys权限一般为644<br>rsa_id权限必须为600<br>–<a href="https://blog.csdn.net/levy_cui/article/details/59524158" target="_blank" rel="noopener">ssh目录权限说明</a></p></blockquote><p>因为一般情况 用户目录,rsa_id.pub,rsa_id 都符合权限要求，所以只要更改 .ssh 和authorized_keys即可</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>想免密登录谁，就把公钥给谁</li><li>一般情况下，修改 authorized_keys 为 644，.ssh 为 700即可</li><li>可以通过配置单机回环来验证SSH免密码登录是否成功<br>A 需要免密登录 B<br>可以先在B上生成公私钥，最佳生成的公钥到 authorized_keys ，配置权限<br>ssh localhost （自己登自己）不需要输入密码说明配置成功，记得通过 exit 退出当前的远程<br>然后就可以通过把 A 的公钥加入到 authorized_keys 中，使得 A 可以免密登录 B</li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/levy_cui/article/details/59524158" target="_blank" rel="noopener">ssh目录权限说明</a><br><a href="https://blog.51cto.com/merrycheng/1340280" target="_blank" rel="noopener">ssh密钥文件的权限</a><br><a href="https://www.cnblogs.com/diffx/p/9553587.html" target="_blank" rel="noopener">图解SSH原理</a></p>]]></content:encoded>
      
      <comments>https://aaronlinv.github.io/2020/02/25/linux-ssh/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Web服务器笔记-过滤器</title>
      <link>https://aaronlinv.github.io/2020/02/23/web-server-note-17/</link>
      <guid>https://aaronlinv.github.io/2020/02/23/web-server-note-17/</guid>
      <pubDate>Sun, 23 Feb 2020 10:53:25 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;过滤器&quot;&gt;&lt;a href=&quot;#过滤器&quot; class=&quot;headerlink&quot; title=&quot;过滤器&quot;&gt;&lt;/a&gt;过滤器&lt;/h2&gt;&lt;p&gt;filter是对客户端访问资源的过滤，符合条件放行，不符合条件不放行&lt;br&gt;并且可以对目标资源访问前后进行逻辑处理&lt;br&gt;&lt;img 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>filter是对客户端访问资源的过滤，符合条件放行，不符合条件不放行<br>并且可以对目标资源访问前后进行逻辑处理<br><img src="/2020/02/23/web-server-note-17/1.png" alt></p><p><img src="/2020/02/23/web-server-note-17/2.png" alt></p><p>过滤器编写步骤</p><ol><li>编写一个过滤器的类实现Filter接口</li><li>实现接口中尚未实现的方法(着重实现doFilter方法)</li><li>在web.xml中进行配置(主要是配置要对哪些资源进行过滤)</li><li>配置filter-class</li><li>配置filter-mapping，对哪些资源进行过滤</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itlike.web.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否对请求进行放行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"this is Filter "</span>);</span><br><span class="line">        <span class="comment">// 放行</span></span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itlike.web;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/MyServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MyServlet"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>myfliter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.itlike.web.filter.FirstFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>myfliter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 发送MySerlvet请求的时候，就会到myfliter--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/MyServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Filter选择javax.servlet.Filter<br>注意：更改了Web.xml 要重启服务器</p><p>访问一个资源的时候，会被过滤器拦截<br>要在过滤器当中进行放行之后， 才能够访问到对应的servlet<br>chain.doFilter(req,res)</p><h2 id="过滤器的访问流程"><a href="#过滤器的访问流程" class="headerlink" title="过滤器的访问流程"></a>过滤器的访问流程</h2><p>在发送一个请求时， web容器会先到filter当中，创建三个参数，res,req,chain<br>在过滤器当中，放行之后，才能够访问到对应的资源<br>中间的过滤器可能有多个，在一个过滤器当中，可以调用另外一个过滤器<br>也有可能过滤器没有拦截所有的资源，有些资源可以直接被访问</p><h2 id="filter生命周期"><a href="#filter生命周期" class="headerlink" title="filter生命周期"></a>filter生命周期</h2><h4 id="init方法"><a href="#init方法" class="headerlink" title="init方法"></a>init方法</h4><p>当filter对象创建时调用<br>当服务器启动时创建<br>因为有可能一个filter对应多个servlet<br>启动时， 先把filter准备好， 访问资源时就可以进行过滤了</p><p>filterconfig<br>当前filter对象的配置信息<br>和servletConfig差不多， 获取名称，参数<br>获取servletContext对象<br>先有的ServletContext</p><h4 id="dofitter方法"><a href="#dofitter方法" class="headerlink" title="dofitter方法"></a>dofitter方法</h4><p>当匹配到mapping时调用dofilter<br>参数：res req FilterChain</p><p>FilterChain 过滤器链对象<br>内部维护着各个filter的索引，并且知道所有filter的顺序<br>是根据mapping的顺序来执行的</p><h4 id="destroy方法"><a href="#destroy方法" class="headerlink" title="destroy方法"></a>destroy方法</h4><p>当filter对象销毁时调用<br>关闭服务器时销毁对象<br>和servletContext的生命周期是一样</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h4 id="mapping"><a href="#mapping" class="headerlink" title="mapping"></a>mapping</h4><p>完全匹配<br>目录匹配<br>扩展名匹配</p><h4 id="servlet-name"><a href="#servlet-name" class="headerlink" title="servlet_name"></a>servlet_name</h4><p>可以把路径直接指定<strong>某一个</strong>Servlet，可以有多个servlet_name<br>开发中基本上使用的都是mapping</p><h4 id="dispatcher"><a href="#dispatcher" class="headerlink" title="dispatcher"></a>dispatcher</h4><p>配置请求的形式，不是请求方式，是页面跳转的形式<br>形式分类</p><ul><li>REQUEST<br>默认值，代表直接访问某个资源时执行filter</li><li>ERROR<br>发生错误时 进行跳转是执行filter</li><li>INCLUDE<br>包含资源时执行filter</li><li>FORWARD<br>转发之后才去执行filter</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://study.163.com/course/introduction/1005981003.htm" target="_blank" rel="noopener">Java零基础到高级JavaWeb与项目</a></p>]]></content:encoded>
      
      <comments>https://aaronlinv.github.io/2020/02/23/web-server-note-17/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Web服务器笔记-代理</title>
      <link>https://aaronlinv.github.io/2020/02/23/web-server-note-16/</link>
      <guid>https://aaronlinv.github.io/2020/02/23/web-server-note-16/</guid>
      <pubDate>Sun, 23 Feb 2020 07:31:31 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;代理设计模式&quot;&gt;&lt;a href=&quot;#代理设计模式&quot; class=&quot;headerlink&quot; title=&quot;代理设计模式&quot;&gt;&lt;/a&gt;代理设计模式&lt;/h2&gt;&lt;p&gt;当某一个对象发生某一个事件时，通知另一个对象，让另一个对象做某事&lt;/p&gt;
&lt;p&gt;代理设计模式步骤&lt;/p&gt;
&lt;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="代理设计模式"><a href="#代理设计模式" class="headerlink" title="代理设计模式"></a>代理设计模式</h2><p>当某一个对象发生某一个事件时，通知另一个对象，让另一个对象做某事</p><p>代理设计模式步骤</p><ol><li>定义好协议（写接口）</li><li>遵守协议（代理对象实现接口）</li><li>成为代理（创建代理对象并赋值）</li><li>调用代理方法</li></ol><p>保姆婴儿案例<br><img src="/2020/02/23/web-server-note-16/1.png" alt="保姆婴儿案例"></p><h2 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h2><p>能监听某个对象的状态变化的组件，监听域对象的变化<br>监听器的内部使用的就是代理模式</p><h4 id="监听器相关的概念"><a href="#监听器相关的概念" class="headerlink" title="监听器相关的概念"></a>监听器相关的概念</h4><p>事件源：被监听的对象</p><ul><li>request</li><li>session</li><li>servletContext<br>监听器：监听事件源的对象</li><li>8个监听器<br>注册监听器：监听器与事件源相绑定<br>响应行为：监听到事件源变化时，去做什么事情</li></ul><h4 id="监听器划分"><a href="#监听器划分" class="headerlink" title="监听器划分"></a>监听器划分</h4><p>三个监听域对象的创建与销毁</p><ul><li>ServletContextListener</li><li>HttpSessionListener</li><li>ServletRequestListener<br>三个监听域对象当中属性变化</li><li>ServletContextAttributeListener</li><li>HttpSessionAttributeListener</li><li>ServletRequestAttributeListener    </li></ul><h2 id="域监听器"><a href="#域监听器" class="headerlink" title="域监听器"></a>域监听器</h2><p>监听器的编写步骤</p><ol><li>编写一个监听器类去实现监听器接口</li><li>覆盖监听器的方法</li><li>需要在web.xml中进行配置</li></ol><h4 id="ServletContextListener"><a href="#ServletContextListener" class="headerlink" title="ServletContextListener"></a>ServletContextListener</h4><p>监听ServletContext域的创建与销毁的监听</p><p>ServletContext域生命周期<br>服务器启动创建<br>服务器关闭销毁</p><p>作用<br>初始化的工作：初始化对象 初始化数据  加载数据库驱动  连接池的初始化<br>加载一些初始化的配置文件<br>任务调度</p><p>IDEA新建JavaEE工程</p><ol><li>需要配置Tomcat的部署目录</li><li>依赖需要导入Tomcat jar包（第一次需要导入）</li><li>开启注解</li><li>在使用JRebel之前，在Panel中打勾<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxq.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletContextListenerTest</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent servletContextEvent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前监听的对象</span></span><br><span class="line">        <span class="comment">// ServletContext servletContext = servletContextEvent.getServletContext();</span></span><br><span class="line">        <span class="comment">// 方法2</span></span><br><span class="line">        ServletContext servletContext = (ServletContext) servletContextEvent.getSource();</span><br><span class="line">        System.out.println(<span class="string">"服务器启动"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent servletContextEvent)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"服务器关闭"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>web.xml<br>用copy Reference<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.myxq.listener.ServletContextListenerTest<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="HttpSessionListener"><a href="#HttpSessionListener" class="headerlink" title="HttpSessionListener"></a>HttpSessionListener</h4><p>监听HttpSession域的创建与销毁</p><p>HttpSession的生命周期<br>第一次调用request.getSession时创建<br>服务器关闭 Session过期 手动销毁</p><p>运用场景<br>记录访问人数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxq.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpSessionListenerTest</span> <span class="keyword">implements</span> <span class="title">HttpSessionListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionCreated</span><span class="params">(HttpSessionEvent httpSessionEvent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取监听对象</span></span><br><span class="line">        <span class="comment">// HttpSession session = httpSessionEvent.getSession();</span></span><br><span class="line">        <span class="comment">// 方法2</span></span><br><span class="line">        HttpSession session = (HttpSession) httpSessionEvent.getSource();</span><br><span class="line">        System.out.println(<span class="string">"session created"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionDestroyed</span><span class="params">(HttpSessionEvent httpSessionEvent)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"session destroyed"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.myxq.listener.HttpSessionListenerTest<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要删除默认的index.jsp<br>因为page里面有一个session=”true”默认情况是true<br>一访问index就创建一个Session对象，就不是访问时候创建的Session对象了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxq.servlet;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/TestServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(req.getSession().getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问TestServlet进行测试：<a href="http://localhost/TestServlet" target="_blank" rel="noopener">http://localhost/TestServlet</a><br>浏览器关掉Session对象没有销毁，而是浏览器中保存的session id没了，到服务器发现没有响应的session id，就创建新的session id（会调用sessionCreated方法）</p><p>Tomcat6 开始默认Session持久化，保存起来，然后启动时候复活<br>配置在apache-tomcat-7.0.85\conf\context.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Uncomment this to disable session persistence across Tomcat restarts --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;Manager pathname="" /&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><p>放开Manager pathname=”” / Tomcat就不会持久化</p><h4 id="ServletRequestListener"><a href="#ServletRequestListener" class="headerlink" title="ServletRequestListener"></a>ServletRequestListener</h4><p>监听ServletRequest域创建与销毁的监听器</p><p>ServletRequest的生命周期<br>创建：每一次请求都会创建request<br>销毁：请求结束</p><p>因为请求太频繁，开发中没有实际应用场景</p><h4 id="ServletContextAttributeListener"><a href="#ServletContextAttributeListener" class="headerlink" title="ServletContextAttributeListener"></a>ServletContextAttributeListener</h4><p>属性发生变化的时候执行对应方法<br>也需要添加到配置里</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxq.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtrributeListenerTest</span> <span class="keyword">implements</span> <span class="title">ServletContextAttributeListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeAdded</span><span class="params">(ServletContextAttributeEvent servletContextAttributeEvent)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"add:"</span>+servletContextAttributeEvent.getName());</span><br><span class="line">        System.out.println(<span class="string">"add:"</span>+servletContextAttributeEvent.getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeRemoved</span><span class="params">(ServletContextAttributeEvent servletContextAttributeEvent)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"remove:"</span>+servletContextAttributeEvent.getName());</span><br><span class="line">        System.out.println(<span class="string">"remove:"</span>+servletContextAttributeEvent.getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attributeReplaced</span><span class="params">(ServletContextAttributeEvent servletContextAttributeEvent)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"replace:"</span>+servletContextAttributeEvent.getName());</span><br><span class="line">        System.out.println(<span class="string">"replace:"</span>+servletContextAttributeEvent.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/TestServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// System.out.println(req.getSession().getId());</span></span><br><span class="line">        <span class="comment">// this.getServletContext().setAttribute("name1","myxq12");</span></span><br><span class="line">         <span class="keyword">this</span>.getServletContext().removeAttribute(<span class="string">"name1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HttpSessionAttributeListener<br>ServletRequestAttributeListener    </p><h2 id="Session中对象存储监听"><a href="#Session中对象存储监听" class="headerlink" title="Session中对象存储监听"></a>Session中对象存储监听</h2><p>一个对象存储到session当中的几种状态</p><p>绑定状态<br>就一个对象被放到session域中</p><p>解绑状态<br>就是这个对象从session域中移除了</p><p>钝化状态<br>是将session内存中的对象持久化（序列化）到磁盘</p><p>活化状态<br>就是将磁盘上的对象再次恢复到session内存中</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://study.163.com/course/introduction/1005981003.htm" target="_blank" rel="noopener">Java零基础到高级JavaWeb与项目</a></p>]]></content:encoded>
      
      <comments>https://aaronlinv.github.io/2020/02/23/web-server-note-16/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Web服务器笔记-分页</title>
      <link>https://aaronlinv.github.io/2020/02/23/web-server-note-15/</link>
      <guid>https://aaronlinv.github.io/2020/02/23/web-server-note-15/</guid>
      <pubDate>Sun, 23 Feb 2020 05:48:47 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;封装PageBean，减少写入域中的数据&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>封装PageBean，减少写入域中的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxq.domain;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageBean</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 当前是哪一页</span></span><br><span class="line">    <span class="keyword">private</span> Integer currentPage;</span><br><span class="line">    <span class="comment">// 共多少页</span></span><br><span class="line">    <span class="keyword">private</span> Integer totalPage;</span><br><span class="line">    <span class="comment">// 多少条记录</span></span><br><span class="line">    <span class="keyword">private</span> Integer totalCount;</span><br><span class="line">    <span class="comment">// 当前页商品</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Goods&gt; goodsList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改admin_index.jsp中main的指向</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;frame src=<span class="string">"$&#123;pageContext.request.contextPath &#125;/GoodsServlet?action=getPageDate&amp;currentPage=1"</span> name=<span class="string">"mainFrame"</span> &gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPageDate</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 1.获取当前页码</span></span><br><span class="line">String currentPage = request.getParameter(<span class="string">"currentPage"</span>);</span><br><span class="line"><span class="comment">// 2.把页码给业务层 返回一个pageBean</span></span><br><span class="line">GoodsService goodsService = <span class="keyword">new</span> GoodsService();</span><br><span class="line">PageBean pageBean = goodsService.getPageBean(Integer.parseInt(currentPage));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.把pageBean写到域中</span></span><br><span class="line">request.setAttribute(<span class="string">"pageBean"</span>,pageBean);</span><br><span class="line"><span class="comment">// 4.转发</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"admin/main.jsp"</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> PageBean <span class="title">getPageBean</span><span class="params">(Integer currentPage)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">PageBean pageBean = <span class="keyword">new</span> PageBean();</span><br><span class="line"><span class="comment">// 设置当前页</span></span><br><span class="line">pageBean.setCurrentPage(currentPage);</span><br><span class="line"><span class="comment">// 获取有多少条记录</span></span><br><span class="line"><span class="comment">// 从数据库中查询</span></span><br><span class="line">Long count = goodsDao.getCount();</span><br><span class="line">pageBean.setTotalCount(count.intValue());</span><br><span class="line"><span class="comment">// 一页展示多少条数据</span></span><br><span class="line">Integer pageCount = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 总页数 // 16/5=3  1 所以要向上取整</span></span><br><span class="line"><span class="comment">// 注意两个Integer相除只会整数</span></span><br><span class="line"><span class="keyword">double</span> totalPage = Math.ceil(<span class="number">1.0</span> * pageBean.getTotalCount() / pageCount);</span><br><span class="line">pageBean.setTotalPage((<span class="keyword">int</span>)totalPage);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前页商品的角标</span></span><br><span class="line">Integer index = (pageBean.getCurrentPage()-<span class="number">1</span>)*pageCount;</span><br><span class="line">List&lt;Goods&gt; list  = goodsDao.getPageDate(index,pageCount);</span><br><span class="line"></span><br><span class="line">pageBean.setGoodsList(list);</span><br><span class="line"><span class="keyword">return</span> pageBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">getCount</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">String sql = <span class="string">"select count(*) from goods"</span>;</span><br><span class="line">Long count = (Long) qr.query(sql,<span class="keyword">new</span> ScalarHandler());</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Goods&gt; <span class="title">getPageDate</span><span class="params">(Integer index, Integer pageCount)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">String sql = <span class="string">"select * from goods limit ?,?"</span>;</span><br><span class="line">List&lt;Goods&gt; pageGoods = qr.query(sql, <span class="keyword">new</span> BeanListHandler&lt;Goods&gt;(Goods.class), index, pageCount);</span><br><span class="line"><span class="keyword">return</span> pageGoods;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询结果就一个使用ScalarHandler结果集<br>查询结果是一个Long类型，不能强转为Integer，因为<strong>包装类型不能用括号强转</strong>，要调用用方法才能转换</p><p>修改getListGoods方法</p><p>修改分页</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:forEach items=<span class="string">"$&#123;pageBean.goodsList &#125;"</span> <span class="keyword">var</span>=<span class="string">"goods"</span> varStatus=<span class="string">"status"</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//分页&lt;script&gt;</span></span><br><span class="line"><span class="comment">//分页</span></span><br><span class="line">$(<span class="string">"#page"</span>).paging(&#123;</span><br><span class="line">pageNo : $&#123;pageBean.currentPage&#125;,</span><br><span class="line">totalPage : $&#123;pageBean.totalPage&#125;,</span><br><span class="line">totalSize : $&#123;pageBean.totalCount&#125;,</span><br><span class="line">callback : function(num) &#123;</span><br><span class="line"><span class="comment">// alert(num);</span></span><br><span class="line"><span class="comment">// 重新发送请求</span></span><br><span class="line">$(window).attr(<span class="string">'location'</span>, <span class="string">'$&#123;ctx&#125;/GoodsServlet?action=getPageDate&amp;currentPage='</span>+num);</span><br><span class="line"><span class="comment">// $&#123;pageContext.request.contextPath &#125;/GoodsServlet?action=getPageDate&amp;currentPage=1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://study.163.com/course/introduction/1005981003.htm" target="_blank" rel="noopener">Java零基础到高级JavaWeb与项目</a></p>]]></content:encoded>
      
      <comments>https://aaronlinv.github.io/2020/02/23/web-server-note-15/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Web服务器笔记-通用Servlet</title>
      <link>https://aaronlinv.github.io/2020/02/22/web-server-note-14/</link>
      <guid>https://aaronlinv.github.io/2020/02/22/web-server-note-14/</guid>
      <pubDate>Sat, 22 Feb 2020 11:07:33 GMT</pubDate>
      <description>
      
        
        
          &lt;h4 id=&quot;通用Servlet&quot;&gt;&lt;a href=&quot;#通用Servlet&quot; class=&quot;headerlink&quot; title=&quot;通用Servlet&quot;&gt;&lt;/a&gt;通用Servlet&lt;/h4&gt;&lt;p&gt;定义个请求都要去写一个Servlet，一个商品模块就写了6个Servlet&lt;br&gt;一
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h4 id="通用Servlet"><a href="#通用Servlet" class="headerlink" title="通用Servlet"></a>通用Servlet</h4><p>定义个请求都要去写一个Servlet，一个商品模块就写了6个Servlet<br>一个工程当中会有很多的Servlet</p><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p>在一个模块当中只写一个Servlet，在跳转到Servlet时，根据不同的操作，传入一个特定的参数<br>在Servlet当中接收特定的参数，根据参数的值不同，跳转到不同的Servlet中</p><p>实现步骤</p><ol><li>假设有一个页面里面有四个请求<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath &#125;/TestServlet?action=add"&gt;添加&lt;/a&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath &#125;/TestServlet?action=del"&gt;删除&lt;/a&gt;</span><br><span class="line">&lt;a href="$&#123;pageContext.request.contextPath &#125;/TestServlet?action=update"&gt;更新&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li>定义一个TestServlet接收请求</li><li>定义各自的业务方法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxq;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/TestServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"TestServlet"</span>);</span><br><span class="line">String action = request.getParameter(<span class="string">"action"</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"add"</span>.equals(action)) &#123;</span><br><span class="line"></span><br><span class="line">add(request, response);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"del"</span>.equals(action)) &#123;</span><br><span class="line"></span><br><span class="line">del(request, response);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"update"</span>.equals(action)) &#123;</span><br><span class="line"></span><br><span class="line">update(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"add"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"del"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"update"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">"add"</span>.equals(action)) </span><br><span class="line"><span class="comment">// 这样可以避免action为空，空指针异常，通常用常量调用equals</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h4><p>每一个业务中都有一个转发，只是转发的路径不同<br>把转发拿到service中处理，调用各自方法时，返回跳转的路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxq;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/TestServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"TestServlet"</span>);</span><br><span class="line">String desPath = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">String action = request.getParameter(<span class="string">"action"</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"add"</span>.equals(action)) &#123;</span><br><span class="line"></span><br><span class="line">desPath = add(request, response);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"del"</span>.equals(action)) &#123;</span><br><span class="line"></span><br><span class="line">desPath = del(request, response);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"update"</span>.equals(action)) &#123;</span><br><span class="line"></span><br><span class="line">desPath = update(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (desPath != <span class="keyword">null</span>) &#123;</span><br><span class="line">request.getRequestDispatcher(desPath).forward(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">add</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"add"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"add.jsp"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">del</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"del"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"del.jsp"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">update</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"update"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"update.jsp"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="改进2"><a href="#改进2" class="headerlink" title="改进2"></a>改进2</h4><p>service当中if判断比较多，使用反射<br>接收参数之后，查看当前字节码当中有没有和参数相同的方法<br>如果有，就动态的来去调用<br>注意反射直接invoke的方法必须是public的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxq;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/TestServlet2"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServlet2</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"TestServlet"</span>);</span><br><span class="line">String desPath = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">String action = request.getParameter(<span class="string">"action"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.获取字节码</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Class clazz = <span class="keyword">this</span>.getClass();</span><br><span class="line">Method method = clazz.getMethod(action, HttpServletRequest.class, HttpServletResponse.class);</span><br><span class="line"><span class="comment">// 判断有没有传入的方法</span></span><br><span class="line"><span class="keyword">if</span>(method != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// 使用当前对象调用</span></span><br><span class="line">desPath = (String) method.invoke(<span class="keyword">this</span>, request,response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 转发</span></span><br><span class="line"><span class="keyword">if</span> (desPath != <span class="keyword">null</span>) &#123;</span><br><span class="line">request.getRequestDispatcher(desPath).forward(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"add"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"add.jsp"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">del</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"del"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"del.jsp"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"update"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"update.jsp"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="抽取基类"><a href="#抽取基类" class="headerlink" title="抽取基类"></a>抽取基类</h4><p>把service方法单独存放到一个类当中<br>以后别人在使用的时候，只需要提供对应的方法</p><p>BaseServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxq;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/BaseServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"TestServlet"</span>);</span><br><span class="line">String desPath = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">String action = request.getParameter(<span class="string">"action"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.获取字节码</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Class clazz = <span class="keyword">this</span>.getClass();</span><br><span class="line">Method method = clazz.getMethod(action, HttpServletRequest.class, HttpServletResponse.class);</span><br><span class="line"><span class="comment">// 判断有没有传入的方法</span></span><br><span class="line"><span class="keyword">if</span> (method != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// 使用当前对象调用</span></span><br><span class="line">desPath = (String) method.invoke(<span class="keyword">this</span>, request, response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 转发</span></span><br><span class="line"><span class="keyword">if</span> (desPath != <span class="keyword">null</span>) &#123;</span><br><span class="line">request.getRequestDispatcher(desPath).forward(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TestServlet2继承BaseServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxq;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/TestServlet2"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServlet2</span> <span class="keyword">extends</span> <span class="title">BaseServlet</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进入方法，找service方法，没找到，到父类中查找</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"add"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"add.jsp"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">del</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"del"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"del.jsp"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"update"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"update.jsp"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通用Servlet改进项目"><a href="#通用Servlet改进项目" class="headerlink" title="通用Servlet改进项目"></a>通用Servlet改进项目</h2><p>创建GoodsServlet 继承 BaseServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxq.web;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/GoodsServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsServlet</span> <span class="keyword">extends</span> <span class="title">BaseServlet</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改jsp中的Servlet指向，链接到GoodsServlet，加上指定的action<br>在GoodsServlet中添加对应的public方法，返回转发的页面String，如果需要处理异常，则在最后return null</p><p>GoodsServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxq.web;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/GoodsServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsServlet</span> <span class="keyword">extends</span> <span class="title">BaseServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getListGoods</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"GoodsListServlet"</span>);</span><br><span class="line"><span class="comment">// 调用服务层</span></span><br><span class="line">GoodsService goodsService = <span class="keyword">new</span> GoodsService();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">List&lt;Goods&gt; allGoods = goodsService.getAllGoods();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反转</span></span><br><span class="line">Collections.reverse(allGoods);</span><br><span class="line"></span><br><span class="line"><span class="comment">// System.out.println(allGoods);</span></span><br><span class="line"><span class="comment">// 把数据写到request域</span></span><br><span class="line">request.setAttribute(<span class="string">"allGoods"</span>, allGoods);</span><br><span class="line"><span class="comment">// 转发</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"admin/main.jsp"</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">delGoods</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// 1. 接收参数</span></span><br><span class="line">String id = request.getParameter(<span class="string">"id"</span>);</span><br><span class="line"><span class="comment">// System.out.println(id);</span></span><br><span class="line"><span class="comment">// 2. 调用服务层</span></span><br><span class="line">GoodsService goodsService = <span class="keyword">new</span> GoodsService();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">goodsService.deleteGoods(id);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"GoodsServlet?action=getListGoods"</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">editGoodsUI</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">String id = request.getParameter(<span class="string">"id"</span>);</span><br><span class="line"><span class="comment">// System.out.println("GoodsEditUIServlet"+id);</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 1.获取当前商品</span></span><br><span class="line">GoodsService goodsService = <span class="keyword">new</span> GoodsService();</span><br><span class="line">Goods goods = goodsService.getGoodsWithId(id);</span><br><span class="line">System.out.println(goods);</span><br><span class="line"><span class="comment">// 把商品写入request域中</span></span><br><span class="line">request.setAttribute(<span class="string">"goods"</span>, goods);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.获取所有分类</span></span><br><span class="line">CategoryService categoryService = <span class="keyword">new</span> CategoryService();</span><br><span class="line">List&lt;Category&gt; allCategory = categoryService.findCategory();</span><br><span class="line">request.setAttribute(<span class="string">"allCategory"</span>, allCategory);</span><br><span class="line"><span class="comment">// 3.转发到JSP页面</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"/admin/edit.jsp"</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">editGoods</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// 设置字符集 post</span></span><br><span class="line">request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line"><span class="comment">// System.out.println("GoodsEditServlet");</span></span><br><span class="line"><span class="comment">// 1.获取所有参数</span></span><br><span class="line">Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line"><span class="comment">// 2.封装成Goods对象</span></span><br><span class="line">Goods goods = <span class="keyword">new</span> Goods();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">BeanUtils.populate(goods, parameterMap);</span><br><span class="line">System.out.println(goods);</span><br><span class="line"><span class="comment">// 3.根据id更新数据</span></span><br><span class="line"><span class="comment">// 4.调用服务层 更新数据</span></span><br><span class="line">GoodsService goodsService = <span class="keyword">new</span> GoodsService();</span><br><span class="line">goods.setImage(<span class="string">"goods_10.png"</span>);</span><br><span class="line">goodsService.updateGoods(goods);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.跳转mian.jsp</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"GoodsServlet?action=getListGoods"</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">addGoodsUI</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// 1.取出所有分类</span></span><br><span class="line">List&lt;Category&gt; allCategory = <span class="keyword">null</span>;</span><br><span class="line">CategoryService categoryService = <span class="keyword">new</span> CategoryService();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">allCategory = categoryService.findCategory();</span><br><span class="line">System.out.println(allCategory);</span><br><span class="line"><span class="comment">// 2.把分类存到域中</span></span><br><span class="line">request.setAttribute(<span class="string">"allCategory"</span>, allCategory);</span><br><span class="line"><span class="comment">// 3.转发edit.jsp</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"admin/add.jsp"</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">addGoods</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// System.out.println("GoodsAddServlet");</span></span><br><span class="line"><span class="comment">// 1.获取所有参数</span></span><br><span class="line">request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">Map&lt;String, String[]&gt; map = request.getParameterMap();</span><br><span class="line"><span class="comment">// System.out.println(map);</span></span><br><span class="line">Goods goods = <span class="keyword">new</span> Goods();</span><br><span class="line">BeanUtils beanUtils = <span class="keyword">new</span> BeanUtils();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">BeanUtils.populate(goods, map);</span><br><span class="line">goods.setImage(<span class="string">"goods_11.png"</span>);</span><br><span class="line">System.out.println(request.getParameter(<span class="string">"name"</span>));</span><br><span class="line">System.out.println(goods);</span><br><span class="line"><span class="comment">// 调用服务层</span></span><br><span class="line">GoodsService goodsService = <span class="keyword">new</span> GoodsService();</span><br><span class="line">goodsService.addGoods(goods);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跳转列表 取最新数据</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"GoodsServlet?action=getListGoods"</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>出现了一个问题：在子类中添加编码，post表单接收到的还是乱码，可以把设置编码写到BaseServlet中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://study.163.com/course/introduction/1005981003.htm" target="_blank" rel="noopener">Java零基础到高级JavaWeb与项目</a></p>]]></content:encoded>
      
      <comments>https://aaronlinv.github.io/2020/02/22/web-server-note-14/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Web服务器笔记-三层架构实践</title>
      <link>https://aaronlinv.github.io/2020/02/16/web-server-note-13/</link>
      <guid>https://aaronlinv.github.io/2020/02/16/web-server-note-13/</guid>
      <pubDate>Sun, 16 Feb 2020 11:40:11 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;后台管理系统登录&quot;&gt;&lt;a href=&quot;#后台管理系统登录&quot; class=&quot;headerlink&quot; title=&quot;后台管理系统登录&quot;&gt;&lt;/a&gt;后台管理系统登录&lt;/h2&gt;&lt;p&gt;JSP凡是action src href都要写绝对路径，需要加上工程名称&lt;br&gt;获取当前项目
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="后台管理系统登录"><a href="#后台管理系统登录" class="headerlink" title="后台管理系统登录"></a>后台管理系统登录</h2><p>JSP凡是action src href都要写绝对路径，需要加上工程名称<br>获取当前项目名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;pageContext.request.contextPath &#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/02/16/web-server-note-13/1.png" alt="三层架构实践"></p><p>Web层 AdminServlet类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxq.web;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/AdminServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">String name = request.getParameter(<span class="string">"username"</span>);</span><br><span class="line">String pwd = request.getParameter(<span class="string">"password"</span>);</span><br><span class="line">System.out.println(<span class="string">"name:"</span>+name+<span class="string">" pwd:"</span>+pwd);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建一个Service层 AdminService类<br>在AdminServlet中调用登录业务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用 登录业务</span></span><br><span class="line">AdminService adminService = <span class="keyword">new</span> AdminService();</span><br><span class="line">adminService.login(name,pwd);</span><br></pre></td></tr></table></figure><p>自动创建login方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxq.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminService</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String name, String pwd)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 调用Dao层到数据库查询</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建一个DAO层 AdminService类<br>在AdminService中调用Dao层到数据库查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用Dao层到数据库查询</span></span><br><span class="line">AdminDao adminDao = <span class="keyword">new</span> AdminDao();</span><br><span class="line">adminDao.checkAdmin(name,pwd);</span><br></pre></td></tr></table></figure><p>自动创建checkAdmin方法<br>导入数据库相关Jar包，创建util包，写JdbcUtil，创建db.properties</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxq.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Admin <span class="title">checkAdmin</span><span class="params">(String name, String pwd)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"><span class="comment">// 到数据库中查询 返回查询结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.连接数据库</span></span><br><span class="line">QueryRunner qr = <span class="keyword">new</span> QueryRunner(JDBCUtil.getDataSource());</span><br><span class="line">String sql = <span class="string">"select * from admin where username= ?and password = ?"</span>;</span><br><span class="line"><span class="comment">// 2.获取数据</span></span><br><span class="line">Admin admin = <span class="keyword">null</span>;</span><br><span class="line">admin = qr.query(sql, <span class="keyword">new</span> BeanHandler&lt;Admin&gt;(Admin.class), name, pwd);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> admin;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">抛出异常</span><br><span class="line"></span><br><span class="line">修改AdminService，继续抛出SQLException</span><br><span class="line">```java</span><br><span class="line"><span class="keyword">package</span> com.myxq.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Admin <span class="title">login</span><span class="params">(String name, String pwd)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 调用Dao层到数据库查询</span></span><br><span class="line">AdminDao adminDao = <span class="keyword">new</span> AdminDao();</span><br><span class="line">Admin admin = adminDao.checkAdmin(name,pwd);</span><br><span class="line"><span class="keyword">if</span> (admin != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> admin;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"用户名或密码错误"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改AdminServlet，最终调用者，必须处理异常<br>如果项目修改了重启服务器还是报错，可以尝试Project-Clean 清除缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxq.web;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/AdminServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">String name = request.getParameter(<span class="string">"username"</span>);</span><br><span class="line">String pwd = request.getParameter(<span class="string">"password"</span>);</span><br><span class="line">System.out.println(<span class="string">"name:"</span>+name+<span class="string">" pwd:"</span>+pwd);</span><br><span class="line"><span class="comment">// 调用 登录业务</span></span><br><span class="line">AdminService adminService = <span class="keyword">new</span> AdminService();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">adminService.login(name,pwd);</span><br><span class="line">System.out.println(<span class="string">"登录成功"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.out.println(<span class="string">"登录失败"</span>);</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务器跳转时，路径相对的是服务器WebContent<br>浏览器请求跳转时，路径相对的当前的JSP<br>这两个是冲突的，所以JSP凡是action src href都要写绝对路径</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"$&#123;pageContext.request.contextPath &#125;/admin/css/style.css"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>对网页进行测试</p><p>登录成功重定向后台首页</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">String name = request.getParameter(<span class="string">"username"</span>);</span><br><span class="line">String pwd = request.getParameter(<span class="string">"password"</span>);</span><br><span class="line">System.out.println(<span class="string">"name:"</span>+name+<span class="string">" pwd:"</span>+pwd);</span><br><span class="line"><span class="comment">// 调用 登录业务</span></span><br><span class="line">AdminService adminService = <span class="keyword">new</span> AdminService();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Admin admin = adminService.login(name,pwd);</span><br><span class="line">System.out.println(<span class="string">"登录成功"</span>);</span><br><span class="line"><span class="comment">// 把用户保存到Session</span></span><br><span class="line">HttpSession session = request.getSession();</span><br><span class="line">session.setAttribute(<span class="string">"admin"</span>, admin);</span><br><span class="line"><span class="comment">// 跳转到后台首页</span></span><br><span class="line"><span class="comment">// 使用重定向，地址栏需要变化</span></span><br><span class="line">response.sendRedirect(request.getContextPath()+<span class="string">"/admin/admin_index.jsp"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">if</span> (e.getMessage().equals(<span class="string">"用户名或密码错误"</span>))&#123;</span><br><span class="line">System.out.println(<span class="string">"登录失败"</span>);</span><br><span class="line"><span class="comment">// 跳转回登录页面，回显错误信息</span></span><br><span class="line">request.setAttribute(<span class="string">"err"</span>, e.getMessage());</span><br><span class="line"><span class="comment">// 转发</span></span><br><span class="line">request.getRequestDispatcher(<span class="string">"admin/admin_login.jsp"</span>).forward(request,response);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为是重定向，所以需要修改admin_index的src为绝对路径<br>重定向：浏览器的跳转，相对JSP路径</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">frameset</span> <span class="attr">rows</span>=<span class="string">"70,*"</span> <span class="attr">frameborder</span>=<span class="string">0</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">framespacing</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">"$&#123;pageContext.request.contextPath &#125;/admin/top.jsp"</span> <span class="attr">name</span>=<span class="string">"topFrame"</span> <span class="attr">scrolling</span>=<span class="string">"NO"</span> <span class="attr">noresize</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">frameset</span> <span class="attr">cols</span>=<span class="string">"250,*"</span> <span class="attr">frameborder</span>=<span class="string">"0"</span> <span class="attr">border</span>=<span class="string">"0"</span>  <span class="attr">framespacing</span>=<span class="string">"10"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">"$&#123;pageContext.request.contextPath &#125;/admin/left.jsp"</span> <span class="attr">name</span>=<span class="string">"leftFrame"</span>  <span class="attr">scrolling</span>=<span class="string">"NO"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">"$&#123;pageContext.request.contextPath &#125;/admin/main.jsp"</span> <span class="attr">name</span>=<span class="string">"mainFrame"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">frameset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">frameset</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改后天显示的用户名</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"admin_top"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"top_left"</span>&gt;</span></span><br><span class="line">        码蚁商城</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"h_top_right"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/user_icon.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 从Session域中取数据 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>$&#123;admin.username &#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="商品管理业务"><a href="#商品管理业务" class="headerlink" title="商品管理业务"></a>商品管理业务</h2><p><img src="/2020/02/16/web-server-note-13/2.png" alt="商品管理业务"></p><h4 id="商品显示"><a href="#商品显示" class="headerlink" title="商品显示"></a>商品显示</h4><p>DAO层 GoodsDao类<br>暂时不用面向接口，面向接口编程，需求变更，用其他数据库，就只需要变更实现类<br>新建domain</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxq.domain;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Setter</span><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Goods</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> Double price;</span><br><span class="line"><span class="keyword">private</span> String image;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Goods [id="</span> + id + <span class="string">", name="</span> + name + <span class="string">", price="</span> + price + <span class="string">", image="</span> + image + <span class="string">", getClass()="</span></span><br><span class="line">+ getClass() + <span class="string">", hashCode()="</span> + hashCode() + <span class="string">", toString()="</span> + <span class="keyword">super</span>.toString() + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>jar包，db.properties,Util包JdbcUtil<br>单元测试initialization Error，无代码无关，单元测试初始化错误，Clean工程就好了<br>写一个方法，就马上测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxq.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsDao</span> </span>&#123;</span><br><span class="line">QueryRunner qr = <span class="keyword">new</span> QueryRunner(JDBCUtil.getDataSource());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增删改查</span></span><br><span class="line"><span class="comment">// 1.从数据库中获取所有商品</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Goods&gt; <span class="title">getAllGoods</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">String sql = <span class="string">"select * from goods"</span>;</span><br><span class="line">List&lt;Goods&gt; allGoods = qr.query(sql, <span class="keyword">new</span> BeanListHandler&lt;Goods&gt;(Goods.class));</span><br><span class="line"><span class="keyword">return</span> allGoods;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.添加商品到数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addGoods</span><span class="params">(Goods goods)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">String sql = <span class="string">"insert into goods (name,price,image)value(?,?,?)"</span>;</span><br><span class="line">qr.update(sql, goods.getName(), goods.getPrice(), goods.getImage());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.根据id删除商品</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delGoods</span><span class="params">(<span class="keyword">int</span> id)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">String sql = <span class="string">"delete from goods where id = ?"</span>;</span><br><span class="line">qr.update(sql, id);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 4.修改指定商品</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateGoods</span><span class="params">(Goods goods)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">String sql = <span class="string">"update goods set name=?,price=?,image=? where id = ?"</span>;</span><br><span class="line">qr.update(sql,goods.getName(),goods.getPrice(),goods.getImage(),goods.getId());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxq.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsDaoTest</span> </span>&#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetAllGoods</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">GoodsDao goodsDao = <span class="keyword">new</span> GoodsDao();</span><br><span class="line">List&lt;Goods&gt; allGoods = goodsDao.getAllGoods();</span><br><span class="line">System.out.println(allGoods);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAddGoods</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">GoodsDao goodsDao = <span class="keyword">new</span> GoodsDao();</span><br><span class="line">Goods goods = <span class="keyword">new</span> Goods();</span><br><span class="line">goods.setName(<span class="string">"测试"</span>);</span><br><span class="line">goods.setPrice(<span class="number">200.0</span>);</span><br><span class="line">goods.setImage(<span class="string">"goods_10.png"</span>);</span><br><span class="line">goodsDao.addGoods(goods);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelGoods</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">GoodsDao goodsDao = <span class="keyword">new</span> GoodsDao();</span><br><span class="line">goodsDao.delGoods(<span class="number">17</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateGoods</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">Goods goods = <span class="keyword">new</span> Goods();</span><br><span class="line">goods.setId(<span class="number">17</span>);</span><br><span class="line">goods.setName(<span class="string">"update"</span>);</span><br><span class="line">goods.setPrice(<span class="number">17.0</span>);</span><br><span class="line">goods.setImage(<span class="string">"goods_11.png"</span>);</span><br><span class="line"></span><br><span class="line">GoodsDao goodsDao = <span class="keyword">new</span> GoodsDao();</span><br><span class="line">goodsDao.updateGoods(goods);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Web层 GoodsListServlet类</p><p>创建GoodsListServlet类，写一句输出语句<br>修改admin_index.jsp的mainFrame</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;frame src=<span class="string">"$&#123;pageContext.request.contextPath &#125;/GoodsListServlet"</span> name=<span class="string">"mainFrame"</span> &gt;</span><br></pre></td></tr></table></figure><p>测试是否跳转到Servlet</p><p>创建Service层 GoodsService类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxq.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsService</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在GoodsListServlet中调用服务层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"GoodsListServlet"</span>);</span><br><span class="line"><span class="comment">// 调用服务层</span></span><br><span class="line">GoodsService goodsService = <span class="keyword">new</span> GoodsService();</span><br><span class="line">goodsService.getAllGoods();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自动生成getAllGoods方法，抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxq.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsService</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Goods&gt; <span class="title">getAllGoods</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">GoodsDao goodsDao = <span class="keyword">new</span> GoodsDao();</span><br><span class="line">List&lt;Goods&gt; allGoods = goodsDao.getAllGoods();</span><br><span class="line"><span class="keyword">return</span> allGoods;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续写Servlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"GoodsListServlet"</span>);</span><br><span class="line"><span class="comment">// 调用服务层</span></span><br><span class="line">GoodsService goodsService = <span class="keyword">new</span> GoodsService();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">List&lt;Goods&gt; allGoods = goodsService.getAllGoods();</span><br><span class="line"><span class="comment">// System.out.println(allGoods);</span></span><br><span class="line"><span class="comment">// 把数据写到request域</span></span><br><span class="line">request.setAttribute(<span class="string">"allGoods"</span>, allGoods);</span><br><span class="line"><span class="comment">// 转发</span></span><br><span class="line">request.getRequestDispatcher(<span class="string">"admin/main.jsp"</span>).forward(request, response);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改main.jsp的css路径</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">String ctx = request.getContextPath();</span><br><span class="line">pageContext.setAttribute(<span class="string">"ctx"</span>, ctx);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"$&#123;ctx&#125;/admin/css/style.css"</span> type=<span class="string">"text/css"</span> /&gt;</span><br><span class="line">    &lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"$&#123;ctx&#125;/admin/css/amazeui.min.css"</span> /&gt;</span><br><span class="line">    &lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"$&#123;ctx&#125;/admin/css/pageStyle.css"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure><p>测试网页</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> prefix=<span class="string">"c"</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:forEach items=<span class="string">"$&#123;allGoods &#125;"</span> <span class="keyword">var</span>=<span class="string">"goods"</span> varStatus=<span class="string">"status"</span>&gt;</span><br><span class="line">&lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">"list_goods_ul"</span>&gt;</span><br><span class="line">&lt;!-- status是一个对象<span class="keyword">for</span>循环状态 index就是取当前<span class="keyword">for</span>循环角标 --&gt;</span><br><span class="line">&lt;li&gt;$&#123;status.index+1 &#125;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;img src="$&#123;ctx &#125;/admin/images/pimages/$&#123;goods.image&#125;"&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;$&#123;goods.name &#125;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;$&#123;goods.price &#125;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=<span class="string">"#"</span>&gt;&lt;img <span class="class"><span class="keyword">class</span></span>=<span class="string">"img_icon"</span></span><br><span class="line">src="$&#123;ctx &#125;/admin/images/edit_icon.png" alt=""&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=<span class="string">"#"</span>&gt;&lt;img <span class="class"><span class="keyword">class</span></span>=<span class="string">"img_icon"</span></span><br><span class="line">src="$&#123;ctx &#125;/admin/images/delete_icon.png" alt=""&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script src="$&#123;ctx &#125;/admin/js/jquery.min.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type="text/javascript" src="$&#123;ctx &#125;/admin/js/paging.js"&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="/2020/02/16/web-server-note-13/3.png" alt></p><h2 id="删除商品"><a href="#删除商品" class="headerlink" title="删除商品"></a>删除商品</h2><p>步骤同上</p><p>创建GoodsDelServlet类，测试连通<br>修改jsp的删除按钮的href，修改后可以用Chrome浏览器鼠标悬停，查看连接地址是否正确<br>在Servlet中接受参数，调用服务，服务中调用DAO，删除数据<br>Servlet中转发</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:forEach items=<span class="string">"$&#123;allGoods &#125;"</span> <span class="keyword">var</span>=<span class="string">"goods"</span> varStatus=<span class="string">"status"</span>&gt;</span><br><span class="line">&lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">"list_goods_ul"</span>&gt;</span><br><span class="line">&lt;!-- status是一个对象<span class="keyword">for</span>循环状态 index就是取当前<span class="keyword">for</span>循环角标 --&gt;</span><br><span class="line">&lt;li&gt;$&#123;status.index+1 &#125;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;img src="$&#123;ctx &#125;/admin/images/pimages/$&#123;goods.image&#125;"&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;$&#123;goods.name &#125;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;$&#123;goods.price &#125;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=<span class="string">""</span>&gt;&lt;img <span class="class"><span class="keyword">class</span></span>=<span class="string">"img_icon"</span></span><br><span class="line">src="$&#123;ctx &#125;/admin/images/edit_icon.png" alt=""&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=<span class="string">"$&#123;ctx &#125;/GoodsDelServlet?id=$&#123;goods.id&#125;"</span>&gt;&lt;img <span class="class"><span class="keyword">class</span></span>=<span class="string">"img_icon"</span></span><br><span class="line">src="$&#123;ctx &#125;/admin/images/delete_icon.png" alt=""&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure><p>GoodsDelServlet类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxq.web;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/GoodsDelServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsDelServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// System.out.println("GoodsDelServlet");</span></span><br><span class="line"><span class="comment">// 1. 接收参数</span></span><br><span class="line">String id = request.getParameter(<span class="string">"id"</span>);</span><br><span class="line"><span class="comment">// System.out.println(id);</span></span><br><span class="line"><span class="comment">// 2. 调用服务层</span></span><br><span class="line">GoodsService goodsService = <span class="keyword">new</span> GoodsService();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">goodsService.deleteGoods(id);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">request.getRequestDispatcher(<span class="string">"GoodsListServlet"</span>).forward(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GoodsService类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxq.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">GoodsDao goodsDao = <span class="keyword">new</span> GoodsDao();</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Goods&gt; <span class="title">getAllGoods</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">List&lt;Goods&gt; allGoods = goodsDao.getAllGoods();</span><br><span class="line"><span class="keyword">return</span> allGoods;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteGoods</span><span class="params">(String id)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">goodsDao.delGoods(Integer.parseInt(id));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="添加商品"><a href="#添加商品" class="headerlink" title="添加商品"></a>添加商品</h2><p>修改goods表，增加描述、是否热门、cid<br><img src="/2020/02/16/web-server-note-13/4.png" alt="数据库"><br>增加分类表catogory<br><img src="/2020/02/16/web-server-note-13/5.png" alt="数据库"><br>添加数据<br>为goods表的cid做外键约束<br><strong>修改了表JavaBean也要修改</strong>，数据库需要对应<br><strong>对应的插入数据库操作也要更新</strong></p><p><img src="/2020/02/16/web-server-note-13/5.png" alt="添加商品"></p><p>创建GoodsAddUIServlet类<br>创建CategoryService类<br>GoodsAddUIServlet调用CategoryService中的findCategory方法<br>创建CategoryDao类 </p><p>GoodsAddUIServlet类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxq.web;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/GoodsAddUIServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsAddUIServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// 1.取出所有分类</span></span><br><span class="line">List&lt;Category&gt; allCategory = <span class="keyword">null</span>;</span><br><span class="line">CategoryService categoryService = <span class="keyword">new</span> CategoryService();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">allCategory = categoryService.findCategory();</span><br><span class="line">System.out.println(allCategory);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2.把分类存到域中</span></span><br><span class="line">request.setAttribute(<span class="string">"allCategory"</span>, allCategory);</span><br><span class="line"><span class="comment">// 3.转发edit.jsp</span></span><br><span class="line">request.getRequestDispatcher(<span class="string">"admin/add.jsp"</span>).forward(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CategoryService类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxq.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Category&gt; <span class="title">findCategory</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">CategoryDao categoryDao = <span class="keyword">new</span> CategoryDao();</span><br><span class="line">List&lt;Category&gt; allCategory = categoryDao.getAllCategory();</span><br><span class="line"><span class="keyword">return</span> allCategory;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CategoryDao类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxq.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Category&gt; <span class="title">getAllCategory</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">QueryRunner qr = <span class="keyword">new</span> QueryRunner(JDBCUtil.getDataSource());</span><br><span class="line">String sql = <span class="string">"select * from category"</span>;</span><br><span class="line">List&lt;Category&gt; allCategory  = qr.query(sql, <span class="keyword">new</span> BeanListHandler&lt;Category&gt;(Category.class));</span><br><span class="line"><span class="keyword">return</span> allCategory;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改add.jsp<br>添加foreach，转发所以需要修改一些路径为绝对路径</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> prefix=<span class="string">"c"</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">String ctx = request.getContextPath();</span><br><span class="line">pageContext.setAttribute(<span class="string">"ctx"</span>, ctx);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">    &lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"$&#123;ctx &#125;/admin/css/style.css"</span> type=<span class="string">"text/css"</span> /&gt;</span><br><span class="line">    &lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"$&#123;ctx &#125;/admin/css/amazeui.min.css"</span> /&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"item1"</span>&gt;</span><br><span class="line">                &lt;span&gt;所属分类：&lt;/span&gt;</span><br><span class="line">                 &lt;select id=<span class="string">"category_select"</span>&gt;&amp;nbsp;&amp;nbsp;</span><br><span class="line">                 </span><br><span class="line">                 &lt;c:forEach items=<span class="string">"$&#123;allCategory &#125;"</span> <span class="keyword">var</span>=<span class="string">"category"</span>&gt;</span><br><span class="line">                 &lt;option value="$&#123;category.cid &#125;"&gt;$&#123;category.cname &#125;&lt;/option&gt;</span><br><span class="line">                 &lt;/c:forEach&gt;</span><br><span class="line">                    </span><br><span class="line">                     </span><br><span class="line">                 &lt;/select&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">&lt;script src="$&#123;ctx &#125;/admin/js/jquery.min.js"&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">"#add"</span>).click(function () &#123;</span><br><span class="line">        $(window).attr(<span class="string">'location'</span>,<span class="string">'main.jsp'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    $(<span class="string">"#reset"</span>).click(function () &#123;</span><br><span class="line">       $(window).attr(<span class="string">'location'</span>,<span class="string">'add.jsp'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>修改main.jsp链接为GoodsAddUIServlet</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;script src="$&#123;ctx &#125;/admin/js/jquery.min.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type="text/javascript" src="$&#123;ctx &#125;/admin/js/paging.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">//分页</span></span><br><span class="line">$(<span class="string">"#page"</span>).paging(&#123;</span><br><span class="line">pageNo : <span class="number">5</span>,</span><br><span class="line">totalPage : <span class="number">10</span>,</span><br><span class="line">totalSize : <span class="number">300</span>,</span><br><span class="line">callback : function(num) &#123;</span><br><span class="line">alert(num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">"#add"</span>).click(function() &#123;</span><br><span class="line">$(window).attr(<span class="string">'location'</span>, <span class="string">'$&#123;ctx&#125;/GoodsAddUIServlet'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>添加商品接收参数<br>创建GoodsAddServlet类<br>修改add.jsp的form表达的各个name属性和表单地址等<br>测试在Servlet获取所有参数的Map，使用BeanUtils封装，测试封装结果<br>调用服务层方法<br>服务处调用DAO<br><strong>字段介绍用desc，desc是数据库关键字，所以开发一般是gdesc</strong><br>修改类名为gdesc修改对应映射</p><p>GoodsAddServlet类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxq.web;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/GoodsAddServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsAddServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// System.out.println("GoodsAddServlet");</span></span><br><span class="line"><span class="comment">// 1.获取所有参数</span></span><br><span class="line">request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">Map&lt;String, String[]&gt; map = request.getParameterMap();</span><br><span class="line"><span class="comment">// System.out.println(map);</span></span><br><span class="line">Goods goods = <span class="keyword">new</span> Goods();</span><br><span class="line">BeanUtils beanUtils = <span class="keyword">new</span> BeanUtils();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">BeanUtils.populate(goods, map);</span><br><span class="line">goods.setImage(<span class="string">"goods_11.png"</span>);</span><br><span class="line">System.out.println(goods);</span><br><span class="line"><span class="comment">// 调用服务层</span></span><br><span class="line">GoodsService goodsService = <span class="keyword">new</span> GoodsService();</span><br><span class="line">goodsService.addGoods(goods);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跳转列表 取最新数据</span></span><br><span class="line">request.getRequestDispatcher(<span class="string">"GoodsListServlet"</span>).forward(request, response);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GoodsService类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxq.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsService</span> </span>&#123;</span><br><span class="line"><span class="comment">// 保护DAO</span></span><br><span class="line"><span class="keyword">private</span> GoodsDao goodsDao = <span class="keyword">new</span> GoodsDao();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Goods&gt; <span class="title">getAllGoods</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">List&lt;Goods&gt; allGoods = goodsDao.getAllGoods();</span><br><span class="line"><span class="keyword">return</span> allGoods;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteGoods</span><span class="params">(String id)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">goodsDao.delGoods(Integer.parseInt(id));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addGoods</span><span class="params">(Goods goods)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"><span class="comment">// 调用DAO</span></span><br><span class="line">goodsDao.addGoods(goods);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GoodsDao类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxq.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsDao</span> </span>&#123;</span><br><span class="line">QueryRunner qr = <span class="keyword">new</span> QueryRunner(JDBCUtil.getDataSource());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增删改查</span></span><br><span class="line"><span class="comment">// 1.从数据库中获取所有商品</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Goods&gt; <span class="title">getAllGoods</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">String sql = <span class="string">"select * from goods"</span>;</span><br><span class="line">List&lt;Goods&gt; allGoods = qr.query(sql, <span class="keyword">new</span> BeanListHandler&lt;Goods&gt;(Goods.class));</span><br><span class="line"><span class="keyword">return</span> allGoods;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.添加商品到数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addGoods</span><span class="params">(Goods goods)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">String sql = <span class="string">"insert into goods (name,price,image,gdesc,is_hot,cid) value (?,?,?,?,?,?)"</span>;</span><br><span class="line">qr.update(sql, goods.getName(), goods.getPrice(), goods.getImage(),goods.getGdesc(),goods.getIs_hot(),goods.getCid());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.根据id删除商品</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delGoods</span><span class="params">(<span class="keyword">int</span> id)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">String sql = <span class="string">"delete from goods where id = ?"</span>;</span><br><span class="line">qr.update(sql, id);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 4.修改指定商品</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateGoods</span><span class="params">(Goods goods)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">String sql = <span class="string">"update goods set name=?,price=?,image=? where id = ?"</span>;</span><br><span class="line">qr.update(sql,goods.getName(),goods.getPrice(),goods.getImage(),goods.getId());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>add.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"edit_content"</span>&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123;ctx &#125;/GoodsAddServlet"</span> method=<span class="string">"post"</span> id=<span class="string">"add_form"</span></span><br><span class="line">style=<span class="string">"background: none; width: 700px"</span>&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"item1"</span>&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;span&gt;商品名称：&lt;/span&gt; &lt;input type="text" class="am-form-field"</span><br><span class="line">name=<span class="string">"name"</span>&gt;&amp;nbsp;&amp;nbsp;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;span&gt;商品价格：&lt;/span&gt; &lt;input type="text" class="am-form-field" name="price"&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"item1"</span>&gt;</span><br><span class="line">&lt;span&gt;所属分类：&lt;/span&gt; &lt;select id="category_select" name="cid"&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:forEach items=<span class="string">"$&#123;allCategory &#125;"</span> <span class="keyword">var</span>=<span class="string">"category"</span>&gt;</span><br><span class="line">&lt;option value="$&#123;category.cid &#125;"&gt;$&#123;category.cname &#125;&lt;/option&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;span&gt;是否热门&lt;/span&gt;</span><br><span class="line">&lt;select id=<span class="string">"category_select"</span> name=<span class="string">"is_hot"</span>&gt;</span><br><span class="line">&lt;option value="0"&gt;否&lt;/option&gt;</span><br><span class="line">&lt;option value="1"&gt;是&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"item1"</span>&gt;</span><br><span class="line">&lt;span&gt;商品图片：&lt;/span&gt; &lt;input type="file" name="image" id="upload" /&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"item1 item_desc"</span> &gt;</span><br><span class="line">&lt;span&gt;商品描述：&lt;/span&gt;</span><br><span class="line">&lt;textarea id="desc" name="gdesc" rows="4" cols="50"&gt;&lt;/textarea&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;button class="am-btn am-btn-default" type="button" id="add"&gt;添加&lt;/button&gt;</span><br><span class="line">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line">&lt;button class="am-btn am-btn-default" type="button" id="reset"&gt;重置&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src="$&#123;ctx &#125;/admin/js/jquery.min.js"&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(<span class="string">"#add"</span>).click(function() &#123;</span><br><span class="line">$(<span class="string">"#add_form"</span>).submit();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">"#reset"</span>).click(function() &#123;</span><br><span class="line">$(window).attr(<span class="string">'location'</span>, <span class="string">'add.jsp'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>解决写入数据库乱码问题，编辑db.properties文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/mystore?useUnicode=true&amp;characterEncoding=utf-8</span></span><br></pre></td></tr></table></figure><p>反转集合（使得最后添加的显示到最开头）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxq.web;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/GoodsListServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsListServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"GoodsListServlet"</span>);</span><br><span class="line"><span class="comment">// 调用服务层</span></span><br><span class="line">GoodsService goodsService = <span class="keyword">new</span> GoodsService();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">List&lt;Goods&gt; allGoods = goodsService.getAllGoods();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反转集合</span></span><br><span class="line">Collections.reverse(allGoods);</span><br><span class="line"></span><br><span class="line"><span class="comment">// System.out.println(allGoods);</span></span><br><span class="line"><span class="comment">// 把数据写到request域</span></span><br><span class="line">request.setAttribute(<span class="string">"allGoods"</span>, allGoods);</span><br><span class="line"><span class="comment">// 转发</span></span><br><span class="line">request.getRequestDispatcher(<span class="string">"admin/main.jsp"</span>).forward(request, response);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编辑商品"><a href="#编辑商品" class="headerlink" title="编辑商品"></a>编辑商品</h2><p><img src="/2020/02/16/web-server-note-13/7.png" alt></p><p>创建GoodsEditUIServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxq.web;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/GoodsEditUIServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsEditUIServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"GoodsEditUIServlet"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改main.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;li&gt;&lt;a href=<span class="string">"$&#123;ctx &#125;/GoodsEditUIServlet?id=$&#123;goods.id&#125;"</span>&gt;&lt;img <span class="class"><span class="keyword">class</span></span>=<span class="string">"img_icon"</span></span><br><span class="line">src="$&#123;ctx &#125;/admin/images/edit_icon.png" alt=""&gt;&lt;/a&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure><p>用Chrome查看地址是否包含了id参数</p><p>GoodsEditUIServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxq.web;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/GoodsEditUIServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsEditUIServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// 接收id</span></span><br><span class="line">String id = request.getParameter(<span class="string">"id"</span>);</span><br><span class="line"><span class="comment">// System.out.println("GoodsEditUIServlet"+id);</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 1.获取当前商品</span></span><br><span class="line">GoodsService goodsService = <span class="keyword">new</span> GoodsService();</span><br><span class="line">Goods goods = goodsService.getGoodsWithId(id);</span><br><span class="line">System.out.println(goods);</span><br><span class="line"><span class="comment">// 把商品写入request域中</span></span><br><span class="line">request.setAttribute(<span class="string">"goods"</span>, goods);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.获取所有分类</span></span><br><span class="line">CategoryService categoryService = <span class="keyword">new</span> CategoryService();</span><br><span class="line">List&lt;Category&gt; allCategory = categoryService.findCategory();</span><br><span class="line">request.setAttribute(<span class="string">"allCategory"</span>, allCategory);</span><br><span class="line"><span class="comment">// 3.转发到JSP页面</span></span><br><span class="line">request.getRequestDispatcher(<span class="string">"/admin/edit.jsp"</span>).forward(request, response);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改edit.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"item1"</span>&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">        &lt;span&gt;所属分类：&lt;/span&gt;</span><br><span class="line">                 &lt;select id=<span class="string">"categorySel"</span> name=<span class="string">"cid"</span>&gt;</span><br><span class="line">                 &lt;c:forEach items=<span class="string">"$&#123;allCategory &#125;"</span> <span class="keyword">var</span>=<span class="string">"category"</span>&gt;</span><br><span class="line">                  &lt;option value="$&#123;category.cid &#125;"&gt;$&#123;category.cname &#125;&lt;/option&gt;</span><br><span class="line">                 &lt;/c:forEach&gt;</span><br><span class="line">                 &lt;/select&gt;</span><br><span class="line">                 &amp;nbsp;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;div&gt;</span><br><span class="line">        &lt;span&gt;是否热门：&lt;/span&gt;</span><br><span class="line">                 &lt;select id=<span class="string">"isHotSel"</span> name=<span class="string">"is_hot"</span>&gt;</span><br><span class="line">                    &lt;!-- 让value的值等于商品is_hot的option成为选中状态 --&gt;</span><br><span class="line">                    &lt;option value="0"&gt;否&lt;/option&gt;</span><br><span class="line">                    &lt;option value="1"&gt;是&lt;/option&gt;</span><br><span class="line">                 &lt;/select&gt;</span><br><span class="line">        &lt;/div&gt;        </span><br><span class="line">                 </span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"item1"</span>&gt;</span><br><span class="line">                &lt;span&gt;商品图片：&lt;/span&gt;</span><br><span class="line">                &lt;input type=<span class="string">"file"</span> name=<span class="string">"image"</span> /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"item1 item_desc"</span>&gt;</span><br><span class="line">            &lt;span&gt;商品描述：&lt;/span&gt;</span><br><span class="line">         &lt;textarea  id="desc" name="gdesc" rows="4" cols="50"&gt;$&#123;goods.gdesc &#125;&lt;/textarea&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;button class="am-btn am-btn-default" type="button" id="edit"&gt;更新&lt;/button&gt;</span><br><span class="line">        &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line">        &lt;button class="am-btn am-btn-default" type="button" id="reset"&gt;重置&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">   &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>创建GoodsEditServlet<br>修改edit.jsp 关联提交表单</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"$&#123;ctx &#125;/GoodsEditServlet"</span> method=<span class="string">"post"</span> id=<span class="string">"edit_form"</span> style=<span class="string">"background: none; width: 700px;"</span>&gt;</span><br></pre></td></tr></table></figure><p>edit.jsp的form表单时提交获取id的技巧</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"text"</span>  name=<span class="string">"id"</span> value=<span class="string">"$&#123;goods.id &#125;"</span> style=<span class="string">"display:none"</span>&gt;</span><br></pre></td></tr></table></figure><p>GoodsEditServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxq.web;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/GoodsEditServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsEditServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// 设置字符集 post</span></span><br><span class="line">request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line"><span class="comment">// System.out.println("GoodsEditServlet");</span></span><br><span class="line"><span class="comment">// 1.获取所有参数</span></span><br><span class="line">Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line"><span class="comment">// 2.封装成Goods对象</span></span><br><span class="line">Goods goods = <span class="keyword">new</span> Goods();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">BeanUtils.populate(goods, parameterMap);</span><br><span class="line">System.out.println(goods);</span><br><span class="line"><span class="comment">// 3.根据id更新数据</span></span><br><span class="line"><span class="comment">// 4.调用服务层 更新数据</span></span><br><span class="line">GoodsService goodsService = <span class="keyword">new</span> GoodsService();</span><br><span class="line">goods.setImage(<span class="string">"goods_10.png"</span>);</span><br><span class="line">goodsService.updateGoods(goods);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.跳转mian.jsp</span></span><br><span class="line">request.getRequestDispatcher(<span class="string">"GoodsListServlet"</span>).forward(request, response);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GoodsService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateGoods</span><span class="params">(Goods goods)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">goodsDao.updateGoods(goods);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GoodsDao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 4.修改指定商品</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateGoods</span><span class="params">(Goods goods)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">String sql = <span class="string">"update goods set name=?,price=?,image=? ,gdesc=?,is_hot=?,cid=? where id = ?"</span>;</span><br><span class="line">qr.update(sql,goods.getName(),goods.getPrice(),goods.getImage(),goods.getGdesc(),goods.getIs_hot(),goods.getCid(),goods.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改更新商品页面（读取当前商品的信息）<br>edit.jsp</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       </span><br><span class="line"> $(<span class="string">"#edit"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//让表单提交 GoodsEditServlet</span></span><br><span class="line">        <span class="comment">//获取表单  让其提交</span></span><br><span class="line">        $(<span class="string">"#edit_form"</span>).submit();</span><br><span class="line">  &#125;);</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//让value的值等于商品is_hot的option成为选中状态</span></span><br><span class="line"> $(<span class="string">"#isHotSel option[value=$&#123;goods.is_hot&#125;]"</span>).prop(<span class="string">"selected"</span>,<span class="literal">true</span>);</span><br><span class="line"> $(<span class="string">"#categorySel option[value=$&#123;goods.cid&#125;]"</span>).prop(<span class="string">"selected"</span>,<span class="literal">true</span>);</span><br><span class="line"> </span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><p>外层套一层$(function() 的原因是：等所有标签加载完毕，再去做执行里面的JQuery</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://study.163.com/course/introduction/1005981003.htm" target="_blank" rel="noopener">Java零基础到高级JavaWeb与项目</a></p>]]></content:encoded>
      
      <comments>https://aaronlinv.github.io/2020/02/16/web-server-note-13/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Web服务器笔记-开发模式</title>
      <link>https://aaronlinv.github.io/2020/02/16/web-server-note-12/</link>
      <guid>https://aaronlinv.github.io/2020/02/16/web-server-note-12/</guid>
      <pubDate>Sun, 16 Feb 2020 10:27:38 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;JavaEE开发模式&quot;&gt;&lt;a href=&quot;#JavaEE开发模式&quot; class=&quot;headerlink&quot; title=&quot;JavaEE开发模式&quot;&gt;&lt;/a&gt;JavaEE开发模式&lt;/h2&gt;&lt;p&gt;模式在开发过程中总结出的“套路”，总结出的一套约定俗成的设计模式&lt;/p&gt;
&lt;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="JavaEE开发模式"><a href="#JavaEE开发模式" class="headerlink" title="JavaEE开发模式"></a>JavaEE开发模式</h2><p>模式在开发过程中总结出的“套路”，总结出的一套约定俗成的设计模式</p><ul><li>model1模式<br>技术组成：JSP+JavaBean<br>弊端：<br>业务多时，导致JSP页面容易混乱</li><li>model2模式<br>技术组成：JSP+Servlet+JavaBean<br>优点：<br>开发中使用各个技术擅长的方面<br>Servlet擅长Java的业务代码<br>JSP擅长页面的展示<br>MVC：<br>Model:JavaBean 封装数据<br>View:JSP 页面展示<br>Controller:Servlet 获取数据，对数据进行封装，传递数据、指定页面显示<br><img src="/2020/02/16/web-server-note-12/1.png" alt="餐厅"><br><img src="/2020/02/16/web-server-note-12/1.png" alt="MVC"></li><li>三层架构<br>Web层 与客户端交互<br>Service层 复杂业务逻辑<br>DAO层 与数据库进行交互<br><img src="/2020/02/16/web-server-note-12/3.png" alt="三层餐厅"><br><img src="/2020/02/16/web-server-note-12/4.png" alt="三层"><br><img src="/2020/02/16/web-server-note-12/5.png" alt="三层架构逻辑"><h2 id="商品列表改写"><a href="#商品列表改写" class="headerlink" title="商品列表改写"></a>商品列表改写</h2>根据包来分层</li><li>com.it666.web GoodsServlet.java</li><li>com.it666.service GoodsService.java</li><li>com.it666.dao GoodsDao.java<br>原来GoodsServlet<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.it666.servlet;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/GoodsServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.连接数据库</span></span><br><span class="line">QueryRunner qr = <span class="keyword">new</span> QueryRunner(JDBCUtil.getDataSource());</span><br><span class="line">String sql = <span class="string">"select * from goods"</span>;</span><br><span class="line"><span class="comment">// 2.获取数据</span></span><br><span class="line">List&lt;Goods&gt; allGoods = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">allGoods = qr.query(sql, <span class="keyword">new</span> BeanListHandler&lt;Goods&gt;(Goods.class));</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(allGoods);</span><br><span class="line"><span class="comment">// 3. 把数据存到equest域</span></span><br><span class="line">request.setAttribute(<span class="string">"allGoods"</span>, allGoods);</span><br><span class="line"><span class="comment">// 4.转发到商品列表，转发时把request对象传入</span></span><br><span class="line">request.getRequestDispatcher(<span class="string">"/goods_list.jsp"</span>).forward(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>GoodsServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GoodsService goodsService = <span class="keyword">new</span> GoodsService();</span><br><span class="line">List&lt;Goods&gt; allGoods = goodsService.findAllGoods();</span><br></pre></td></tr></table></figure><p>GoodsService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.it666.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Goods&gt; <span class="title">findAllGoods</span><span class="params">()</span> </span>&#123;</span><br><span class="line">GoodsDao goodsDao = <span class="keyword">new</span> GoodsDao();</span><br><span class="line"><span class="keyword">return</span> goodsDao.findAllGoods();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GoodsDao</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.it666.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Goods&gt; <span class="title">findAllGoods</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 1.连接数据库</span></span><br><span class="line">QueryRunner qr = <span class="keyword">new</span> QueryRunner(JDBCUtil.getDataSource());</span><br><span class="line">String sql = <span class="string">"select * from goods"</span>;</span><br><span class="line"><span class="comment">// 2.获取数据</span></span><br><span class="line">List&lt;Goods&gt; allGoods = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">allGoods = qr.query(sql, <span class="keyword">new</span> BeanListHandler&lt;Goods&gt;(Goods.class));</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> allGoods;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在GoodsServlet最后加上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3. 把数据存到equest域</span></span><br><span class="line">request.setAttribute(<span class="string">"allGoods"</span>, allGoods);</span><br><span class="line"><span class="comment">// 4.转发到商品列表，转发时把request对象传入</span></span><br><span class="line">request.getRequestDispatcher(<span class="string">"/goods_list.jsp"</span>).forward(request, response);</span><br></pre></td></tr></table></figure><p>对GoodServlet进行测试</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://study.163.com/course/introduction/1005981003.htm" target="_blank" rel="noopener">Java零基础到高级JavaWeb与项目</a></p>]]></content:encoded>
      
      <comments>https://aaronlinv.github.io/2020/02/16/web-server-note-12/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
