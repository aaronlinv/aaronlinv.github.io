{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"themes/Lights/source/offline.html","path":"offline.html","modified":0,"renderable":1},{"_id":"themes/Lights/source/sw.js","path":"sw.js","modified":0,"renderable":1},{"_id":"themes/Lights/source/offline.svg","path":"offline.svg","modified":0,"renderable":1},{"_id":"themes/Lights/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/default.css","path":"css/default.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/old style.css","path":"css/old style.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/js/highlight.pack.js","path":"js/highlight.pack.js","modified":0,"renderable":1},{"_id":"themes/Lights/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/a11y-dark.css","path":"css/styles/a11y-dark.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/a11y-light.css","path":"css/styles/a11y-light.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/agate.css","path":"css/styles/agate.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/an-old-hope.css","path":"css/styles/an-old-hope.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/ascetic.css","path":"css/styles/ascetic.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/androidstudio.css","path":"css/styles/androidstudio.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/arduino-light.css","path":"css/styles/arduino-light.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/arta.css","path":"css/styles/arta.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/atelier-cave-dark.css","path":"css/styles/atelier-cave-dark.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/atelier-dune-dark.css","path":"css/styles/atelier-dune-dark.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/atelier-cave-light.css","path":"css/styles/atelier-cave-light.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/atelier-dune-light.css","path":"css/styles/atelier-dune-light.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/atelier-estuary-dark.css","path":"css/styles/atelier-estuary-dark.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/atelier-estuary-light.css","path":"css/styles/atelier-estuary-light.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/atelier-forest-light.css","path":"css/styles/atelier-forest-light.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/atelier-forest-dark.css","path":"css/styles/atelier-forest-dark.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/atelier-heath-dark.css","path":"css/styles/atelier-heath-dark.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/atelier-heath-light.css","path":"css/styles/atelier-heath-light.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/atelier-lakeside-dark.css","path":"css/styles/atelier-lakeside-dark.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/atelier-lakeside-light.css","path":"css/styles/atelier-lakeside-light.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/atelier-plateau-dark.css","path":"css/styles/atelier-plateau-dark.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/atelier-plateau-light.css","path":"css/styles/atelier-plateau-light.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/atelier-savanna-dark.css","path":"css/styles/atelier-savanna-dark.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/atelier-savanna-light.css","path":"css/styles/atelier-savanna-light.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/atelier-seaside-dark.css","path":"css/styles/atelier-seaside-dark.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/atelier-seaside-light.css","path":"css/styles/atelier-seaside-light.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/atelier-sulphurpool-dark.css","path":"css/styles/atelier-sulphurpool-dark.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/atelier-sulphurpool-light.css","path":"css/styles/atelier-sulphurpool-light.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/atom-one-dark-reasonable.css","path":"css/styles/atom-one-dark-reasonable.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/atom-one-dark.css","path":"css/styles/atom-one-dark.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/atom-one-light.css","path":"css/styles/atom-one-light.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/brown-paper.css","path":"css/styles/brown-paper.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/color-brewer.css","path":"css/styles/color-brewer.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/brown-papersq.png","path":"css/styles/brown-papersq.png","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/codepen-embed.css","path":"css/styles/codepen-embed.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/darcula.css","path":"css/styles/darcula.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/dark.css","path":"css/styles/dark.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/default.css","path":"css/styles/default.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/darkula.css","path":"css/styles/darkula.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/docco.css","path":"css/styles/docco.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/foundation.css","path":"css/styles/foundation.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/github-gist.css","path":"css/styles/github-gist.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/dracula.css","path":"css/styles/dracula.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/github.css","path":"css/styles/github.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/far.css","path":"css/styles/far.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/googlecode.css","path":"css/styles/googlecode.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/gml.css","path":"css/styles/gml.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/gruvbox-dark.css","path":"css/styles/gruvbox-dark.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/grayscale.css","path":"css/styles/grayscale.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/gruvbox-light.css","path":"css/styles/gruvbox-light.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/hybrid.css","path":"css/styles/hybrid.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/hopscotch.css","path":"css/styles/hopscotch.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/idea.css","path":"css/styles/idea.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/kimbie.dark.css","path":"css/styles/kimbie.dark.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/isbl-editor-light.css","path":"css/styles/isbl-editor-light.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/ir-black.css","path":"css/styles/ir-black.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/isbl-editor-dark.css","path":"css/styles/isbl-editor-dark.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/kimbie.light.css","path":"css/styles/kimbie.light.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/lightfair.css","path":"css/styles/lightfair.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/magula.css","path":"css/styles/magula.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/monokai-sublime.css","path":"css/styles/monokai-sublime.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/mono-blue.css","path":"css/styles/mono-blue.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/nord.css","path":"css/styles/nord.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/monokai.css","path":"css/styles/monokai.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/obsidian.css","path":"css/styles/obsidian.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/pojoaque.css","path":"css/styles/pojoaque.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/ocean.css","path":"css/styles/ocean.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/paraiso-dark.css","path":"css/styles/paraiso-dark.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/paraiso-light.css","path":"css/styles/paraiso-light.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/purebasic.css","path":"css/styles/purebasic.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/pojoaque.jpg","path":"css/styles/pojoaque.jpg","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/qtcreator_dark.css","path":"css/styles/qtcreator_dark.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/routeros.css","path":"css/styles/routeros.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/qtcreator_light.css","path":"css/styles/qtcreator_light.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/railscasts.css","path":"css/styles/railscasts.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/rainbow.css","path":"css/styles/rainbow.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/school-book.css","path":"css/styles/school-book.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/school-book.png","path":"css/styles/school-book.png","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/solarized-dark.css","path":"css/styles/solarized-dark.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/shades-of-purple.css","path":"css/styles/shades-of-purple.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/solarized-light.css","path":"css/styles/solarized-light.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/tomorrow-night-eighties.css","path":"css/styles/tomorrow-night-eighties.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/tomorrow-night-bright.css","path":"css/styles/tomorrow-night-bright.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/tomorrow-night-blue.css","path":"css/styles/tomorrow-night-blue.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/sunburst.css","path":"css/styles/sunburst.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/xcode.css","path":"css/styles/xcode.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/tomorrow-night.css","path":"css/styles/tomorrow-night.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/vs2015.css","path":"css/styles/vs2015.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/tomorrow.css","path":"css/styles/tomorrow.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/vs.css","path":"css/styles/vs.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/images/avatar@2x.jpg","path":"images/avatar@2x.jpg","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/xt256.css","path":"css/styles/xt256.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/css/styles/zenburn.css","path":"css/styles/zenburn.css","modified":0,"renderable":1},{"_id":"themes/Lights/source/js/gitment.browser.js","path":"js/gitment.browser.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/Lights/LICENSE","hash":"1aa85c4fae77129345ed829b6652c6a54e34f1b7","modified":1592016934940},{"_id":"themes/Lights/.DS_Store","hash":"aca025f9e145bebced07ae8c5638200bd4474685","modified":1592016934939},{"_id":"themes/Lights/README.md","hash":"1bf2d71c5374229fba6f9ee1243d7c49e568afb1","modified":1592016934941},{"_id":"themes/Lights/_config.yml","hash":"9cf2549a97b3cfe805afda1e82a2b94990a4a2a2","modified":1592032639924},{"_id":"source/about/index.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1592016934938},{"_id":"source/tags/index.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1592016934938},{"_id":"source/_posts/centos7-initial-configuration.md","hash":"c8d9be7703f0e52dc529909a71a8c204b7f89f3e","modified":1597053642658},{"_id":"source/_posts/big-data.md","hash":"ef53a62a9519a0348dede2ba558e2b1c484ad872","modified":1592016934711},{"_id":"source/_posts/front-end.md","hash":"7bda25d07c2f80def65733ac05e0a465d814dd25","modified":1592016934715},{"_id":"source/_posts/about-encode.md","hash":"739f929d424dcb3edce9e112152cccc8fb516313","modified":1592016934695},{"_id":"source/_posts/android-beginner.md","hash":"4737d540ca5aa9cdd2dc3de10188153c5f23bb1c","modified":1592016934696},{"_id":"source/_posts/git-note.md","hash":"36cfeb0baf48fe382bab7a13320ee2f395297835","modified":1592016934728},{"_id":"source/_posts/android-note.md","hash":"287c4525ba8b2a9b85e1b8fff2cabbc252f61851","modified":1592016934697},{"_id":"source/_posts/java-note-1.md","hash":"4b90c25b8bfd12235d772d3d21e4a7388e23d5f7","modified":1592016934733},{"_id":"source/_posts/java-chinese-programing.md","hash":"8d169f05c5287b9af405d7b58f7653ff99b8244c","modified":1592016934733},{"_id":"source/_posts/hello-world.md","hash":"9d8b6524804bdad1cc70e1a90ca7594b2efbe9c9","modified":1592016934732},{"_id":"source/_posts/java-note-2.md","hash":"27a53e4313eaa3a6a8c4c72d1ec5b0bbee445252","modified":1592016934734},{"_id":"source/_posts/java-note-3.md","hash":"747fc1afaeff67c55d4b76fdad1b1048a4239efc","modified":1592016934735},{"_id":"source/_posts/java-note-4.md","hash":"abff7bc31f0f8df25a8333d1752a21b4f160da88","modified":1592016934739},{"_id":"source/_posts/java-note-5.md","hash":"2b0cf234b18877ea92944316478cabe89de7b0de","modified":1592016934739},{"_id":"source/_posts/java-note.md","hash":"08363e7b2f511f0d5ff4855511b513e232ec231f","modified":1592016934742},{"_id":"source/_posts/jdbc-note-2.md","hash":"ec45a7cfa7d240895fddfa48df57d5c754d143b2","modified":1592016934751},{"_id":"source/_posts/jdbc-note-1.md","hash":"8fb9d8427954679771a87752586718ac42fd09ed","modified":1592016934743},{"_id":"source/_posts/jdbc-note-4.md","hash":"641ce3791b784e9974d8fcb2c4232cff5a1e4b0c","modified":1592016934776},{"_id":"source/_posts/jdbc-note-3.md","hash":"5159e23a591088be3a4848db34b7c0faff9d2906","modified":1592016934764},{"_id":"source/_posts/jdbc-note-5.md","hash":"d743802c6c39028d0aab689236cf68d274fb1ab4","modified":1592016934804},{"_id":"source/_posts/linux-note.md","hash":"0e091943300f08c21294141aa7f88de729d157f2","modified":1592016934806},{"_id":"source/_posts/mybatis-note-1.md","hash":"49cd1ba13a2753474719bac146809f6a2277ed57","modified":1592016934807},{"_id":"source/_posts/mysql-note-1.md","hash":"c30325b4815d939c34f9f7edc8406f427142298b","modified":1592016934808},{"_id":"source/_posts/linux-ssh.md","hash":"a7186487ccbd6c33778b6bfd9ebf297b911bd9e5","modified":1592016934806},{"_id":"source/_posts/linux-centos7.md","hash":"ffa234fbf2031bcc3a0ea238692b9c500b1909ae","modified":1597046791685},{"_id":"source/_posts/mysql-note-2.md","hash":"c293bd492341013e5f450648716399e21313596b","modified":1592016934810},{"_id":"source/_posts/mysql-note-5.md","hash":"7ef2124f051054ead31578eccad5fe9c1bce1f16","modified":1592016934815},{"_id":"source/_posts/mysql-note-4.md","hash":"6a671fbdfa3f8a3931a2ae4f6b1efc26708bc4a7","modified":1592016934814},{"_id":"source/_posts/semantic-ui.md","hash":"0028cb99d8d5b2f9ff74d45a89dc27c92f1981d6","modified":1598001902809},{"_id":"source/_posts/python-web-spider.md","hash":"317bd63ec73ede96a397176f2d7d209a76acb3bf","modified":1592016934816},{"_id":"source/_posts/nonviolent-communication.md","hash":"97cc37fbaa3a164c7b411a8f178b06be498648f3","modified":1596555580088},{"_id":"source/_posts/springmvc-note-1.md","hash":"2896ca0bce51eefdc47444e41af353ba35437747","modified":1592016934831},{"_id":"source/_posts/web-server-note-10.md","hash":"c7f0c56e2b972a5e286668adfd1128094ca45c6e","modified":1592016934836},{"_id":"source/_posts/web-server-note-1.md","hash":"cb8c23f4ed1d3e33544bc73b023440ff3f42c914","modified":1592016934832},{"_id":"source/_posts/web-server-note-11.md","hash":"f5ca72b876175710e6097ef0dcedd8e5c549a939","modified":1592016934839},{"_id":"source/_posts/web-server-note-12.md","hash":"bef51f45f11445f926ea9c38ba30793b9ebdbe60","modified":1592016934840},{"_id":"source/_posts/web-server-note-17.md","hash":"c55edd7dbbc96765c3df3b2cc090b80e68c5b83d","modified":1592016934872},{"_id":"source/_posts/web-server-note-15.md","hash":"2fe7f611d84e12861a10aac1861d1dcd45cea42a","modified":1592016934868},{"_id":"source/_posts/web-server-note-13.md","hash":"f3d3137d85330a5ea145b5041b216b79aa6b9d90","modified":1592016934855},{"_id":"source/_posts/web-server-note-14.md","hash":"dc2d65a1f003f377c6a0af346c4854616c30232c","modified":1592016934867},{"_id":"source/_posts/web-server-note-16.md","hash":"3af32c1b406f953df58b41596b5ba42e9edaa54d","modified":1592016934868},{"_id":"source/_posts/web-server-note-2.md","hash":"da0cfaa744b246b20565094072a62509a3b65dbb","modified":1592016934878},{"_id":"source/_posts/web-server-note-3.md","hash":"17122d77fe7bc9b96945ee43a750f3610ded91c8","modified":1592016934898},{"_id":"source/_posts/web-server-note-4.md","hash":"448174f2135aca02261ecc1e0e0fa482081f2199","modified":1592016934909},{"_id":"source/_posts/web-server-note-5.md","hash":"5b345ac41e0ee3ea143a962a66772547d359ac1a","modified":1592016934912},{"_id":"source/_posts/web-server-note-6.md","hash":"a86b8ea2043166960ae44c75d29c6fab65085684","modified":1592016934915},{"_id":"source/_posts/web-server-note-7.md","hash":"6aa01ff4855aab76fa7964af09ce39cf7167c7aa","modified":1592016934918},{"_id":"source/_posts/web-server-note-8.md","hash":"7ac1786bc3f3e499f73cd271999ddfb92f0773fb","modified":1592016934923},{"_id":"source/_posts/web-server-note-9.md","hash":"e91f4d980294c672617aa85e7ab4201a7782e938","modified":1592016934926},{"_id":"themes/Lights/languages/zh-CN.yml","hash":"69b8ead1b2a7d283bc8c1ed0556b4fcf115ccef9","modified":1592016934945},{"_id":"themes/Lights/languages/default.yml","hash":"204a77f94193b628991e056dc781fe08b949b2a9","modified":1592016934945},{"_id":"themes/Lights/layout/index.ejs","hash":"86714a3d1d79d82a7a8118bf603eda7b44461eba","modified":1592016934956},{"_id":"themes/Lights/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1592016934955},{"_id":"themes/Lights/layout/.DS_Store","hash":"08a1b17f850059d18759b3e71604904807708396","modified":1592016934946},{"_id":"themes/Lights/layout/category.ejs","hash":"0bf6addbd053c2739e57873b663f8c33a334ed2c","modified":1592016934956},{"_id":"themes/Lights/layout/layout.ejs","hash":"863188feee934641a68eaa06fbf8a6a7e2f800af","modified":1592016934957},{"_id":"themes/Lights/layout/post.ejs","hash":"70cbc9854655773cc6ba84eecaaf330fed430465","modified":1592016934958},{"_id":"themes/Lights/layout/page.ejs","hash":"70cbc9854655773cc6ba84eecaaf330fed430465","modified":1592016934958},{"_id":"themes/Lights/layout/tag.ejs","hash":"3f206218c9db05591705661280eb609f31d77f8c","modified":1592016934959},{"_id":"themes/Lights/source/.DS_Store","hash":"ee833b63a9bc7d38ddb62c6128d8cfe9d26bdea9","modified":1592016934960},{"_id":"themes/Lights/source/offline.html","hash":"7ce4055d763c7e46a477cbc8eccf86787acea42e","modified":1592016935041},{"_id":"themes/Lights/source/sw.js","hash":"4304e73772de95284e8761d48b9b25f4234cea56","modified":1592016935042},{"_id":"themes/Lights/source/offline.svg","hash":"8a7b4ae2f5a7c01ceb00497a1e4be14d3a5bbf91","modified":1592016935041},{"_id":"themes/Lights/source/favicon.ico","hash":"f27655ad71d13136df6fbc5278b44c55c620221c","modified":1592016935034},{"_id":"themes/Lights/demo.png","hash":"0dca783cf968a9651e47712ed5982752ce427071","modified":1592016934944},{"_id":"source/_posts/android-note/01_android_web.png","hash":"adf065004838fdbe4fe999282bf9e0ced1e47976","modified":1592016934709},{"_id":"source/_posts/big-data/3.png","hash":"e0f7ff18a193ed5bc4105098235e98fc49110aa4","modified":1592016934715},{"_id":"source/_posts/front-end/1.png","hash":"42c1d34ce482de833f7aa915c46c6320c6174ae7","modified":1592016934716},{"_id":"source/_posts/centos7-initial-configuration/01.png","hash":"eae51897a33da815493713b2fc1a13fccc795aa8","modified":1597053157682},{"_id":"source/_posts/front-end/3.png","hash":"0b0cb747b3c08bbcdf7b63e926d7b9eb7e5f6451","modified":1592016934719},{"_id":"source/_posts/git-note/2.png","hash":"6a602324638e89afc026316b39684b679c8210f3","modified":1592016934730},{"_id":"source/_posts/git-note/1.png","hash":"9a46bfb5c4432b44b46dc52de76131b774ee42ff","modified":1592016934729},{"_id":"source/_posts/git-note/3.png","hash":"93d50c2027e1ee1d2a419b5fdf75c8c06113e96f","modified":1592016934731},{"_id":"source/_posts/java-note-2/1.png","hash":"7e8d5c90f1f1d60ac2eaf13b4b10c6bb48724ec3","modified":1592016934735},{"_id":"source/_posts/java-note-5/2.png","hash":"b1d74e2b3c98cd20d5d335b500fbda43705f328d","modified":1592016934741},{"_id":"source/_posts/java-note-5/3.png","hash":"9cbd4af76bce250a204930a3d20f57aaefb0f197","modified":1592016934742},{"_id":"source/_posts/jdbc-note-1/1.png","hash":"19411ff4dc07ed8ba11e14f47171b27d51ead1d6","modified":1592016934744},{"_id":"source/_posts/jdbc-note-1/7.png","hash":"b3b35c52e60ae067ee40eafe4d86b0efa31eeee9","modified":1592016934749},{"_id":"source/_posts/jdbc-note-1/6.png","hash":"079722d35cbea375b32162cd15961b0643cc0ef3","modified":1592016934749},{"_id":"source/_posts/jdbc-note-1/4.png","hash":"d0c7c3c8ebc26da86c6d3a7dfa3d99ff8e234aa3","modified":1592016934747},{"_id":"source/_posts/jdbc-note-2/1.png","hash":"d78beec5f7caf266ece96f2809133d2bcfc16aae","modified":1592016934752},{"_id":"source/_posts/jdbc-note-3/1.png","hash":"4ddaaba35eb78b5a33196afb051b392c6ed85d02","modified":1592016934764},{"_id":"source/_posts/jdbc-note-3/10.png","hash":"bcef707fa59a8190590d571746504714bb4b0800","modified":1592016934765},{"_id":"source/_posts/jdbc-note-3/3.png","hash":"c8de97fd3d0acc5317295176e1aad388ec3124de","modified":1592016934768},{"_id":"source/_posts/jdbc-note-3/8.png","hash":"2bda1bad2d4834639a25c7edd9ec95d2dc38ff45","modified":1592016934775},{"_id":"source/_posts/jdbc-note-4/11.png","hash":"7671cc14c1e4330b0e8cd896f302777599ae689b","modified":1592016934782},{"_id":"source/_posts/jdbc-note-4/12.png","hash":"011b73aab783bd0a140fc1890e4fb2933d3edb28","modified":1592016934782},{"_id":"source/_posts/jdbc-note-4/17.png","hash":"ee8a8dd6071451685db833349fa081be78f87494","modified":1592016934789},{"_id":"source/_posts/jdbc-note-4/18.png","hash":"afdec24b22f52d9795fe9616267aa1678db7c501","modified":1592016934790},{"_id":"source/_posts/jdbc-note-4/19.png","hash":"7025850203f1fd3773648ea30d5fb8d0d0257968","modified":1592016934790},{"_id":"source/_posts/jdbc-note-4/20.png","hash":"62361cbe0e032c482f3714051c38190a961609ca","modified":1592016934793},{"_id":"source/_posts/jdbc-note-4/21.png","hash":"ec7f171e5dba2e6890f9328e2d78259e9636db7e","modified":1592016934793},{"_id":"source/_posts/jdbc-note-4/22.png","hash":"359a6a9d733305df8eb6c7410538cfb47c6fde2d","modified":1592016934794},{"_id":"source/_posts/jdbc-note-4/6.png","hash":"4f56374b28d69cf599e1b28080a405ffda6bd1e8","modified":1592016934800},{"_id":"source/_posts/jdbc-note-4/8.png","hash":"b6a5969ac029d6b9f11a3c9605178afe52e774e3","modified":1592016934802},{"_id":"source/_posts/jdbc-note-5/1.png","hash":"2631eb0bc937b149a670f0457c0b3cc0ddc54f7e","modified":1592016934805},{"_id":"source/_posts/linux-centos7/04.png","hash":"13797cac1eb4ace0d3f4bb2e1ab3b8b43b525701","modified":1597042997882},{"_id":"source/_posts/mysql-note-1/2.png","hash":"1f695435e14643626071d5e47e24942d260d064a","modified":1592016934809},{"_id":"source/_posts/mysql-note-2/2.png","hash":"26f661b3b2a156693e79b79927c4ca3a5f1b5dea","modified":1592016934812},{"_id":"source/_posts/linux-centos7/06.png","hash":"c13b77c72b42311f10f96996ffe29550b0add83e","modified":1597044380773},{"_id":"source/_posts/mysql-note-2/1.png","hash":"66937cdae10eb6c70d0ff9a3061d4e4c5e5273f3","modified":1592016934811},{"_id":"source/_posts/mysql-note-2/3.png","hash":"3796ca732a4dbcd267bd92f811d92ce1b858857e","modified":1592016934813},{"_id":"source/_posts/python-web-spider/3.png","hash":"3028de8d06c5207c228722200be1c0d7bec310db","modified":1592016934824},{"_id":"source/_posts/python-web-spider/5.png","hash":"19ba15ec627ee8ba5fde584a9e4b1246868ced93","modified":1592016934826},{"_id":"source/_posts/python-web-spider/8.png","hash":"fc8b0e94b8b8ef6c837186373505a2086d5cf7d6","modified":1592016934830},{"_id":"source/_posts/web-server-note-1/1.png","hash":"5f15e882fba6bae1cd12c034c8f5c8c0dd7c4d5d","modified":1592016934833},{"_id":"source/_posts/web-server-note-1/4.png","hash":"582d9906002d59782bfdba20fff5c71a93c398b6","modified":1592016934835},{"_id":"source/_posts/web-server-note-1/3.png","hash":"618eba0fb480b9fbe3a33b0cec3ba7ec980d5d17","modified":1592016934834},{"_id":"source/_posts/web-server-note-1/2.png","hash":"6f8179d217c0e961a21dd574af303287f84a1383","modified":1592016934834},{"_id":"source/_posts/web-server-note-13/4.png","hash":"dad2ce7a9a5831de754d072a437bc597d8272f8c","modified":1592016934862},{"_id":"source/_posts/web-server-note-13/5.png","hash":"34820402d65ef793d00109f4452adac67d26e5eb","modified":1592016934863},{"_id":"source/_posts/web-server-note-2/2.png","hash":"c939e8d12b186b47a63346da4a68c9c159b8d60c","modified":1592016934889},{"_id":"source/_posts/web-server-note-2/7.png","hash":"c5df0f542225990615e42628ac9b1977cc60a7b6","modified":1592016934895},{"_id":"source/_posts/web-server-note-2/5.png","hash":"32abd3d7114eb1383ad7f62015527263a1f39c03","modified":1592016934893},{"_id":"source/_posts/web-server-note-3/2.png","hash":"676c0461b47e25f921207da6bb543ca849ad6de9","modified":1592016934900},{"_id":"source/_posts/web-server-note-2/8.png","hash":"507a4f88bbb092ba0c70b3b9a847c7d3963c8b9e","modified":1592016934896},{"_id":"source/_posts/web-server-note-2/9.png","hash":"29f638609ad9d75d044b75a95e8b008babecd7aa","modified":1592016934897},{"_id":"source/_posts/web-server-note-3/4.png","hash":"a23297fddd962a3da817d53dc3364b9c6cac79a2","modified":1592016934904},{"_id":"source/_posts/web-server-note-3/1.png","hash":"96e2b56fdfe2a3e0f803f0f126a5d64d9f398e07","modified":1592016934899},{"_id":"source/_posts/web-server-note-3/5.png","hash":"14f809bf869dbfaeccc1c2ee2cc755ea6aa8cfbb","modified":1592016934905},{"_id":"source/_posts/web-server-note-3/6.png","hash":"98e0c32e3c40a6c6e94abf230edaa0bce4f4c3c3","modified":1592016934906},{"_id":"source/_posts/web-server-note-4/1.png","hash":"3e901aabce7e5a4dffe0b6f146a241ff88430445","modified":1592016934910},{"_id":"source/_posts/web-server-note-3/7.png","hash":"e1aee733267ba5fe8b30ed14d2f9c0470867ae6f","modified":1592016934907},{"_id":"source/_posts/web-server-note-5/1.png","hash":"19fbf5570a4641a38e96ed2a6c991a63c15ecf42","modified":1592016934914},{"_id":"source/_posts/web-server-note-7/2.png","hash":"5ccc43e2c99b1ffcc1657edb044a7485d42581cd","modified":1592016934922},{"_id":"source/_posts/web-server-note-9/2.png","hash":"2f39e32f63e32a2b2528579d390e938ca5fe2b10","modified":1592016934928},{"_id":"source/_posts/web-server-note-9/1.png","hash":"2139d88978a83b50ffb14d849180cb57a2070612","modified":1592016934927},{"_id":"source/_posts/web-server-note-9/5.png","hash":"dc99222c237282b09e2e836433c12ea59c69d7a8","modified":1592016934934},{"_id":"themes/Lights/layout/_partial/archive-post.ejs","hash":"3cafb8b0a89c67e2783b7b375340aa8348541f91","modified":1592016934947},{"_id":"themes/Lights/layout/_partial/article.ejs","hash":"5f7b272e8c8aa37d30ab0078945c93f37f0fb320","modified":1592016934948},{"_id":"themes/Lights/layout/_partial/comment.ejs","hash":"bbcd6eac8a8e940c9a7778d40dde0014c15639fc","modified":1592016934949},{"_id":"themes/Lights/layout/_partial/archive.ejs","hash":"721e42a0ce083dd7cfa138b89eb5fdc306511e3e","modified":1592016934948},{"_id":"themes/Lights/layout/_partial/google-analytics.ejs","hash":"b7b426e424f4ac9b3e12de9e2050c9e9f46dca1e","modified":1592016934951},{"_id":"themes/Lights/layout/_partial/footer.ejs","hash":"70a3172c7faa24fb7aca1e172a0c388284e6485f","modified":1592016934950},{"_id":"themes/Lights/layout/_partial/nav.ejs","hash":"b249b324d79ebe3f9e12231d283dbc598ec50cca","modified":1592031260163},{"_id":"themes/Lights/layout/_partial/head.ejs","hash":"1e0ed1162055e7a8c2f34ce861d36a8240482f60","modified":1592031808157},{"_id":"themes/Lights/layout/_partial/last.ejs","hash":"7367e9327a839ec83087bb9dd87089f54fc3ae01","modified":1592016934952},{"_id":"themes/Lights/layout/_partial/pagination.ejs","hash":"53116dc60292bf3e54ded96c1a258b37f99898d5","modified":1592016934953},{"_id":"themes/Lights/layout/_partial/profile.ejs","hash":"33fb4eff1c09800fea52ca3398215c0ddd81abd1","modified":1592016934954},{"_id":"themes/Lights/layout/_partial/title.ejs","hash":"fb57a18476eb90113309cefeeed9e57eef5b0613","modified":1592016934955},{"_id":"themes/Lights/source/css/.DS_Store","hash":"a046f87642084865692477513bd7f9c2e84a735d","modified":1592016934960},{"_id":"themes/Lights/source/css/style.styl","hash":"9da93cc3c1caf32d234de899a3910ea12fe58216","modified":1592016934977},{"_id":"themes/Lights/source/css/default.css","hash":"4400f62c71fbb40f011651682ac2507a9d82ae7c","modified":1592016934970},{"_id":"themes/Lights/source/css/old style.css","hash":"a054377b64ca50717bf4efb3654009c8f094c4d6","modified":1592016934971},{"_id":"themes/Lights/source/image/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1592016935035},{"_id":"themes/Lights/source/js/highlight.pack.js","hash":"3a8202bed844381c739df3339d139e9b39b26311","modified":1592016935040},{"_id":"source/_posts/android-note/02_coolapk.png","hash":"b28c729859ec13bd831987a893079a0e481c2d46","modified":1592016934710},{"_id":"source/_posts/big-data/2.png","hash":"910353f59b8fd056cf95b08d058fc803915ac224","modified":1592016934714},{"_id":"source/_posts/front-end/4.png","hash":"e6db47e34f35d093b1d94867cb60e9bb874e3ec4","modified":1592016934720},{"_id":"source/_posts/java-note-5/1.png","hash":"75dca8d345a0b8b3c3f2f1bfbebeb2962d8c097e","modified":1592016934740},{"_id":"source/_posts/jdbc-note-1/2.png","hash":"bb2b30c700ee991f3017e049a9c9d9f954afd630","modified":1592016934745},{"_id":"source/_posts/jdbc-note-1/3.png","hash":"e9a2d6c83113c3cd1ae350266b3081a283c568ab","modified":1592016934746},{"_id":"source/_posts/jdbc-note-1/5.png","hash":"de9fd44f367d4dd710f5beb38c12864354f11c04","modified":1592016934748},{"_id":"source/_posts/jdbc-note-2/5.png","hash":"8e9fc7e9b6b2524f725abfae8a1a5c5c6c3782ba","modified":1592016934759},{"_id":"source/_posts/jdbc-note-2/6.png","hash":"b8a46d6ea8d07ec97ef4965532f02892a81ddc01","modified":1592016934760},{"_id":"source/_posts/jdbc-note-2/7.png","hash":"e92612600fe950bb370f47ce986781ab6857663f","modified":1592016934761},{"_id":"source/_posts/jdbc-note-3/11.png","hash":"f77a32800b3e1ae0d824b4bcd2559f07ec95fb4e","modified":1592016934766},{"_id":"source/_posts/jdbc-note-3/5.png","hash":"36a3e7fd35b155c71322bbc2f6785b2f02f7eed9","modified":1592016934771},{"_id":"source/_posts/jdbc-note-3/2.png","hash":"db9c684c00bd0b6691aba7d22b030b96d45a9ea3","modified":1592016934767},{"_id":"source/_posts/jdbc-note-3/4.png","hash":"f1e6dd6ca6b6585fee6d8729ad8542ffb42e6463","modified":1592016934769},{"_id":"source/_posts/jdbc-note-3/6.png","hash":"89f5670f6c5516d1c884dc46f1400df5232e7f81","modified":1592016934773},{"_id":"source/_posts/jdbc-note-3/9.png","hash":"931b75987390e41e0678d10284c755b05bea0f45","modified":1592016934776},{"_id":"source/_posts/jdbc-note-3/7.png","hash":"dd66c16714d208cc7b9bf778d64f5b303904e3ff","modified":1592016934774},{"_id":"source/_posts/jdbc-note-4/14.png","hash":"7764752dba9431d0e60f22fc769c87ba2fcc77de","modified":1592016934785},{"_id":"source/_posts/jdbc-note-4/13.png","hash":"6ef79d42cd349b15ca091a84bdcf3a550794670c","modified":1592016934783},{"_id":"source/_posts/jdbc-note-4/3.png","hash":"5005590c7d9c32ad62a7e27d25c4354e3f9aee76","modified":1592016934795},{"_id":"source/_posts/jdbc-note-4/9.png","hash":"336b1b670ae8a4907c0629ac0e66977f66eceef3","modified":1592016934803},{"_id":"source/_posts/jdbc-note-4/7.png","hash":"4a927bc796a87fc2ed71870ab537f42d4910b1ce","modified":1592016934801},{"_id":"source/_posts/python-web-spider/4.png","hash":"8b06183b6873fa540062d22ca548a3fffcc7803a","modified":1592016934825},{"_id":"source/_posts/python-web-spider/6.png","hash":"cc1fcba4c9da440adf5cfe8e04690303074a91a4","modified":1592016934828},{"_id":"source/_posts/python-web-spider/7.png","hash":"fdbffd640679481b38ca9f3d3d74ab0726fc407e","modified":1592016934829},{"_id":"source/_posts/web-server-note-13/7.png","hash":"6a18b3b325b61c01b8bb1a4122dd3980bcbe94f7","modified":1592016934866},{"_id":"source/_posts/web-server-note-13/6.png","hash":"12ace13c066d17a1def5d370f33d037b43ade086","modified":1592016934865},{"_id":"source/_posts/web-server-note-2/10.png","hash":"36cc679e0484fab7f7d97d7dfae05e61f0a1ad7b","modified":1592016934884},{"_id":"source/_posts/web-server-note-2/4.png","hash":"2ea41457bc62ff408b8758f79622fcbec356c0f6","modified":1592016934893},{"_id":"source/_posts/web-server-note-2/6.png","hash":"359eabc7c5359d313d61adf5c7336d60d139a45f","modified":1592016934895},{"_id":"source/_posts/web-server-note-4/2.png","hash":"33f2a70f6e1c32fa0e68065ea556da186be249ba","modified":1592016934911},{"_id":"themes/Lights/source/css/_base/utils.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1592016934962},{"_id":"themes/Lights/source/images/avatar.jpg","hash":"3c4b8bdc3bce6920a18341e0f9804817df9102fd","modified":1592016935036},{"_id":"source/_posts/big-data/1.jpg","hash":"af77277903b35c26f1e36eba5428daefef6281e5","modified":1592016934713},{"_id":"source/_posts/jdbc-note-2/4.png","hash":"e65a620f842bf15c9018ef04720f0fdea50b0477","modified":1592016934757},{"_id":"source/_posts/jdbc-note-2/8.png","hash":"4d9471924fd1f62150f98423abe9f66f2b30e015","modified":1592016934763},{"_id":"source/_posts/jdbc-note-4/2.png","hash":"db7fedca2b0273d3b04dbe2e11a90b6d3d50b16c","modified":1592016934792},{"_id":"source/_posts/jdbc-note-4/4.png","hash":"9275971c20bdacaf810ec091b7218ddc57c6af2d","modified":1592016934797},{"_id":"source/_posts/jdbc-note-4/5.png","hash":"546c8051663a4108da9e2e09e992699a759545ad","modified":1592016934799},{"_id":"source/_posts/web-server-note-13/2.png","hash":"c1a2b11dcb5c68744191ff4dbb9db7880aeb264d","modified":1592016934859},{"_id":"source/_posts/web-server-note-13/3.png","hash":"2cbefd3f2521be2a9e6d1a10f41f524f0aa5cceb","modified":1592016934861},{"_id":"source/_posts/web-server-note-2/12.png","hash":"933f757d3e214fd6d4944466a0c604d36499f429","modified":1592016934888},{"_id":"source/_posts/web-server-note-3/8.png","hash":"62be39546430963802f2c63caf6c922e1981fb86","modified":1592016934908},{"_id":"source/_posts/web-server-note-6/1.png","hash":"2a0549e6b7d8e3ca4dbb3bb9748264c3a473e045","modified":1592016934917},{"_id":"themes/Lights/source/css/_base/layout.styl","hash":"7a65ba1eafed97ce9b13de597fc86594e0ad59c3","modified":1592016934961},{"_id":"themes/Lights/source/css/_base/variable.styl","hash":"fab5c0c801074bc43dfbdfd25786c949bdecb539","modified":1592016934962},{"_id":"themes/Lights/source/css/_partial/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1592016934963},{"_id":"themes/Lights/source/css/_partial/footer.styl","hash":"329d7f22d9e04ffae75dd8e6f608c5ac26213b57","modified":1592016934966},{"_id":"themes/Lights/source/css/_partial/comment.styl","hash":"3699202c4c65cb9f90e3af9f7d706fbbf78dc481","modified":1592016934965},{"_id":"themes/Lights/source/css/_partial/pagination.styl","hash":"31f896826ff32971fb196968ae6d1c501b4fc058","modified":1592016934969},{"_id":"themes/Lights/source/css/_partial/article.styl","hash":"0beeb766a6ea425f8d0e6b28eb5f23cfc578c1a6","modified":1592016934965},{"_id":"themes/Lights/source/css/_partial/head.styl","hash":"ece232dcde8bf150038830a70597f3471f60ddd2","modified":1592016934967},{"_id":"themes/Lights/source/css/_partial/archive.styl","hash":"e08ba14c2cdc3e548150c328d1090dfa7492d382","modified":1592016934964},{"_id":"themes/Lights/source/css/_partial/nav.styl","hash":"0000984e2b19e43f82b82908a6925ae0d491dbd6","modified":1592016934968},{"_id":"themes/Lights/source/css/_partial/last.styl","hash":"261bdd826568d657e9c892ea507f683a443172b0","modified":1592016934967},{"_id":"themes/Lights/source/css/_partial/profile.styl","hash":"31ba76c791e6625a207d95f3e6b2aaa503143313","modified":1592016934969},{"_id":"themes/Lights/source/css/_partial/title.styl","hash":"c0b81f582dfc3702e3e940e578177f4ab1cc5c20","modified":1592016934970},{"_id":"themes/Lights/source/css/styles/a11y-dark.css","hash":"545a32473c016e7928809c90abb88d8b3d66c0e0","modified":1592016934986},{"_id":"themes/Lights/source/css/styles/a11y-light.css","hash":"d68397e4cad57ab370b185eb37bddf9e4dff67a0","modified":1592016934987},{"_id":"themes/Lights/source/css/styles/agate.css","hash":"267d7a729d7106899d887940bd62f01a7f8810a8","modified":1592016934989},{"_id":"themes/Lights/source/css/styles/an-old-hope.css","hash":"a1deffdb4283bb21cb9c6eeca221d76cdb275377","modified":1592016934989},{"_id":"themes/Lights/source/css/styles/ascetic.css","hash":"1b3f8c010d93271fe0b8973b24a83cccb43d2ab5","modified":1592016934991},{"_id":"themes/Lights/source/css/styles/androidstudio.css","hash":"bd1d92a769b5e54f65ed659be012a5da7b933f67","modified":1592016934991},{"_id":"themes/Lights/source/css/styles/arduino-light.css","hash":"459a63e66124cf3db5fdcbd0b211199048d718d3","modified":1592016934991},{"_id":"themes/Lights/source/css/styles/arta.css","hash":"0c83871a3be547414936f040d1b651796ed432e9","modified":1592016934991},{"_id":"themes/Lights/source/css/styles/atelier-cave-dark.css","hash":"0fe44a5e2e47a6d5f808f343be5e0ee38a157513","modified":1592016934992},{"_id":"themes/Lights/source/css/styles/atelier-dune-dark.css","hash":"371fbf41c919b2cf66dbd64db24fc9a9f270f0ca","modified":1592016934993},{"_id":"themes/Lights/source/css/styles/atelier-cave-light.css","hash":"8e8a3cd5611034e8cb1cf17ae598cb146feae0e5","modified":1592016934992},{"_id":"themes/Lights/source/css/styles/atelier-dune-light.css","hash":"978c280fbb391ab34ec798ff63d27ccf0622ffc5","modified":1592016934993},{"_id":"themes/Lights/source/css/styles/atelier-estuary-dark.css","hash":"6cd190c8e9645ec6cc3aa897f2076c9a2a65fbf4","modified":1592016934994},{"_id":"themes/Lights/source/css/styles/atelier-estuary-light.css","hash":"eaf8d2305631471a5c69039f5f666ec7cdb0991e","modified":1592016934994},{"_id":"themes/Lights/source/css/styles/atelier-forest-light.css","hash":"cdfdc19fd6e33879b2212cf41d5159484d72b1ac","modified":1592016934995},{"_id":"themes/Lights/source/css/styles/atelier-forest-dark.css","hash":"8d9cece07b6ea31e01fec11987b42ffc5bfb8c3f","modified":1592016934995},{"_id":"themes/Lights/source/css/styles/atelier-heath-dark.css","hash":"707c60a91e0390b4d481710e5cab28441b1a6d20","modified":1592016934996},{"_id":"themes/Lights/source/css/styles/atelier-heath-light.css","hash":"9b034e416e989edba7d2c2fd57ed706dc2059c4e","modified":1592016934996},{"_id":"themes/Lights/source/css/styles/atelier-lakeside-dark.css","hash":"6f9102332449833997b2e72e8658fb9de212bc48","modified":1592016934997},{"_id":"themes/Lights/source/css/styles/atelier-lakeside-light.css","hash":"180699d969cb62743bc8e4cf4dc5b88ea1c6ed9b","modified":1592016934997},{"_id":"themes/Lights/source/css/styles/atelier-plateau-dark.css","hash":"4d69e5501ec2a7b81810466837ec731a81590d4d","modified":1592016934998},{"_id":"themes/Lights/source/css/styles/atelier-plateau-light.css","hash":"f8e768bd2b111a4dffb6100391b647f6d9b1f445","modified":1592016934998},{"_id":"themes/Lights/source/css/styles/atelier-savanna-dark.css","hash":"3768ba3e44fc1038adb09ff3adfbe4c8d807c338","modified":1592016934999},{"_id":"themes/Lights/source/css/styles/atelier-savanna-light.css","hash":"fd76c75ef1f1ab693ccd09e973204cc80dae18cd","modified":1592016934999},{"_id":"themes/Lights/source/css/styles/atelier-seaside-dark.css","hash":"f44bb322aab7a93f0c52a39e878670b7d6c2a8b8","modified":1592016935000},{"_id":"themes/Lights/source/css/styles/atelier-seaside-light.css","hash":"dd9657b37f5fd62a288972380193db4249bcdf96","modified":1592016935000},{"_id":"themes/Lights/source/css/styles/atelier-sulphurpool-dark.css","hash":"f6dc59deaf5dc1a87229e207f18b0def15a235cd","modified":1592016935001},{"_id":"themes/Lights/source/css/styles/atelier-sulphurpool-light.css","hash":"4783dd049a048c7858603984b61b5f7db920c44d","modified":1592016935001},{"_id":"themes/Lights/source/css/styles/atom-one-dark-reasonable.css","hash":"b5265246c7cb37e449699922c307f685ba356e34","modified":1592016935002},{"_id":"themes/Lights/source/css/styles/atom-one-dark.css","hash":"91671ed42c0ce1363843144a9666d34faddb7e27","modified":1592016935002},{"_id":"themes/Lights/source/css/styles/atom-one-light.css","hash":"526e305a190476a2b28a244ca928aabdcc686c34","modified":1592016935002},{"_id":"themes/Lights/source/css/styles/brown-paper.css","hash":"9a030da7dc781e1461b15186f2b01ea684ee9ad2","modified":1592016935003},{"_id":"themes/Lights/source/css/styles/color-brewer.css","hash":"317e097d8b2e0fd3e7c64d97bb93caa8e9e23b9d","modified":1592016935005},{"_id":"themes/Lights/source/css/styles/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1592016935004},{"_id":"themes/Lights/source/css/styles/codepen-embed.css","hash":"a4ce8f56fa8ec5078f597db441ebeace6264a508","modified":1592016935004},{"_id":"themes/Lights/source/css/styles/darcula.css","hash":"243e56c3eca2c7234b125df3c9a882d984f89b8a","modified":1592016935006},{"_id":"themes/Lights/source/css/styles/dark.css","hash":"d4b6d04ed87e2ef4fcd359052c0220b70060a0f3","modified":1592016935006},{"_id":"themes/Lights/source/css/styles/default.css","hash":"51a2a0d9be7a0039923a62558b7d1bc1956e965a","modified":1592016935007},{"_id":"themes/Lights/source/css/styles/darkula.css","hash":"d004ba64216234a53c84fa55baefdc8b371bb4d9","modified":1592016935007},{"_id":"themes/Lights/source/css/styles/docco.css","hash":"9495b22865033719a0701b8e3557a843611204db","modified":1592016935008},{"_id":"themes/Lights/source/css/styles/foundation.css","hash":"b8f36a5621cc6043fbf3ba23915b6faa92b2e6ba","modified":1592016935009},{"_id":"themes/Lights/source/css/styles/github-gist.css","hash":"e8ff6a6effd153a280262787181c272d46f99184","modified":1592016935010},{"_id":"themes/Lights/source/css/styles/dracula.css","hash":"896157dc66de96b3e8ac2c2d032ac1f79f42ac42","modified":1592016935008},{"_id":"themes/Lights/source/css/styles/github.css","hash":"6f28691831ef118939d2e109a205b425a5249b90","modified":1592016935010},{"_id":"themes/Lights/source/css/styles/far.css","hash":"3c9b37b9d4f992042165069792ea373ce299fa31","modified":1592016935009},{"_id":"themes/Lights/source/css/styles/googlecode.css","hash":"8ea1780e834b7f40c962744cb4ef533f9b805f9b","modified":1592016935011},{"_id":"themes/Lights/source/css/styles/gml.css","hash":"32ba5bc48b599043c5add7461e59a564e96da0f9","modified":1592016935011},{"_id":"themes/Lights/source/css/styles/gruvbox-dark.css","hash":"bfe2f24aef069669dc44dba54f14b0005667d700","modified":1592016935012},{"_id":"themes/Lights/source/css/styles/grayscale.css","hash":"b2074d4f1ffa928a9948a9edecf8e4ec513999e6","modified":1592016935012},{"_id":"themes/Lights/source/css/styles/gruvbox-light.css","hash":"4e5445d5eaa82f1787e91682e544fea3be3b4bb9","modified":1592016935013},{"_id":"themes/Lights/source/css/styles/hybrid.css","hash":"c1cf52abb1248498794739cea51d6ecbd7539c69","modified":1592016935014},{"_id":"themes/Lights/source/css/styles/hopscotch.css","hash":"1043cccf681b3c58b54dc044e2fcaeb409cdbda1","modified":1592016935013},{"_id":"themes/Lights/source/css/styles/idea.css","hash":"cfdc18180d926095d8322f36f041a2cf43445eef","modified":1592016935015},{"_id":"themes/Lights/source/css/styles/kimbie.dark.css","hash":"8fb1f4307f136010545bb095fd9a4bd298bd9dee","modified":1592016935017},{"_id":"themes/Lights/source/css/styles/isbl-editor-light.css","hash":"9b586ea98e0e2ad6cd25bde97a186c404b612bb4","modified":1592016935016},{"_id":"themes/Lights/source/css/styles/ir-black.css","hash":"c8ee27f6873ee1e52c394b373bc8be49d059a46c","modified":1592016935015},{"_id":"themes/Lights/source/css/styles/isbl-editor-dark.css","hash":"b0df11c36bcd12e46f3b710a693bf3cc2a462d42","modified":1592016935015},{"_id":"themes/Lights/source/css/styles/kimbie.light.css","hash":"6c95f1dc95fe047eff53b52231a8f552ec17713d","modified":1592016935017},{"_id":"themes/Lights/source/css/styles/lightfair.css","hash":"6bcd2071d1309df6d6cd91c93206bc1e3920e994","modified":1592016935018},{"_id":"themes/Lights/source/css/styles/magula.css","hash":"5a0e59aff9f270dbb166e2735edf0bd91569ad9d","modified":1592016935018},{"_id":"themes/Lights/source/css/styles/monokai-sublime.css","hash":"0d16b61fd8723b61ebbb4ae85936b7222089cd5c","modified":1592016935019},{"_id":"themes/Lights/source/css/styles/mono-blue.css","hash":"3d78780568f60215686ca93e1459c0a86b1e13a2","modified":1592016935019},{"_id":"themes/Lights/source/css/styles/nord.css","hash":"f0caf7fcfb391aa4842360ddbb2303c30e72a1ad","modified":1592016935020},{"_id":"themes/Lights/source/css/styles/monokai.css","hash":"525238932a2e8a86d36ff559ec8c56617a81c66a","modified":1592016935020},{"_id":"themes/Lights/source/css/styles/obsidian.css","hash":"c8f452d1dd3c24ed1fd31a8a542976a98768f0ee","modified":1592016935021},{"_id":"themes/Lights/source/css/styles/pojoaque.css","hash":"147fa0862896e6954bc6800e573d0dc009d0bd76","modified":1592016935023},{"_id":"themes/Lights/source/css/styles/ocean.css","hash":"05261db4eab97828f1e0e2d8dac3c17b46c5135b","modified":1592016935021},{"_id":"themes/Lights/source/css/styles/paraiso-dark.css","hash":"54a74080b472d4f02ec892383df7243a9fc0325c","modified":1592016935022},{"_id":"themes/Lights/source/css/styles/paraiso-light.css","hash":"ec682ddb4f6c6022e86bbc3b21fee2db17534dfa","modified":1592016935023},{"_id":"themes/Lights/source/css/styles/purebasic.css","hash":"4bb7af0215f92bca312a8f3878ea5dc17c19ce28","modified":1592016935024},{"_id":"themes/Lights/source/css/styles/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1592016935024},{"_id":"themes/Lights/source/css/styles/qtcreator_dark.css","hash":"f6247839bf5f054c1c67675c9a2009c9dd882a54","modified":1592016935025},{"_id":"themes/Lights/source/css/styles/routeros.css","hash":"9d3b69b223ad1f8f3301de71d2ca008e0271c392","modified":1592016935027},{"_id":"themes/Lights/source/css/styles/qtcreator_light.css","hash":"64a3df679ec5c1189fc4f4c046da13ccfde61088","modified":1592016935025},{"_id":"themes/Lights/source/css/styles/railscasts.css","hash":"1bb2dd8ccba3e33aa3fd419bad757b0710ca7bf3","modified":1592016935026},{"_id":"themes/Lights/source/css/styles/rainbow.css","hash":"34ebae47223dc8e1b6464880fa83e217a5774199","modified":1592016935026},{"_id":"themes/Lights/source/css/styles/school-book.css","hash":"5dd8a8a51ab511b981404b7c1a7d0daf94d6340f","modified":1592016935027},{"_id":"themes/Lights/source/css/styles/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1592016935027},{"_id":"themes/Lights/source/css/styles/solarized-dark.css","hash":"97bba4362e3001a93f1b111a140895cbe6047a81","modified":1592016935028},{"_id":"themes/Lights/source/css/styles/shades-of-purple.css","hash":"8cf2649b5bfc54a8fc04066f22eae5056ee77473","modified":1592016935028},{"_id":"themes/Lights/source/css/styles/solarized-light.css","hash":"fe6779c179c3e6136384e463fdc6d3b08ff88ba7","modified":1592016935028},{"_id":"themes/Lights/source/css/styles/tomorrow-night-eighties.css","hash":"12449d31f223502297086943f1bfeeac5f28c4c1","modified":1592016935030},{"_id":"themes/Lights/source/css/styles/tomorrow-night-bright.css","hash":"db7f477d609bfd0d264f69fdee32d28b2b3771ec","modified":1592016935030},{"_id":"themes/Lights/source/css/styles/tomorrow-night-blue.css","hash":"8fc2bd599487fa428895af9c15278b629205a005","modified":1592016935029},{"_id":"themes/Lights/source/css/styles/sunburst.css","hash":"bcbe342ac0be63bb2e8545f426e13c1751a70923","modified":1592016935029},{"_id":"themes/Lights/source/css/styles/xcode.css","hash":"113def1c0c88ef96df0722223b158cb068e32041","modified":1592016935033},{"_id":"themes/Lights/source/css/styles/tomorrow-night.css","hash":"51486c77fab70d7615e814787531d1a7db22a65a","modified":1592016935031},{"_id":"themes/Lights/source/css/styles/vs2015.css","hash":"9d3b1fab804f5447f9ee0d45c9079ae201f6c498","modified":1592016935032},{"_id":"themes/Lights/source/css/styles/tomorrow.css","hash":"e98fd167fe9c5668165f28dd6c0ecb59b3293f67","modified":1592016935031},{"_id":"themes/Lights/source/css/styles/vs.css","hash":"7f91ad5a66ffbc8db2af542bd2db0e84bcf22587","modified":1592016935032},{"_id":"themes/Lights/source/images/avatar@2x.jpg","hash":"3c4b8bdc3bce6920a18341e0f9804817df9102fd","modified":1592016935037},{"_id":"themes/Lights/source/css/styles/xt256.css","hash":"30265e64715ab4c0ed868b39663f9418dbfbdc67","modified":1592016935033},{"_id":"themes/Lights/source/css/styles/zenburn.css","hash":"92941a6ae73b74f44ad7c559c5548c44073c644a","modified":1592016935034},{"_id":"themes/Lights/source/js/gitment.browser.js","hash":"b15998a45d5f386d30905cfbfbb1658336acbb5b","modified":1592016935039},{"_id":"source/_posts/front-end/2.png","hash":"09f0d76dd7cc1986f7b13d22b90b2d73a9c7a309","modified":1592016934718},{"_id":"source/_posts/front-end/6.png","hash":"e7589664e980777e8f619092ce762bff607cef5e","modified":1592016934726},{"_id":"source/_posts/jdbc-note-2/3.png","hash":"0e5ca1cfc95971833341270aea2fef5ca8a3ab75","modified":1592016934756},{"_id":"source/_posts/jdbc-note-4/10.png","hash":"ed7d68befa2c4186c2b0da81d7819f2407c4fdbf","modified":1592016934781},{"_id":"source/_posts/jdbc-note-4/15.png","hash":"55d789ba76e485f5369d6bba4a937750d7ff6f5b","modified":1592016934787},{"_id":"source/_posts/jdbc-note-4/16.png","hash":"4a26f29de93cdf626b8415f1aacf32a788f9361d","modified":1592016934788},{"_id":"source/_posts/web-server-note-10/1.png","hash":"2142ffe8e4ce9f2a6c55556da79e6dc3e11f2883","modified":1592016934838},{"_id":"source/_posts/web-server-note-8/2.png","hash":"e3b0e79636a2c97a0aedd311f1f9d973463e55a5","modified":1592016934925},{"_id":"source/_posts/java-note-3/1.png","hash":"25d6e7db0bcc3011492ef4f5d4f92910bbe00afc","modified":1592016934738},{"_id":"source/_posts/jdbc-note-1/8.png","hash":"86695ceb6ef1691c6a6021177b365ae15f4c1896","modified":1592016934751},{"_id":"source/_posts/web-server-note-12/1.png","hash":"7cd94f8416ad0e3091d92425abe6cfa48a0f06eb","modified":1592016934843},{"_id":"source/_posts/web-server-note-12/5.png","hash":"4113c2247e7a83dd4d9191628662992a23a5690e","modified":1592016934854},{"_id":"source/_posts/web-server-note-12/2.png","hash":"b4e6446f7ef2839876a5c6fc66c4573778ccea1f","modified":1592016934845},{"_id":"source/_posts/web-server-note-12/3.png","hash":"ff01f6135e57868378846cd53744a91e13307708","modified":1592016934848},{"_id":"source/_posts/web-server-note-17/1.png","hash":"79296effb4b2ab1de2e52d20c46e55c9d9804c4e","modified":1592016934875},{"_id":"source/_posts/web-server-note-17/2.png","hash":"af468934b08d7fc893a5f43cbdc66800b43bd490","modified":1592016934878},{"_id":"source/_posts/web-server-note-2/1.png","hash":"5c9f7da0bbbd2063753fd40a46b6fd7b1c3b0ed9","modified":1592016934882},{"_id":"source/_posts/web-server-note-2/3.png","hash":"debb824eb3e572ad43332a37673639bad156857d","modified":1592016934891},{"_id":"source/_posts/web-server-note-9/4.png","hash":"24077fa33d30f3aa8889da404db036d4daaa721d","modified":1592016934933},{"_id":"source/_posts/front-end/7.png","hash":"a63f2b01192ce14ba335d47c70085708db8aec4a","modified":1592016934728},{"_id":"source/_posts/jdbc-note-2/2.png","hash":"3b8117a3cbbf1b637c14335a72d1f98a3765f08b","modified":1592016934754},{"_id":"source/_posts/jdbc-note-4/1.png","hash":"b1b09f00cdf549e3858310c24dba860565e57f67","modified":1592016934779},{"_id":"source/_posts/linux-centos7/03.gif","hash":"b91de4b284a259fbd2e93052a3cf96be78b4afad","modified":1597042621587},{"_id":"source/_posts/python-web-spider/2.png","hash":"fe28996546a9fb38ff5fb7413a1023b3ae0a34f2","modified":1592016934823},{"_id":"source/_posts/web-server-note-13/1.png","hash":"2a4c676b41befa861f94d467efdfc0a7818f2c07","modified":1592016934857},{"_id":"source/_posts/web-server-note-16/1.png","hash":"a7337988c40f4d21e1d124159a14e583abd1e4c6","modified":1592016934872},{"_id":"source/_posts/web-server-note-2/11.png","hash":"e5eb6d0e81418699f7b31a8987a91fc4f22aacae","modified":1592016934887},{"_id":"source/_posts/web-server-note-3/3.png","hash":"bd2c455efed1ec14ace5137fcfe1a4e703419d1d","modified":1592016934903},{"_id":"source/_posts/web-server-note-9/3.png","hash":"a80d99a607669d5ec8f9b5557e4c44be74f1fa0a","modified":1592016934931},{"_id":"source/_posts/web-server-note-9/6.png","hash":"f08caf81bcefdba51c050acf347ae99a3a239612","modified":1592016934937},{"_id":"source/_posts/web-server-note-7/1.png","hash":"622b320619be7a5b5a99055760ea690ad816eaf6","modified":1592016934921},{"_id":"source/_posts/python-web-spider/1.png","hash":"e36318e6145f3a400a0ad9c30265d818c7c42096","modified":1592016934819},{"_id":"source/_posts/front-end/5.png","hash":"dd90ab565bd2dc987c3ccf1c81044d7c24530e1f","modified":1592016934724},{"_id":"source/_posts/web-server-note-12/4.png","hash":"17906bd9fbdae58d3448bce88bdfef02304ac118","modified":1592016934852},{"_id":"source/_posts/linux-centos7/05.gif","hash":"9e68d43deecee0344715fdc6f823e8ff62c8b803","modified":1597043807913},{"_id":"source/_posts/linux-centos7/01.gif","hash":"9de593fd6769c80d18d9979fe9478e5d89b6682a","modified":1597040205044},{"_id":"source/_posts/linux-centos7/02.gif","hash":"341aca862b184c9bb02c530f768794c28b5797f6","modified":1597041853261},{"_id":"source/_posts/semantic-ui/01.png","hash":"2eecb5a948662cd4c128e5be4415b15ac5896ae0","modified":1597999397392},{"_id":"source/_posts/semantic-ui/02.png","hash":"fcd80c8149ccc52f2e36c5d8b3e1a2e499e1fd65","modified":1598001734772}],"Category":[{"name":"大数据笔记","_id":"cke3x9g390004zgvuam85di9h"},{"name":"前端笔记","_id":"cke3x9g3v0008zgvue7kh8q8o"},{"name":"Linux笔记","_id":"cke3x9g47000czgvu20qhg53z"},{"name":"编程杂记","_id":"cke3x9g4m000gzgvu185zcqnh"},{"name":"零碎","_id":"cke3x9g5i000vzgvu5aww39pl"},{"name":"Java笔记","_id":"cke3x9g5o0011zgvudzsf1dct"},{"name":"Java练习","_id":"cke3x9g5u0015zgvu43rd1glz"},{"name":"JDBC笔记","_id":"cke3x9g6h001wzgvugkp76nqj"},{"name":"MyBatis笔记","_id":"cke3x9g72002dzgvu7pzoecuf"},{"name":"MySQL笔记","_id":"cke3x9g7c002mzgvufkk97zjh"},{"name":"Python笔记","_id":"cke3x9g7k002wzgvu9qxu363z"},{"name":"SpringMVC笔记","_id":"cke3x9g7l002zzgvudbp89rwg"},{"name":"Web服务器笔记","_id":"cke3x9g7n0031zgvu3osth7zt"}],"Data":[],"Page":[{"_content":"","source":"tags/index.md","raw":"","date":"2020-06-25T10:46:42.827Z","updated":"2020-06-13T02:55:34.938Z","path":"tags/index.html","title":"","comments":1,"layout":"page","_id":"cke3x9g1g0000zgvu9wq7gmxg","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"","source":"about/index.md","raw":"","date":"2020-06-25T10:46:42.826Z","updated":"2020-06-13T02:55:34.938Z","path":"about/index.html","title":"","comments":1,"layout":"page","_id":"cke3x9g1k0001zgvu25qa39n4","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Hadoop大数据平台搭建","date":"2019-11-08T04:16:40.000Z","_content":"## 背景\n在网上看到的一张图片，很真实的描述了学习大数据前后对大数据的看法 \n\n\n![大数据](bigData/1.jpg)\n\n \n## 一些概念\n- 大数据\n\n维基的解释是：在传统数据处理应用软件不足以处理的大或复杂的数据集\n\n大数据有四个特点(4个\" V \")：数据量大(Volume)、数据类型繁多(Variety)、处理速度快(Velocity)、价值密度低(Value)\n\n我自己的理解就是在以前对很多数据没有办法进行筛选、存储、分析等操作，但随着技术的发展，现在有很多技术可以完成这些工作，从而使得我们可以得到很多蕴含在这些数据之间的信息。例如网购的订单，最开始电商平台可能只能存储这些订单信息，还没有进行分析，随着技术的发展，就可以分析这些订单之间的联系，从而实现针对性的商品推荐等功能\n- 云计算   \n\n通过网络提供可伸缩的、廉价的分布式计算能力。云计算使得计算资源像自来水一样，可以方便取用。有这几种服务类型\n\n基础设施即服务 IaaS (Infrastructure as a Service) 提供了基础设施，CPU、内存、网络、存储等，客户需要自己配置环境，然后运行自己的服务\n平台即服务 PasS (Platform as a Service) 提供了服务器平台或者开发环境，客户可以在这个平台上部署自己的服务\n软件即服务 SaaS (Software as a Service) 提供的就是软件成品，客户可以按需购买，就像购买一些邮件服务，即开即用，不需要关心它运行在什么平台或者是运行在什么硬件上\n-  物联网\n\n利用通信技术把传感器、机器、控制器、人员、物连接在一起，实现彼此间的通信、收集和传输数据。最常见的应用就是一些智能可穿戴设备、智能家居、智能交通\n- 相互的联系 \n\n大数据、云计算、物联网之间既有区别也有联系\n云计算为大数据提供了技术基础\n物联网是大数据的重要来源\n\n## Hadoop开源分布计算式计算平台\nHadoop是Apache软件基金会旗下的一个开源分布计算式计算平台，Hadoop的核心是HDFS(Hadoop Distributed File System)和MapReduce\n\nHDFS是面向普通硬件环境的分布式文件系统，MapReduce是开发并行应用的程序\n\n## Hadoop安装\n我是参考厦门大学林子雨老师的[大数据处理架构Hadoop安装教程](http://dblab.xmu.edu.cn/blog/285/)，这个教程提供了多种不同安装方式的详细指导\n\n我选择的是VMware虚拟机中安装Ubuntu，伪分布式安装Hadoop2.7.1，建议使用这个教程提供的系统和各种软件，遇到需要输入或者起名的步骤尽量和教程保持一致，这样可以规避一些奇奇怪怪的问题。在学习一个技术的初期，如果因为软件配置、兼容性等问题而浪费大量时间会非常闹心\n\n解压Hadoop后，如果是是单机模式，无需配置，直接开始使用就好了。如果选择伪分布式，需要配置core-site.xml和hdfs-site.xml即可，需要特别注意的是：配置 hadoop.tmp.dir 参数，则默认使用的临时目录为 /tmp/hadoo-hadoop，而这个目录在重启时有可能被系统清理掉，导致必须重新执行 format 才行。同时也指定 dfs.namenode.name.dir 和dfs.datanode.data.dir 避免出错。\n\n配置好后就要格式化NameNode(在Hadoop目录下)\n``` bash\n./bin/hdfs namenode -format #格式化NameNode\n```\n\n![Namenode format](bigData/2.png)\n\n看到 successfully formatted 和 Exitting with status 0 就表示格式化成功，然后可以启动所有进程\n``` bash\n./sbin/start-all.sh #启动所有进程\n```\n![star-all.sh](bigData/3.png)\n\n进程启动后可以用jps来查看所有的Java进程，\n``` bash\njps\n```\n如果没有这些进程，可以尝试先停止所有进程，然后再启动\n``` bash\n./sbin/start-all.sh #先执行关闭所有进程\n\n./sbin/stop-all.sh #所有进程都关闭后，再启动所有进程\n```\n\n## HDFS Shell命令\nHDFS是一个分布式文件系统，所以我们可以对HDFS中的文件进行上传、下载、复制等文件操作。可以用shell命名完成这些操作\n\n对于文件操作这个功能，HDFS有三种命令标记，如果用来操作HDFS这三中貌似用起来是一模一样的\n- hadoop fs  适用于本地系统和HDFS系统\n- hadoop dfs 只能操作HDFS文件系统，已经Deprecated(不推荐使用)，推荐使用第三个hdfs dfs\n- hdfs dfs 只能操作HDFS文件系统\n\n实际上很多命令和Linux的shell差不多，不过要注意格式，用ls(显示目录下的文件信息)命令举例\n``` bash\nhdfs dfs -ls / #这里用hdfs dfs 用其他两个效果是一样的\n```\n> 命令前面一定要加- 如：-ls\n\n> 命令之后一定要指定目录 如：/     (左斜杆就是代表HDFS目录的根)\n\n例举一些常用的命令\n``` bash\nhdfs dfs -ls / #ls 查看更目录下的文件信息\n\nhdfs dfs –mkdir –p /user/hadoop #mkdir 新建文件夹 -p 递归操作\n\nhdfs dfs –rm –r /input #rm 删除目录 -r 递归删除\n\nhdfs dfs -cp /myLocalFile.txt /user/hadoop/ #cp 在HDFS复制文件 复制根目录下的myLocalFile.txt到/user/hadoop/\n\nhdfs dfs –cat /myLocalFile.txt # cat 查看文件内容 \n\nhdfs dfs -put /home/hadoop/myLocalFile.txt  / #put 上传文件到HDFS 将本地的myLocalFile.txt文件上传到HDFS的根目录下\nhdfs dfs -put /home/hadoop/myLocalFile.txt  /test.txt #将本地的myLocalFile.txt文件上传到HDFS的根目录下,并且重命名为test.txt\n\nhdfs dfs -get /myLocalFile.txt  /home/hadoop/ # get 下载文件到本地 下载HDFS根目录下的myLocalFile.txt文件到本地的/home/hadoop/\n```\n\n## 参考资料\n [IaaS，PaaS，SaaS 的区别 作者： 阮一峰](http://www.ruanyifeng.com/blog/2017/07/iaas-paas-saas.html)\n\n [什么是物联网？其发展前景如何？](https://www.zhihu.com/question/19751763)\n\n [Hadoop安装教程_伪分布式配置_CentOS6.4/Hadoop2.6.0](http://dblab.xmu.edu.cn/blog/install-hadoop-in-centos/)\n\n [Hadoop：hadoop fs、hadoop dfs与hdfs dfs命令的区别](https://blog.csdn.net/pipisorry/article/details/51340838)","source":"_posts/big-data.md","raw":"---\ntitle: Hadoop大数据平台搭建\ndate: 2019-11-08 12:16:40\ncategories: 大数据笔记\n---\n## 背景\n在网上看到的一张图片，很真实的描述了学习大数据前后对大数据的看法 \n\n\n![大数据](bigData/1.jpg)\n\n \n## 一些概念\n- 大数据\n\n维基的解释是：在传统数据处理应用软件不足以处理的大或复杂的数据集\n\n大数据有四个特点(4个\" V \")：数据量大(Volume)、数据类型繁多(Variety)、处理速度快(Velocity)、价值密度低(Value)\n\n我自己的理解就是在以前对很多数据没有办法进行筛选、存储、分析等操作，但随着技术的发展，现在有很多技术可以完成这些工作，从而使得我们可以得到很多蕴含在这些数据之间的信息。例如网购的订单，最开始电商平台可能只能存储这些订单信息，还没有进行分析，随着技术的发展，就可以分析这些订单之间的联系，从而实现针对性的商品推荐等功能\n- 云计算   \n\n通过网络提供可伸缩的、廉价的分布式计算能力。云计算使得计算资源像自来水一样，可以方便取用。有这几种服务类型\n\n基础设施即服务 IaaS (Infrastructure as a Service) 提供了基础设施，CPU、内存、网络、存储等，客户需要自己配置环境，然后运行自己的服务\n平台即服务 PasS (Platform as a Service) 提供了服务器平台或者开发环境，客户可以在这个平台上部署自己的服务\n软件即服务 SaaS (Software as a Service) 提供的就是软件成品，客户可以按需购买，就像购买一些邮件服务，即开即用，不需要关心它运行在什么平台或者是运行在什么硬件上\n-  物联网\n\n利用通信技术把传感器、机器、控制器、人员、物连接在一起，实现彼此间的通信、收集和传输数据。最常见的应用就是一些智能可穿戴设备、智能家居、智能交通\n- 相互的联系 \n\n大数据、云计算、物联网之间既有区别也有联系\n云计算为大数据提供了技术基础\n物联网是大数据的重要来源\n\n## Hadoop开源分布计算式计算平台\nHadoop是Apache软件基金会旗下的一个开源分布计算式计算平台，Hadoop的核心是HDFS(Hadoop Distributed File System)和MapReduce\n\nHDFS是面向普通硬件环境的分布式文件系统，MapReduce是开发并行应用的程序\n\n## Hadoop安装\n我是参考厦门大学林子雨老师的[大数据处理架构Hadoop安装教程](http://dblab.xmu.edu.cn/blog/285/)，这个教程提供了多种不同安装方式的详细指导\n\n我选择的是VMware虚拟机中安装Ubuntu，伪分布式安装Hadoop2.7.1，建议使用这个教程提供的系统和各种软件，遇到需要输入或者起名的步骤尽量和教程保持一致，这样可以规避一些奇奇怪怪的问题。在学习一个技术的初期，如果因为软件配置、兼容性等问题而浪费大量时间会非常闹心\n\n解压Hadoop后，如果是是单机模式，无需配置，直接开始使用就好了。如果选择伪分布式，需要配置core-site.xml和hdfs-site.xml即可，需要特别注意的是：配置 hadoop.tmp.dir 参数，则默认使用的临时目录为 /tmp/hadoo-hadoop，而这个目录在重启时有可能被系统清理掉，导致必须重新执行 format 才行。同时也指定 dfs.namenode.name.dir 和dfs.datanode.data.dir 避免出错。\n\n配置好后就要格式化NameNode(在Hadoop目录下)\n``` bash\n./bin/hdfs namenode -format #格式化NameNode\n```\n\n![Namenode format](bigData/2.png)\n\n看到 successfully formatted 和 Exitting with status 0 就表示格式化成功，然后可以启动所有进程\n``` bash\n./sbin/start-all.sh #启动所有进程\n```\n![star-all.sh](bigData/3.png)\n\n进程启动后可以用jps来查看所有的Java进程，\n``` bash\njps\n```\n如果没有这些进程，可以尝试先停止所有进程，然后再启动\n``` bash\n./sbin/start-all.sh #先执行关闭所有进程\n\n./sbin/stop-all.sh #所有进程都关闭后，再启动所有进程\n```\n\n## HDFS Shell命令\nHDFS是一个分布式文件系统，所以我们可以对HDFS中的文件进行上传、下载、复制等文件操作。可以用shell命名完成这些操作\n\n对于文件操作这个功能，HDFS有三种命令标记，如果用来操作HDFS这三中貌似用起来是一模一样的\n- hadoop fs  适用于本地系统和HDFS系统\n- hadoop dfs 只能操作HDFS文件系统，已经Deprecated(不推荐使用)，推荐使用第三个hdfs dfs\n- hdfs dfs 只能操作HDFS文件系统\n\n实际上很多命令和Linux的shell差不多，不过要注意格式，用ls(显示目录下的文件信息)命令举例\n``` bash\nhdfs dfs -ls / #这里用hdfs dfs 用其他两个效果是一样的\n```\n> 命令前面一定要加- 如：-ls\n\n> 命令之后一定要指定目录 如：/     (左斜杆就是代表HDFS目录的根)\n\n例举一些常用的命令\n``` bash\nhdfs dfs -ls / #ls 查看更目录下的文件信息\n\nhdfs dfs –mkdir –p /user/hadoop #mkdir 新建文件夹 -p 递归操作\n\nhdfs dfs –rm –r /input #rm 删除目录 -r 递归删除\n\nhdfs dfs -cp /myLocalFile.txt /user/hadoop/ #cp 在HDFS复制文件 复制根目录下的myLocalFile.txt到/user/hadoop/\n\nhdfs dfs –cat /myLocalFile.txt # cat 查看文件内容 \n\nhdfs dfs -put /home/hadoop/myLocalFile.txt  / #put 上传文件到HDFS 将本地的myLocalFile.txt文件上传到HDFS的根目录下\nhdfs dfs -put /home/hadoop/myLocalFile.txt  /test.txt #将本地的myLocalFile.txt文件上传到HDFS的根目录下,并且重命名为test.txt\n\nhdfs dfs -get /myLocalFile.txt  /home/hadoop/ # get 下载文件到本地 下载HDFS根目录下的myLocalFile.txt文件到本地的/home/hadoop/\n```\n\n## 参考资料\n [IaaS，PaaS，SaaS 的区别 作者： 阮一峰](http://www.ruanyifeng.com/blog/2017/07/iaas-paas-saas.html)\n\n [什么是物联网？其发展前景如何？](https://www.zhihu.com/question/19751763)\n\n [Hadoop安装教程_伪分布式配置_CentOS6.4/Hadoop2.6.0](http://dblab.xmu.edu.cn/blog/install-hadoop-in-centos/)\n\n [Hadoop：hadoop fs、hadoop dfs与hdfs dfs命令的区别](https://blog.csdn.net/pipisorry/article/details/51340838)","slug":"big-data","published":1,"updated":"2020-06-13T02:55:34.711Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke3x9g330002zgvu2q6y2b9h","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>在网上看到的一张图片，很真实的描述了学习大数据前后对大数据的看法 </p>\n<p><img src=\"/2019/11/08/big-data/1.jpg\" alt=\"大数据\"></p>\n<h2 id=\"一些概念\"><a href=\"#一些概念\" class=\"headerlink\" title=\"一些概念\"></a>一些概念</h2><ul>\n<li>大数据</li>\n</ul>\n<p>维基的解释是：在传统数据处理应用软件不足以处理的大或复杂的数据集</p>\n<p>大数据有四个特点(4个” V “)：数据量大(Volume)、数据类型繁多(Variety)、处理速度快(Velocity)、价值密度低(Value)</p>\n<p>我自己的理解就是在以前对很多数据没有办法进行筛选、存储、分析等操作，但随着技术的发展，现在有很多技术可以完成这些工作，从而使得我们可以得到很多蕴含在这些数据之间的信息。例如网购的订单，最开始电商平台可能只能存储这些订单信息，还没有进行分析，随着技术的发展，就可以分析这些订单之间的联系，从而实现针对性的商品推荐等功能</p>\n<ul>\n<li>云计算   </li>\n</ul>\n<p>通过网络提供可伸缩的、廉价的分布式计算能力。云计算使得计算资源像自来水一样，可以方便取用。有这几种服务类型</p>\n<p>基础设施即服务 IaaS (Infrastructure as a Service) 提供了基础设施，CPU、内存、网络、存储等，客户需要自己配置环境，然后运行自己的服务<br>平台即服务 PasS (Platform as a Service) 提供了服务器平台或者开发环境，客户可以在这个平台上部署自己的服务<br>软件即服务 SaaS (Software as a Service) 提供的就是软件成品，客户可以按需购买，就像购买一些邮件服务，即开即用，不需要关心它运行在什么平台或者是运行在什么硬件上</p>\n<ul>\n<li>物联网</li>\n</ul>\n<p>利用通信技术把传感器、机器、控制器、人员、物连接在一起，实现彼此间的通信、收集和传输数据。最常见的应用就是一些智能可穿戴设备、智能家居、智能交通</p>\n<ul>\n<li>相互的联系 </li>\n</ul>\n<p>大数据、云计算、物联网之间既有区别也有联系<br>云计算为大数据提供了技术基础<br>物联网是大数据的重要来源</p>\n<h2 id=\"Hadoop开源分布计算式计算平台\"><a href=\"#Hadoop开源分布计算式计算平台\" class=\"headerlink\" title=\"Hadoop开源分布计算式计算平台\"></a>Hadoop开源分布计算式计算平台</h2><p>Hadoop是Apache软件基金会旗下的一个开源分布计算式计算平台，Hadoop的核心是HDFS(Hadoop Distributed File System)和MapReduce</p>\n<p>HDFS是面向普通硬件环境的分布式文件系统，MapReduce是开发并行应用的程序</p>\n<h2 id=\"Hadoop安装\"><a href=\"#Hadoop安装\" class=\"headerlink\" title=\"Hadoop安装\"></a>Hadoop安装</h2><p>我是参考厦门大学林子雨老师的<a href=\"http://dblab.xmu.edu.cn/blog/285/\" target=\"_blank\" rel=\"noopener\">大数据处理架构Hadoop安装教程</a>，这个教程提供了多种不同安装方式的详细指导</p>\n<p>我选择的是VMware虚拟机中安装Ubuntu，伪分布式安装Hadoop2.7.1，建议使用这个教程提供的系统和各种软件，遇到需要输入或者起名的步骤尽量和教程保持一致，这样可以规避一些奇奇怪怪的问题。在学习一个技术的初期，如果因为软件配置、兼容性等问题而浪费大量时间会非常闹心</p>\n<p>解压Hadoop后，如果是是单机模式，无需配置，直接开始使用就好了。如果选择伪分布式，需要配置core-site.xml和hdfs-site.xml即可，需要特别注意的是：配置 hadoop.tmp.dir 参数，则默认使用的临时目录为 /tmp/hadoo-hadoop，而这个目录在重启时有可能被系统清理掉，导致必须重新执行 format 才行。同时也指定 dfs.namenode.name.dir 和dfs.datanode.data.dir 避免出错。</p>\n<p>配置好后就要格式化NameNode(在Hadoop目录下)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/hdfs namenode -format <span class=\"comment\">#格式化NameNode</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2019/11/08/big-data/2.png\" alt=\"Namenode format\"></p>\n<p>看到 successfully formatted 和 Exitting with status 0 就表示格式化成功，然后可以启动所有进程</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./sbin/start-all.sh <span class=\"comment\">#启动所有进程</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/11/08/big-data/3.png\" alt=\"star-all.sh\"></p>\n<p>进程启动后可以用jps来查看所有的Java进程，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jps</span><br></pre></td></tr></table></figure>\n<p>如果没有这些进程，可以尝试先停止所有进程，然后再启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./sbin/start-all.sh <span class=\"comment\">#先执行关闭所有进程</span></span><br><span class=\"line\"></span><br><span class=\"line\">./sbin/stop-all.sh <span class=\"comment\">#所有进程都关闭后，再启动所有进程</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"HDFS-Shell命令\"><a href=\"#HDFS-Shell命令\" class=\"headerlink\" title=\"HDFS Shell命令\"></a>HDFS Shell命令</h2><p>HDFS是一个分布式文件系统，所以我们可以对HDFS中的文件进行上传、下载、复制等文件操作。可以用shell命名完成这些操作</p>\n<p>对于文件操作这个功能，HDFS有三种命令标记，如果用来操作HDFS这三中貌似用起来是一模一样的</p>\n<ul>\n<li>hadoop fs  适用于本地系统和HDFS系统</li>\n<li>hadoop dfs 只能操作HDFS文件系统，已经Deprecated(不推荐使用)，推荐使用第三个hdfs dfs</li>\n<li>hdfs dfs 只能操作HDFS文件系统</li>\n</ul>\n<p>实际上很多命令和Linux的shell差不多，不过要注意格式，用ls(显示目录下的文件信息)命令举例</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hdfs dfs -ls / <span class=\"comment\">#这里用hdfs dfs 用其他两个效果是一样的</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>命令前面一定要加- 如：-ls</p>\n</blockquote>\n<blockquote>\n<p>命令之后一定要指定目录 如：/     (左斜杆就是代表HDFS目录的根)</p>\n</blockquote>\n<p>例举一些常用的命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hdfs dfs -ls / <span class=\"comment\">#ls 查看更目录下的文件信息</span></span><br><span class=\"line\"></span><br><span class=\"line\">hdfs dfs –mkdir –p /user/hadoop <span class=\"comment\">#mkdir 新建文件夹 -p 递归操作</span></span><br><span class=\"line\"></span><br><span class=\"line\">hdfs dfs –rm –r /input <span class=\"comment\">#rm 删除目录 -r 递归删除</span></span><br><span class=\"line\"></span><br><span class=\"line\">hdfs dfs -cp /myLocalFile.txt /user/hadoop/ <span class=\"comment\">#cp 在HDFS复制文件 复制根目录下的myLocalFile.txt到/user/hadoop/</span></span><br><span class=\"line\"></span><br><span class=\"line\">hdfs dfs –cat /myLocalFile.txt <span class=\"comment\"># cat 查看文件内容 </span></span><br><span class=\"line\"></span><br><span class=\"line\">hdfs dfs -put /home/hadoop/myLocalFile.txt  / <span class=\"comment\">#put 上传文件到HDFS 将本地的myLocalFile.txt文件上传到HDFS的根目录下</span></span><br><span class=\"line\">hdfs dfs -put /home/hadoop/myLocalFile.txt  /test.txt <span class=\"comment\">#将本地的myLocalFile.txt文件上传到HDFS的根目录下,并且重命名为test.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\">hdfs dfs -get /myLocalFile.txt  /home/hadoop/ <span class=\"comment\"># get 下载文件到本地 下载HDFS根目录下的myLocalFile.txt文件到本地的/home/hadoop/</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p> <a href=\"http://www.ruanyifeng.com/blog/2017/07/iaas-paas-saas.html\" target=\"_blank\" rel=\"noopener\">IaaS，PaaS，SaaS 的区别 作者： 阮一峰</a></p>\n<p> <a href=\"https://www.zhihu.com/question/19751763\" target=\"_blank\" rel=\"noopener\">什么是物联网？其发展前景如何？</a></p>\n<p> <a href=\"http://dblab.xmu.edu.cn/blog/install-hadoop-in-centos/\" target=\"_blank\" rel=\"noopener\">Hadoop安装教程_伪分布式配置_CentOS6.4/Hadoop2.6.0</a></p>\n<p> <a href=\"https://blog.csdn.net/pipisorry/article/details/51340838\" target=\"_blank\" rel=\"noopener\">Hadoop：hadoop fs、hadoop dfs与hdfs dfs命令的区别</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>在网上看到的一张图片，很真实的描述了学习大数据前后对大数据的看法 </p>\n<p><img src=\"/2019/11/08/big-data/1.jpg\" alt=\"大数据\"></p>\n<h2 id=\"一些概念\"><a href=\"#一些概念\" class=\"headerlink\" title=\"一些概念\"></a>一些概念</h2><ul>\n<li>大数据</li>\n</ul>\n<p>维基的解释是：在传统数据处理应用软件不足以处理的大或复杂的数据集</p>\n<p>大数据有四个特点(4个” V “)：数据量大(Volume)、数据类型繁多(Variety)、处理速度快(Velocity)、价值密度低(Value)</p>\n<p>我自己的理解就是在以前对很多数据没有办法进行筛选、存储、分析等操作，但随着技术的发展，现在有很多技术可以完成这些工作，从而使得我们可以得到很多蕴含在这些数据之间的信息。例如网购的订单，最开始电商平台可能只能存储这些订单信息，还没有进行分析，随着技术的发展，就可以分析这些订单之间的联系，从而实现针对性的商品推荐等功能</p>\n<ul>\n<li>云计算   </li>\n</ul>\n<p>通过网络提供可伸缩的、廉价的分布式计算能力。云计算使得计算资源像自来水一样，可以方便取用。有这几种服务类型</p>\n<p>基础设施即服务 IaaS (Infrastructure as a Service) 提供了基础设施，CPU、内存、网络、存储等，客户需要自己配置环境，然后运行自己的服务<br>平台即服务 PasS (Platform as a Service) 提供了服务器平台或者开发环境，客户可以在这个平台上部署自己的服务<br>软件即服务 SaaS (Software as a Service) 提供的就是软件成品，客户可以按需购买，就像购买一些邮件服务，即开即用，不需要关心它运行在什么平台或者是运行在什么硬件上</p>\n<ul>\n<li>物联网</li>\n</ul>\n<p>利用通信技术把传感器、机器、控制器、人员、物连接在一起，实现彼此间的通信、收集和传输数据。最常见的应用就是一些智能可穿戴设备、智能家居、智能交通</p>\n<ul>\n<li>相互的联系 </li>\n</ul>\n<p>大数据、云计算、物联网之间既有区别也有联系<br>云计算为大数据提供了技术基础<br>物联网是大数据的重要来源</p>\n<h2 id=\"Hadoop开源分布计算式计算平台\"><a href=\"#Hadoop开源分布计算式计算平台\" class=\"headerlink\" title=\"Hadoop开源分布计算式计算平台\"></a>Hadoop开源分布计算式计算平台</h2><p>Hadoop是Apache软件基金会旗下的一个开源分布计算式计算平台，Hadoop的核心是HDFS(Hadoop Distributed File System)和MapReduce</p>\n<p>HDFS是面向普通硬件环境的分布式文件系统，MapReduce是开发并行应用的程序</p>\n<h2 id=\"Hadoop安装\"><a href=\"#Hadoop安装\" class=\"headerlink\" title=\"Hadoop安装\"></a>Hadoop安装</h2><p>我是参考厦门大学林子雨老师的<a href=\"http://dblab.xmu.edu.cn/blog/285/\" target=\"_blank\" rel=\"noopener\">大数据处理架构Hadoop安装教程</a>，这个教程提供了多种不同安装方式的详细指导</p>\n<p>我选择的是VMware虚拟机中安装Ubuntu，伪分布式安装Hadoop2.7.1，建议使用这个教程提供的系统和各种软件，遇到需要输入或者起名的步骤尽量和教程保持一致，这样可以规避一些奇奇怪怪的问题。在学习一个技术的初期，如果因为软件配置、兼容性等问题而浪费大量时间会非常闹心</p>\n<p>解压Hadoop后，如果是是单机模式，无需配置，直接开始使用就好了。如果选择伪分布式，需要配置core-site.xml和hdfs-site.xml即可，需要特别注意的是：配置 hadoop.tmp.dir 参数，则默认使用的临时目录为 /tmp/hadoo-hadoop，而这个目录在重启时有可能被系统清理掉，导致必须重新执行 format 才行。同时也指定 dfs.namenode.name.dir 和dfs.datanode.data.dir 避免出错。</p>\n<p>配置好后就要格式化NameNode(在Hadoop目录下)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/hdfs namenode -format <span class=\"comment\">#格式化NameNode</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2019/11/08/big-data/2.png\" alt=\"Namenode format\"></p>\n<p>看到 successfully formatted 和 Exitting with status 0 就表示格式化成功，然后可以启动所有进程</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./sbin/start-all.sh <span class=\"comment\">#启动所有进程</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2019/11/08/big-data/3.png\" alt=\"star-all.sh\"></p>\n<p>进程启动后可以用jps来查看所有的Java进程，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jps</span><br></pre></td></tr></table></figure>\n<p>如果没有这些进程，可以尝试先停止所有进程，然后再启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./sbin/start-all.sh <span class=\"comment\">#先执行关闭所有进程</span></span><br><span class=\"line\"></span><br><span class=\"line\">./sbin/stop-all.sh <span class=\"comment\">#所有进程都关闭后，再启动所有进程</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"HDFS-Shell命令\"><a href=\"#HDFS-Shell命令\" class=\"headerlink\" title=\"HDFS Shell命令\"></a>HDFS Shell命令</h2><p>HDFS是一个分布式文件系统，所以我们可以对HDFS中的文件进行上传、下载、复制等文件操作。可以用shell命名完成这些操作</p>\n<p>对于文件操作这个功能，HDFS有三种命令标记，如果用来操作HDFS这三中貌似用起来是一模一样的</p>\n<ul>\n<li>hadoop fs  适用于本地系统和HDFS系统</li>\n<li>hadoop dfs 只能操作HDFS文件系统，已经Deprecated(不推荐使用)，推荐使用第三个hdfs dfs</li>\n<li>hdfs dfs 只能操作HDFS文件系统</li>\n</ul>\n<p>实际上很多命令和Linux的shell差不多，不过要注意格式，用ls(显示目录下的文件信息)命令举例</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hdfs dfs -ls / <span class=\"comment\">#这里用hdfs dfs 用其他两个效果是一样的</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>命令前面一定要加- 如：-ls</p>\n</blockquote>\n<blockquote>\n<p>命令之后一定要指定目录 如：/     (左斜杆就是代表HDFS目录的根)</p>\n</blockquote>\n<p>例举一些常用的命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hdfs dfs -ls / <span class=\"comment\">#ls 查看更目录下的文件信息</span></span><br><span class=\"line\"></span><br><span class=\"line\">hdfs dfs –mkdir –p /user/hadoop <span class=\"comment\">#mkdir 新建文件夹 -p 递归操作</span></span><br><span class=\"line\"></span><br><span class=\"line\">hdfs dfs –rm –r /input <span class=\"comment\">#rm 删除目录 -r 递归删除</span></span><br><span class=\"line\"></span><br><span class=\"line\">hdfs dfs -cp /myLocalFile.txt /user/hadoop/ <span class=\"comment\">#cp 在HDFS复制文件 复制根目录下的myLocalFile.txt到/user/hadoop/</span></span><br><span class=\"line\"></span><br><span class=\"line\">hdfs dfs –cat /myLocalFile.txt <span class=\"comment\"># cat 查看文件内容 </span></span><br><span class=\"line\"></span><br><span class=\"line\">hdfs dfs -put /home/hadoop/myLocalFile.txt  / <span class=\"comment\">#put 上传文件到HDFS 将本地的myLocalFile.txt文件上传到HDFS的根目录下</span></span><br><span class=\"line\">hdfs dfs -put /home/hadoop/myLocalFile.txt  /test.txt <span class=\"comment\">#将本地的myLocalFile.txt文件上传到HDFS的根目录下,并且重命名为test.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\">hdfs dfs -get /myLocalFile.txt  /home/hadoop/ <span class=\"comment\"># get 下载文件到本地 下载HDFS根目录下的myLocalFile.txt文件到本地的/home/hadoop/</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p> <a href=\"http://www.ruanyifeng.com/blog/2017/07/iaas-paas-saas.html\" target=\"_blank\" rel=\"noopener\">IaaS，PaaS，SaaS 的区别 作者： 阮一峰</a></p>\n<p> <a href=\"https://www.zhihu.com/question/19751763\" target=\"_blank\" rel=\"noopener\">什么是物联网？其发展前景如何？</a></p>\n<p> <a href=\"http://dblab.xmu.edu.cn/blog/install-hadoop-in-centos/\" target=\"_blank\" rel=\"noopener\">Hadoop安装教程_伪分布式配置_CentOS6.4/Hadoop2.6.0</a></p>\n<p> <a href=\"https://blog.csdn.net/pipisorry/article/details/51340838\" target=\"_blank\" rel=\"noopener\">Hadoop：hadoop fs、hadoop dfs与hdfs dfs命令的区别</a></p>\n"},{"title":"我理解的前端","date":"2019-11-20T15:30:24.000Z","_content":"## 故事开始\n\n这篇博客源于我在数据库课堂上的分享。数据库刚开课时候，老师就鼓励我们探索自己感兴趣的计算机方向，再把自己的收获分享给大家\n\n也是因为这个契机，我开始了解前端，通过这段时间的学习，我对前端有了更为具体的认识\n\n数据库老师应该是我遇到最好的专业课老师，他讲的课融入了很多他自己的项目实践经验，他平易近人，很乐意并且有能力解决我们的问题，也鼓励我们主动学习。基本上每个老师都在提倡主动学习，但是真正愿意花时间引导学生去主动学习的老师少之又少\n\n\n## 写在最前\n在我看刚开始尝试去了解前端的时候，这些资料对我理解前端有很大帮助，所以强烈推荐你也看看，或许有不同的收获\n\n[简述前后端分离架构：HTML写的不是网页之 - 前端应用发展简史 ](https://www.bilibili.com/video/av31440465)\n[前端入门框架前的几个大坑（小白向） - 汪小黑的文章 - 知乎 ](https://zhuanlan.zhihu.com/p/74546693)\n\n## 前端是做什么的\n前端主要的两个重点\n\n* 界面展示\n* 用户交互\n\n看到的一个例子比较形象：如果把网页比喻成汽车，那么前端就是看得见摸得着的内饰、方向盘、油门、刹车，而不容易直接看见但对汽车也很重要的则是后端，比如引擎\n\n## 浏览器引擎\n既然提到网页，那就不得不说说浏览器，浏览器有两种引擎\n\n![浏览器引擎](front-end/1.png)\n\n \n\n![浏览器引擎介绍](front-end/2.png)\n\n渲染引擎：负责渲染网页的HTML和CSS，随着JS解释引擎越来越独立，现在一般也把渲染引擎称为 **浏览器内核**\n\n比较值得一提的是：苹果的Webkit是开源的，谷歌的Blink是Webkit的分支，但可能是谷歌Chrome浏览器市场占有率比较高，很多人会误以为Webkit是Chrome的内核\n\nChromium：是谷歌的一个开源项目（Chromium相当于Chrome的工程版），国内的QQ浏览器、360极速浏览器、搜狗浏览器还有微软新推出的Edge都是基于这个项目开发的\n\n\n![JS解释引擎](front-end/3.png)\nJS解释引擎：负责解释网页的Javascript，不同的浏览器使用的JS解释引擎也不尽相同，这里先提一下大名鼎鼎的 **Chrome V8** \n\n## 前端发展\n\n不同的参考资料会把前端划分成几个不同的阶段，这里我也简单分了几个阶段，可能不太准确，但是希望能帮助你大概梳理前端的发展过程\n* 静态页面配合Jsp等服务端混合开发\n* Ajax JQuery等技术诞生\n* 前端框架\n\n## 静态页面配合Jsp等服务端混合开发\n\n最开始的网页都是静态的，使用前端三大基础技术（HTML+CSS+JavaScript）开发，但是随着时代的发展，静态网页不能满足需求，网站需要为不同用户显示不同的网页内容\n\n这个时候就需要动态网页，就有了Jsp( Java Server Pages )这类技术，可以对不同的用户动态生成不同的网页，它的原理就是在传统的网页HTML文件中插入Java程序段和JSP标记\n\n虽然可以实现动态页面，但是这项技术也有很明显的缺点，就是在前后端都写好各自的代码之后需要将JSP代码插入到HTML，这就要求整合代码的工程师比必须前后端都懂，而且前后端代码杂糅在一起，也不利于维护\n\n## Ajax JQuery等技术诞生\n\n\n#### AJAX\n\nAjax使得不需要刷新网页，就可以实现网页部分内容的更新，最常见的例子就是各种网页划到最后，网页会继续加载后面的内容，而这个过程，网页没有刷新\n\nAjax的出现，可以让前后端工程师以Ajax接口为分界点进行前后端分离，根据规定好的交互接口，分头工作\n\n#### JQuery\nJQuery是一套JavaScript的库，简化了JavaScript开发的复杂性\n\n\n简化了原生JavaScript代码，举个例获取id为content的值\n\n``` javascript\n//原生：\ndocument.getElementById('content').value　　　　　　　　　　\n\n//jQuery：\n$('# content').val()\n```\n\n同时JQuery也屏蔽了浏览器兼容性问题。在IE678的时代，不同浏览器存在很多兼容问题，其中IE就不识别很多标准的JavaScript方法和对象。但是JQuery屏蔽了这些问题，开发者可以用JQuery开发而不用考虑兼容问题\n\nJQuery还允许开发者定制插件，大量优秀的jQuery插件与UI库不断涌现，使得前端开发者可以直接使用这些插件进行开发，极大提高的开发效率，就比如下面的全屏滚动插件 fullPage.js 和粒子插件，点击图片可以访问对应网站\n\n[![fullPage.js](front-end/4.png)](https://alvarotrigo.com/fullPage/zh/#page1)\n\n[![particle.js](front-end/5.png)](https://vincentgarreau.com/particles.js)\n\n\n\n#### 前端框架\n2008年Google丹麦开发了 **Chrome V8** ，把JavaScript编译成机器码，还使用了其他方法提高性能，使得JavaScript在V8引擎下运行速度非常快，可以媲美二进制程序\n\n有一个组织：Node，发现既然V8运行效率这么高，那么有没有其他的可能呢，所以他们基于 Chrome V8 引擎，加入系统级API，开发了Node.js，这是一个 JavaScript 运行环境\n\nNoce.js的本质：允许开发者像使用C 或者C++那样程序去使用JS程序，性能还差不多，至此JavaScript已经不仅仅只局限在写网页特性了，还可以写服务器、虚拟机内核等等的，开发者就可以借助node开发各种自动化工具\n\n2010年10月，Google推出 Angular JS ，这是一款 JavaScript 框架，用来开发浏览器应用，但是 Angular JS缺陷挺多，所以谷歌后来推出 Angular 框架(这两个是独立的产品)\n\n基于 Angular 思路成功 就有了 Vue 和 React ，就有了前端框架三足鼎立的局面。前端工程师就可以组件化开发模式利用了JS的智能可编程性来管理HTML和CSS\n工程文件结构\n\n有了 node ，我可以调用操作系统的资源，我们就可以规定一些语法和文件，就像定义一些模板，让 node 帮我们去生成 HTML ,CSS 和JavaScript ，我们就可以不必去写这些代码，代码管理性、可复用性、工程性就越来越好\n\n#### 不一样的JavaScript\n在了解前端的发展之前，我对于 JavaScript 的理解还停留在只能写写网页特效的层面，但是现在我才意识到得益于 Chrome V8 和Node ，使得 JavaScript 展现出不一样的活力，可以用来写服务器、内核，还有各种跨平台的应用\n\nCordova：Adobe 发起的项目原名叫 PhoneGap，后来贡献给 Apache 基金会，\nCordova是一个框架，允许开发者用 HTML ,CSS 和JavaScript 开发可以跨平台在安卓,IOS,Windows上的程序\n\nElectron：允许开发者用 HTML ,CSS 和JavaScript 开发运行在Windows,Linux,Mac 上的程序。VScode ,微信Linux , Atom , Github客户端都使用这个框架开发\n\n![VScdoe](front-end/6.png)\n![WeChat](front-end/7.png)\n\n## 参考资料\n\n\n[简述前后端分离架构：HTML写的不是网页之 - 前端应用发展简史 ](https://www.bilibili.com/video/av31440465)\n[前端入门框架前的几个大坑（小白向） - 汪小黑的文章 - 知乎 ](https://zhuanlan.zhihu.com/p/74546693)\n[WEB前端——浏览器内核 ](https://www.bilibili.com/video/av52669035​)\n[web的发展](https://cloud.tencent.com/developer/article/1333686​)\n[【网页设计】30年发展史1990-2019 （中英字幕1080P）​](https://www.bilibili.com/video/av61920847/)\n[erverless——前端的3.0时代 ](https://zhuanlan.zhihu.com/p/84054729​)\n[《从零构建前后分离web项目》：开篇 - 纵观WEB历史演变 ](https://segmentfault.com/a/1190000016269636)\n[学前端，我们要学的是什么 ](https://cloud.tencent.com/developer/article/1028964​)\n[【WEB全能课】第一讲：初识前端  ](https://www.bilibili.com/video/av27151150)\n[Web简史 ](https://juejin.im/post/58ed0a938d6d8100580a45b0​)\n[到底什么是前端、后端、后台啊？ - 科普小民工的回答 - 知乎 ](https://www.zhihu.com/question/21923056/answer/804820546​​​)\n[前端开发 20 年变迁史 ](https://zhuanlan.zhihu.com/p/68030183​)\n[程序员和准程序员必看：Web技术的发展历史和未来趋势  ](https://www.itsource.cn/web/news/1892.html​)\n[Query真的过时了! ](https://zhuanlan.zhihu.com/p/30704540​)\n[MD、CMD规范 ](https://www.cnblogs.com/leftJS/p/11073481.html​)\n[涨姿势！写给网页设计师的网页设计简史 ](https://www.uisdc.com/brief-history-of-web-design)\n[前端三大框架以及jquery与bootstrap这种框架有什么（概念上、范畴上的）区别？ - 陈龙的回答 - 知乎](https://www.zhihu.com/question/304757674/answer/546374749)","source":"_posts/front-end.md","raw":"---\ntitle: 我理解的前端\ndate: 2019-11-20 23:30:24\ncategories: 前端笔记\n---\n## 故事开始\n\n这篇博客源于我在数据库课堂上的分享。数据库刚开课时候，老师就鼓励我们探索自己感兴趣的计算机方向，再把自己的收获分享给大家\n\n也是因为这个契机，我开始了解前端，通过这段时间的学习，我对前端有了更为具体的认识\n\n数据库老师应该是我遇到最好的专业课老师，他讲的课融入了很多他自己的项目实践经验，他平易近人，很乐意并且有能力解决我们的问题，也鼓励我们主动学习。基本上每个老师都在提倡主动学习，但是真正愿意花时间引导学生去主动学习的老师少之又少\n\n\n## 写在最前\n在我看刚开始尝试去了解前端的时候，这些资料对我理解前端有很大帮助，所以强烈推荐你也看看，或许有不同的收获\n\n[简述前后端分离架构：HTML写的不是网页之 - 前端应用发展简史 ](https://www.bilibili.com/video/av31440465)\n[前端入门框架前的几个大坑（小白向） - 汪小黑的文章 - 知乎 ](https://zhuanlan.zhihu.com/p/74546693)\n\n## 前端是做什么的\n前端主要的两个重点\n\n* 界面展示\n* 用户交互\n\n看到的一个例子比较形象：如果把网页比喻成汽车，那么前端就是看得见摸得着的内饰、方向盘、油门、刹车，而不容易直接看见但对汽车也很重要的则是后端，比如引擎\n\n## 浏览器引擎\n既然提到网页，那就不得不说说浏览器，浏览器有两种引擎\n\n![浏览器引擎](front-end/1.png)\n\n \n\n![浏览器引擎介绍](front-end/2.png)\n\n渲染引擎：负责渲染网页的HTML和CSS，随着JS解释引擎越来越独立，现在一般也把渲染引擎称为 **浏览器内核**\n\n比较值得一提的是：苹果的Webkit是开源的，谷歌的Blink是Webkit的分支，但可能是谷歌Chrome浏览器市场占有率比较高，很多人会误以为Webkit是Chrome的内核\n\nChromium：是谷歌的一个开源项目（Chromium相当于Chrome的工程版），国内的QQ浏览器、360极速浏览器、搜狗浏览器还有微软新推出的Edge都是基于这个项目开发的\n\n\n![JS解释引擎](front-end/3.png)\nJS解释引擎：负责解释网页的Javascript，不同的浏览器使用的JS解释引擎也不尽相同，这里先提一下大名鼎鼎的 **Chrome V8** \n\n## 前端发展\n\n不同的参考资料会把前端划分成几个不同的阶段，这里我也简单分了几个阶段，可能不太准确，但是希望能帮助你大概梳理前端的发展过程\n* 静态页面配合Jsp等服务端混合开发\n* Ajax JQuery等技术诞生\n* 前端框架\n\n## 静态页面配合Jsp等服务端混合开发\n\n最开始的网页都是静态的，使用前端三大基础技术（HTML+CSS+JavaScript）开发，但是随着时代的发展，静态网页不能满足需求，网站需要为不同用户显示不同的网页内容\n\n这个时候就需要动态网页，就有了Jsp( Java Server Pages )这类技术，可以对不同的用户动态生成不同的网页，它的原理就是在传统的网页HTML文件中插入Java程序段和JSP标记\n\n虽然可以实现动态页面，但是这项技术也有很明显的缺点，就是在前后端都写好各自的代码之后需要将JSP代码插入到HTML，这就要求整合代码的工程师比必须前后端都懂，而且前后端代码杂糅在一起，也不利于维护\n\n## Ajax JQuery等技术诞生\n\n\n#### AJAX\n\nAjax使得不需要刷新网页，就可以实现网页部分内容的更新，最常见的例子就是各种网页划到最后，网页会继续加载后面的内容，而这个过程，网页没有刷新\n\nAjax的出现，可以让前后端工程师以Ajax接口为分界点进行前后端分离，根据规定好的交互接口，分头工作\n\n#### JQuery\nJQuery是一套JavaScript的库，简化了JavaScript开发的复杂性\n\n\n简化了原生JavaScript代码，举个例获取id为content的值\n\n``` javascript\n//原生：\ndocument.getElementById('content').value　　　　　　　　　　\n\n//jQuery：\n$('# content').val()\n```\n\n同时JQuery也屏蔽了浏览器兼容性问题。在IE678的时代，不同浏览器存在很多兼容问题，其中IE就不识别很多标准的JavaScript方法和对象。但是JQuery屏蔽了这些问题，开发者可以用JQuery开发而不用考虑兼容问题\n\nJQuery还允许开发者定制插件，大量优秀的jQuery插件与UI库不断涌现，使得前端开发者可以直接使用这些插件进行开发，极大提高的开发效率，就比如下面的全屏滚动插件 fullPage.js 和粒子插件，点击图片可以访问对应网站\n\n[![fullPage.js](front-end/4.png)](https://alvarotrigo.com/fullPage/zh/#page1)\n\n[![particle.js](front-end/5.png)](https://vincentgarreau.com/particles.js)\n\n\n\n#### 前端框架\n2008年Google丹麦开发了 **Chrome V8** ，把JavaScript编译成机器码，还使用了其他方法提高性能，使得JavaScript在V8引擎下运行速度非常快，可以媲美二进制程序\n\n有一个组织：Node，发现既然V8运行效率这么高，那么有没有其他的可能呢，所以他们基于 Chrome V8 引擎，加入系统级API，开发了Node.js，这是一个 JavaScript 运行环境\n\nNoce.js的本质：允许开发者像使用C 或者C++那样程序去使用JS程序，性能还差不多，至此JavaScript已经不仅仅只局限在写网页特性了，还可以写服务器、虚拟机内核等等的，开发者就可以借助node开发各种自动化工具\n\n2010年10月，Google推出 Angular JS ，这是一款 JavaScript 框架，用来开发浏览器应用，但是 Angular JS缺陷挺多，所以谷歌后来推出 Angular 框架(这两个是独立的产品)\n\n基于 Angular 思路成功 就有了 Vue 和 React ，就有了前端框架三足鼎立的局面。前端工程师就可以组件化开发模式利用了JS的智能可编程性来管理HTML和CSS\n工程文件结构\n\n有了 node ，我可以调用操作系统的资源，我们就可以规定一些语法和文件，就像定义一些模板，让 node 帮我们去生成 HTML ,CSS 和JavaScript ，我们就可以不必去写这些代码，代码管理性、可复用性、工程性就越来越好\n\n#### 不一样的JavaScript\n在了解前端的发展之前，我对于 JavaScript 的理解还停留在只能写写网页特效的层面，但是现在我才意识到得益于 Chrome V8 和Node ，使得 JavaScript 展现出不一样的活力，可以用来写服务器、内核，还有各种跨平台的应用\n\nCordova：Adobe 发起的项目原名叫 PhoneGap，后来贡献给 Apache 基金会，\nCordova是一个框架，允许开发者用 HTML ,CSS 和JavaScript 开发可以跨平台在安卓,IOS,Windows上的程序\n\nElectron：允许开发者用 HTML ,CSS 和JavaScript 开发运行在Windows,Linux,Mac 上的程序。VScode ,微信Linux , Atom , Github客户端都使用这个框架开发\n\n![VScdoe](front-end/6.png)\n![WeChat](front-end/7.png)\n\n## 参考资料\n\n\n[简述前后端分离架构：HTML写的不是网页之 - 前端应用发展简史 ](https://www.bilibili.com/video/av31440465)\n[前端入门框架前的几个大坑（小白向） - 汪小黑的文章 - 知乎 ](https://zhuanlan.zhihu.com/p/74546693)\n[WEB前端——浏览器内核 ](https://www.bilibili.com/video/av52669035​)\n[web的发展](https://cloud.tencent.com/developer/article/1333686​)\n[【网页设计】30年发展史1990-2019 （中英字幕1080P）​](https://www.bilibili.com/video/av61920847/)\n[erverless——前端的3.0时代 ](https://zhuanlan.zhihu.com/p/84054729​)\n[《从零构建前后分离web项目》：开篇 - 纵观WEB历史演变 ](https://segmentfault.com/a/1190000016269636)\n[学前端，我们要学的是什么 ](https://cloud.tencent.com/developer/article/1028964​)\n[【WEB全能课】第一讲：初识前端  ](https://www.bilibili.com/video/av27151150)\n[Web简史 ](https://juejin.im/post/58ed0a938d6d8100580a45b0​)\n[到底什么是前端、后端、后台啊？ - 科普小民工的回答 - 知乎 ](https://www.zhihu.com/question/21923056/answer/804820546​​​)\n[前端开发 20 年变迁史 ](https://zhuanlan.zhihu.com/p/68030183​)\n[程序员和准程序员必看：Web技术的发展历史和未来趋势  ](https://www.itsource.cn/web/news/1892.html​)\n[Query真的过时了! ](https://zhuanlan.zhihu.com/p/30704540​)\n[MD、CMD规范 ](https://www.cnblogs.com/leftJS/p/11073481.html​)\n[涨姿势！写给网页设计师的网页设计简史 ](https://www.uisdc.com/brief-history-of-web-design)\n[前端三大框架以及jquery与bootstrap这种框架有什么（概念上、范畴上的）区别？ - 陈龙的回答 - 知乎](https://www.zhihu.com/question/304757674/answer/546374749)","slug":"front-end","published":1,"updated":"2020-06-13T02:55:34.715Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke3x9g360003zgvuclyk9ulc","content":"<h2 id=\"故事开始\"><a href=\"#故事开始\" class=\"headerlink\" title=\"故事开始\"></a>故事开始</h2><p>这篇博客源于我在数据库课堂上的分享。数据库刚开课时候，老师就鼓励我们探索自己感兴趣的计算机方向，再把自己的收获分享给大家</p>\n<p>也是因为这个契机，我开始了解前端，通过这段时间的学习，我对前端有了更为具体的认识</p>\n<p>数据库老师应该是我遇到最好的专业课老师，他讲的课融入了很多他自己的项目实践经验，他平易近人，很乐意并且有能力解决我们的问题，也鼓励我们主动学习。基本上每个老师都在提倡主动学习，但是真正愿意花时间引导学生去主动学习的老师少之又少</p>\n<h2 id=\"写在最前\"><a href=\"#写在最前\" class=\"headerlink\" title=\"写在最前\"></a>写在最前</h2><p>在我看刚开始尝试去了解前端的时候，这些资料对我理解前端有很大帮助，所以强烈推荐你也看看，或许有不同的收获</p>\n<p><a href=\"https://www.bilibili.com/video/av31440465\" target=\"_blank\" rel=\"noopener\">简述前后端分离架构：HTML写的不是网页之 - 前端应用发展简史 </a><br><a href=\"https://zhuanlan.zhihu.com/p/74546693\" target=\"_blank\" rel=\"noopener\">前端入门框架前的几个大坑（小白向） - 汪小黑的文章 - 知乎 </a></p>\n<h2 id=\"前端是做什么的\"><a href=\"#前端是做什么的\" class=\"headerlink\" title=\"前端是做什么的\"></a>前端是做什么的</h2><p>前端主要的两个重点</p>\n<ul>\n<li>界面展示</li>\n<li>用户交互</li>\n</ul>\n<p>看到的一个例子比较形象：如果把网页比喻成汽车，那么前端就是看得见摸得着的内饰、方向盘、油门、刹车，而不容易直接看见但对汽车也很重要的则是后端，比如引擎</p>\n<h2 id=\"浏览器引擎\"><a href=\"#浏览器引擎\" class=\"headerlink\" title=\"浏览器引擎\"></a>浏览器引擎</h2><p>既然提到网页，那就不得不说说浏览器，浏览器有两种引擎</p>\n<p><img src=\"/2019/11/20/front-end/1.png\" alt=\"浏览器引擎\"></p>\n<p><img src=\"/2019/11/20/front-end/2.png\" alt=\"浏览器引擎介绍\"></p>\n<p>渲染引擎：负责渲染网页的HTML和CSS，随着JS解释引擎越来越独立，现在一般也把渲染引擎称为 <strong>浏览器内核</strong></p>\n<p>比较值得一提的是：苹果的Webkit是开源的，谷歌的Blink是Webkit的分支，但可能是谷歌Chrome浏览器市场占有率比较高，很多人会误以为Webkit是Chrome的内核</p>\n<p>Chromium：是谷歌的一个开源项目（Chromium相当于Chrome的工程版），国内的QQ浏览器、360极速浏览器、搜狗浏览器还有微软新推出的Edge都是基于这个项目开发的</p>\n<p><img src=\"/2019/11/20/front-end/3.png\" alt=\"JS解释引擎\"><br>JS解释引擎：负责解释网页的Javascript，不同的浏览器使用的JS解释引擎也不尽相同，这里先提一下大名鼎鼎的 <strong>Chrome V8</strong> </p>\n<h2 id=\"前端发展\"><a href=\"#前端发展\" class=\"headerlink\" title=\"前端发展\"></a>前端发展</h2><p>不同的参考资料会把前端划分成几个不同的阶段，这里我也简单分了几个阶段，可能不太准确，但是希望能帮助你大概梳理前端的发展过程</p>\n<ul>\n<li>静态页面配合Jsp等服务端混合开发</li>\n<li>Ajax JQuery等技术诞生</li>\n<li>前端框架</li>\n</ul>\n<h2 id=\"静态页面配合Jsp等服务端混合开发\"><a href=\"#静态页面配合Jsp等服务端混合开发\" class=\"headerlink\" title=\"静态页面配合Jsp等服务端混合开发\"></a>静态页面配合Jsp等服务端混合开发</h2><p>最开始的网页都是静态的，使用前端三大基础技术（HTML+CSS+JavaScript）开发，但是随着时代的发展，静态网页不能满足需求，网站需要为不同用户显示不同的网页内容</p>\n<p>这个时候就需要动态网页，就有了Jsp( Java Server Pages )这类技术，可以对不同的用户动态生成不同的网页，它的原理就是在传统的网页HTML文件中插入Java程序段和JSP标记</p>\n<p>虽然可以实现动态页面，但是这项技术也有很明显的缺点，就是在前后端都写好各自的代码之后需要将JSP代码插入到HTML，这就要求整合代码的工程师比必须前后端都懂，而且前后端代码杂糅在一起，也不利于维护</p>\n<h2 id=\"Ajax-JQuery等技术诞生\"><a href=\"#Ajax-JQuery等技术诞生\" class=\"headerlink\" title=\"Ajax JQuery等技术诞生\"></a>Ajax JQuery等技术诞生</h2><h4 id=\"AJAX\"><a href=\"#AJAX\" class=\"headerlink\" title=\"AJAX\"></a>AJAX</h4><p>Ajax使得不需要刷新网页，就可以实现网页部分内容的更新，最常见的例子就是各种网页划到最后，网页会继续加载后面的内容，而这个过程，网页没有刷新</p>\n<p>Ajax的出现，可以让前后端工程师以Ajax接口为分界点进行前后端分离，根据规定好的交互接口，分头工作</p>\n<h4 id=\"JQuery\"><a href=\"#JQuery\" class=\"headerlink\" title=\"JQuery\"></a>JQuery</h4><p>JQuery是一套JavaScript的库，简化了JavaScript开发的复杂性</p>\n<p>简化了原生JavaScript代码，举个例获取id为content的值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//原生：</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'content'</span>).value　　　　　　　　　　</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//jQuery：</span></span><br><span class=\"line\">$(<span class=\"string\">'# content'</span>).val()</span><br></pre></td></tr></table></figure>\n\n<p>同时JQuery也屏蔽了浏览器兼容性问题。在IE678的时代，不同浏览器存在很多兼容问题，其中IE就不识别很多标准的JavaScript方法和对象。但是JQuery屏蔽了这些问题，开发者可以用JQuery开发而不用考虑兼容问题</p>\n<p>JQuery还允许开发者定制插件，大量优秀的jQuery插件与UI库不断涌现，使得前端开发者可以直接使用这些插件进行开发，极大提高的开发效率，就比如下面的全屏滚动插件 fullPage.js 和粒子插件，点击图片可以访问对应网站</p>\n<p><a href=\"https://alvarotrigo.com/fullPage/zh/#page1\" target=\"_blank\" rel=\"noopener\"><img src=\"/2019/11/20/front-end/4.png\" alt=\"fullPage.js\"></a></p>\n<p><a href=\"https://vincentgarreau.com/particles.js\" target=\"_blank\" rel=\"noopener\"><img src=\"/2019/11/20/front-end/5.png\" alt=\"particle.js\"></a></p>\n<h4 id=\"前端框架\"><a href=\"#前端框架\" class=\"headerlink\" title=\"前端框架\"></a>前端框架</h4><p>2008年Google丹麦开发了 <strong>Chrome V8</strong> ，把JavaScript编译成机器码，还使用了其他方法提高性能，使得JavaScript在V8引擎下运行速度非常快，可以媲美二进制程序</p>\n<p>有一个组织：Node，发现既然V8运行效率这么高，那么有没有其他的可能呢，所以他们基于 Chrome V8 引擎，加入系统级API，开发了Node.js，这是一个 JavaScript 运行环境</p>\n<p>Noce.js的本质：允许开发者像使用C 或者C++那样程序去使用JS程序，性能还差不多，至此JavaScript已经不仅仅只局限在写网页特性了，还可以写服务器、虚拟机内核等等的，开发者就可以借助node开发各种自动化工具</p>\n<p>2010年10月，Google推出 Angular JS ，这是一款 JavaScript 框架，用来开发浏览器应用，但是 Angular JS缺陷挺多，所以谷歌后来推出 Angular 框架(这两个是独立的产品)</p>\n<p>基于 Angular 思路成功 就有了 Vue 和 React ，就有了前端框架三足鼎立的局面。前端工程师就可以组件化开发模式利用了JS的智能可编程性来管理HTML和CSS<br>工程文件结构</p>\n<p>有了 node ，我可以调用操作系统的资源，我们就可以规定一些语法和文件，就像定义一些模板，让 node 帮我们去生成 HTML ,CSS 和JavaScript ，我们就可以不必去写这些代码，代码管理性、可复用性、工程性就越来越好</p>\n<h4 id=\"不一样的JavaScript\"><a href=\"#不一样的JavaScript\" class=\"headerlink\" title=\"不一样的JavaScript\"></a>不一样的JavaScript</h4><p>在了解前端的发展之前，我对于 JavaScript 的理解还停留在只能写写网页特效的层面，但是现在我才意识到得益于 Chrome V8 和Node ，使得 JavaScript 展现出不一样的活力，可以用来写服务器、内核，还有各种跨平台的应用</p>\n<p>Cordova：Adobe 发起的项目原名叫 PhoneGap，后来贡献给 Apache 基金会，<br>Cordova是一个框架，允许开发者用 HTML ,CSS 和JavaScript 开发可以跨平台在安卓,IOS,Windows上的程序</p>\n<p>Electron：允许开发者用 HTML ,CSS 和JavaScript 开发运行在Windows,Linux,Mac 上的程序。VScode ,微信Linux , Atom , Github客户端都使用这个框架开发</p>\n<p><img src=\"/2019/11/20/front-end/6.png\" alt=\"VScdoe\"><br><img src=\"/2019/11/20/front-end/7.png\" alt=\"WeChat\"></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://www.bilibili.com/video/av31440465\" target=\"_blank\" rel=\"noopener\">简述前后端分离架构：HTML写的不是网页之 - 前端应用发展简史 </a><br><a href=\"https://zhuanlan.zhihu.com/p/74546693\" target=\"_blank\" rel=\"noopener\">前端入门框架前的几个大坑（小白向） - 汪小黑的文章 - 知乎 </a><br><a href=\"https://www.bilibili.com/video/av52669035​\" target=\"_blank\" rel=\"noopener\">WEB前端——浏览器内核 </a><br><a href=\"https://cloud.tencent.com/developer/article/1333686​\" target=\"_blank\" rel=\"noopener\">web的发展</a><br><a href=\"https://www.bilibili.com/video/av61920847/\" target=\"_blank\" rel=\"noopener\">【网页设计】30年发展史1990-2019 （中英字幕1080P）​</a><br><a href=\"https://zhuanlan.zhihu.com/p/84054729​\" target=\"_blank\" rel=\"noopener\">erverless——前端的3.0时代 </a><br><a href=\"https://segmentfault.com/a/1190000016269636\" target=\"_blank\" rel=\"noopener\">《从零构建前后分离web项目》：开篇 - 纵观WEB历史演变 </a><br><a href=\"https://cloud.tencent.com/developer/article/1028964​\" target=\"_blank\" rel=\"noopener\">学前端，我们要学的是什么 </a><br><a href=\"https://www.bilibili.com/video/av27151150\" target=\"_blank\" rel=\"noopener\">【WEB全能课】第一讲：初识前端  </a><br><a href=\"https://juejin.im/post/58ed0a938d6d8100580a45b0​\" target=\"_blank\" rel=\"noopener\">Web简史 </a><br><a href=\"https://www.zhihu.com/question/21923056/answer/804820546​​​\" target=\"_blank\" rel=\"noopener\">到底什么是前端、后端、后台啊？ - 科普小民工的回答 - 知乎 </a><br><a href=\"https://zhuanlan.zhihu.com/p/68030183​\" target=\"_blank\" rel=\"noopener\">前端开发 20 年变迁史 </a><br><a href=\"https://www.itsource.cn/web/news/1892.html​\" target=\"_blank\" rel=\"noopener\">程序员和准程序员必看：Web技术的发展历史和未来趋势  </a><br><a href=\"https://zhuanlan.zhihu.com/p/30704540​\" target=\"_blank\" rel=\"noopener\">Query真的过时了! </a><br><a href=\"https://www.cnblogs.com/leftJS/p/11073481.html​\" target=\"_blank\" rel=\"noopener\">MD、CMD规范 </a><br><a href=\"https://www.uisdc.com/brief-history-of-web-design\" target=\"_blank\" rel=\"noopener\">涨姿势！写给网页设计师的网页设计简史 </a><br><a href=\"https://www.zhihu.com/question/304757674/answer/546374749\" target=\"_blank\" rel=\"noopener\">前端三大框架以及jquery与bootstrap这种框架有什么（概念上、范畴上的）区别？ - 陈龙的回答 - 知乎</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"故事开始\"><a href=\"#故事开始\" class=\"headerlink\" title=\"故事开始\"></a>故事开始</h2><p>这篇博客源于我在数据库课堂上的分享。数据库刚开课时候，老师就鼓励我们探索自己感兴趣的计算机方向，再把自己的收获分享给大家</p>\n<p>也是因为这个契机，我开始了解前端，通过这段时间的学习，我对前端有了更为具体的认识</p>\n<p>数据库老师应该是我遇到最好的专业课老师，他讲的课融入了很多他自己的项目实践经验，他平易近人，很乐意并且有能力解决我们的问题，也鼓励我们主动学习。基本上每个老师都在提倡主动学习，但是真正愿意花时间引导学生去主动学习的老师少之又少</p>\n<h2 id=\"写在最前\"><a href=\"#写在最前\" class=\"headerlink\" title=\"写在最前\"></a>写在最前</h2><p>在我看刚开始尝试去了解前端的时候，这些资料对我理解前端有很大帮助，所以强烈推荐你也看看，或许有不同的收获</p>\n<p><a href=\"https://www.bilibili.com/video/av31440465\" target=\"_blank\" rel=\"noopener\">简述前后端分离架构：HTML写的不是网页之 - 前端应用发展简史 </a><br><a href=\"https://zhuanlan.zhihu.com/p/74546693\" target=\"_blank\" rel=\"noopener\">前端入门框架前的几个大坑（小白向） - 汪小黑的文章 - 知乎 </a></p>\n<h2 id=\"前端是做什么的\"><a href=\"#前端是做什么的\" class=\"headerlink\" title=\"前端是做什么的\"></a>前端是做什么的</h2><p>前端主要的两个重点</p>\n<ul>\n<li>界面展示</li>\n<li>用户交互</li>\n</ul>\n<p>看到的一个例子比较形象：如果把网页比喻成汽车，那么前端就是看得见摸得着的内饰、方向盘、油门、刹车，而不容易直接看见但对汽车也很重要的则是后端，比如引擎</p>\n<h2 id=\"浏览器引擎\"><a href=\"#浏览器引擎\" class=\"headerlink\" title=\"浏览器引擎\"></a>浏览器引擎</h2><p>既然提到网页，那就不得不说说浏览器，浏览器有两种引擎</p>\n<p><img src=\"/2019/11/20/front-end/1.png\" alt=\"浏览器引擎\"></p>\n<p><img src=\"/2019/11/20/front-end/2.png\" alt=\"浏览器引擎介绍\"></p>\n<p>渲染引擎：负责渲染网页的HTML和CSS，随着JS解释引擎越来越独立，现在一般也把渲染引擎称为 <strong>浏览器内核</strong></p>\n<p>比较值得一提的是：苹果的Webkit是开源的，谷歌的Blink是Webkit的分支，但可能是谷歌Chrome浏览器市场占有率比较高，很多人会误以为Webkit是Chrome的内核</p>\n<p>Chromium：是谷歌的一个开源项目（Chromium相当于Chrome的工程版），国内的QQ浏览器、360极速浏览器、搜狗浏览器还有微软新推出的Edge都是基于这个项目开发的</p>\n<p><img src=\"/2019/11/20/front-end/3.png\" alt=\"JS解释引擎\"><br>JS解释引擎：负责解释网页的Javascript，不同的浏览器使用的JS解释引擎也不尽相同，这里先提一下大名鼎鼎的 <strong>Chrome V8</strong> </p>\n<h2 id=\"前端发展\"><a href=\"#前端发展\" class=\"headerlink\" title=\"前端发展\"></a>前端发展</h2><p>不同的参考资料会把前端划分成几个不同的阶段，这里我也简单分了几个阶段，可能不太准确，但是希望能帮助你大概梳理前端的发展过程</p>\n<ul>\n<li>静态页面配合Jsp等服务端混合开发</li>\n<li>Ajax JQuery等技术诞生</li>\n<li>前端框架</li>\n</ul>\n<h2 id=\"静态页面配合Jsp等服务端混合开发\"><a href=\"#静态页面配合Jsp等服务端混合开发\" class=\"headerlink\" title=\"静态页面配合Jsp等服务端混合开发\"></a>静态页面配合Jsp等服务端混合开发</h2><p>最开始的网页都是静态的，使用前端三大基础技术（HTML+CSS+JavaScript）开发，但是随着时代的发展，静态网页不能满足需求，网站需要为不同用户显示不同的网页内容</p>\n<p>这个时候就需要动态网页，就有了Jsp( Java Server Pages )这类技术，可以对不同的用户动态生成不同的网页，它的原理就是在传统的网页HTML文件中插入Java程序段和JSP标记</p>\n<p>虽然可以实现动态页面，但是这项技术也有很明显的缺点，就是在前后端都写好各自的代码之后需要将JSP代码插入到HTML，这就要求整合代码的工程师比必须前后端都懂，而且前后端代码杂糅在一起，也不利于维护</p>\n<h2 id=\"Ajax-JQuery等技术诞生\"><a href=\"#Ajax-JQuery等技术诞生\" class=\"headerlink\" title=\"Ajax JQuery等技术诞生\"></a>Ajax JQuery等技术诞生</h2><h4 id=\"AJAX\"><a href=\"#AJAX\" class=\"headerlink\" title=\"AJAX\"></a>AJAX</h4><p>Ajax使得不需要刷新网页，就可以实现网页部分内容的更新，最常见的例子就是各种网页划到最后，网页会继续加载后面的内容，而这个过程，网页没有刷新</p>\n<p>Ajax的出现，可以让前后端工程师以Ajax接口为分界点进行前后端分离，根据规定好的交互接口，分头工作</p>\n<h4 id=\"JQuery\"><a href=\"#JQuery\" class=\"headerlink\" title=\"JQuery\"></a>JQuery</h4><p>JQuery是一套JavaScript的库，简化了JavaScript开发的复杂性</p>\n<p>简化了原生JavaScript代码，举个例获取id为content的值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//原生：</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'content'</span>).value　　　　　　　　　　</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//jQuery：</span></span><br><span class=\"line\">$(<span class=\"string\">'# content'</span>).val()</span><br></pre></td></tr></table></figure>\n\n<p>同时JQuery也屏蔽了浏览器兼容性问题。在IE678的时代，不同浏览器存在很多兼容问题，其中IE就不识别很多标准的JavaScript方法和对象。但是JQuery屏蔽了这些问题，开发者可以用JQuery开发而不用考虑兼容问题</p>\n<p>JQuery还允许开发者定制插件，大量优秀的jQuery插件与UI库不断涌现，使得前端开发者可以直接使用这些插件进行开发，极大提高的开发效率，就比如下面的全屏滚动插件 fullPage.js 和粒子插件，点击图片可以访问对应网站</p>\n<p><a href=\"https://alvarotrigo.com/fullPage/zh/#page1\" target=\"_blank\" rel=\"noopener\"><img src=\"/2019/11/20/front-end/4.png\" alt=\"fullPage.js\"></a></p>\n<p><a href=\"https://vincentgarreau.com/particles.js\" target=\"_blank\" rel=\"noopener\"><img src=\"/2019/11/20/front-end/5.png\" alt=\"particle.js\"></a></p>\n<h4 id=\"前端框架\"><a href=\"#前端框架\" class=\"headerlink\" title=\"前端框架\"></a>前端框架</h4><p>2008年Google丹麦开发了 <strong>Chrome V8</strong> ，把JavaScript编译成机器码，还使用了其他方法提高性能，使得JavaScript在V8引擎下运行速度非常快，可以媲美二进制程序</p>\n<p>有一个组织：Node，发现既然V8运行效率这么高，那么有没有其他的可能呢，所以他们基于 Chrome V8 引擎，加入系统级API，开发了Node.js，这是一个 JavaScript 运行环境</p>\n<p>Noce.js的本质：允许开发者像使用C 或者C++那样程序去使用JS程序，性能还差不多，至此JavaScript已经不仅仅只局限在写网页特性了，还可以写服务器、虚拟机内核等等的，开发者就可以借助node开发各种自动化工具</p>\n<p>2010年10月，Google推出 Angular JS ，这是一款 JavaScript 框架，用来开发浏览器应用，但是 Angular JS缺陷挺多，所以谷歌后来推出 Angular 框架(这两个是独立的产品)</p>\n<p>基于 Angular 思路成功 就有了 Vue 和 React ，就有了前端框架三足鼎立的局面。前端工程师就可以组件化开发模式利用了JS的智能可编程性来管理HTML和CSS<br>工程文件结构</p>\n<p>有了 node ，我可以调用操作系统的资源，我们就可以规定一些语法和文件，就像定义一些模板，让 node 帮我们去生成 HTML ,CSS 和JavaScript ，我们就可以不必去写这些代码，代码管理性、可复用性、工程性就越来越好</p>\n<h4 id=\"不一样的JavaScript\"><a href=\"#不一样的JavaScript\" class=\"headerlink\" title=\"不一样的JavaScript\"></a>不一样的JavaScript</h4><p>在了解前端的发展之前，我对于 JavaScript 的理解还停留在只能写写网页特效的层面，但是现在我才意识到得益于 Chrome V8 和Node ，使得 JavaScript 展现出不一样的活力，可以用来写服务器、内核，还有各种跨平台的应用</p>\n<p>Cordova：Adobe 发起的项目原名叫 PhoneGap，后来贡献给 Apache 基金会，<br>Cordova是一个框架，允许开发者用 HTML ,CSS 和JavaScript 开发可以跨平台在安卓,IOS,Windows上的程序</p>\n<p>Electron：允许开发者用 HTML ,CSS 和JavaScript 开发运行在Windows,Linux,Mac 上的程序。VScode ,微信Linux , Atom , Github客户端都使用这个框架开发</p>\n<p><img src=\"/2019/11/20/front-end/6.png\" alt=\"VScdoe\"><br><img src=\"/2019/11/20/front-end/7.png\" alt=\"WeChat\"></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://www.bilibili.com/video/av31440465\" target=\"_blank\" rel=\"noopener\">简述前后端分离架构：HTML写的不是网页之 - 前端应用发展简史 </a><br><a href=\"https://zhuanlan.zhihu.com/p/74546693\" target=\"_blank\" rel=\"noopener\">前端入门框架前的几个大坑（小白向） - 汪小黑的文章 - 知乎 </a><br><a href=\"https://www.bilibili.com/video/av52669035​\" target=\"_blank\" rel=\"noopener\">WEB前端——浏览器内核 </a><br><a href=\"https://cloud.tencent.com/developer/article/1333686​\" target=\"_blank\" rel=\"noopener\">web的发展</a><br><a href=\"https://www.bilibili.com/video/av61920847/\" target=\"_blank\" rel=\"noopener\">【网页设计】30年发展史1990-2019 （中英字幕1080P）​</a><br><a href=\"https://zhuanlan.zhihu.com/p/84054729​\" target=\"_blank\" rel=\"noopener\">erverless——前端的3.0时代 </a><br><a href=\"https://segmentfault.com/a/1190000016269636\" target=\"_blank\" rel=\"noopener\">《从零构建前后分离web项目》：开篇 - 纵观WEB历史演变 </a><br><a href=\"https://cloud.tencent.com/developer/article/1028964​\" target=\"_blank\" rel=\"noopener\">学前端，我们要学的是什么 </a><br><a href=\"https://www.bilibili.com/video/av27151150\" target=\"_blank\" rel=\"noopener\">【WEB全能课】第一讲：初识前端  </a><br><a href=\"https://juejin.im/post/58ed0a938d6d8100580a45b0​\" target=\"_blank\" rel=\"noopener\">Web简史 </a><br><a href=\"https://www.zhihu.com/question/21923056/answer/804820546​​​\" target=\"_blank\" rel=\"noopener\">到底什么是前端、后端、后台啊？ - 科普小民工的回答 - 知乎 </a><br><a href=\"https://zhuanlan.zhihu.com/p/68030183​\" target=\"_blank\" rel=\"noopener\">前端开发 20 年变迁史 </a><br><a href=\"https://www.itsource.cn/web/news/1892.html​\" target=\"_blank\" rel=\"noopener\">程序员和准程序员必看：Web技术的发展历史和未来趋势  </a><br><a href=\"https://zhuanlan.zhihu.com/p/30704540​\" target=\"_blank\" rel=\"noopener\">Query真的过时了! </a><br><a href=\"https://www.cnblogs.com/leftJS/p/11073481.html​\" target=\"_blank\" rel=\"noopener\">MD、CMD规范 </a><br><a href=\"https://www.uisdc.com/brief-history-of-web-design\" target=\"_blank\" rel=\"noopener\">涨姿势！写给网页设计师的网页设计简史 </a><br><a href=\"https://www.zhihu.com/question/304757674/answer/546374749\" target=\"_blank\" rel=\"noopener\">前端三大框架以及jquery与bootstrap这种框架有什么（概念上、范畴上的）区别？ - 陈龙的回答 - 知乎</a></p>\n"},{"title":"CentOS7 初次配置","date":"2020-08-10T07:32:12.000Z","_content":"## 基本配置（使用root账户）\n\n1. 使用静态IP\n使用vi编辑器，编辑配置文件，vi编辑器的逻辑和其他编辑器不太一样，第一次使用推荐先学习一下 [Vi 极简入门](https://segmentfault.com/a/1190000008929397)\n```\nvi /etc/sysconfig/network-scripts/ifcfg-ens33\n```\n编辑ifcfg-ens33文件\n```\n# 修改以下内容\nBOOTPROTO=static           # 启用静态IP地址\nONBOOT=yes                 # 开启自动启用网络连接\n\n# 添加以下内容(要结合自己实际的ip情况配置)\nIPADDR=192.168.43.137      # 设置IP地址\nNETMASK=255.255.255.0      # 子网掩码\nGATEWAY=192.168.43.1       # 设置网关\n```\n\n重启网卡，使配置生效\n```\n# 不要在Xshell中执行，可能会断开\nsystemctl restart network\n```\n\n2. 更改镜像源\n\n```\n# 安装wget（Linux系统中的一个下载文件的工具）\nyum install -y wget\n       \n# 下载Aliyun的repo\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\n\n# 更新镜像源\nyum clean all\nyum makecache\n```\n\n3. 安装Vim编辑器（Vi的进阶版）\n\n```\nyum install -y vim \n```\n\n4. 防火墙\n关闭防火墙会简化一些软件的配置过程，但是不安全，生产环境谨慎关闭防火墙，可以通过开放指定端口实现互通\n```\n# 关闭防火墙\nsystemctl stop firewalld\n\n# 禁止开机启动\nsystemctl disable firewalld\n```\n5. 更新或升级CentOS\n这两个命令可能都会升级内核版本，生产环境要注意\n```\nyum update && yum upgrade\n```\n6. 添加普通用户到sudo中\n解决普通用户使用sudo时提示 “xxx 不在 sudoers 文件中。此事将被报告” (xxx is not in the sudoers file)\n```\n# 在root用户下\nvisudo\n```\n在100行左右添加模仿root账户写法，添加\n```\n# hadoop为需要指定的账户名\nhadoop  ALL=(ALL)       ALL\n```\n\n![visudo](centos7-initial-configuration/01.png)\n## 参考\n[Centos7.7安装及配置教程](https://juejin.im/post/6844904101583519752)\n[安装CentOS后的基本配置](https://blog.csdn.net/chengyuqiang/article/details/55044073)\n[linux下”is not in the sudoers file“问题的解决办法](https://blog.csdn.net/summy_J/article/details/72846076?utm_source=distribute.pc_relevant.none-task)","source":"_posts/centos7-initial-configuration.md","raw":"---\ntitle: CentOS7 初次配置\ncategories: Linux笔记\ndate: 2020-08-10 15:32:12\n---\n## 基本配置（使用root账户）\n\n1. 使用静态IP\n使用vi编辑器，编辑配置文件，vi编辑器的逻辑和其他编辑器不太一样，第一次使用推荐先学习一下 [Vi 极简入门](https://segmentfault.com/a/1190000008929397)\n```\nvi /etc/sysconfig/network-scripts/ifcfg-ens33\n```\n编辑ifcfg-ens33文件\n```\n# 修改以下内容\nBOOTPROTO=static           # 启用静态IP地址\nONBOOT=yes                 # 开启自动启用网络连接\n\n# 添加以下内容(要结合自己实际的ip情况配置)\nIPADDR=192.168.43.137      # 设置IP地址\nNETMASK=255.255.255.0      # 子网掩码\nGATEWAY=192.168.43.1       # 设置网关\n```\n\n重启网卡，使配置生效\n```\n# 不要在Xshell中执行，可能会断开\nsystemctl restart network\n```\n\n2. 更改镜像源\n\n```\n# 安装wget（Linux系统中的一个下载文件的工具）\nyum install -y wget\n       \n# 下载Aliyun的repo\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\n\n# 更新镜像源\nyum clean all\nyum makecache\n```\n\n3. 安装Vim编辑器（Vi的进阶版）\n\n```\nyum install -y vim \n```\n\n4. 防火墙\n关闭防火墙会简化一些软件的配置过程，但是不安全，生产环境谨慎关闭防火墙，可以通过开放指定端口实现互通\n```\n# 关闭防火墙\nsystemctl stop firewalld\n\n# 禁止开机启动\nsystemctl disable firewalld\n```\n5. 更新或升级CentOS\n这两个命令可能都会升级内核版本，生产环境要注意\n```\nyum update && yum upgrade\n```\n6. 添加普通用户到sudo中\n解决普通用户使用sudo时提示 “xxx 不在 sudoers 文件中。此事将被报告” (xxx is not in the sudoers file)\n```\n# 在root用户下\nvisudo\n```\n在100行左右添加模仿root账户写法，添加\n```\n# hadoop为需要指定的账户名\nhadoop  ALL=(ALL)       ALL\n```\n\n![visudo](centos7-initial-configuration/01.png)\n## 参考\n[Centos7.7安装及配置教程](https://juejin.im/post/6844904101583519752)\n[安装CentOS后的基本配置](https://blog.csdn.net/chengyuqiang/article/details/55044073)\n[linux下”is not in the sudoers file“问题的解决办法](https://blog.csdn.net/summy_J/article/details/72846076?utm_source=distribute.pc_relevant.none-task)","slug":"centos7-initial-configuration","published":1,"updated":"2020-08-10T10:00:42.658Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke3x9g3b0005zgvubymu0olr","content":"<h2 id=\"基本配置（使用root账户）\"><a href=\"#基本配置（使用root账户）\" class=\"headerlink\" title=\"基本配置（使用root账户）\"></a>基本配置（使用root账户）</h2><ol>\n<li>使用静态IP<br>使用vi编辑器，编辑配置文件，vi编辑器的逻辑和其他编辑器不太一样，第一次使用推荐先学习一下 <a href=\"https://segmentfault.com/a/1190000008929397\" target=\"_blank\" rel=\"noopener\">Vi 极简入门</a><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure>\n编辑ifcfg-ens33文件<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 修改以下内容</span><br><span class=\"line\">BOOTPROTO=static           # 启用静态IP地址</span><br><span class=\"line\">ONBOOT=yes                 # 开启自动启用网络连接</span><br><span class=\"line\"></span><br><span class=\"line\"># 添加以下内容(要结合自己实际的ip情况配置)</span><br><span class=\"line\">IPADDR=192.168.43.137      # 设置IP地址</span><br><span class=\"line\">NETMASK=255.255.255.0      # 子网掩码</span><br><span class=\"line\">GATEWAY=192.168.43.1       # 设置网关</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>重启网卡，使配置生效</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 不要在Xshell中执行，可能会断开</span><br><span class=\"line\">systemctl restart network</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>更改镜像源</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装wget（Linux系统中的一个下载文件的工具）</span><br><span class=\"line\">yum install -y wget</span><br><span class=\"line\">       </span><br><span class=\"line\"># 下载Aliyun的repo</span><br><span class=\"line\">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class=\"line\"></span><br><span class=\"line\"># 更新镜像源</span><br><span class=\"line\">yum clean all</span><br><span class=\"line\">yum makecache</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>安装Vim编辑器（Vi的进阶版）</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y vim</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>防火墙<br>关闭防火墙会简化一些软件的配置过程，但是不安全，生产环境谨慎关闭防火墙，可以通过开放指定端口实现互通<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 关闭防火墙</span><br><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\"></span><br><span class=\"line\"># 禁止开机启动</span><br><span class=\"line\">systemctl disable firewalld</span><br></pre></td></tr></table></figure></li>\n<li>更新或升级CentOS<br>这两个命令可能都会升级内核版本，生产环境要注意<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum update &amp;&amp; yum upgrade</span><br></pre></td></tr></table></figure></li>\n<li>添加普通用户到sudo中<br>解决普通用户使用sudo时提示 “xxx 不在 sudoers 文件中。此事将被报告” (xxx is not in the sudoers file)<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 在root用户下</span><br><span class=\"line\">visudo</span><br></pre></td></tr></table></figure>\n在100行左右添加模仿root账户写法，添加<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># hadoop为需要指定的账户名</span><br><span class=\"line\">hadoop  ALL=(ALL)       ALL</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p><img src=\"/2020/08/10/centos7-initial-configuration/01.png\" alt=\"visudo\"></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://juejin.im/post/6844904101583519752\" target=\"_blank\" rel=\"noopener\">Centos7.7安装及配置教程</a><br><a href=\"https://blog.csdn.net/chengyuqiang/article/details/55044073\" target=\"_blank\" rel=\"noopener\">安装CentOS后的基本配置</a><br><a href=\"https://blog.csdn.net/summy_J/article/details/72846076?utm_source=distribute.pc_relevant.none-task\" target=\"_blank\" rel=\"noopener\">linux下”is not in the sudoers file“问题的解决办法</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基本配置（使用root账户）\"><a href=\"#基本配置（使用root账户）\" class=\"headerlink\" title=\"基本配置（使用root账户）\"></a>基本配置（使用root账户）</h2><ol>\n<li>使用静态IP<br>使用vi编辑器，编辑配置文件，vi编辑器的逻辑和其他编辑器不太一样，第一次使用推荐先学习一下 <a href=\"https://segmentfault.com/a/1190000008929397\" target=\"_blank\" rel=\"noopener\">Vi 极简入门</a><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure>\n编辑ifcfg-ens33文件<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 修改以下内容</span><br><span class=\"line\">BOOTPROTO=static           # 启用静态IP地址</span><br><span class=\"line\">ONBOOT=yes                 # 开启自动启用网络连接</span><br><span class=\"line\"></span><br><span class=\"line\"># 添加以下内容(要结合自己实际的ip情况配置)</span><br><span class=\"line\">IPADDR=192.168.43.137      # 设置IP地址</span><br><span class=\"line\">NETMASK=255.255.255.0      # 子网掩码</span><br><span class=\"line\">GATEWAY=192.168.43.1       # 设置网关</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>重启网卡，使配置生效</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 不要在Xshell中执行，可能会断开</span><br><span class=\"line\">systemctl restart network</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>更改镜像源</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装wget（Linux系统中的一个下载文件的工具）</span><br><span class=\"line\">yum install -y wget</span><br><span class=\"line\">       </span><br><span class=\"line\"># 下载Aliyun的repo</span><br><span class=\"line\">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class=\"line\"></span><br><span class=\"line\"># 更新镜像源</span><br><span class=\"line\">yum clean all</span><br><span class=\"line\">yum makecache</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>安装Vim编辑器（Vi的进阶版）</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y vim</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>防火墙<br>关闭防火墙会简化一些软件的配置过程，但是不安全，生产环境谨慎关闭防火墙，可以通过开放指定端口实现互通<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 关闭防火墙</span><br><span class=\"line\">systemctl stop firewalld</span><br><span class=\"line\"></span><br><span class=\"line\"># 禁止开机启动</span><br><span class=\"line\">systemctl disable firewalld</span><br></pre></td></tr></table></figure></li>\n<li>更新或升级CentOS<br>这两个命令可能都会升级内核版本，生产环境要注意<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum update &amp;&amp; yum upgrade</span><br></pre></td></tr></table></figure></li>\n<li>添加普通用户到sudo中<br>解决普通用户使用sudo时提示 “xxx 不在 sudoers 文件中。此事将被报告” (xxx is not in the sudoers file)<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 在root用户下</span><br><span class=\"line\">visudo</span><br></pre></td></tr></table></figure>\n在100行左右添加模仿root账户写法，添加<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># hadoop为需要指定的账户名</span><br><span class=\"line\">hadoop  ALL=(ALL)       ALL</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p><img src=\"/2020/08/10/centos7-initial-configuration/01.png\" alt=\"visudo\"></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://juejin.im/post/6844904101583519752\" target=\"_blank\" rel=\"noopener\">Centos7.7安装及配置教程</a><br><a href=\"https://blog.csdn.net/chengyuqiang/article/details/55044073\" target=\"_blank\" rel=\"noopener\">安装CentOS后的基本配置</a><br><a href=\"https://blog.csdn.net/summy_J/article/details/72846076?utm_source=distribute.pc_relevant.none-task\" target=\"_blank\" rel=\"noopener\">linux下”is not in the sudoers file“问题的解决办法</a></p>\n"},{"title":"安卓初学指南","date":"2020-06-01T06:34:26.000Z","_content":"项目第二阶段即将结束，这段时间遇到挺多坑的，所以整理了一下经验，如果你想尝试安卓开发，希望能帮到你。在此之前可以先看我之前写的[初见安卓开发](https://aaronlinv.github.io/2020/03/30/android-note/)，了解一下安卓开发目前的情况\n\n## 预先准备\n1. 需要熟悉Java基础语法\n2. 安装开发环境（JDK、AndroidStudio(简称AS)、虚拟机等），安装环境比较繁琐，而且需要下载很多东西（默认都是安装到C盘，总共可能会占用20G左右的空间）。安装可能会劝退一部分朋友，这里推荐两个教程跟着做就没问题了\n\n安装AS之前一般会先安装Java开发工具包(JDK)，可以参考这篇博客[【Android Studio安装部署系列】JDK开发环境搭建](https://www.cnblogs.com/whycxb/p/9032559.html)，比较值得一说的是，现在下载JDK要到Oracle官网，而且还需要注册账号，有点麻烦。然后开始安装AS，参考这个视频教程[1#Android Studio开发环境 (Attect) Android开发教程](https://www.bilibili.com/video/BV18b411H7Fr)\n\n3. [Android Studio 设置代码提示和代码自动补全快捷键](https://blog.csdn.net/wyf2017/article/details/81355414) \n4. [Android Studio 真机测试/开发者模式](https://www.cnblogs.com/zlc364624/p/10704980.html)\n\n初学比较常用的快捷键：\n- 智能建议：Alt 回车\n- 代码整理（格式化代码）： Ctrl Alt L\n- 注释：Ctrl /\n- 块注释：Ctrl Shift /\n\n## 开始学习\n如果没有任何开发经验，比较推荐看视频[Android开发教程（2019最新版,使用JetPack）](https://www.bilibili.com/video/av50954019)，这个教程使用的是JetPack库，前40集使用Java，从41集开始换为了Kotlin。个人觉得这作者讲的深入浅出，而且教程中也传递了很多规范化的思想，很适合初学者。要注意作者早期视频使用的是内测版本的ViewModel库，而现在默认自带稳定版，所以不需要手动添加ViewModel依赖，视频中使用的ViewModel构造方法已过时，应该使用下面这个：\n``` java\nMyViewModel = myViewModel = new ViewModelProvider(this).get(MyViewModel.class);\n```\n\n初学最好按着教程一步一步来，变量名也最好跟着教程来，这样出错了跟着视频，排错起来也比较容易。一定要跟着敲代码，边敲边理解整个逻辑，刚开始可能比较懵，但是到后面，对整个体系有了一定了解，就会豁然开朗，这个时候可以看看[官方文档](https://developer.android.com/guide)，这样会加深对安卓开发或是JetPack的理解\n\n<br>觉得学的差不多了，就可以开始在GitHub上找一些感兴趣的安卓项目（或者是找一些最佳实践），克隆下来，看看别人是怎么写的，模仿这写一写，这个过程会遇到很多问题，解决这些问题，就会收获很大的提升\n\n## 遇到的问题\n1. 如果开始使用数据库或者网络相关操作就会遇到不能在主线程（UI线程）上运行这些耗时操作的问题，这个时候一般解决方案就是new Thread，但是这样的话在new出来的线程里操作UI控件会报错：\n```\nOnly the original thread that created a view hierarchy can touch its views.\n```\n这个时候就需要学习一下[Android多线程和异步任务](https://www.bilibili.com/video/BV1m4411r73w)，Kotlin的话可以用协程\n2. 涉及网络请求推荐看这个系列，从Java原生API到OkHttp再到Retrofit：[Android开发基础-网络编程](https://www.bilibili.com/video/BV1TJ411v75g)\n3. 如果界面比较复杂，使用系统自带的控件可能无法直接实现我们的需求，这个时候需要写一些自定义控件，推荐这个系列[Android开发自定义控件基础课程](https://www.bilibili.com/video/BV1CZ4y1p7n5)\n4. 页面跳转会使用到Jetpack中的Navigation组件：[Jetpack 之 Navigation](https://www.duanyitao.com/2019/03/31/Jetpack-%E4%B9%8B-Navigation/)\n\n## 组件库\n安卓有很多成熟的第三方组件库，合理使用可以简化开发，加速开发速度\n在使用这些组件库时需要考虑安全性、稳定性等问题\n推荐这个项目，可以帮助你找到适合的组件库[AndroidLibs](https://github.com/XXApple/AndroidLibs)","source":"_posts/android-beginner.md","raw":"---\ntitle: 安卓初学指南\ncategories: 编程杂记\ndate: 2020-06-01 14:34:26\n---\n项目第二阶段即将结束，这段时间遇到挺多坑的，所以整理了一下经验，如果你想尝试安卓开发，希望能帮到你。在此之前可以先看我之前写的[初见安卓开发](https://aaronlinv.github.io/2020/03/30/android-note/)，了解一下安卓开发目前的情况\n\n## 预先准备\n1. 需要熟悉Java基础语法\n2. 安装开发环境（JDK、AndroidStudio(简称AS)、虚拟机等），安装环境比较繁琐，而且需要下载很多东西（默认都是安装到C盘，总共可能会占用20G左右的空间）。安装可能会劝退一部分朋友，这里推荐两个教程跟着做就没问题了\n\n安装AS之前一般会先安装Java开发工具包(JDK)，可以参考这篇博客[【Android Studio安装部署系列】JDK开发环境搭建](https://www.cnblogs.com/whycxb/p/9032559.html)，比较值得一说的是，现在下载JDK要到Oracle官网，而且还需要注册账号，有点麻烦。然后开始安装AS，参考这个视频教程[1#Android Studio开发环境 (Attect) Android开发教程](https://www.bilibili.com/video/BV18b411H7Fr)\n\n3. [Android Studio 设置代码提示和代码自动补全快捷键](https://blog.csdn.net/wyf2017/article/details/81355414) \n4. [Android Studio 真机测试/开发者模式](https://www.cnblogs.com/zlc364624/p/10704980.html)\n\n初学比较常用的快捷键：\n- 智能建议：Alt 回车\n- 代码整理（格式化代码）： Ctrl Alt L\n- 注释：Ctrl /\n- 块注释：Ctrl Shift /\n\n## 开始学习\n如果没有任何开发经验，比较推荐看视频[Android开发教程（2019最新版,使用JetPack）](https://www.bilibili.com/video/av50954019)，这个教程使用的是JetPack库，前40集使用Java，从41集开始换为了Kotlin。个人觉得这作者讲的深入浅出，而且教程中也传递了很多规范化的思想，很适合初学者。要注意作者早期视频使用的是内测版本的ViewModel库，而现在默认自带稳定版，所以不需要手动添加ViewModel依赖，视频中使用的ViewModel构造方法已过时，应该使用下面这个：\n``` java\nMyViewModel = myViewModel = new ViewModelProvider(this).get(MyViewModel.class);\n```\n\n初学最好按着教程一步一步来，变量名也最好跟着教程来，这样出错了跟着视频，排错起来也比较容易。一定要跟着敲代码，边敲边理解整个逻辑，刚开始可能比较懵，但是到后面，对整个体系有了一定了解，就会豁然开朗，这个时候可以看看[官方文档](https://developer.android.com/guide)，这样会加深对安卓开发或是JetPack的理解\n\n<br>觉得学的差不多了，就可以开始在GitHub上找一些感兴趣的安卓项目（或者是找一些最佳实践），克隆下来，看看别人是怎么写的，模仿这写一写，这个过程会遇到很多问题，解决这些问题，就会收获很大的提升\n\n## 遇到的问题\n1. 如果开始使用数据库或者网络相关操作就会遇到不能在主线程（UI线程）上运行这些耗时操作的问题，这个时候一般解决方案就是new Thread，但是这样的话在new出来的线程里操作UI控件会报错：\n```\nOnly the original thread that created a view hierarchy can touch its views.\n```\n这个时候就需要学习一下[Android多线程和异步任务](https://www.bilibili.com/video/BV1m4411r73w)，Kotlin的话可以用协程\n2. 涉及网络请求推荐看这个系列，从Java原生API到OkHttp再到Retrofit：[Android开发基础-网络编程](https://www.bilibili.com/video/BV1TJ411v75g)\n3. 如果界面比较复杂，使用系统自带的控件可能无法直接实现我们的需求，这个时候需要写一些自定义控件，推荐这个系列[Android开发自定义控件基础课程](https://www.bilibili.com/video/BV1CZ4y1p7n5)\n4. 页面跳转会使用到Jetpack中的Navigation组件：[Jetpack 之 Navigation](https://www.duanyitao.com/2019/03/31/Jetpack-%E4%B9%8B-Navigation/)\n\n## 组件库\n安卓有很多成熟的第三方组件库，合理使用可以简化开发，加速开发速度\n在使用这些组件库时需要考虑安全性、稳定性等问题\n推荐这个项目，可以帮助你找到适合的组件库[AndroidLibs](https://github.com/XXApple/AndroidLibs)","slug":"android-beginner","published":1,"updated":"2020-06-13T02:55:34.696Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke3x9g3i0006zgvuaqh7hrby","content":"<p>项目第二阶段即将结束，这段时间遇到挺多坑的，所以整理了一下经验，如果你想尝试安卓开发，希望能帮到你。在此之前可以先看我之前写的<a href=\"https://aaronlinv.github.io/2020/03/30/android-note/\">初见安卓开发</a>，了解一下安卓开发目前的情况</p>\n<h2 id=\"预先准备\"><a href=\"#预先准备\" class=\"headerlink\" title=\"预先准备\"></a>预先准备</h2><ol>\n<li>需要熟悉Java基础语法</li>\n<li>安装开发环境（JDK、AndroidStudio(简称AS)、虚拟机等），安装环境比较繁琐，而且需要下载很多东西（默认都是安装到C盘，总共可能会占用20G左右的空间）。安装可能会劝退一部分朋友，这里推荐两个教程跟着做就没问题了</li>\n</ol>\n<p>安装AS之前一般会先安装Java开发工具包(JDK)，可以参考这篇博客<a href=\"https://www.cnblogs.com/whycxb/p/9032559.html\" target=\"_blank\" rel=\"noopener\">【Android Studio安装部署系列】JDK开发环境搭建</a>，比较值得一说的是，现在下载JDK要到Oracle官网，而且还需要注册账号，有点麻烦。然后开始安装AS，参考这个视频教程<a href=\"https://www.bilibili.com/video/BV18b411H7Fr\" target=\"_blank\" rel=\"noopener\">1#Android Studio开发环境 (Attect) Android开发教程</a></p>\n<ol start=\"3\">\n<li><a href=\"https://blog.csdn.net/wyf2017/article/details/81355414\" target=\"_blank\" rel=\"noopener\">Android Studio 设置代码提示和代码自动补全快捷键</a> </li>\n<li><a href=\"https://www.cnblogs.com/zlc364624/p/10704980.html\" target=\"_blank\" rel=\"noopener\">Android Studio 真机测试/开发者模式</a></li>\n</ol>\n<p>初学比较常用的快捷键：</p>\n<ul>\n<li>智能建议：Alt 回车</li>\n<li>代码整理（格式化代码）： Ctrl Alt L</li>\n<li>注释：Ctrl /</li>\n<li>块注释：Ctrl Shift /</li>\n</ul>\n<h2 id=\"开始学习\"><a href=\"#开始学习\" class=\"headerlink\" title=\"开始学习\"></a>开始学习</h2><p>如果没有任何开发经验，比较推荐看视频<a href=\"https://www.bilibili.com/video/av50954019\" target=\"_blank\" rel=\"noopener\">Android开发教程（2019最新版,使用JetPack）</a>，这个教程使用的是JetPack库，前40集使用Java，从41集开始换为了Kotlin。个人觉得这作者讲的深入浅出，而且教程中也传递了很多规范化的思想，很适合初学者。要注意作者早期视频使用的是内测版本的ViewModel库，而现在默认自带稳定版，所以不需要手动添加ViewModel依赖，视频中使用的ViewModel构造方法已过时，应该使用下面这个：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyViewModel = myViewModel = <span class=\"keyword\">new</span> ViewModelProvider(<span class=\"keyword\">this</span>).get(MyViewModel.class);</span><br></pre></td></tr></table></figure>\n\n<p>初学最好按着教程一步一步来，变量名也最好跟着教程来，这样出错了跟着视频，排错起来也比较容易。一定要跟着敲代码，边敲边理解整个逻辑，刚开始可能比较懵，但是到后面，对整个体系有了一定了解，就会豁然开朗，这个时候可以看看<a href=\"https://developer.android.com/guide\" target=\"_blank\" rel=\"noopener\">官方文档</a>，这样会加深对安卓开发或是JetPack的理解</p>\n<p><br>觉得学的差不多了，就可以开始在GitHub上找一些感兴趣的安卓项目（或者是找一些最佳实践），克隆下来，看看别人是怎么写的，模仿这写一写，这个过程会遇到很多问题，解决这些问题，就会收获很大的提升</p>\n<h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><ol>\n<li>如果开始使用数据库或者网络相关操作就会遇到不能在主线程（UI线程）上运行这些耗时操作的问题，这个时候一般解决方案就是new Thread，但是这样的话在new出来的线程里操作UI控件会报错：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Only the original thread that created a view hierarchy can touch its views.</span><br></pre></td></tr></table></figure>\n这个时候就需要学习一下<a href=\"https://www.bilibili.com/video/BV1m4411r73w\" target=\"_blank\" rel=\"noopener\">Android多线程和异步任务</a>，Kotlin的话可以用协程</li>\n<li>涉及网络请求推荐看这个系列，从Java原生API到OkHttp再到Retrofit：<a href=\"https://www.bilibili.com/video/BV1TJ411v75g\" target=\"_blank\" rel=\"noopener\">Android开发基础-网络编程</a></li>\n<li>如果界面比较复杂，使用系统自带的控件可能无法直接实现我们的需求，这个时候需要写一些自定义控件，推荐这个系列<a href=\"https://www.bilibili.com/video/BV1CZ4y1p7n5\" target=\"_blank\" rel=\"noopener\">Android开发自定义控件基础课程</a></li>\n<li>页面跳转会使用到Jetpack中的Navigation组件：<a href=\"https://www.duanyitao.com/2019/03/31/Jetpack-%E4%B9%8B-Navigation/\" target=\"_blank\" rel=\"noopener\">Jetpack 之 Navigation</a></li>\n</ol>\n<h2 id=\"组件库\"><a href=\"#组件库\" class=\"headerlink\" title=\"组件库\"></a>组件库</h2><p>安卓有很多成熟的第三方组件库，合理使用可以简化开发，加速开发速度<br>在使用这些组件库时需要考虑安全性、稳定性等问题<br>推荐这个项目，可以帮助你找到适合的组件库<a href=\"https://github.com/XXApple/AndroidLibs\" target=\"_blank\" rel=\"noopener\">AndroidLibs</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>项目第二阶段即将结束，这段时间遇到挺多坑的，所以整理了一下经验，如果你想尝试安卓开发，希望能帮到你。在此之前可以先看我之前写的<a href=\"https://aaronlinv.github.io/2020/03/30/android-note/\">初见安卓开发</a>，了解一下安卓开发目前的情况</p>\n<h2 id=\"预先准备\"><a href=\"#预先准备\" class=\"headerlink\" title=\"预先准备\"></a>预先准备</h2><ol>\n<li>需要熟悉Java基础语法</li>\n<li>安装开发环境（JDK、AndroidStudio(简称AS)、虚拟机等），安装环境比较繁琐，而且需要下载很多东西（默认都是安装到C盘，总共可能会占用20G左右的空间）。安装可能会劝退一部分朋友，这里推荐两个教程跟着做就没问题了</li>\n</ol>\n<p>安装AS之前一般会先安装Java开发工具包(JDK)，可以参考这篇博客<a href=\"https://www.cnblogs.com/whycxb/p/9032559.html\" target=\"_blank\" rel=\"noopener\">【Android Studio安装部署系列】JDK开发环境搭建</a>，比较值得一说的是，现在下载JDK要到Oracle官网，而且还需要注册账号，有点麻烦。然后开始安装AS，参考这个视频教程<a href=\"https://www.bilibili.com/video/BV18b411H7Fr\" target=\"_blank\" rel=\"noopener\">1#Android Studio开发环境 (Attect) Android开发教程</a></p>\n<ol start=\"3\">\n<li><a href=\"https://blog.csdn.net/wyf2017/article/details/81355414\" target=\"_blank\" rel=\"noopener\">Android Studio 设置代码提示和代码自动补全快捷键</a> </li>\n<li><a href=\"https://www.cnblogs.com/zlc364624/p/10704980.html\" target=\"_blank\" rel=\"noopener\">Android Studio 真机测试/开发者模式</a></li>\n</ol>\n<p>初学比较常用的快捷键：</p>\n<ul>\n<li>智能建议：Alt 回车</li>\n<li>代码整理（格式化代码）： Ctrl Alt L</li>\n<li>注释：Ctrl /</li>\n<li>块注释：Ctrl Shift /</li>\n</ul>\n<h2 id=\"开始学习\"><a href=\"#开始学习\" class=\"headerlink\" title=\"开始学习\"></a>开始学习</h2><p>如果没有任何开发经验，比较推荐看视频<a href=\"https://www.bilibili.com/video/av50954019\" target=\"_blank\" rel=\"noopener\">Android开发教程（2019最新版,使用JetPack）</a>，这个教程使用的是JetPack库，前40集使用Java，从41集开始换为了Kotlin。个人觉得这作者讲的深入浅出，而且教程中也传递了很多规范化的思想，很适合初学者。要注意作者早期视频使用的是内测版本的ViewModel库，而现在默认自带稳定版，所以不需要手动添加ViewModel依赖，视频中使用的ViewModel构造方法已过时，应该使用下面这个：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyViewModel = myViewModel = <span class=\"keyword\">new</span> ViewModelProvider(<span class=\"keyword\">this</span>).get(MyViewModel.class);</span><br></pre></td></tr></table></figure>\n\n<p>初学最好按着教程一步一步来，变量名也最好跟着教程来，这样出错了跟着视频，排错起来也比较容易。一定要跟着敲代码，边敲边理解整个逻辑，刚开始可能比较懵，但是到后面，对整个体系有了一定了解，就会豁然开朗，这个时候可以看看<a href=\"https://developer.android.com/guide\" target=\"_blank\" rel=\"noopener\">官方文档</a>，这样会加深对安卓开发或是JetPack的理解</p>\n<p><br>觉得学的差不多了，就可以开始在GitHub上找一些感兴趣的安卓项目（或者是找一些最佳实践），克隆下来，看看别人是怎么写的，模仿这写一写，这个过程会遇到很多问题，解决这些问题，就会收获很大的提升</p>\n<h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><ol>\n<li>如果开始使用数据库或者网络相关操作就会遇到不能在主线程（UI线程）上运行这些耗时操作的问题，这个时候一般解决方案就是new Thread，但是这样的话在new出来的线程里操作UI控件会报错：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Only the original thread that created a view hierarchy can touch its views.</span><br></pre></td></tr></table></figure>\n这个时候就需要学习一下<a href=\"https://www.bilibili.com/video/BV1m4411r73w\" target=\"_blank\" rel=\"noopener\">Android多线程和异步任务</a>，Kotlin的话可以用协程</li>\n<li>涉及网络请求推荐看这个系列，从Java原生API到OkHttp再到Retrofit：<a href=\"https://www.bilibili.com/video/BV1TJ411v75g\" target=\"_blank\" rel=\"noopener\">Android开发基础-网络编程</a></li>\n<li>如果界面比较复杂，使用系统自带的控件可能无法直接实现我们的需求，这个时候需要写一些自定义控件，推荐这个系列<a href=\"https://www.bilibili.com/video/BV1CZ4y1p7n5\" target=\"_blank\" rel=\"noopener\">Android开发自定义控件基础课程</a></li>\n<li>页面跳转会使用到Jetpack中的Navigation组件：<a href=\"https://www.duanyitao.com/2019/03/31/Jetpack-%E4%B9%8B-Navigation/\" target=\"_blank\" rel=\"noopener\">Jetpack 之 Navigation</a></li>\n</ol>\n<h2 id=\"组件库\"><a href=\"#组件库\" class=\"headerlink\" title=\"组件库\"></a>组件库</h2><p>安卓有很多成熟的第三方组件库，合理使用可以简化开发，加速开发速度<br>在使用这些组件库时需要考虑安全性、稳定性等问题<br>推荐这个项目，可以帮助你找到适合的组件库<a href=\"https://github.com/XXApple/AndroidLibs\" target=\"_blank\" rel=\"noopener\">AndroidLibs</a></p>\n"},{"title":"Git笔记","date":"2020-04-04T08:37:57.000Z","_content":"## 学习建议\n[廖雪峰Git教程 ](https://www.liaoxuefeng.com/wiki/896043488029600)比较详细，可操作性也比较强，在评论区可以找到勘误\nGit官方推荐的[《Pro Git》](https://git-scm.com/book/zh/v2)也很不错，推荐掌握了一定Git基础后再看\n对于没有Linux基础，或者文字版学起来比较困难的朋友可以看系列视频教程 [互联网人都该懂点 Git](https://www.bilibili.com/video/BV1HW411f7VJ)\n## 注意点\nGit 2.23 (2019.8.16) \ngit checkout 这个命令被拆分成了两个新命令：git switch 和 git restore\n创建并切换到dev分支：git checkout -b dev 现在用git switch -c dev 效果相同\n\n## 初始配置\n安装Git Bash后需要做初始配置\n1. 用户名邮箱\n```bash\n# 任意文件夹右键 点击“Git Bash Here”\n# \"\"内替换为自己的用户名和邮箱\ngit config --global user.name \"username\"\ngit config --global user.email \"email\"\n\n# 查看配置是否成功\ngit config user.name\ngit config user.email\n```\n2. SSH 免密登录\n```bash\n# ssh-keygen用于生成，管理和转换身份验证密钥\n# -t：密钥的类型 \n# -C：用于识别这个密钥的注释（不添加注释直接ssh-keygen -t rsa也不影响使用）\nssh-keygen -t rsa -C \"邮箱地址\"\n\n# 连续按3次回车\n\n# 将用户目录下.ssh文件夹内的id_rsa.pub的内容粘贴到 GitHub Settings-SSH and GPG keys-SSH keys\n\n# 测试是否成功Github \nssh git@github.com\n# Are you sure you want to continue connecting (yes/no)? \n# 这时需要输入：yes\n\n#成功会提示成功认证你的账户\n# Hi aaronlinv! You've successfully authenticated, but GitHub does not provide shell access.\n# Connection to github.com closed.\n```\n\n## 场景0：Git基本使用\n```bash \n# 新建文件夹，初始化为Git仓库\nmkdir learn-git\ncd learn-git\ngit init\n\n# 添加并编辑文件\nvim test.txt\n\n# 查看文件状态 test.txt现在为Untracked状态\ngit status\n\n# 添加文件到暂存区\ngit add test.txt\n\n# 提交commit -m 代表添加一个“提交信息”\ngit commit -m \"add test.txt\"\n\n# 推送到GitHub（在GitHub上创建空白仓库，并复制仓库地址）\n# 先添加远端参考\ngit remote add origin git@github.com:aaronlinv/learn-git.git\n\n# 查看远端操作（会显示 fetch和push）\ngit remote -v \n\n# 推送到远端仓库（使用SSH协议需要配置SSH免密登录）\ngit push -u origin master\n# -u：指定默认远端仓库别名，下一次推送只需使用git push\n# origin：远端仓库的别名（默认origin）\n# master：分支名称\n```\npush 是可能会遇到报错：refusing to merge unrelated histories\n原因是远程仓库和本地仓库做了不同的改变并commit，导致本地仓库和远程仓库变成了独立的两个仓库，所以不能直接合并，执行以下命令即可推送\n```bash\ngit pull origin master --allow-unrelated-histories\n```\n\n## 场景1：克隆仓库\n```bash\n# 克隆仓库到本地（可以使用HTTPS或者SSH协议）\ngit clone https://github.com/aaronlinv/learn-git.git\n\n# Git会新建一个与仓库名同名的文件夹，进入文件夹\ncd learn-git\n\n# 如果这个仓库已经克隆很久了，本地和远程可能存在差异了，可以拉取远程仓库最新状态到本地仓库\ngit pull\n\n\n```\n## 场景2：分支管理\n```bash\n# 已经克隆仓库到本地\n# 开始工作前，先拉取远程最新修改（可能同事已经修改代码并提交了commit）\ngit pull\n\n# 新建并跳转到dev分支（也可使用git branch -b dev）\ngit switch -c dev\n\n# 查看分支情况\ngit branch\n\n# 可以在dev 分支上修改代码做add和commit\n\n# 推送dev分支到远程（需要拥有远端仓库的权限）\ngit push origin dev\n# 如果需要重命名远端分支则加上 :f1\ngit push origin dev:f1\n\n# 删除远端dev分支\ngit push origin :dev \n\n# 合并dev分支到master(需要先切换到master分支，在merge的过程可能需要解决冲突)\ngit switch master\ngit merge --no-ff dev \n\n# 查看分支合并情况\ngit log --graph --pretty=oneline --abbrev-commit\n\n# 删除本地dev分支\ngit branch -d dev \n```\n\n## merge和rebase\n#### 创建冲突场景\n```bash\n# 新建文件夹，初始化为Git仓库\nmkdir learn-git\ncd learn-git\ngit init\n\n# 添加并编辑文件 \nvim c2\n\n# 添加文件到暂存区\ngit add c2\n\n# 提交commit -m 代表添加一个“提交信息”\ngit commit -m \"c2\"\n\n# 新建并跳转到experiment分支\ngit switch -c experiment\n\n# 添加并提交c4\nvim c4\ngit add c4\ngit commit -m \"c4\"\n\n# 切换回master分支\ngit switch master\n\n# 添加并提交c3\nvim c3\ngit add c3\ngit commit -m \"c3\"\n```\n到这c2就产生了分叉，experiment分支推进到了c4，master分支推进到了c3\n这个时候如果想把两个分支的修改合并到master分支上，可以使用merge或rebase(变基)，两种方式最后合并的结果是一样的，但rebase不会产生分叉，rebase的提交历史也比merge更线性\n\n#### merge\n```bash\n# 使用merge方式合并分支\n# 先切换到master分支\ngit switch master\n\n# 合并分支（会弹出commit message的编辑框，:wq 保存退出）\ngit merge experiment\n\n# 查看分支合并情况\ngit log --graph --pretty=oneline --abbrev-commit\n```\n\n> ![merge](git-note/1.png)\n> --- merge示意图 引用自《Git Pro》\n\n使用merge合并分支，相当于三方合并，合并c2,c3,c4（未新建experiment分支前的修改c2、新建分支后master分支的修改c3、experiment分支的修改c4）\n\n直接使用git merge <要被merge的分支名> ，没有冲突的情况下默认使用参数：--f 即：Fast-forward（快进式合并）\n推荐使用--no-ff 即：git merge --no-ff <要被merge的分支名>  \n这个参数的意思是禁止快进式合并，合并时会自动创建一次commit提交，保证提交链的完整性\n而Fast-forward合并分支会丢掉分支信息\n\n\n#### rebase\n```bash\n# 使用rebase方式合并分支\n# 先切换到experiment分支\ngit switch experiment\n\n# rebase分支\ngit rebase experiment\n\n# 先切换到master分支\ngit switch master\n\n# 将experiment合并到master\ngit merge experiment\n\n# 查看分支合并情况\ngit log --graph --pretty=oneline --abbrev-commit\n```\n> ![rebase](git-note/2.png)\n> ![rebase](git-note/3.png)\n> --- rebase示意图 引用自《Git Pro》\n\nrebase的原理是：找到c3和c4共同的祖先c2，暂存共同祖先c2到当前分支(expriment)的修改内容，然后将分支指向master的c3，并应用之前暂存的修改内容\n我们可以这么理解：\n\nrebase就是当前分支(experiment)提交的修改(c4)放到最前面，而把其他分支(master)已经提交的代码（c3）放到后面去，这样做的好处就是：自己写代码(experiment分支上的)将出现在master最新的一次commit中，一目了然\n\nrebase：黄金法则：绝对不要在公共分支使用rebase，rebase会重写提交历史\n\n\n## 参考资料\n[ssh-keygen的-C后面的邮箱有什么用？](https://blog.csdn.net/u011118321/article/details/78516303)\n[Git 合并时 --no-ff 的作用](https://blog.csdn.net/zombres/article/details/82179122)\n[记Git报错-refusing to merge unrelated histories](https://blog.csdn.net/u012145252/article/details/80628451)\n","source":"_posts/git-note.md","raw":"---\ntitle: Git笔记\ncategories: 编程杂记\ndate: 2020-04-04 16:37:57\n---\n## 学习建议\n[廖雪峰Git教程 ](https://www.liaoxuefeng.com/wiki/896043488029600)比较详细，可操作性也比较强，在评论区可以找到勘误\nGit官方推荐的[《Pro Git》](https://git-scm.com/book/zh/v2)也很不错，推荐掌握了一定Git基础后再看\n对于没有Linux基础，或者文字版学起来比较困难的朋友可以看系列视频教程 [互联网人都该懂点 Git](https://www.bilibili.com/video/BV1HW411f7VJ)\n## 注意点\nGit 2.23 (2019.8.16) \ngit checkout 这个命令被拆分成了两个新命令：git switch 和 git restore\n创建并切换到dev分支：git checkout -b dev 现在用git switch -c dev 效果相同\n\n## 初始配置\n安装Git Bash后需要做初始配置\n1. 用户名邮箱\n```bash\n# 任意文件夹右键 点击“Git Bash Here”\n# \"\"内替换为自己的用户名和邮箱\ngit config --global user.name \"username\"\ngit config --global user.email \"email\"\n\n# 查看配置是否成功\ngit config user.name\ngit config user.email\n```\n2. SSH 免密登录\n```bash\n# ssh-keygen用于生成，管理和转换身份验证密钥\n# -t：密钥的类型 \n# -C：用于识别这个密钥的注释（不添加注释直接ssh-keygen -t rsa也不影响使用）\nssh-keygen -t rsa -C \"邮箱地址\"\n\n# 连续按3次回车\n\n# 将用户目录下.ssh文件夹内的id_rsa.pub的内容粘贴到 GitHub Settings-SSH and GPG keys-SSH keys\n\n# 测试是否成功Github \nssh git@github.com\n# Are you sure you want to continue connecting (yes/no)? \n# 这时需要输入：yes\n\n#成功会提示成功认证你的账户\n# Hi aaronlinv! You've successfully authenticated, but GitHub does not provide shell access.\n# Connection to github.com closed.\n```\n\n## 场景0：Git基本使用\n```bash \n# 新建文件夹，初始化为Git仓库\nmkdir learn-git\ncd learn-git\ngit init\n\n# 添加并编辑文件\nvim test.txt\n\n# 查看文件状态 test.txt现在为Untracked状态\ngit status\n\n# 添加文件到暂存区\ngit add test.txt\n\n# 提交commit -m 代表添加一个“提交信息”\ngit commit -m \"add test.txt\"\n\n# 推送到GitHub（在GitHub上创建空白仓库，并复制仓库地址）\n# 先添加远端参考\ngit remote add origin git@github.com:aaronlinv/learn-git.git\n\n# 查看远端操作（会显示 fetch和push）\ngit remote -v \n\n# 推送到远端仓库（使用SSH协议需要配置SSH免密登录）\ngit push -u origin master\n# -u：指定默认远端仓库别名，下一次推送只需使用git push\n# origin：远端仓库的别名（默认origin）\n# master：分支名称\n```\npush 是可能会遇到报错：refusing to merge unrelated histories\n原因是远程仓库和本地仓库做了不同的改变并commit，导致本地仓库和远程仓库变成了独立的两个仓库，所以不能直接合并，执行以下命令即可推送\n```bash\ngit pull origin master --allow-unrelated-histories\n```\n\n## 场景1：克隆仓库\n```bash\n# 克隆仓库到本地（可以使用HTTPS或者SSH协议）\ngit clone https://github.com/aaronlinv/learn-git.git\n\n# Git会新建一个与仓库名同名的文件夹，进入文件夹\ncd learn-git\n\n# 如果这个仓库已经克隆很久了，本地和远程可能存在差异了，可以拉取远程仓库最新状态到本地仓库\ngit pull\n\n\n```\n## 场景2：分支管理\n```bash\n# 已经克隆仓库到本地\n# 开始工作前，先拉取远程最新修改（可能同事已经修改代码并提交了commit）\ngit pull\n\n# 新建并跳转到dev分支（也可使用git branch -b dev）\ngit switch -c dev\n\n# 查看分支情况\ngit branch\n\n# 可以在dev 分支上修改代码做add和commit\n\n# 推送dev分支到远程（需要拥有远端仓库的权限）\ngit push origin dev\n# 如果需要重命名远端分支则加上 :f1\ngit push origin dev:f1\n\n# 删除远端dev分支\ngit push origin :dev \n\n# 合并dev分支到master(需要先切换到master分支，在merge的过程可能需要解决冲突)\ngit switch master\ngit merge --no-ff dev \n\n# 查看分支合并情况\ngit log --graph --pretty=oneline --abbrev-commit\n\n# 删除本地dev分支\ngit branch -d dev \n```\n\n## merge和rebase\n#### 创建冲突场景\n```bash\n# 新建文件夹，初始化为Git仓库\nmkdir learn-git\ncd learn-git\ngit init\n\n# 添加并编辑文件 \nvim c2\n\n# 添加文件到暂存区\ngit add c2\n\n# 提交commit -m 代表添加一个“提交信息”\ngit commit -m \"c2\"\n\n# 新建并跳转到experiment分支\ngit switch -c experiment\n\n# 添加并提交c4\nvim c4\ngit add c4\ngit commit -m \"c4\"\n\n# 切换回master分支\ngit switch master\n\n# 添加并提交c3\nvim c3\ngit add c3\ngit commit -m \"c3\"\n```\n到这c2就产生了分叉，experiment分支推进到了c4，master分支推进到了c3\n这个时候如果想把两个分支的修改合并到master分支上，可以使用merge或rebase(变基)，两种方式最后合并的结果是一样的，但rebase不会产生分叉，rebase的提交历史也比merge更线性\n\n#### merge\n```bash\n# 使用merge方式合并分支\n# 先切换到master分支\ngit switch master\n\n# 合并分支（会弹出commit message的编辑框，:wq 保存退出）\ngit merge experiment\n\n# 查看分支合并情况\ngit log --graph --pretty=oneline --abbrev-commit\n```\n\n> ![merge](git-note/1.png)\n> --- merge示意图 引用自《Git Pro》\n\n使用merge合并分支，相当于三方合并，合并c2,c3,c4（未新建experiment分支前的修改c2、新建分支后master分支的修改c3、experiment分支的修改c4）\n\n直接使用git merge <要被merge的分支名> ，没有冲突的情况下默认使用参数：--f 即：Fast-forward（快进式合并）\n推荐使用--no-ff 即：git merge --no-ff <要被merge的分支名>  \n这个参数的意思是禁止快进式合并，合并时会自动创建一次commit提交，保证提交链的完整性\n而Fast-forward合并分支会丢掉分支信息\n\n\n#### rebase\n```bash\n# 使用rebase方式合并分支\n# 先切换到experiment分支\ngit switch experiment\n\n# rebase分支\ngit rebase experiment\n\n# 先切换到master分支\ngit switch master\n\n# 将experiment合并到master\ngit merge experiment\n\n# 查看分支合并情况\ngit log --graph --pretty=oneline --abbrev-commit\n```\n> ![rebase](git-note/2.png)\n> ![rebase](git-note/3.png)\n> --- rebase示意图 引用自《Git Pro》\n\nrebase的原理是：找到c3和c4共同的祖先c2，暂存共同祖先c2到当前分支(expriment)的修改内容，然后将分支指向master的c3，并应用之前暂存的修改内容\n我们可以这么理解：\n\nrebase就是当前分支(experiment)提交的修改(c4)放到最前面，而把其他分支(master)已经提交的代码（c3）放到后面去，这样做的好处就是：自己写代码(experiment分支上的)将出现在master最新的一次commit中，一目了然\n\nrebase：黄金法则：绝对不要在公共分支使用rebase，rebase会重写提交历史\n\n\n## 参考资料\n[ssh-keygen的-C后面的邮箱有什么用？](https://blog.csdn.net/u011118321/article/details/78516303)\n[Git 合并时 --no-ff 的作用](https://blog.csdn.net/zombres/article/details/82179122)\n[记Git报错-refusing to merge unrelated histories](https://blog.csdn.net/u012145252/article/details/80628451)\n","slug":"git-note","published":1,"updated":"2020-06-13T02:55:34.728Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke3x9g3t0007zgvuglzf3wx5","content":"<h2 id=\"学习建议\"><a href=\"#学习建议\" class=\"headerlink\" title=\"学习建议\"></a>学习建议</h2><p><a href=\"https://www.liaoxuefeng.com/wiki/896043488029600\" target=\"_blank\" rel=\"noopener\">廖雪峰Git教程 </a>比较详细，可操作性也比较强，在评论区可以找到勘误<br>Git官方推荐的<a href=\"https://git-scm.com/book/zh/v2\" target=\"_blank\" rel=\"noopener\">《Pro Git》</a>也很不错，推荐掌握了一定Git基础后再看<br>对于没有Linux基础，或者文字版学起来比较困难的朋友可以看系列视频教程 <a href=\"https://www.bilibili.com/video/BV1HW411f7VJ\" target=\"_blank\" rel=\"noopener\">互联网人都该懂点 Git</a></p>\n<h2 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h2><p>Git 2.23 (2019.8.16)<br>git checkout 这个命令被拆分成了两个新命令：git switch 和 git restore<br>创建并切换到dev分支：git checkout -b dev 现在用git switch -c dev 效果相同</p>\n<h2 id=\"初始配置\"><a href=\"#初始配置\" class=\"headerlink\" title=\"初始配置\"></a>初始配置</h2><p>安装Git Bash后需要做初始配置</p>\n<ol>\n<li>用户名邮箱<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 任意文件夹右键 点击“Git Bash Here”</span></span><br><span class=\"line\"><span class=\"comment\"># \"\"内替换为自己的用户名和邮箱</span></span><br><span class=\"line\">git config --global user.name <span class=\"string\">\"username\"</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">\"email\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看配置是否成功</span></span><br><span class=\"line\">git config user.name</span><br><span class=\"line\">git config user.email</span><br></pre></td></tr></table></figure></li>\n<li>SSH 免密登录<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ssh-keygen用于生成，管理和转换身份验证密钥</span></span><br><span class=\"line\"><span class=\"comment\"># -t：密钥的类型 </span></span><br><span class=\"line\"><span class=\"comment\"># -C：用于识别这个密钥的注释（不添加注释直接ssh-keygen -t rsa也不影响使用）</span></span><br><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">\"邮箱地址\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 连续按3次回车</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将用户目录下.ssh文件夹内的id_rsa.pub的内容粘贴到 GitHub Settings-SSH and GPG keys-SSH keys</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试是否成功Github </span></span><br><span class=\"line\">ssh git@github.com</span><br><span class=\"line\"><span class=\"comment\"># Are you sure you want to continue connecting (yes/no)? </span></span><br><span class=\"line\"><span class=\"comment\"># 这时需要输入：yes</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#成功会提示成功认证你的账户</span></span><br><span class=\"line\"><span class=\"comment\"># Hi aaronlinv! You've successfully authenticated, but GitHub does not provide shell access.</span></span><br><span class=\"line\"><span class=\"comment\"># Connection to github.com closed.</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"场景0：Git基本使用\"><a href=\"#场景0：Git基本使用\" class=\"headerlink\" title=\"场景0：Git基本使用\"></a>场景0：Git基本使用</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 新建文件夹，初始化为Git仓库</span></span><br><span class=\"line\">mkdir learn-git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> learn-git</span><br><span class=\"line\">git init</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加并编辑文件</span></span><br><span class=\"line\">vim test.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看文件状态 test.txt现在为Untracked状态</span></span><br><span class=\"line\">git status</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加文件到暂存区</span></span><br><span class=\"line\">git add test.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交commit -m 代表添加一个“提交信息”</span></span><br><span class=\"line\">git commit -m <span class=\"string\">\"add test.txt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 推送到GitHub（在GitHub上创建空白仓库，并复制仓库地址）</span></span><br><span class=\"line\"><span class=\"comment\"># 先添加远端参考</span></span><br><span class=\"line\">git remote add origin git@github.com:aaronlinv/learn-git.git</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看远端操作（会显示 fetch和push）</span></span><br><span class=\"line\">git remote -v </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 推送到远端仓库（使用SSH协议需要配置SSH免密登录）</span></span><br><span class=\"line\">git push -u origin master</span><br><span class=\"line\"><span class=\"comment\"># -u：指定默认远端仓库别名，下一次推送只需使用git push</span></span><br><span class=\"line\"><span class=\"comment\"># origin：远端仓库的别名（默认origin）</span></span><br><span class=\"line\"><span class=\"comment\"># master：分支名称</span></span><br></pre></td></tr></table></figure>\n<p>push 是可能会遇到报错：refusing to merge unrelated histories<br>原因是远程仓库和本地仓库做了不同的改变并commit，导致本地仓库和远程仓库变成了独立的两个仓库，所以不能直接合并，执行以下命令即可推送</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"场景1：克隆仓库\"><a href=\"#场景1：克隆仓库\" class=\"headerlink\" title=\"场景1：克隆仓库\"></a>场景1：克隆仓库</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 克隆仓库到本地（可以使用HTTPS或者SSH协议）</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/aaronlinv/learn-git.git</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Git会新建一个与仓库名同名的文件夹，进入文件夹</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> learn-git</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果这个仓库已经克隆很久了，本地和远程可能存在差异了，可以拉取远程仓库最新状态到本地仓库</span></span><br><span class=\"line\">git pull</span><br></pre></td></tr></table></figure>\n<h2 id=\"场景2：分支管理\"><a href=\"#场景2：分支管理\" class=\"headerlink\" title=\"场景2：分支管理\"></a>场景2：分支管理</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 已经克隆仓库到本地</span></span><br><span class=\"line\"><span class=\"comment\"># 开始工作前，先拉取远程最新修改（可能同事已经修改代码并提交了commit）</span></span><br><span class=\"line\">git pull</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建并跳转到dev分支（也可使用git branch -b dev）</span></span><br><span class=\"line\">git switch -c dev</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看分支情况</span></span><br><span class=\"line\">git branch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 可以在dev 分支上修改代码做add和commit</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 推送dev分支到远程（需要拥有远端仓库的权限）</span></span><br><span class=\"line\">git push origin dev</span><br><span class=\"line\"><span class=\"comment\"># 如果需要重命名远端分支则加上 :f1</span></span><br><span class=\"line\">git push origin dev:f1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除远端dev分支</span></span><br><span class=\"line\">git push origin :dev </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 合并dev分支到master(需要先切换到master分支，在merge的过程可能需要解决冲突)</span></span><br><span class=\"line\">git switch master</span><br><span class=\"line\">git merge --no-ff dev </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看分支合并情况</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --graph --pretty=oneline --abbrev-commit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除本地dev分支</span></span><br><span class=\"line\">git branch -d dev</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"merge和rebase\"><a href=\"#merge和rebase\" class=\"headerlink\" title=\"merge和rebase\"></a>merge和rebase</h2><h4 id=\"创建冲突场景\"><a href=\"#创建冲突场景\" class=\"headerlink\" title=\"创建冲突场景\"></a>创建冲突场景</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 新建文件夹，初始化为Git仓库</span></span><br><span class=\"line\">mkdir learn-git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> learn-git</span><br><span class=\"line\">git init</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加并编辑文件 </span></span><br><span class=\"line\">vim c2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加文件到暂存区</span></span><br><span class=\"line\">git add c2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交commit -m 代表添加一个“提交信息”</span></span><br><span class=\"line\">git commit -m <span class=\"string\">\"c2\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建并跳转到experiment分支</span></span><br><span class=\"line\">git switch -c experiment</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加并提交c4</span></span><br><span class=\"line\">vim c4</span><br><span class=\"line\">git add c4</span><br><span class=\"line\">git commit -m <span class=\"string\">\"c4\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换回master分支</span></span><br><span class=\"line\">git switch master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加并提交c3</span></span><br><span class=\"line\">vim c3</span><br><span class=\"line\">git add c3</span><br><span class=\"line\">git commit -m <span class=\"string\">\"c3\"</span></span><br></pre></td></tr></table></figure>\n<p>到这c2就产生了分叉，experiment分支推进到了c4，master分支推进到了c3<br>这个时候如果想把两个分支的修改合并到master分支上，可以使用merge或rebase(变基)，两种方式最后合并的结果是一样的，但rebase不会产生分叉，rebase的提交历史也比merge更线性</p>\n<h4 id=\"merge\"><a href=\"#merge\" class=\"headerlink\" title=\"merge\"></a>merge</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用merge方式合并分支</span></span><br><span class=\"line\"><span class=\"comment\"># 先切换到master分支</span></span><br><span class=\"line\">git switch master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 合并分支（会弹出commit message的编辑框，:wq 保存退出）</span></span><br><span class=\"line\">git merge experiment</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看分支合并情况</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --graph --pretty=oneline --abbrev-commit</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><img src=\"/2020/04/04/git-note/1.png\" alt=\"merge\"><br>— merge示意图 引用自《Git Pro》</p>\n</blockquote>\n<p>使用merge合并分支，相当于三方合并，合并c2,c3,c4（未新建experiment分支前的修改c2、新建分支后master分支的修改c3、experiment分支的修改c4）</p>\n<p>直接使用git merge &lt;要被merge的分支名&gt; ，没有冲突的情况下默认使用参数：–f 即：Fast-forward（快进式合并）<br>推荐使用–no-ff 即：git merge –no-ff &lt;要被merge的分支名&gt;<br>这个参数的意思是禁止快进式合并，合并时会自动创建一次commit提交，保证提交链的完整性<br>而Fast-forward合并分支会丢掉分支信息</p>\n<h4 id=\"rebase\"><a href=\"#rebase\" class=\"headerlink\" title=\"rebase\"></a>rebase</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用rebase方式合并分支</span></span><br><span class=\"line\"><span class=\"comment\"># 先切换到experiment分支</span></span><br><span class=\"line\">git switch experiment</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># rebase分支</span></span><br><span class=\"line\">git rebase experiment</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 先切换到master分支</span></span><br><span class=\"line\">git switch master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将experiment合并到master</span></span><br><span class=\"line\">git merge experiment</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看分支合并情况</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --graph --pretty=oneline --abbrev-commit</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><img src=\"/2020/04/04/git-note/2.png\" alt=\"rebase\"><br><img src=\"/2020/04/04/git-note/3.png\" alt=\"rebase\"><br>— rebase示意图 引用自《Git Pro》</p>\n</blockquote>\n<p>rebase的原理是：找到c3和c4共同的祖先c2，暂存共同祖先c2到当前分支(expriment)的修改内容，然后将分支指向master的c3，并应用之前暂存的修改内容<br>我们可以这么理解：</p>\n<p>rebase就是当前分支(experiment)提交的修改(c4)放到最前面，而把其他分支(master)已经提交的代码（c3）放到后面去，这样做的好处就是：自己写代码(experiment分支上的)将出现在master最新的一次commit中，一目了然</p>\n<p>rebase：黄金法则：绝对不要在公共分支使用rebase，rebase会重写提交历史</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://blog.csdn.net/u011118321/article/details/78516303\" target=\"_blank\" rel=\"noopener\">ssh-keygen的-C后面的邮箱有什么用？</a><br><a href=\"https://blog.csdn.net/zombres/article/details/82179122\" target=\"_blank\" rel=\"noopener\">Git 合并时 –no-ff 的作用</a><br><a href=\"https://blog.csdn.net/u012145252/article/details/80628451\" target=\"_blank\" rel=\"noopener\">记Git报错-refusing to merge unrelated histories</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"学习建议\"><a href=\"#学习建议\" class=\"headerlink\" title=\"学习建议\"></a>学习建议</h2><p><a href=\"https://www.liaoxuefeng.com/wiki/896043488029600\" target=\"_blank\" rel=\"noopener\">廖雪峰Git教程 </a>比较详细，可操作性也比较强，在评论区可以找到勘误<br>Git官方推荐的<a href=\"https://git-scm.com/book/zh/v2\" target=\"_blank\" rel=\"noopener\">《Pro Git》</a>也很不错，推荐掌握了一定Git基础后再看<br>对于没有Linux基础，或者文字版学起来比较困难的朋友可以看系列视频教程 <a href=\"https://www.bilibili.com/video/BV1HW411f7VJ\" target=\"_blank\" rel=\"noopener\">互联网人都该懂点 Git</a></p>\n<h2 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h2><p>Git 2.23 (2019.8.16)<br>git checkout 这个命令被拆分成了两个新命令：git switch 和 git restore<br>创建并切换到dev分支：git checkout -b dev 现在用git switch -c dev 效果相同</p>\n<h2 id=\"初始配置\"><a href=\"#初始配置\" class=\"headerlink\" title=\"初始配置\"></a>初始配置</h2><p>安装Git Bash后需要做初始配置</p>\n<ol>\n<li>用户名邮箱<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 任意文件夹右键 点击“Git Bash Here”</span></span><br><span class=\"line\"><span class=\"comment\"># \"\"内替换为自己的用户名和邮箱</span></span><br><span class=\"line\">git config --global user.name <span class=\"string\">\"username\"</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">\"email\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看配置是否成功</span></span><br><span class=\"line\">git config user.name</span><br><span class=\"line\">git config user.email</span><br></pre></td></tr></table></figure></li>\n<li>SSH 免密登录<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ssh-keygen用于生成，管理和转换身份验证密钥</span></span><br><span class=\"line\"><span class=\"comment\"># -t：密钥的类型 </span></span><br><span class=\"line\"><span class=\"comment\"># -C：用于识别这个密钥的注释（不添加注释直接ssh-keygen -t rsa也不影响使用）</span></span><br><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">\"邮箱地址\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 连续按3次回车</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将用户目录下.ssh文件夹内的id_rsa.pub的内容粘贴到 GitHub Settings-SSH and GPG keys-SSH keys</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 测试是否成功Github </span></span><br><span class=\"line\">ssh git@github.com</span><br><span class=\"line\"><span class=\"comment\"># Are you sure you want to continue connecting (yes/no)? </span></span><br><span class=\"line\"><span class=\"comment\"># 这时需要输入：yes</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#成功会提示成功认证你的账户</span></span><br><span class=\"line\"><span class=\"comment\"># Hi aaronlinv! You've successfully authenticated, but GitHub does not provide shell access.</span></span><br><span class=\"line\"><span class=\"comment\"># Connection to github.com closed.</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"场景0：Git基本使用\"><a href=\"#场景0：Git基本使用\" class=\"headerlink\" title=\"场景0：Git基本使用\"></a>场景0：Git基本使用</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 新建文件夹，初始化为Git仓库</span></span><br><span class=\"line\">mkdir learn-git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> learn-git</span><br><span class=\"line\">git init</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加并编辑文件</span></span><br><span class=\"line\">vim test.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看文件状态 test.txt现在为Untracked状态</span></span><br><span class=\"line\">git status</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加文件到暂存区</span></span><br><span class=\"line\">git add test.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交commit -m 代表添加一个“提交信息”</span></span><br><span class=\"line\">git commit -m <span class=\"string\">\"add test.txt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 推送到GitHub（在GitHub上创建空白仓库，并复制仓库地址）</span></span><br><span class=\"line\"><span class=\"comment\"># 先添加远端参考</span></span><br><span class=\"line\">git remote add origin git@github.com:aaronlinv/learn-git.git</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看远端操作（会显示 fetch和push）</span></span><br><span class=\"line\">git remote -v </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 推送到远端仓库（使用SSH协议需要配置SSH免密登录）</span></span><br><span class=\"line\">git push -u origin master</span><br><span class=\"line\"><span class=\"comment\"># -u：指定默认远端仓库别名，下一次推送只需使用git push</span></span><br><span class=\"line\"><span class=\"comment\"># origin：远端仓库的别名（默认origin）</span></span><br><span class=\"line\"><span class=\"comment\"># master：分支名称</span></span><br></pre></td></tr></table></figure>\n<p>push 是可能会遇到报错：refusing to merge unrelated histories<br>原因是远程仓库和本地仓库做了不同的改变并commit，导致本地仓库和远程仓库变成了独立的两个仓库，所以不能直接合并，执行以下命令即可推送</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"场景1：克隆仓库\"><a href=\"#场景1：克隆仓库\" class=\"headerlink\" title=\"场景1：克隆仓库\"></a>场景1：克隆仓库</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 克隆仓库到本地（可以使用HTTPS或者SSH协议）</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/aaronlinv/learn-git.git</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Git会新建一个与仓库名同名的文件夹，进入文件夹</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> learn-git</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果这个仓库已经克隆很久了，本地和远程可能存在差异了，可以拉取远程仓库最新状态到本地仓库</span></span><br><span class=\"line\">git pull</span><br></pre></td></tr></table></figure>\n<h2 id=\"场景2：分支管理\"><a href=\"#场景2：分支管理\" class=\"headerlink\" title=\"场景2：分支管理\"></a>场景2：分支管理</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 已经克隆仓库到本地</span></span><br><span class=\"line\"><span class=\"comment\"># 开始工作前，先拉取远程最新修改（可能同事已经修改代码并提交了commit）</span></span><br><span class=\"line\">git pull</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建并跳转到dev分支（也可使用git branch -b dev）</span></span><br><span class=\"line\">git switch -c dev</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看分支情况</span></span><br><span class=\"line\">git branch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 可以在dev 分支上修改代码做add和commit</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 推送dev分支到远程（需要拥有远端仓库的权限）</span></span><br><span class=\"line\">git push origin dev</span><br><span class=\"line\"><span class=\"comment\"># 如果需要重命名远端分支则加上 :f1</span></span><br><span class=\"line\">git push origin dev:f1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除远端dev分支</span></span><br><span class=\"line\">git push origin :dev </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 合并dev分支到master(需要先切换到master分支，在merge的过程可能需要解决冲突)</span></span><br><span class=\"line\">git switch master</span><br><span class=\"line\">git merge --no-ff dev </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看分支合并情况</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --graph --pretty=oneline --abbrev-commit</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除本地dev分支</span></span><br><span class=\"line\">git branch -d dev</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"merge和rebase\"><a href=\"#merge和rebase\" class=\"headerlink\" title=\"merge和rebase\"></a>merge和rebase</h2><h4 id=\"创建冲突场景\"><a href=\"#创建冲突场景\" class=\"headerlink\" title=\"创建冲突场景\"></a>创建冲突场景</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 新建文件夹，初始化为Git仓库</span></span><br><span class=\"line\">mkdir learn-git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> learn-git</span><br><span class=\"line\">git init</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加并编辑文件 </span></span><br><span class=\"line\">vim c2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加文件到暂存区</span></span><br><span class=\"line\">git add c2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 提交commit -m 代表添加一个“提交信息”</span></span><br><span class=\"line\">git commit -m <span class=\"string\">\"c2\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 新建并跳转到experiment分支</span></span><br><span class=\"line\">git switch -c experiment</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加并提交c4</span></span><br><span class=\"line\">vim c4</span><br><span class=\"line\">git add c4</span><br><span class=\"line\">git commit -m <span class=\"string\">\"c4\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换回master分支</span></span><br><span class=\"line\">git switch master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 添加并提交c3</span></span><br><span class=\"line\">vim c3</span><br><span class=\"line\">git add c3</span><br><span class=\"line\">git commit -m <span class=\"string\">\"c3\"</span></span><br></pre></td></tr></table></figure>\n<p>到这c2就产生了分叉，experiment分支推进到了c4，master分支推进到了c3<br>这个时候如果想把两个分支的修改合并到master分支上，可以使用merge或rebase(变基)，两种方式最后合并的结果是一样的，但rebase不会产生分叉，rebase的提交历史也比merge更线性</p>\n<h4 id=\"merge\"><a href=\"#merge\" class=\"headerlink\" title=\"merge\"></a>merge</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用merge方式合并分支</span></span><br><span class=\"line\"><span class=\"comment\"># 先切换到master分支</span></span><br><span class=\"line\">git switch master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 合并分支（会弹出commit message的编辑框，:wq 保存退出）</span></span><br><span class=\"line\">git merge experiment</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看分支合并情况</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --graph --pretty=oneline --abbrev-commit</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><img src=\"/2020/04/04/git-note/1.png\" alt=\"merge\"><br>— merge示意图 引用自《Git Pro》</p>\n</blockquote>\n<p>使用merge合并分支，相当于三方合并，合并c2,c3,c4（未新建experiment分支前的修改c2、新建分支后master分支的修改c3、experiment分支的修改c4）</p>\n<p>直接使用git merge &lt;要被merge的分支名&gt; ，没有冲突的情况下默认使用参数：–f 即：Fast-forward（快进式合并）<br>推荐使用–no-ff 即：git merge –no-ff &lt;要被merge的分支名&gt;<br>这个参数的意思是禁止快进式合并，合并时会自动创建一次commit提交，保证提交链的完整性<br>而Fast-forward合并分支会丢掉分支信息</p>\n<h4 id=\"rebase\"><a href=\"#rebase\" class=\"headerlink\" title=\"rebase\"></a>rebase</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用rebase方式合并分支</span></span><br><span class=\"line\"><span class=\"comment\"># 先切换到experiment分支</span></span><br><span class=\"line\">git switch experiment</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># rebase分支</span></span><br><span class=\"line\">git rebase experiment</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 先切换到master分支</span></span><br><span class=\"line\">git switch master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将experiment合并到master</span></span><br><span class=\"line\">git merge experiment</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看分支合并情况</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --graph --pretty=oneline --abbrev-commit</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><img src=\"/2020/04/04/git-note/2.png\" alt=\"rebase\"><br><img src=\"/2020/04/04/git-note/3.png\" alt=\"rebase\"><br>— rebase示意图 引用自《Git Pro》</p>\n</blockquote>\n<p>rebase的原理是：找到c3和c4共同的祖先c2，暂存共同祖先c2到当前分支(expriment)的修改内容，然后将分支指向master的c3，并应用之前暂存的修改内容<br>我们可以这么理解：</p>\n<p>rebase就是当前分支(experiment)提交的修改(c4)放到最前面，而把其他分支(master)已经提交的代码（c3）放到后面去，这样做的好处就是：自己写代码(experiment分支上的)将出现在master最新的一次commit中，一目了然</p>\n<p>rebase：黄金法则：绝对不要在公共分支使用rebase，rebase会重写提交历史</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://blog.csdn.net/u011118321/article/details/78516303\" target=\"_blank\" rel=\"noopener\">ssh-keygen的-C后面的邮箱有什么用？</a><br><a href=\"https://blog.csdn.net/zombres/article/details/82179122\" target=\"_blank\" rel=\"noopener\">Git 合并时 –no-ff 的作用</a><br><a href=\"https://blog.csdn.net/u012145252/article/details/80628451\" target=\"_blank\" rel=\"noopener\">记Git报错-refusing to merge unrelated histories</a></p>\n"},{"title":"字符编码的那些事","date":"2020-01-12T08:49:36.000Z","_content":"#### 字符集\n计算机只能识别二进制，要处理文字，就需要对字符进行编码，于是就有各种不同编码方式的字符集\n常见的字符集有：ASCII,GB2312,BIG5,GB18030,Unicode\n\n#### ASCII\nAmerican Standard Code for Information Interchange，美国信息互换标准编码\n等同于国际标准ISO-646\n7位编码的字符集只能支持128个字符\n为了表示更多的欧洲常用字符对ASCII进行了扩展，ASCII扩展字符集使用**8位**（bits）表示一个字符，共256字符\n\n#### GB2312 \n《信息交换用汉字编码字符集·基本集》，由原中国国家标准总局发布，1981年5月1日实施\n每个汉字及符号以**两个字节**来表示。第一个字节称为“高位字节”（也称“区字节”），第二个字节称为“低位字节”（也称“位字节”）\n收录的汉字已经覆盖中国大陆99.75%的使用频率\n对于人名、古汉语等方面出现的罕用字，GB2312不能处理，这导致了后来GBK及GB18030汉字字符集的出现\n\n#### BIG5\n又称大五码或五大码，1984年由台湾财团法人信息工业策进会和五家软件公司宏碁 (Acer)、神通 (MiTAC)、佳佳、零壹 (Zero One)、大众 (FIC)创立，故称大五码\nBig5码使用了**双字节**储存方法，以两个字节来编码一个字。第一个字节称为“高位字节”，第二个字节称为“低位字节”\n\n#### GBK\n《汉字内码扩展规范(GBK)》1.0版，由中华人民共和国全国信息技术标准化技术委员会1995年12月1日制订\n只为“技术规范指导性文件”，**不属于国家标准**\n根据微软资料，GBK是对GB2312-80的扩展\n\n#### GB18030\n全称：GB18030-2000《信息交换用汉字编码字符集基本集的扩充》，是我国政府于2000年3月17日发布的新的汉字编码国家标准\n采用单字节、双字节和四字节三种方式对字符编码\n\n#### Unicode\n全称：Universal Multiple-Octet Coded Character Set 通用多八位编码字符集\n它为每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求\n\nUnicode是字符集，UTF-32/ UTF-16/ UTF-8是三种字符编码方案，UTF是 Unicode Tranformation Format\n\n- UTF-32：用4字节的数字来表达每个字母、符号，或者表意文字，就空间而言，是非常没有效率的\n- UTF-16：尽管有Unicode字符非常多，但是实际上大多数人不会用到超过前65535个以外的字符，因此有了UTF-16编码，每个字符只需要2个字节来存储\n- UTF-8：针对Unicode的可变长度字符编码，其编码中的第一个字节仍与ASCII兼容，ASCII字母继续使用1字节储存，重音文字、希腊字母或西里尔字母等使用2字节来储存，而常用的汉字就要使用3字节，辅助平面字符则使用4字节\n\n#### 总结\n最早的简体中文编码字符集为GB2312(覆盖了99%的日常使用汉字)\n后来出现了GBK，GBK加入了对繁体字的支持，GBK兼容GB2312\n再后来又发布了GB18030编码，解决了中文、日文、朝鲜语等的编码问题，GB18030兼容GBK\n\n\n不同的字符集对于字符的映射不尽相同，所以在编程的时候应该使用统一的字符集，这样可以避免乱码\n编程时尽可能使用Unicode字符集（常用UTF-8），这样可以保证代码或注释在其他语言的计算机上显示正常\n一些计算机使用的默认字符集可能不支持中文，用默认字符集解析中文字符可能导致乱码\n而不同语言的字符在Unicode字符集中都有唯一的编码与之对应，可以避免乱码\n\n## 参考资料\n[Java零基础到高级MySQL数据库](https://study.163.com/course/introduction/1005932016.htm)\n[百度百科-字符集](https://baike.baidu.com/item/%E5%AD%97%E7%AC%A6%E9%9B%86)\n[字符集和字符编码（Charset & Encoding） - 吴秦](https://www.cnblogs.com/skynet/archive/2011/05/03/2035105.html)\n[关于字符集和字符编码那些事](https://www.cnblogs.com/chenpingzhao/p/4761747.html)\n[中文编码 1：常见中文编码格式](https://blog.csdn.net/u010009033/article/details/81103334)\n[详细解释为什么写程序要用 Unicode 字符集](https://codeabc.cn/yangw/post/why-use-unicode)","source":"_posts/about-encode.md","raw":"---\ntitle: 字符编码的那些事\ncategories: 编程杂记\ndate: 2020-01-12 16:49:36\n---\n#### 字符集\n计算机只能识别二进制，要处理文字，就需要对字符进行编码，于是就有各种不同编码方式的字符集\n常见的字符集有：ASCII,GB2312,BIG5,GB18030,Unicode\n\n#### ASCII\nAmerican Standard Code for Information Interchange，美国信息互换标准编码\n等同于国际标准ISO-646\n7位编码的字符集只能支持128个字符\n为了表示更多的欧洲常用字符对ASCII进行了扩展，ASCII扩展字符集使用**8位**（bits）表示一个字符，共256字符\n\n#### GB2312 \n《信息交换用汉字编码字符集·基本集》，由原中国国家标准总局发布，1981年5月1日实施\n每个汉字及符号以**两个字节**来表示。第一个字节称为“高位字节”（也称“区字节”），第二个字节称为“低位字节”（也称“位字节”）\n收录的汉字已经覆盖中国大陆99.75%的使用频率\n对于人名、古汉语等方面出现的罕用字，GB2312不能处理，这导致了后来GBK及GB18030汉字字符集的出现\n\n#### BIG5\n又称大五码或五大码，1984年由台湾财团法人信息工业策进会和五家软件公司宏碁 (Acer)、神通 (MiTAC)、佳佳、零壹 (Zero One)、大众 (FIC)创立，故称大五码\nBig5码使用了**双字节**储存方法，以两个字节来编码一个字。第一个字节称为“高位字节”，第二个字节称为“低位字节”\n\n#### GBK\n《汉字内码扩展规范(GBK)》1.0版，由中华人民共和国全国信息技术标准化技术委员会1995年12月1日制订\n只为“技术规范指导性文件”，**不属于国家标准**\n根据微软资料，GBK是对GB2312-80的扩展\n\n#### GB18030\n全称：GB18030-2000《信息交换用汉字编码字符集基本集的扩充》，是我国政府于2000年3月17日发布的新的汉字编码国家标准\n采用单字节、双字节和四字节三种方式对字符编码\n\n#### Unicode\n全称：Universal Multiple-Octet Coded Character Set 通用多八位编码字符集\n它为每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求\n\nUnicode是字符集，UTF-32/ UTF-16/ UTF-8是三种字符编码方案，UTF是 Unicode Tranformation Format\n\n- UTF-32：用4字节的数字来表达每个字母、符号，或者表意文字，就空间而言，是非常没有效率的\n- UTF-16：尽管有Unicode字符非常多，但是实际上大多数人不会用到超过前65535个以外的字符，因此有了UTF-16编码，每个字符只需要2个字节来存储\n- UTF-8：针对Unicode的可变长度字符编码，其编码中的第一个字节仍与ASCII兼容，ASCII字母继续使用1字节储存，重音文字、希腊字母或西里尔字母等使用2字节来储存，而常用的汉字就要使用3字节，辅助平面字符则使用4字节\n\n#### 总结\n最早的简体中文编码字符集为GB2312(覆盖了99%的日常使用汉字)\n后来出现了GBK，GBK加入了对繁体字的支持，GBK兼容GB2312\n再后来又发布了GB18030编码，解决了中文、日文、朝鲜语等的编码问题，GB18030兼容GBK\n\n\n不同的字符集对于字符的映射不尽相同，所以在编程的时候应该使用统一的字符集，这样可以避免乱码\n编程时尽可能使用Unicode字符集（常用UTF-8），这样可以保证代码或注释在其他语言的计算机上显示正常\n一些计算机使用的默认字符集可能不支持中文，用默认字符集解析中文字符可能导致乱码\n而不同语言的字符在Unicode字符集中都有唯一的编码与之对应，可以避免乱码\n\n## 参考资料\n[Java零基础到高级MySQL数据库](https://study.163.com/course/introduction/1005932016.htm)\n[百度百科-字符集](https://baike.baidu.com/item/%E5%AD%97%E7%AC%A6%E9%9B%86)\n[字符集和字符编码（Charset & Encoding） - 吴秦](https://www.cnblogs.com/skynet/archive/2011/05/03/2035105.html)\n[关于字符集和字符编码那些事](https://www.cnblogs.com/chenpingzhao/p/4761747.html)\n[中文编码 1：常见中文编码格式](https://blog.csdn.net/u010009033/article/details/81103334)\n[详细解释为什么写程序要用 Unicode 字符集](https://codeabc.cn/yangw/post/why-use-unicode)","slug":"about-encode","published":1,"updated":"2020-06-13T02:55:34.695Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke3x9g420009zgvub2bg95ys","content":"<h4 id=\"字符集\"><a href=\"#字符集\" class=\"headerlink\" title=\"字符集\"></a>字符集</h4><p>计算机只能识别二进制，要处理文字，就需要对字符进行编码，于是就有各种不同编码方式的字符集<br>常见的字符集有：ASCII,GB2312,BIG5,GB18030,Unicode</p>\n<h4 id=\"ASCII\"><a href=\"#ASCII\" class=\"headerlink\" title=\"ASCII\"></a>ASCII</h4><p>American Standard Code for Information Interchange，美国信息互换标准编码<br>等同于国际标准ISO-646<br>7位编码的字符集只能支持128个字符<br>为了表示更多的欧洲常用字符对ASCII进行了扩展，ASCII扩展字符集使用<strong>8位</strong>（bits）表示一个字符，共256字符</p>\n<h4 id=\"GB2312\"><a href=\"#GB2312\" class=\"headerlink\" title=\"GB2312\"></a>GB2312</h4><p>《信息交换用汉字编码字符集·基本集》，由原中国国家标准总局发布，1981年5月1日实施<br>每个汉字及符号以<strong>两个字节</strong>来表示。第一个字节称为“高位字节”（也称“区字节”），第二个字节称为“低位字节”（也称“位字节”）<br>收录的汉字已经覆盖中国大陆99.75%的使用频率<br>对于人名、古汉语等方面出现的罕用字，GB2312不能处理，这导致了后来GBK及GB18030汉字字符集的出现</p>\n<h4 id=\"BIG5\"><a href=\"#BIG5\" class=\"headerlink\" title=\"BIG5\"></a>BIG5</h4><p>又称大五码或五大码，1984年由台湾财团法人信息工业策进会和五家软件公司宏碁 (Acer)、神通 (MiTAC)、佳佳、零壹 (Zero One)、大众 (FIC)创立，故称大五码<br>Big5码使用了<strong>双字节</strong>储存方法，以两个字节来编码一个字。第一个字节称为“高位字节”，第二个字节称为“低位字节”</p>\n<h4 id=\"GBK\"><a href=\"#GBK\" class=\"headerlink\" title=\"GBK\"></a>GBK</h4><p>《汉字内码扩展规范(GBK)》1.0版，由中华人民共和国全国信息技术标准化技术委员会1995年12月1日制订<br>只为“技术规范指导性文件”，<strong>不属于国家标准</strong><br>根据微软资料，GBK是对GB2312-80的扩展</p>\n<h4 id=\"GB18030\"><a href=\"#GB18030\" class=\"headerlink\" title=\"GB18030\"></a>GB18030</h4><p>全称：GB18030-2000《信息交换用汉字编码字符集基本集的扩充》，是我国政府于2000年3月17日发布的新的汉字编码国家标准<br>采用单字节、双字节和四字节三种方式对字符编码</p>\n<h4 id=\"Unicode\"><a href=\"#Unicode\" class=\"headerlink\" title=\"Unicode\"></a>Unicode</h4><p>全称：Universal Multiple-Octet Coded Character Set 通用多八位编码字符集<br>它为每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求</p>\n<p>Unicode是字符集，UTF-32/ UTF-16/ UTF-8是三种字符编码方案，UTF是 Unicode Tranformation Format</p>\n<ul>\n<li>UTF-32：用4字节的数字来表达每个字母、符号，或者表意文字，就空间而言，是非常没有效率的</li>\n<li>UTF-16：尽管有Unicode字符非常多，但是实际上大多数人不会用到超过前65535个以外的字符，因此有了UTF-16编码，每个字符只需要2个字节来存储</li>\n<li>UTF-8：针对Unicode的可变长度字符编码，其编码中的第一个字节仍与ASCII兼容，ASCII字母继续使用1字节储存，重音文字、希腊字母或西里尔字母等使用2字节来储存，而常用的汉字就要使用3字节，辅助平面字符则使用4字节</li>\n</ul>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>最早的简体中文编码字符集为GB2312(覆盖了99%的日常使用汉字)<br>后来出现了GBK，GBK加入了对繁体字的支持，GBK兼容GB2312<br>再后来又发布了GB18030编码，解决了中文、日文、朝鲜语等的编码问题，GB18030兼容GBK</p>\n<p>不同的字符集对于字符的映射不尽相同，所以在编程的时候应该使用统一的字符集，这样可以避免乱码<br>编程时尽可能使用Unicode字符集（常用UTF-8），这样可以保证代码或注释在其他语言的计算机上显示正常<br>一些计算机使用的默认字符集可能不支持中文，用默认字符集解析中文字符可能导致乱码<br>而不同语言的字符在Unicode字符集中都有唯一的编码与之对应，可以避免乱码</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005932016.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级MySQL数据库</a><br><a href=\"https://baike.baidu.com/item/%E5%AD%97%E7%AC%A6%E9%9B%86\" target=\"_blank\" rel=\"noopener\">百度百科-字符集</a><br><a href=\"https://www.cnblogs.com/skynet/archive/2011/05/03/2035105.html\" target=\"_blank\" rel=\"noopener\">字符集和字符编码（Charset &amp; Encoding） - 吴秦</a><br><a href=\"https://www.cnblogs.com/chenpingzhao/p/4761747.html\" target=\"_blank\" rel=\"noopener\">关于字符集和字符编码那些事</a><br><a href=\"https://blog.csdn.net/u010009033/article/details/81103334\" target=\"_blank\" rel=\"noopener\">中文编码 1：常见中文编码格式</a><br><a href=\"https://codeabc.cn/yangw/post/why-use-unicode\" target=\"_blank\" rel=\"noopener\">详细解释为什么写程序要用 Unicode 字符集</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"字符集\"><a href=\"#字符集\" class=\"headerlink\" title=\"字符集\"></a>字符集</h4><p>计算机只能识别二进制，要处理文字，就需要对字符进行编码，于是就有各种不同编码方式的字符集<br>常见的字符集有：ASCII,GB2312,BIG5,GB18030,Unicode</p>\n<h4 id=\"ASCII\"><a href=\"#ASCII\" class=\"headerlink\" title=\"ASCII\"></a>ASCII</h4><p>American Standard Code for Information Interchange，美国信息互换标准编码<br>等同于国际标准ISO-646<br>7位编码的字符集只能支持128个字符<br>为了表示更多的欧洲常用字符对ASCII进行了扩展，ASCII扩展字符集使用<strong>8位</strong>（bits）表示一个字符，共256字符</p>\n<h4 id=\"GB2312\"><a href=\"#GB2312\" class=\"headerlink\" title=\"GB2312\"></a>GB2312</h4><p>《信息交换用汉字编码字符集·基本集》，由原中国国家标准总局发布，1981年5月1日实施<br>每个汉字及符号以<strong>两个字节</strong>来表示。第一个字节称为“高位字节”（也称“区字节”），第二个字节称为“低位字节”（也称“位字节”）<br>收录的汉字已经覆盖中国大陆99.75%的使用频率<br>对于人名、古汉语等方面出现的罕用字，GB2312不能处理，这导致了后来GBK及GB18030汉字字符集的出现</p>\n<h4 id=\"BIG5\"><a href=\"#BIG5\" class=\"headerlink\" title=\"BIG5\"></a>BIG5</h4><p>又称大五码或五大码，1984年由台湾财团法人信息工业策进会和五家软件公司宏碁 (Acer)、神通 (MiTAC)、佳佳、零壹 (Zero One)、大众 (FIC)创立，故称大五码<br>Big5码使用了<strong>双字节</strong>储存方法，以两个字节来编码一个字。第一个字节称为“高位字节”，第二个字节称为“低位字节”</p>\n<h4 id=\"GBK\"><a href=\"#GBK\" class=\"headerlink\" title=\"GBK\"></a>GBK</h4><p>《汉字内码扩展规范(GBK)》1.0版，由中华人民共和国全国信息技术标准化技术委员会1995年12月1日制订<br>只为“技术规范指导性文件”，<strong>不属于国家标准</strong><br>根据微软资料，GBK是对GB2312-80的扩展</p>\n<h4 id=\"GB18030\"><a href=\"#GB18030\" class=\"headerlink\" title=\"GB18030\"></a>GB18030</h4><p>全称：GB18030-2000《信息交换用汉字编码字符集基本集的扩充》，是我国政府于2000年3月17日发布的新的汉字编码国家标准<br>采用单字节、双字节和四字节三种方式对字符编码</p>\n<h4 id=\"Unicode\"><a href=\"#Unicode\" class=\"headerlink\" title=\"Unicode\"></a>Unicode</h4><p>全称：Universal Multiple-Octet Coded Character Set 通用多八位编码字符集<br>它为每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求</p>\n<p>Unicode是字符集，UTF-32/ UTF-16/ UTF-8是三种字符编码方案，UTF是 Unicode Tranformation Format</p>\n<ul>\n<li>UTF-32：用4字节的数字来表达每个字母、符号，或者表意文字，就空间而言，是非常没有效率的</li>\n<li>UTF-16：尽管有Unicode字符非常多，但是实际上大多数人不会用到超过前65535个以外的字符，因此有了UTF-16编码，每个字符只需要2个字节来存储</li>\n<li>UTF-8：针对Unicode的可变长度字符编码，其编码中的第一个字节仍与ASCII兼容，ASCII字母继续使用1字节储存，重音文字、希腊字母或西里尔字母等使用2字节来储存，而常用的汉字就要使用3字节，辅助平面字符则使用4字节</li>\n</ul>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>最早的简体中文编码字符集为GB2312(覆盖了99%的日常使用汉字)<br>后来出现了GBK，GBK加入了对繁体字的支持，GBK兼容GB2312<br>再后来又发布了GB18030编码，解决了中文、日文、朝鲜语等的编码问题，GB18030兼容GBK</p>\n<p>不同的字符集对于字符的映射不尽相同，所以在编程的时候应该使用统一的字符集，这样可以避免乱码<br>编程时尽可能使用Unicode字符集（常用UTF-8），这样可以保证代码或注释在其他语言的计算机上显示正常<br>一些计算机使用的默认字符集可能不支持中文，用默认字符集解析中文字符可能导致乱码<br>而不同语言的字符在Unicode字符集中都有唯一的编码与之对应，可以避免乱码</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005932016.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级MySQL数据库</a><br><a href=\"https://baike.baidu.com/item/%E5%AD%97%E7%AC%A6%E9%9B%86\" target=\"_blank\" rel=\"noopener\">百度百科-字符集</a><br><a href=\"https://www.cnblogs.com/skynet/archive/2011/05/03/2035105.html\" target=\"_blank\" rel=\"noopener\">字符集和字符编码（Charset &amp; Encoding） - 吴秦</a><br><a href=\"https://www.cnblogs.com/chenpingzhao/p/4761747.html\" target=\"_blank\" rel=\"noopener\">关于字符集和字符编码那些事</a><br><a href=\"https://blog.csdn.net/u010009033/article/details/81103334\" target=\"_blank\" rel=\"noopener\">中文编码 1：常见中文编码格式</a><br><a href=\"https://codeabc.cn/yangw/post/why-use-unicode\" target=\"_blank\" rel=\"noopener\">详细解释为什么写程序要用 Unicode 字符集</a></p>\n"},{"title":"初见安卓开发","date":"2020-03-30T12:05:45.000Z","_content":"## 初见安卓开发\n![安卓开发者官网 2020.6.1](/android-note/01_android_web.png)\n  \n从 [Android开发者官网](https://developer.android.google.cn/) 的导航栏我们可以看得出来Google在安卓开发方面主推Jetpack和Kotlin\n\n<br>[Android Jetpack](https://developer.android.google.cn/jetpack/) 是一套组件库，其中包含了很多组件，比如：LiveData,Room,ViewModel等等，使用这些组件极大简化了开发，消除样板代码，提高应用质量\n<br>[Kotlin](https://developer.android.google.cn/kotlin) 是JetBrains在2011年发布的静态类型编程语言（这是一个开源项目），虽然语法上不能与Java兼容，但它是面向JVM，所以它可以和Java代码相互运作。在Google I/O 2017中，Google宣布在Android上为Kotlin提供最佳支持，后来Google就把Android开发的官方语言更换为了Kotlin\n## Java or Kotlin\n选择语言确实比较重要，会极大影响后续的开发工作。目前情况：团队成员有Java基础、无Kotlin基础、无安卓开发经验，项目有时间限制。这里列举几个我们团队比较可感知的影响因素进行对比\n\n#### Java\n优点：Java安卓开发的资料相对多、遇到问题搜索到的概率比较大、Github上有大量的Java安卓项目可以学习\n缺点：相对Kotlin有很多样板代码、没有Kotlin的一些特性代码写起来会比较麻烦、Jetpack库的资料大多用Kotlin举例\n#### Kotlin\n优点：有很多语法糖、简化findViewById、简化数据类、空指针安全、函数式编程、协程（解决异步任务处理）...\n缺点：Kotlin安卓相关的教程比较少，Kotlin的资料相对没有Java那么多，遇到问题搜索到的概率相对低一点\n\n结合实际情况，我们最终选择了Java，对于在这个时间节点，初学安卓使用Java没什么太大问题，以后转Kotlin也会比较容易，总的来说各有利弊，看取舍\n\n## 实际遇到的困难\n1. 虽然JetPack已经发布了比较长的时间（2018年谷歌I/O上发布），但是相关的资料并不很很好找（中文资料就更难找了），因为我们选择了Java，在查JetPack资料的时候很容看到一些文章写的是Kotlin，没有学过Kotlin，看起来一头雾水\n2. 因为技术更替速度很快，所以搜索一些问题的时候，会出现很多无效的解决方案。如果发布时间是14、15、16年或是使用Eclipse进行讲解的解决方案，要仔细辨别一下方案的时效性，那如果是讲解思路的话那就没有关系\n3. 安卓手机屏幕尺寸多样化，界面需要对不同屏幕进行适配\n4. 如果应用上架应用市场，需要考虑平台上架的规范，对于一些类型的应用需要资质才能上架，下面为酷安 2020.6.1 截取的上架规范\n![酷安上架规范2020.6.1](android-note/02_coolapk.png)\n\n\n\n## 杂\n这段时间都在学习安卓开发，和小组的其他伙伴协作完成项目\n第一阶段结束收获颇丰，对于团队协作，Git都有了新的理解\n纸上得来终觉浅，绝知此事要躬行，运用一门技术去解决问题才是学会一门技术的最佳途径\n<br>在团队协作中，深刻地体会到了好的代码结构的重要性\n通过这次的实践，更加清楚自己缺乏什么，也知道往哪个方向努力","source":"_posts/android-note.md","raw":"---\ntitle: 初见安卓开发\ncategories: 编程杂记\ndate: 2020-03-30 20:05:45\n---\n## 初见安卓开发\n![安卓开发者官网 2020.6.1](/android-note/01_android_web.png)\n  \n从 [Android开发者官网](https://developer.android.google.cn/) 的导航栏我们可以看得出来Google在安卓开发方面主推Jetpack和Kotlin\n\n<br>[Android Jetpack](https://developer.android.google.cn/jetpack/) 是一套组件库，其中包含了很多组件，比如：LiveData,Room,ViewModel等等，使用这些组件极大简化了开发，消除样板代码，提高应用质量\n<br>[Kotlin](https://developer.android.google.cn/kotlin) 是JetBrains在2011年发布的静态类型编程语言（这是一个开源项目），虽然语法上不能与Java兼容，但它是面向JVM，所以它可以和Java代码相互运作。在Google I/O 2017中，Google宣布在Android上为Kotlin提供最佳支持，后来Google就把Android开发的官方语言更换为了Kotlin\n## Java or Kotlin\n选择语言确实比较重要，会极大影响后续的开发工作。目前情况：团队成员有Java基础、无Kotlin基础、无安卓开发经验，项目有时间限制。这里列举几个我们团队比较可感知的影响因素进行对比\n\n#### Java\n优点：Java安卓开发的资料相对多、遇到问题搜索到的概率比较大、Github上有大量的Java安卓项目可以学习\n缺点：相对Kotlin有很多样板代码、没有Kotlin的一些特性代码写起来会比较麻烦、Jetpack库的资料大多用Kotlin举例\n#### Kotlin\n优点：有很多语法糖、简化findViewById、简化数据类、空指针安全、函数式编程、协程（解决异步任务处理）...\n缺点：Kotlin安卓相关的教程比较少，Kotlin的资料相对没有Java那么多，遇到问题搜索到的概率相对低一点\n\n结合实际情况，我们最终选择了Java，对于在这个时间节点，初学安卓使用Java没什么太大问题，以后转Kotlin也会比较容易，总的来说各有利弊，看取舍\n\n## 实际遇到的困难\n1. 虽然JetPack已经发布了比较长的时间（2018年谷歌I/O上发布），但是相关的资料并不很很好找（中文资料就更难找了），因为我们选择了Java，在查JetPack资料的时候很容看到一些文章写的是Kotlin，没有学过Kotlin，看起来一头雾水\n2. 因为技术更替速度很快，所以搜索一些问题的时候，会出现很多无效的解决方案。如果发布时间是14、15、16年或是使用Eclipse进行讲解的解决方案，要仔细辨别一下方案的时效性，那如果是讲解思路的话那就没有关系\n3. 安卓手机屏幕尺寸多样化，界面需要对不同屏幕进行适配\n4. 如果应用上架应用市场，需要考虑平台上架的规范，对于一些类型的应用需要资质才能上架，下面为酷安 2020.6.1 截取的上架规范\n![酷安上架规范2020.6.1](android-note/02_coolapk.png)\n\n\n\n## 杂\n这段时间都在学习安卓开发，和小组的其他伙伴协作完成项目\n第一阶段结束收获颇丰，对于团队协作，Git都有了新的理解\n纸上得来终觉浅，绝知此事要躬行，运用一门技术去解决问题才是学会一门技术的最佳途径\n<br>在团队协作中，深刻地体会到了好的代码结构的重要性\n通过这次的实践，更加清楚自己缺乏什么，也知道往哪个方向努力","slug":"android-note","published":1,"updated":"2020-06-13T02:55:34.697Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke3x9g46000azgvu9jxgfwr0","content":"<h2 id=\"初见安卓开发\"><a href=\"#初见安卓开发\" class=\"headerlink\" title=\"初见安卓开发\"></a>初见安卓开发</h2><p><img src=\"/2020/03/30/android-note/01_android_web.png\" alt=\"安卓开发者官网 2020.6.1\"></p>\n<p>从 <a href=\"https://developer.android.google.cn/\" target=\"_blank\" rel=\"noopener\">Android开发者官网</a> 的导航栏我们可以看得出来Google在安卓开发方面主推Jetpack和Kotlin</p>\n<p><br><a href=\"https://developer.android.google.cn/jetpack/\" target=\"_blank\" rel=\"noopener\">Android Jetpack</a> 是一套组件库，其中包含了很多组件，比如：LiveData,Room,ViewModel等等，使用这些组件极大简化了开发，消除样板代码，提高应用质量<br><br><a href=\"https://developer.android.google.cn/kotlin\" target=\"_blank\" rel=\"noopener\">Kotlin</a> 是JetBrains在2011年发布的静态类型编程语言（这是一个开源项目），虽然语法上不能与Java兼容，但它是面向JVM，所以它可以和Java代码相互运作。在Google I/O 2017中，Google宣布在Android上为Kotlin提供最佳支持，后来Google就把Android开发的官方语言更换为了Kotlin</p>\n<h2 id=\"Java-or-Kotlin\"><a href=\"#Java-or-Kotlin\" class=\"headerlink\" title=\"Java or Kotlin\"></a>Java or Kotlin</h2><p>选择语言确实比较重要，会极大影响后续的开发工作。目前情况：团队成员有Java基础、无Kotlin基础、无安卓开发经验，项目有时间限制。这里列举几个我们团队比较可感知的影响因素进行对比</p>\n<h4 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h4><p>优点：Java安卓开发的资料相对多、遇到问题搜索到的概率比较大、Github上有大量的Java安卓项目可以学习<br>缺点：相对Kotlin有很多样板代码、没有Kotlin的一些特性代码写起来会比较麻烦、Jetpack库的资料大多用Kotlin举例</p>\n<h4 id=\"Kotlin\"><a href=\"#Kotlin\" class=\"headerlink\" title=\"Kotlin\"></a>Kotlin</h4><p>优点：有很多语法糖、简化findViewById、简化数据类、空指针安全、函数式编程、协程（解决异步任务处理）…<br>缺点：Kotlin安卓相关的教程比较少，Kotlin的资料相对没有Java那么多，遇到问题搜索到的概率相对低一点</p>\n<p>结合实际情况，我们最终选择了Java，对于在这个时间节点，初学安卓使用Java没什么太大问题，以后转Kotlin也会比较容易，总的来说各有利弊，看取舍</p>\n<h2 id=\"实际遇到的困难\"><a href=\"#实际遇到的困难\" class=\"headerlink\" title=\"实际遇到的困难\"></a>实际遇到的困难</h2><ol>\n<li>虽然JetPack已经发布了比较长的时间（2018年谷歌I/O上发布），但是相关的资料并不很很好找（中文资料就更难找了），因为我们选择了Java，在查JetPack资料的时候很容看到一些文章写的是Kotlin，没有学过Kotlin，看起来一头雾水</li>\n<li>因为技术更替速度很快，所以搜索一些问题的时候，会出现很多无效的解决方案。如果发布时间是14、15、16年或是使用Eclipse进行讲解的解决方案，要仔细辨别一下方案的时效性，那如果是讲解思路的话那就没有关系</li>\n<li>安卓手机屏幕尺寸多样化，界面需要对不同屏幕进行适配</li>\n<li>如果应用上架应用市场，需要考虑平台上架的规范，对于一些类型的应用需要资质才能上架，下面为酷安 2020.6.1 截取的上架规范<br><img src=\"/2020/03/30/android-note/02_coolapk.png\" alt=\"酷安上架规范2020.6.1\"></li>\n</ol>\n<h2 id=\"杂\"><a href=\"#杂\" class=\"headerlink\" title=\"杂\"></a>杂</h2><p>这段时间都在学习安卓开发，和小组的其他伙伴协作完成项目<br>第一阶段结束收获颇丰，对于团队协作，Git都有了新的理解<br>纸上得来终觉浅，绝知此事要躬行，运用一门技术去解决问题才是学会一门技术的最佳途径<br><br>在团队协作中，深刻地体会到了好的代码结构的重要性<br>通过这次的实践，更加清楚自己缺乏什么，也知道往哪个方向努力</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"初见安卓开发\"><a href=\"#初见安卓开发\" class=\"headerlink\" title=\"初见安卓开发\"></a>初见安卓开发</h2><p><img src=\"/2020/03/30/android-note/01_android_web.png\" alt=\"安卓开发者官网 2020.6.1\"></p>\n<p>从 <a href=\"https://developer.android.google.cn/\" target=\"_blank\" rel=\"noopener\">Android开发者官网</a> 的导航栏我们可以看得出来Google在安卓开发方面主推Jetpack和Kotlin</p>\n<p><br><a href=\"https://developer.android.google.cn/jetpack/\" target=\"_blank\" rel=\"noopener\">Android Jetpack</a> 是一套组件库，其中包含了很多组件，比如：LiveData,Room,ViewModel等等，使用这些组件极大简化了开发，消除样板代码，提高应用质量<br><br><a href=\"https://developer.android.google.cn/kotlin\" target=\"_blank\" rel=\"noopener\">Kotlin</a> 是JetBrains在2011年发布的静态类型编程语言（这是一个开源项目），虽然语法上不能与Java兼容，但它是面向JVM，所以它可以和Java代码相互运作。在Google I/O 2017中，Google宣布在Android上为Kotlin提供最佳支持，后来Google就把Android开发的官方语言更换为了Kotlin</p>\n<h2 id=\"Java-or-Kotlin\"><a href=\"#Java-or-Kotlin\" class=\"headerlink\" title=\"Java or Kotlin\"></a>Java or Kotlin</h2><p>选择语言确实比较重要，会极大影响后续的开发工作。目前情况：团队成员有Java基础、无Kotlin基础、无安卓开发经验，项目有时间限制。这里列举几个我们团队比较可感知的影响因素进行对比</p>\n<h4 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h4><p>优点：Java安卓开发的资料相对多、遇到问题搜索到的概率比较大、Github上有大量的Java安卓项目可以学习<br>缺点：相对Kotlin有很多样板代码、没有Kotlin的一些特性代码写起来会比较麻烦、Jetpack库的资料大多用Kotlin举例</p>\n<h4 id=\"Kotlin\"><a href=\"#Kotlin\" class=\"headerlink\" title=\"Kotlin\"></a>Kotlin</h4><p>优点：有很多语法糖、简化findViewById、简化数据类、空指针安全、函数式编程、协程（解决异步任务处理）…<br>缺点：Kotlin安卓相关的教程比较少，Kotlin的资料相对没有Java那么多，遇到问题搜索到的概率相对低一点</p>\n<p>结合实际情况，我们最终选择了Java，对于在这个时间节点，初学安卓使用Java没什么太大问题，以后转Kotlin也会比较容易，总的来说各有利弊，看取舍</p>\n<h2 id=\"实际遇到的困难\"><a href=\"#实际遇到的困难\" class=\"headerlink\" title=\"实际遇到的困难\"></a>实际遇到的困难</h2><ol>\n<li>虽然JetPack已经发布了比较长的时间（2018年谷歌I/O上发布），但是相关的资料并不很很好找（中文资料就更难找了），因为我们选择了Java，在查JetPack资料的时候很容看到一些文章写的是Kotlin，没有学过Kotlin，看起来一头雾水</li>\n<li>因为技术更替速度很快，所以搜索一些问题的时候，会出现很多无效的解决方案。如果发布时间是14、15、16年或是使用Eclipse进行讲解的解决方案，要仔细辨别一下方案的时效性，那如果是讲解思路的话那就没有关系</li>\n<li>安卓手机屏幕尺寸多样化，界面需要对不同屏幕进行适配</li>\n<li>如果应用上架应用市场，需要考虑平台上架的规范，对于一些类型的应用需要资质才能上架，下面为酷安 2020.6.1 截取的上架规范<br><img src=\"/2020/03/30/android-note/02_coolapk.png\" alt=\"酷安上架规范2020.6.1\"></li>\n</ol>\n<h2 id=\"杂\"><a href=\"#杂\" class=\"headerlink\" title=\"杂\"></a>杂</h2><p>这段时间都在学习安卓开发，和小组的其他伙伴协作完成项目<br>第一阶段结束收获颇丰，对于团队协作，Git都有了新的理解<br>纸上得来终觉浅，绝知此事要躬行，运用一门技术去解决问题才是学会一门技术的最佳途径<br><br>在团队协作中，深刻地体会到了好的代码结构的重要性<br>通过这次的实践，更加清楚自己缺乏什么，也知道往哪个方向努力</p>\n"},{"title":"Hello World","date":"2019-10-23T12:23:50.000Z","_content":"## 过往\n  \n前一段时间发生了很多事，经历了一些变动，让我开始重新审视自己\n\n大一大二似乎都在随波逐流，做着那些“优秀”的人都在做的事\n\n到头来不过只是在重复地做着某些领域最简单的事\n\n\n\n## 当下\n\n走出舒适圈，和不同的人交流，了解不同的观点\n\n一点一点地积累，用博客改变自己，也用博客记录自己的改变\n\n希望自己能坚持下去，不管是写博客，还是其他喜欢的事\n\n## 关于博客\n\n\n>写博客是一种“写作式学习”\n>\n>只要你坚持写下去几年，写Blog给你带来的收益超乎想象，这是积累的力量。\n>\n>引用自 [写博客是一种“写作式学习”](http://www.read.org.cn/html/2005-xie-bo-ke-shi-yi-zhong-xie-zuo-shi-xue-xi.html)\n\n搭这个博客的初心就是激励自己，多把时间花在有意义的事情上，深入地学习一些东西\n\n用的是Hexo + Github Pages，相对那些即开即用的博客，我更享受折腾带来的乐趣","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2019-10-23 20:23:50\ncategories: 零碎\n---\n## 过往\n  \n前一段时间发生了很多事，经历了一些变动，让我开始重新审视自己\n\n大一大二似乎都在随波逐流，做着那些“优秀”的人都在做的事\n\n到头来不过只是在重复地做着某些领域最简单的事\n\n\n\n## 当下\n\n走出舒适圈，和不同的人交流，了解不同的观点\n\n一点一点地积累，用博客改变自己，也用博客记录自己的改变\n\n希望自己能坚持下去，不管是写博客，还是其他喜欢的事\n\n## 关于博客\n\n\n>写博客是一种“写作式学习”\n>\n>只要你坚持写下去几年，写Blog给你带来的收益超乎想象，这是积累的力量。\n>\n>引用自 [写博客是一种“写作式学习”](http://www.read.org.cn/html/2005-xie-bo-ke-shi-yi-zhong-xie-zuo-shi-xue-xi.html)\n\n搭这个博客的初心就是激励自己，多把时间花在有意义的事情上，深入地学习一些东西\n\n用的是Hexo + Github Pages，相对那些即开即用的博客，我更享受折腾带来的乐趣","slug":"hello-world","published":1,"updated":"2020-06-13T02:55:34.732Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke3x9g4b000dzgvudima6vex","content":"<h2 id=\"过往\"><a href=\"#过往\" class=\"headerlink\" title=\"过往\"></a>过往</h2><p>前一段时间发生了很多事，经历了一些变动，让我开始重新审视自己</p>\n<p>大一大二似乎都在随波逐流，做着那些“优秀”的人都在做的事</p>\n<p>到头来不过只是在重复地做着某些领域最简单的事</p>\n<h2 id=\"当下\"><a href=\"#当下\" class=\"headerlink\" title=\"当下\"></a>当下</h2><p>走出舒适圈，和不同的人交流，了解不同的观点</p>\n<p>一点一点地积累，用博客改变自己，也用博客记录自己的改变</p>\n<p>希望自己能坚持下去，不管是写博客，还是其他喜欢的事</p>\n<h2 id=\"关于博客\"><a href=\"#关于博客\" class=\"headerlink\" title=\"关于博客\"></a>关于博客</h2><blockquote>\n<p>写博客是一种“写作式学习”</p>\n<p>只要你坚持写下去几年，写Blog给你带来的收益超乎想象，这是积累的力量。</p>\n<p>引用自 <a href=\"http://www.read.org.cn/html/2005-xie-bo-ke-shi-yi-zhong-xie-zuo-shi-xue-xi.html\" target=\"_blank\" rel=\"noopener\">写博客是一种“写作式学习”</a></p>\n</blockquote>\n<p>搭这个博客的初心就是激励自己，多把时间花在有意义的事情上，深入地学习一些东西</p>\n<p>用的是Hexo + Github Pages，相对那些即开即用的博客，我更享受折腾带来的乐趣</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"过往\"><a href=\"#过往\" class=\"headerlink\" title=\"过往\"></a>过往</h2><p>前一段时间发生了很多事，经历了一些变动，让我开始重新审视自己</p>\n<p>大一大二似乎都在随波逐流，做着那些“优秀”的人都在做的事</p>\n<p>到头来不过只是在重复地做着某些领域最简单的事</p>\n<h2 id=\"当下\"><a href=\"#当下\" class=\"headerlink\" title=\"当下\"></a>当下</h2><p>走出舒适圈，和不同的人交流，了解不同的观点</p>\n<p>一点一点地积累，用博客改变自己，也用博客记录自己的改变</p>\n<p>希望自己能坚持下去，不管是写博客，还是其他喜欢的事</p>\n<h2 id=\"关于博客\"><a href=\"#关于博客\" class=\"headerlink\" title=\"关于博客\"></a>关于博客</h2><blockquote>\n<p>写博客是一种“写作式学习”</p>\n<p>只要你坚持写下去几年，写Blog给你带来的收益超乎想象，这是积累的力量。</p>\n<p>引用自 <a href=\"http://www.read.org.cn/html/2005-xie-bo-ke-shi-yi-zhong-xie-zuo-shi-xue-xi.html\" target=\"_blank\" rel=\"noopener\">写博客是一种“写作式学习”</a></p>\n</blockquote>\n<p>搭这个博客的初心就是激励自己，多把时间花在有意义的事情上，深入地学习一些东西</p>\n<p>用的是Hexo + Github Pages，相对那些即开即用的博客，我更享受折腾带来的乐趣</p>\n"},{"title":"Java笔记-基础","date":"2019-12-23T02:52:41.000Z","_content":"## Java 基础\n\n#### 常量（6种）\n- 整数\n  * 二进制   0b 0B （Java7的新特性）（这个是数字零，而不是字母O） \n  * 八进制   0\n  * 十六进制 0x 0X \n- 浮点数\n- 字符\n- 字符串\n- 布尔型\n- null\n  \n#### 数据类型（Java是强类型语言）\n- 基本数据类型（4类8种）\n  - 整数\n    - byte 1字节 \n    - short 2字节\n    - int 4字节\n    - long 8字节 \n  - 浮点数\n    - float 4字节\n    - double 8字节\n  - 字符 \n    - char 2字节\n  - 布尔\n    - boolean 1字节\n  - 注意点\n    - 整数默认int，浮点数默认double \n    - long后缀用L标记，float用F标记\n      - 浮点数默认是double，所以把浮点数赋值给float会报错，应该在浮点数后面加F\n    - 科学计数法：3.14e2， 3.14E2 返回double\n    - float和double都不能精确表示小数\n  - 自动转化\n    - 一个算术表达式中包含多个基本数据类型(boolean除外),不同类型的数据先转化为同一类型，然后进行运算。\n    - byte,short,char --> int --> long --> float  --> double\n      ``` Java\n      short s=8;\n      byte s2=5;\n      short s=s1+s2;报错\n      int s=s1+s2;  //正确 \n      //自动转化为int类型就像：\n      int s = (int)s1 +(int)s2; \n      //或者强转 \n      short s=(short) (s1+s2);\n      ```\n- 引用数据类型\n  - 类\n  - 接口\n  - 数组\n\n\n#### 运算符\n  - 算术运算\n    ``` Java \n    System.out.println('a' + 1); //98\n    System.out.println(\"a\" + 2); //a2 字符串拼接\n\n    //System.out.println(100 /0); 报错\n\n    System.out.println(100.0 / 0);//Infinity \n    System.out.println(-100.0 / 0);//-Infinity \n    //0自动转化为double 0.0 一个数除以很无限接近0的数，就无限大 \n\n    System.out.println(0.0 / 0.0);//NaN  not a number\n\n    System.out.println(-10 % -3);//   -3 模除符号只取决于第一个数\n\n    short s = 8;\n    //s = s + 1; 报错 结果为int不能赋值给short\n    s += 5; //自动强转为short类型\n    ```\n  - 逻辑运算符的短路\n\n\n#### 流程语句\n  - switch\n    ```java\n      switch (表达式)\n      {\n        case A值:\n          语句1;\n          break;\n        case B值:\n          语句2;\n          break;\n        default:\n          语句3;\n      }\n    ```\n    1. 表达式支持 byte , short , char , int (没有long)，从Java7开始支持String类型\n    2. 一旦符合找到匹配的case就开始往下执行（不管后面的case是否匹配）--穿透，除非遇到break或return\n    3. 找不到匹配的case，执行default，一般放在最后，放在其他位置，也会穿透\n  - for\n    ```java\n    outter:for(){\n      for(){\n        if() break outter; //直接退出外层循环\n      }\n    }\n    ```\n  - return \n    - 结束循环所在的方法\n  \n#### 方法与数组\n  - 注意点\n    - 一个方法前面有static 调用的方法也应该有static\n    - 遵循标识符的规范，多个单词用驼峰表示法：myName\n  - 方法签名\n    - 方法签名:方法名称  +  方法参数列表;\n    - 在同一个类中,方法签名是唯一的,否则编译报\n  - 增强for （foreach） 语法糖\n```java\nint [] arrays=new int [] {1,2,3};\n\nfor (int array:arrays) {\n  System.out.println(array);\n}\n```\n方法的可变参数 语法糖\n    - 可变参数就是,方法的数组参数的一种简写 ( 会自动把... 转成数组 )\n    - 可变参数必须作为方法的最后一个参数\n\n\n## 参考资料\n[Java零基础到高级JavaEE就业实战](https://study.163.com/course/introduction/1005537028.htm)","source":"_posts/java-note-1.md","raw":"---\ntitle: Java笔记-基础\ndate: 2019-12-23 10:52:41\ncategories: Java笔记\n---\n## Java 基础\n\n#### 常量（6种）\n- 整数\n  * 二进制   0b 0B （Java7的新特性）（这个是数字零，而不是字母O） \n  * 八进制   0\n  * 十六进制 0x 0X \n- 浮点数\n- 字符\n- 字符串\n- 布尔型\n- null\n  \n#### 数据类型（Java是强类型语言）\n- 基本数据类型（4类8种）\n  - 整数\n    - byte 1字节 \n    - short 2字节\n    - int 4字节\n    - long 8字节 \n  - 浮点数\n    - float 4字节\n    - double 8字节\n  - 字符 \n    - char 2字节\n  - 布尔\n    - boolean 1字节\n  - 注意点\n    - 整数默认int，浮点数默认double \n    - long后缀用L标记，float用F标记\n      - 浮点数默认是double，所以把浮点数赋值给float会报错，应该在浮点数后面加F\n    - 科学计数法：3.14e2， 3.14E2 返回double\n    - float和double都不能精确表示小数\n  - 自动转化\n    - 一个算术表达式中包含多个基本数据类型(boolean除外),不同类型的数据先转化为同一类型，然后进行运算。\n    - byte,short,char --> int --> long --> float  --> double\n      ``` Java\n      short s=8;\n      byte s2=5;\n      short s=s1+s2;报错\n      int s=s1+s2;  //正确 \n      //自动转化为int类型就像：\n      int s = (int)s1 +(int)s2; \n      //或者强转 \n      short s=(short) (s1+s2);\n      ```\n- 引用数据类型\n  - 类\n  - 接口\n  - 数组\n\n\n#### 运算符\n  - 算术运算\n    ``` Java \n    System.out.println('a' + 1); //98\n    System.out.println(\"a\" + 2); //a2 字符串拼接\n\n    //System.out.println(100 /0); 报错\n\n    System.out.println(100.0 / 0);//Infinity \n    System.out.println(-100.0 / 0);//-Infinity \n    //0自动转化为double 0.0 一个数除以很无限接近0的数，就无限大 \n\n    System.out.println(0.0 / 0.0);//NaN  not a number\n\n    System.out.println(-10 % -3);//   -3 模除符号只取决于第一个数\n\n    short s = 8;\n    //s = s + 1; 报错 结果为int不能赋值给short\n    s += 5; //自动强转为short类型\n    ```\n  - 逻辑运算符的短路\n\n\n#### 流程语句\n  - switch\n    ```java\n      switch (表达式)\n      {\n        case A值:\n          语句1;\n          break;\n        case B值:\n          语句2;\n          break;\n        default:\n          语句3;\n      }\n    ```\n    1. 表达式支持 byte , short , char , int (没有long)，从Java7开始支持String类型\n    2. 一旦符合找到匹配的case就开始往下执行（不管后面的case是否匹配）--穿透，除非遇到break或return\n    3. 找不到匹配的case，执行default，一般放在最后，放在其他位置，也会穿透\n  - for\n    ```java\n    outter:for(){\n      for(){\n        if() break outter; //直接退出外层循环\n      }\n    }\n    ```\n  - return \n    - 结束循环所在的方法\n  \n#### 方法与数组\n  - 注意点\n    - 一个方法前面有static 调用的方法也应该有static\n    - 遵循标识符的规范，多个单词用驼峰表示法：myName\n  - 方法签名\n    - 方法签名:方法名称  +  方法参数列表;\n    - 在同一个类中,方法签名是唯一的,否则编译报\n  - 增强for （foreach） 语法糖\n```java\nint [] arrays=new int [] {1,2,3};\n\nfor (int array:arrays) {\n  System.out.println(array);\n}\n```\n方法的可变参数 语法糖\n    - 可变参数就是,方法的数组参数的一种简写 ( 会自动把... 转成数组 )\n    - 可变参数必须作为方法的最后一个参数\n\n\n## 参考资料\n[Java零基础到高级JavaEE就业实战](https://study.163.com/course/introduction/1005537028.htm)","slug":"java-note-1","published":1,"updated":"2020-06-13T02:55:34.733Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke3x9g4g000ezgvu89182apo","content":"<h2 id=\"Java-基础\"><a href=\"#Java-基础\" class=\"headerlink\" title=\"Java 基础\"></a>Java 基础</h2><h4 id=\"常量（6种）\"><a href=\"#常量（6种）\" class=\"headerlink\" title=\"常量（6种）\"></a>常量（6种）</h4><ul>\n<li>整数<ul>\n<li>二进制   0b 0B （Java7的新特性）（这个是数字零，而不是字母O） </li>\n<li>八进制   0</li>\n<li>十六进制 0x 0X </li>\n</ul>\n</li>\n<li>浮点数</li>\n<li>字符</li>\n<li>字符串</li>\n<li>布尔型</li>\n<li>null</li>\n</ul>\n<h4 id=\"数据类型（Java是强类型语言）\"><a href=\"#数据类型（Java是强类型语言）\" class=\"headerlink\" title=\"数据类型（Java是强类型语言）\"></a>数据类型（Java是强类型语言）</h4><ul>\n<li>基本数据类型（4类8种）<ul>\n<li>整数<ul>\n<li>byte 1字节 </li>\n<li>short 2字节</li>\n<li>int 4字节</li>\n<li>long 8字节 </li>\n</ul>\n</li>\n<li>浮点数<ul>\n<li>float 4字节</li>\n<li>double 8字节</li>\n</ul>\n</li>\n<li>字符 <ul>\n<li>char 2字节</li>\n</ul>\n</li>\n<li>布尔<ul>\n<li>boolean 1字节</li>\n</ul>\n</li>\n<li>注意点<ul>\n<li>整数默认int，浮点数默认double </li>\n<li>long后缀用L标记，float用F标记<ul>\n<li>浮点数默认是double，所以把浮点数赋值给float会报错，应该在浮点数后面加F</li>\n</ul>\n</li>\n<li>科学计数法：3.14e2， 3.14E2 返回double</li>\n<li>float和double都不能精确表示小数</li>\n</ul>\n</li>\n<li>自动转化<ul>\n<li>一个算术表达式中包含多个基本数据类型(boolean除外),不同类型的数据先转化为同一类型，然后进行运算。</li>\n<li>byte,short,char –&gt; int –&gt; long –&gt; float  –&gt; double<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">short</span> s=<span class=\"number\">8</span>;</span><br><span class=\"line\"><span class=\"keyword\">byte</span> s2=<span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">short</span> s=s1+s2;报错</span><br><span class=\"line\"><span class=\"keyword\">int</span> s=s1+s2;  <span class=\"comment\">//正确 </span></span><br><span class=\"line\"><span class=\"comment\">//自动转化为int类型就像：</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> s = (<span class=\"keyword\">int</span>)s1 +(<span class=\"keyword\">int</span>)s2; </span><br><span class=\"line\"><span class=\"comment\">//或者强转 </span></span><br><span class=\"line\"><span class=\"keyword\">short</span> s=(<span class=\"keyword\">short</span>) (s1+s2);</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>引用数据类型<ul>\n<li>类</li>\n<li>接口</li>\n<li>数组</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h4><ul>\n<li>算术运算<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(<span class=\"string\">'a'</span> + <span class=\"number\">1</span>); <span class=\"comment\">//98</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"a\"</span> + <span class=\"number\">2</span>); <span class=\"comment\">//a2 字符串拼接</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//System.out.println(100 /0); 报错</span></span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(<span class=\"number\">100.0</span> / <span class=\"number\">0</span>);<span class=\"comment\">//Infinity </span></span><br><span class=\"line\">System.out.println(-<span class=\"number\">100.0</span> / <span class=\"number\">0</span>);<span class=\"comment\">//-Infinity </span></span><br><span class=\"line\"><span class=\"comment\">//0自动转化为double 0.0 一个数除以很无限接近0的数，就无限大 </span></span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(<span class=\"number\">0.0</span> / <span class=\"number\">0.0</span>);<span class=\"comment\">//NaN  not a number</span></span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(-<span class=\"number\">10</span> % -<span class=\"number\">3</span>);<span class=\"comment\">//   -3 模除符号只取决于第一个数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">short</span> s = <span class=\"number\">8</span>;</span><br><span class=\"line\"><span class=\"comment\">//s = s + 1; 报错 结果为int不能赋值给short</span></span><br><span class=\"line\">s += <span class=\"number\">5</span>; <span class=\"comment\">//自动强转为short类型</span></span><br></pre></td></tr></table></figure></li>\n<li>逻辑运算符的短路</li>\n</ul>\n<h4 id=\"流程语句\"><a href=\"#流程语句\" class=\"headerlink\" title=\"流程语句\"></a>流程语句</h4><ul>\n<li>switch<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> (表达式)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> A值:</span><br><span class=\"line\">    语句<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> B值:</span><br><span class=\"line\">    语句<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">default</span>:</span><br><span class=\"line\">    语句<span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>表达式支持 byte , short , char , int (没有long)，从Java7开始支持String类型</li>\n<li>一旦符合找到匹配的case就开始往下执行（不管后面的case是否匹配）–穿透，除非遇到break或return</li>\n<li>找不到匹配的case，执行default，一般放在最后，放在其他位置，也会穿透</li>\n</ol>\n</li>\n<li>for<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">outter:<span class=\"keyword\">for</span>()&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>() <span class=\"keyword\">break</span> outter; <span class=\"comment\">//直接退出外层循环</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>return <ul>\n<li>结束循环所在的方法</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"方法与数组\"><a href=\"#方法与数组\" class=\"headerlink\" title=\"方法与数组\"></a>方法与数组</h4><ul>\n<li>注意点<ul>\n<li>一个方法前面有static 调用的方法也应该有static</li>\n<li>遵循标识符的规范，多个单词用驼峰表示法：myName</li>\n</ul>\n</li>\n<li>方法签名<ul>\n<li>方法签名:方法名称  +  方法参数列表;</li>\n<li>在同一个类中,方法签名是唯一的,否则编译报</li>\n</ul>\n</li>\n<li>增强for （foreach） 语法糖<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> [] arrays=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span> [] &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> array:arrays) &#123;</span><br><span class=\"line\">  System.out.println(array);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n方法的可变参数 语法糖<ul>\n<li>可变参数就是,方法的数组参数的一种简写 ( 会自动把… 转成数组 )</li>\n<li>可变参数必须作为方法的最后一个参数</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005537028.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级JavaEE就业实战</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Java-基础\"><a href=\"#Java-基础\" class=\"headerlink\" title=\"Java 基础\"></a>Java 基础</h2><h4 id=\"常量（6种）\"><a href=\"#常量（6种）\" class=\"headerlink\" title=\"常量（6种）\"></a>常量（6种）</h4><ul>\n<li>整数<ul>\n<li>二进制   0b 0B （Java7的新特性）（这个是数字零，而不是字母O） </li>\n<li>八进制   0</li>\n<li>十六进制 0x 0X </li>\n</ul>\n</li>\n<li>浮点数</li>\n<li>字符</li>\n<li>字符串</li>\n<li>布尔型</li>\n<li>null</li>\n</ul>\n<h4 id=\"数据类型（Java是强类型语言）\"><a href=\"#数据类型（Java是强类型语言）\" class=\"headerlink\" title=\"数据类型（Java是强类型语言）\"></a>数据类型（Java是强类型语言）</h4><ul>\n<li>基本数据类型（4类8种）<ul>\n<li>整数<ul>\n<li>byte 1字节 </li>\n<li>short 2字节</li>\n<li>int 4字节</li>\n<li>long 8字节 </li>\n</ul>\n</li>\n<li>浮点数<ul>\n<li>float 4字节</li>\n<li>double 8字节</li>\n</ul>\n</li>\n<li>字符 <ul>\n<li>char 2字节</li>\n</ul>\n</li>\n<li>布尔<ul>\n<li>boolean 1字节</li>\n</ul>\n</li>\n<li>注意点<ul>\n<li>整数默认int，浮点数默认double </li>\n<li>long后缀用L标记，float用F标记<ul>\n<li>浮点数默认是double，所以把浮点数赋值给float会报错，应该在浮点数后面加F</li>\n</ul>\n</li>\n<li>科学计数法：3.14e2， 3.14E2 返回double</li>\n<li>float和double都不能精确表示小数</li>\n</ul>\n</li>\n<li>自动转化<ul>\n<li>一个算术表达式中包含多个基本数据类型(boolean除外),不同类型的数据先转化为同一类型，然后进行运算。</li>\n<li>byte,short,char –&gt; int –&gt; long –&gt; float  –&gt; double<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">short</span> s=<span class=\"number\">8</span>;</span><br><span class=\"line\"><span class=\"keyword\">byte</span> s2=<span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">short</span> s=s1+s2;报错</span><br><span class=\"line\"><span class=\"keyword\">int</span> s=s1+s2;  <span class=\"comment\">//正确 </span></span><br><span class=\"line\"><span class=\"comment\">//自动转化为int类型就像：</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> s = (<span class=\"keyword\">int</span>)s1 +(<span class=\"keyword\">int</span>)s2; </span><br><span class=\"line\"><span class=\"comment\">//或者强转 </span></span><br><span class=\"line\"><span class=\"keyword\">short</span> s=(<span class=\"keyword\">short</span>) (s1+s2);</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>引用数据类型<ul>\n<li>类</li>\n<li>接口</li>\n<li>数组</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h4><ul>\n<li>算术运算<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(<span class=\"string\">'a'</span> + <span class=\"number\">1</span>); <span class=\"comment\">//98</span></span><br><span class=\"line\">System.out.println(<span class=\"string\">\"a\"</span> + <span class=\"number\">2</span>); <span class=\"comment\">//a2 字符串拼接</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//System.out.println(100 /0); 报错</span></span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(<span class=\"number\">100.0</span> / <span class=\"number\">0</span>);<span class=\"comment\">//Infinity </span></span><br><span class=\"line\">System.out.println(-<span class=\"number\">100.0</span> / <span class=\"number\">0</span>);<span class=\"comment\">//-Infinity </span></span><br><span class=\"line\"><span class=\"comment\">//0自动转化为double 0.0 一个数除以很无限接近0的数，就无限大 </span></span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(<span class=\"number\">0.0</span> / <span class=\"number\">0.0</span>);<span class=\"comment\">//NaN  not a number</span></span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(-<span class=\"number\">10</span> % -<span class=\"number\">3</span>);<span class=\"comment\">//   -3 模除符号只取决于第一个数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">short</span> s = <span class=\"number\">8</span>;</span><br><span class=\"line\"><span class=\"comment\">//s = s + 1; 报错 结果为int不能赋值给short</span></span><br><span class=\"line\">s += <span class=\"number\">5</span>; <span class=\"comment\">//自动强转为short类型</span></span><br></pre></td></tr></table></figure></li>\n<li>逻辑运算符的短路</li>\n</ul>\n<h4 id=\"流程语句\"><a href=\"#流程语句\" class=\"headerlink\" title=\"流程语句\"></a>流程语句</h4><ul>\n<li>switch<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> (表达式)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> A值:</span><br><span class=\"line\">    语句<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> B值:</span><br><span class=\"line\">    语句<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">default</span>:</span><br><span class=\"line\">    语句<span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>表达式支持 byte , short , char , int (没有long)，从Java7开始支持String类型</li>\n<li>一旦符合找到匹配的case就开始往下执行（不管后面的case是否匹配）–穿透，除非遇到break或return</li>\n<li>找不到匹配的case，执行default，一般放在最后，放在其他位置，也会穿透</li>\n</ol>\n</li>\n<li>for<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">outter:<span class=\"keyword\">for</span>()&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>() <span class=\"keyword\">break</span> outter; <span class=\"comment\">//直接退出外层循环</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>return <ul>\n<li>结束循环所在的方法</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"方法与数组\"><a href=\"#方法与数组\" class=\"headerlink\" title=\"方法与数组\"></a>方法与数组</h4><ul>\n<li>注意点<ul>\n<li>一个方法前面有static 调用的方法也应该有static</li>\n<li>遵循标识符的规范，多个单词用驼峰表示法：myName</li>\n</ul>\n</li>\n<li>方法签名<ul>\n<li>方法签名:方法名称  +  方法参数列表;</li>\n<li>在同一个类中,方法签名是唯一的,否则编译报</li>\n</ul>\n</li>\n<li>增强for （foreach） 语法糖<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> [] arrays=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span> [] &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> array:arrays) &#123;</span><br><span class=\"line\">  System.out.println(array);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n方法的可变参数 语法糖<ul>\n<li>可变参数就是,方法的数组参数的一种简写 ( 会自动把… 转成数组 )</li>\n<li>可变参数必须作为方法的最后一个参数</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005537028.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级JavaEE就业实战</a></p>\n"},{"title":"Java练习-中文编程","date":"2020-02-05T13:47:28.000Z","_content":"## 需求\n请编写一个程序，制作一个简易的中文语言编译器，即使用中文语法进行编程，输入为逐行输入，每行为一个语句，一个语句代变一个操作，满足以下语法要求（括号内代变格式类型，具体参考样例）：\n\n- 变量定义：整数 （变量名） 等于 （数字）\n- 运算（加法）：（变量名） 增加 （数字）\n- 运算（减法）：（变量名） 减少 （数字）\n- 输出：看看 （变量名） or 看看 “（字符串内容）”\n\n附加要求：\n选择：如果 （判断语句） 则 （操作语句） 否则 （操作语句）\n若否则后没有任何操作使用（无）来进行填充（参考样例2）。\n\n## 测试样例\n输入\n```\n整数 气温 等于 十\n气温 减少 三\n气温 增加 二\n看看 气温\n如果 气温 大于 八 则 看看 “你好，世界” 否则 看看 “冻死我了”\n```\n输出\n```\n九\n你好，世界\n```\n\n输入\n```\n整数 小杨年龄 等于 八\n整数 小杨零花钱 等于 二\n小杨年龄 增加 一\n如果 小杨年龄 大于 八 则 小杨零花钱 增加 一 否则 无\n看看 小杨零花钱\n```\n输出\n```\n三\n```\n\n\n## 分析\n需求分析\n- 整数变量定义、赋值\n- 加减运算\n- 输出变量或字符串\n- 三目运算：如果 则 否则\n\n需要解决的问题\n- 字符串截取\n- 字符串语义判断\n- 异常处理\n- 负数，多位数\n\n## 遇到的一些坑\n- 字符串split的时候左右边的空格会被加入到split返回的数组\n\n## 功能实现情况\n- 数字输入输出（支持中文习惯和机械式的转化）\n  - 符合中国人习惯的输入输出，支持-999到999（例如：九百九十九、九百一、九百一十，九百零一，九百，九十，十九，十，零，负九百九十九）\n  - 机械式的转化（例如：一零零）支持的范围：-2147483647到2147483647\n  - 传奇地加入了负零(效用等同于零)\n\n- 支持去除语句中多余的空格\n\n- 变量定义：整数 钱包 等于 零\n  - 支持定义多个变量\n\n- 运算操作：钱包 增加 十\n  - 支持增加、减少、乘以、除以、模除\n\n- 输出：看看 钱包  、 看看 “字符串”\n  - 支持输出字符串或者变量\n\n- 三目运算符：如果 钱包 大于 十 则 看看 “钱太多了” 否则 看看 “我穷死了”\n  - 条件判断两边都可以是整数变量或者整数常量\n\n- 异常处理\n  - 关键字不存在\n  - 运算时变量未定义\n  - 输出时变量未定义\n  - 除数不能为0\n  - 非法输入\n\n\n## 完整代码\nGitHub仓库地址：[learn-programming](https://github.com/aaronlinv/learn-programming)\n\n主函数\n```java\npublic class DemoMain {\n\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\twhile (true) {\n\t\t\tUtils.runMain(sc.nextLine());\n\t\t}\n\t}\n\n}\n\n```\n\n\nUtils类\n```java\n\npublic class Utils {\n\tprivate static String numWords = \"零一二三四五六七八九十\";\n\tprivate static Map<String, Integer> map = new HashMap<String, Integer>();\n\n\t/**\n\t * 运行语句并处理异常\n\t * @param str\n\t */\n\tpublic static void runMain(String str) {\n\t\ttry {\n\t\t\tUtils.callFunction(str);\n\t\t} catch (Exception e) {\n\t\t\tSystem.out.println(e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * 调用方法\n\t * @param str\n\t */\n\tpublic static void callFunction(String str) {\n\t\tString[] split = str.trim().split(\"\\\\s+\");\n\t\tString keyword = split[0];\n\t\tif (keyword.equals(\"无\")) {\n\t\t\treturn;\n\t\t}\n\t\tif (isManipulate(str) || isVar(keyword)) {\n\t\t\tUtils.manipulateNum(str);\n\t\t} else {\n\t\t\t// isManipulate 已经判断了len == 1情况 不会越界\n\t\t\tswitch (keyword) {\n\t\t\tcase \"整数\":\n\t\t\t\t// System.out.println(map.get(\"钱包\"));// 不存在返回null\n\t\t\t\tUtils.assignInt(str);\n\t\t\t\tbreak;\n\t\t\tcase \"看看\":\n\t\t\t\tUtils.printOut(str);\n\t\t\t\tbreak;\n\t\t\tcase \"如果\":\n\t\t\t\tUtils.ternaryOperator(str);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new IllegalArgumentException(\"没有关键字：\" + keyword + \" 请使用关键字：整数、看看、如果\");\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *  赋值整数变量\n\t * @param array\n\t * @return\n\t */\n\tpublic static void assignInt(String str) {\n\t\tString[] strArr = str.trim().split(\"\\\\s+\");\n\t\t// 短路 所以不会越界\n\t\tif (strArr.length != 4 || !strArr[2].equals(\"等于\")) {\n\t\t\tthrow new DemoException(\"语法有错，请检查语法\");\n\t\t}\n\n\t\tsetVar(strArr[1], toNum(strArr[3]));\n\t}\n\n\t/**\n\t * 输出字符串或者变量\n\t * @param array\n\t */\n\tpublic static void printOut(String str) {\n\t\tString[] strArr = str.trim().split(\"\\\\s+\");\n\n\t\t// 输出变量\n\t\tif (strArr.length == 2) {\n\t\t\tString varStr = strArr[1];\n\t\t\tif (isVar(varStr)) {\n\t\t\t\tSystem.out.println(toChStr(getVar(varStr)));\n\t\t\t\treturn;\n\t\t\t} else if (!varStr.contains(\"“\") && !varStr.contains(\"”\")) {\n\t\t\t\tthrow new DemoException(\"变量：\" + varStr + \" 未定义，请定义变量\");\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t// 去除字符串中的“看看”\n\t\tString newStr = str.trim().substring(2).trim();\t\t\n\t\n\t\tif (newStr.indexOf(\"“\") == 0 && newStr.lastIndexOf(\"”\") == (newStr.length() - 1)) {\n\t\t\tSystem.out.println(newStr.substring(1, ( newStr.length()-1)  ));\n\t\t} else {\n\t\t\tthrow new DemoException(\"语法有错，请检查语法\");\n\t\t}\n\n//\t\tif (strArr.length != 2) {\n//\t\t\tthrow new DemoException(\"语法有错，请检查语法\");\n//\t\t}\n//\t\tString printStr = strArr[1];\n//\t\tif (printStr.contains(\"“\") && printStr.contains(\"”\")) {\n//\t\t\tSystem.out.println(printStr.replace(\"“\", \"\").replace(\"”\", \"\")); // 看看 “字符串”\n//\t\t} else {\n//\t\t\tSystem.out.println(toChStr(getVar(printStr)));\n//\t\t}\n\t}\n\n\n\t/**\n\t * 三目运算\n\t * @param str\n\t */\n\tpublic static void ternaryOperator(String str) {\n\t\t// 如果 钱包 大于 十 则 看看 “钱太多了” 否则 看看 “我穷死了”\n\t\t// 先不考虑三目嵌套三目的情况\n\t\tString statement1 = null;\n\t\tString statement2 = null;\n\t\tString statement3 = null;\n\t\ttry {\n\t\t\tstatement1 = str.substring(0, str.indexOf(\"则\")).replace(\"如果\", \"\");\n\t\t\tstatement2 = str.substring(str.indexOf(\"则\"), str.indexOf(\"否则\")).replace(\"则\", \"\");\n\t\t\tstatement3 = str.substring(str.indexOf(\"否则\")).replace(\"否则\", \"\");\n\t\t} catch (Exception e) {\n\t\t\tthrow new DemoException(\"语法有错，请检查语法\");\n\t\t}\n\n\t\tboolean judge = judgeOperator(statement1);\n\t\t// System.out.println(judge);\n\n\t\tif (judge) {\n\t\t\tcallFunction(statement2);\n\t\t} else {\n\t\t\tcallFunction(statement3);\n\t\t}\n\t}\n\n\t/**\n\t * 判断语句，传入如果语句 例如：零 等于 零\n\t * @param str\n\t * @return \n\t */\n\tpublic static boolean judgeOperator(String str) {\n\t\tString[] strArr = str.trim().split(\"\\\\s+\");// 不去除左右空格，空格会被加入到分割数组\n\t\tif (strArr.length != 3) {\n\t\t\tthrow new DemoException(\"语法有错，请检查语法\");\n\t\t}\n\t\tString leftStr = strArr[0];\n\t\tString rightStr = strArr[2];\n\t\tString middle = strArr[1];\n\t\tint leftInt = 0;\n\t\tint rightInt = 0;\n\n\t\t// 如果都不是变量，那么toNum来异常处理\n\t\tif (isVar(leftStr)) {\n\t\t\tleftInt = getVar(leftStr);\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tleftInt = toNum(leftStr);\n\t\t\t} catch (Exception e) {\n\t\t\t\tthrow new DemoException(\"变量：\" + leftStr + \" 未定义，请定义变量\");\n\t\t\t}\n\t\t}\n\n\t\tif (isVar(rightStr)) {\n\t\t\trightInt = getVar(rightStr);\n\t\t} else {\n\t\t\ttry {\n\t\t\t\trightInt = toNum(rightStr);\n\t\t\t} catch (Exception e) {\n\t\t\t\tthrow new DemoException(\"变量：\" + rightStr + \" 未定义，请定义变量\");\n\t\t\t}\n\n\t\t}\n\n\t\tswitch (middle) {\n\t\tcase \"等于\":\n\t\t\treturn leftInt == rightInt;\n\t\tcase \"大于\":\n\t\t\treturn leftInt > rightInt;\n\t\tcase \"小于\":\n\t\t\treturn leftInt < rightInt;\n\n\t\tdefault:\n\t\t\tthrow new IllegalArgumentException(\"没有关键字：\" + middle + \" 请使用关键字：大于、等于、小于\");\n\t\t}\n\t}\n\n\t/**\n\t * 汉字单个转化为单个数字\n\t * @param str\n\t * @return\n\t */\n\n\tpublic static int toSingleNum(String str) {\n\t\tint num = numWords.indexOf(str);\n\t\tif (num == -1) {\n\t\t\tthrow new DemoException(\"语法有错，请检查语法，字符转化错误\");\n\t\t}\n\t\treturn num;// -1不存在\n\t}\n\n\t/**\n\t * 单个数字转化为单个汉字\n\t * @param num\n\t * @return\n\t */\n\tpublic static String toSingleChStr(int num) {\n\t\tif (num < 0 || num > 10) {\n\t\t\tthrow new DemoException(\"语法有错，请检查语法，字符转化错误\");\n\t\t}\n\t\treturn numWords.substring(num, num + 1);\n\t}\n\n\t/**\n\t * 汉字转化为数字\n\t * @return\n\t */\n\tpublic static int toNum(String str) {\n\t\tint flag = 1;// 负数标记\n\t\tint var = 0;\n\t\tchar[] arr = str.toCharArray();\n\t\tif (arr[0] == '负') {\n\t\t\tstr = str.replace(\"负\", \"\");\n\n\t\t\tflag = -1;\n\t\t}\n\t\tif (str.length() == 1 &&str.equals(\"百\")) {\n\t\t\treturn flag*100;\n\t\t}\n\t\t// 数字机械式的转化\n\t\tif (str.length() > 1 && !str.contains(\"百\") && !str.contains(\"十\")) {\n\t\t\tchar[] chArr = str.toCharArray();\n\t\t\tint temp = 1;\n\t\t\tfor (int i = chArr.length - 1; i >= 0; i--) {\n\t\t\t\tString s = \"\" + chArr[i];\n\t\t\t\tvar += temp * toSingleNum(s);\n\t\t\t\ttemp *= 10;\n\t\t\t}\n\t\t\treturn var * flag;\n\t\t}\n\n\t\tif (str.contains(\"百\")) {\n\t\t\tvar = 100 * toSingleNum(str.substring(0, str.indexOf('百')));// 百位\n\t\t\tstr = str.substring(str.indexOf('百') + 1);\n\t\t\tif (str.contains(\"零\")) {\n\t\t\t\tvar += toSingleNum(str.substring(str.indexOf(\"零\") + 1));// 几百零几\n\t\t\t\treturn var * flag;\n\t\t\t}\n\t\t}\n\n\t\tif (str.length() == 1 && var >= 100) { // 判断var 不然十 可能会输出100\n\t\t\tvar += 10 * toSingleNum(str); // 几百几：九百九\n\t\t\treturn var * flag;\n\t\t}\n\n\t\tif (str.contains(\"十\")) {\n\t\t\tif (str.indexOf('十') == 0) {\n\t\t\t\tvar += 10; // 十几\n\t\t\t}\n\t\t\tvar += 10 * toSingleNum(str.substring(0, str.indexOf('十')));// 十\n\t\t\tstr = str.substring(str.indexOf('十') + 1);\n\t\t}\n\n\t\tif (str.length() != 0) {\n\t\t\tvar += toSingleNum(str);\n\t\t}\n\n\t\treturn var * flag;\n\t}\n\n\t@Test\n\tpublic void test2() {\n\t\t// Java int Max ：2147483647 二一四七四八三六四七 Min：-2147483648\n\t\t// System.out.println(toNum(\"负二一四七四八三六四八\"));\n\t\tSystem.out.println(toNum(\"负九九九\"));\n\t}\n\n\t/**\n\t * 数字转化为汉字\n\t * @param num\n\t * @return\n\t */\n\tpublic static String toChStr(int num) {\n\n\t\tif (num == -2147483648) {\n\t\t\tthrow new DemoException(\"超出支持的输入输出范围(-2147483647到2147483647)\");\n\t\t}\n\t\tString varStr = \"\";\n\n\t\tif (num < 0) {\n\t\t\tvarStr += \"负\";\n\t\t\tnum = num * -1; // 转化为正数\n\t\t}\n\n\t\t// 数字机械式的转化\n\t\tif (num > 999) {\n\t\t\t// 1234\n\t\t\tchar[] CharArr = Integer.toString(num).toCharArray();\n\t\t\tfor (char c : CharArr) {\n\t\t\t\tString s = \"\" + c;\n\t\t\t\tvarStr += toSingleChStr(Integer.parseInt(s));\n\t\t\t}\n\t\t\treturn varStr;\n\t\t}\n\t\tif (num == 0) { // 零\n\t\t\treturn \"零\";\n\t\t}\n\n\t\tif (num / 10 == 1) { // 用十几 改变一十几的写法\n\t\t\tvarStr += \"十\";\n\t\t\tif (num % 10 != 0) {\n\t\t\t\tvarStr += toSingleChStr(num % 10);\n\t\t\t}\n\t\t\treturn varStr;\n\t\t}\n\n\t\tif (num / 100 > 0) {\n\t\t\tvarStr += toSingleChStr(num / 100) + \"百\";\n\t\t\tif (num % 100 == 0) {// 几百\n\t\t\t\treturn varStr;\n\t\t\t} else if (num % 100 < 10) { // 几百零几\n\t\t\t\treturn varStr += \"零\" + toSingleChStr(num % 100);\n\t\t\t}\n\t\t}\n\n\t\tnum %= 100;\n\t\tif (num / 10 != 0) {\n\t\t\tvarStr += toSingleChStr(num / 10) + \"十\";// 十\n\t\t}\n\n\t\tif (num % 10 != 0) {\n\t\t\tvarStr += toSingleChStr(num % 10); // 几\n\t\t}\n\n\t\treturn varStr;\n\t}\n\n\t/**\n\t * 运算操作\n\t * @param str\n\t */\n\tpublic static void manipulateNum(String str) {\n\t\tString[] strArray = str.trim().split(\"\\\\s+\");\n\t\tif (strArray.length != 3) {\n\t\t\tthrow new DemoException(\"语法有错，请检查语法\");\n\t\t}\n\n\t\tString operator = strArray[1];\n\t\tString varStr = strArray[0];\n\t\tString numStr = strArray[2];\n\n\t\tint var = getVar(varStr);\n\t\tint num = toNum(numStr);\n\n\t\tswitch (operator) {\n\t\tcase \"减少\":\n\t\t\tvar -= num;\n\t\t\tbreak;\n\t\tcase \"增加\":\n\t\t\tvar += num;\n\t\t\tbreak;\n\t\tcase \"乘以\":\n\t\t\tvar *= num;\n\t\t\tbreak;\n\t\tcase \"除以\":\n\t\t\tif (num == 0) {\n\t\t\t\tthrow new DemoException(\"除数不能等于零哦\");\n\t\t\t} else {\n\t\t\t\tvar /= num;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"模除\":\n\t\t\tvar %= num;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new IllegalArgumentException(\"没有关键字：\" + operator + \" 请使用关键字：增加、减少、乘以、除以、模除 \");\n\t\t}\n\n\t\tsetVar(varStr, var);\n\t}\n\n\t/**\n\t * 判断是否为运算操作语句\n\t * @param str\n\t * @return\n\t */\n\tpublic static boolean isManipulate(String str) {\n\t\tString[] array = str.trim().split(\"\\\\s+\");\n\n\t\tString[] keywords = { \"增加\", \"减少\", \"乘以\", \"除以\", \"模除\" };\n\n\t\t// 下面会用到array[1]\n\t\tif (array.length == 1) {\n\t\t\tthrow new DemoException(\"语法有错，请检查语法\");\n\t\t}\n\t\tString symbol = array[1];\n\n\t\tfor (String s : keywords) {\n\t\t\tif (symbol.equals(s)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t@Test\n\tpublic void testSymbol() {\n\t\tSystem.out.println(isManipulate(\"钱包 模除  十\"));\n\t}\n\n\t/**\n\t * 从Map中获取变量，不存在抛出异常\n\t * @param str 需要获取数据的变量名\n\t * @return\n\t */\n\tprivate static int getVar(String varStr) {\n\t\tif (isVar(varStr)) {\n\t\t\treturn map.get(varStr);\n\t\t} else {\n\t\t\tthrow new DemoException(\"变量：\" + varStr + \" 未定义，请定义变量\");\n\t\t}\n\t}\n\n\t/**\n\t * 存入变量到map中\n\t * @param varStr 键\n\t * @param var 值\n\t */\n\tprivate static void setVar(String varStr, int var) {\n\t\tmap.put(varStr, var);\n\t}\n\n\t/**\n\t * 判断是否为已存在的变量\n\t * @param varStr 键\n\t * @return\n\t */\n\tprivate static boolean isVar(String varStr) {\n\t\treturn map.get(varStr) != null ? true : false;\n\t}\n}\n\n\n\n```\n\n\nException类\n```java\npublic class DemoException extends RuntimeException {\n\npackage Demo1;\n\n\npublic class DemoException extends RuntimeException {\n\n\tpublic DemoException() {\n\t\tsuper();\n\t}\n\n\tpublic DemoException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {\n\t\tsuper(message, cause, enableSuppression, writableStackTrace);\n\t}\n\n\tpublic DemoException(String message, Throwable cause) {\n\t\tsuper(message, cause);\n\t}\n\n\tpublic DemoException(String message) {\n\t\tsuper(message);\n\t}\n\n\tpublic DemoException(Throwable cause) {\n\t\tsuper(cause);\n\t}\n\n}\n\n\n}\n\n```\n\n#### 思路\n代码有三个类\n- DemoMain 存放主函数（处理传入的字符串，分割成行）\n- Utils 字符处理的工具类 \n- DemoException （Demo的异常处理）\n\nUtils类\n- callFunction 传入一行字符串，判断逻辑关键字并调用对应的方法\n- assignInt 整数赋值\n- printOut 输出字符串或者整数\n- ternaryOperator 三目操作\n- judgeOperator 判断语句（举例：零 等于 零）\n- toNum 把中文数字转化为数字\n- toChStr 把数字转化为中文数字\n- manipulateNum 增减运算\n- toSingleNum 单个数字转化为单个汉字\n- toSingleChStr 单个汉字转化为单个数字\n- isManipulate 判断是否为运算操作语句\n- getVar从Map中获取变量，不存在抛出异常\n\n更新于2020.2.24","source":"_posts/java-chinese-programing.md","raw":"---\ntitle: Java练习-中文编程\ncategories: Java练习\ndate: 2020-02-05 21:47:28\n---\n## 需求\n请编写一个程序，制作一个简易的中文语言编译器，即使用中文语法进行编程，输入为逐行输入，每行为一个语句，一个语句代变一个操作，满足以下语法要求（括号内代变格式类型，具体参考样例）：\n\n- 变量定义：整数 （变量名） 等于 （数字）\n- 运算（加法）：（变量名） 增加 （数字）\n- 运算（减法）：（变量名） 减少 （数字）\n- 输出：看看 （变量名） or 看看 “（字符串内容）”\n\n附加要求：\n选择：如果 （判断语句） 则 （操作语句） 否则 （操作语句）\n若否则后没有任何操作使用（无）来进行填充（参考样例2）。\n\n## 测试样例\n输入\n```\n整数 气温 等于 十\n气温 减少 三\n气温 增加 二\n看看 气温\n如果 气温 大于 八 则 看看 “你好，世界” 否则 看看 “冻死我了”\n```\n输出\n```\n九\n你好，世界\n```\n\n输入\n```\n整数 小杨年龄 等于 八\n整数 小杨零花钱 等于 二\n小杨年龄 增加 一\n如果 小杨年龄 大于 八 则 小杨零花钱 增加 一 否则 无\n看看 小杨零花钱\n```\n输出\n```\n三\n```\n\n\n## 分析\n需求分析\n- 整数变量定义、赋值\n- 加减运算\n- 输出变量或字符串\n- 三目运算：如果 则 否则\n\n需要解决的问题\n- 字符串截取\n- 字符串语义判断\n- 异常处理\n- 负数，多位数\n\n## 遇到的一些坑\n- 字符串split的时候左右边的空格会被加入到split返回的数组\n\n## 功能实现情况\n- 数字输入输出（支持中文习惯和机械式的转化）\n  - 符合中国人习惯的输入输出，支持-999到999（例如：九百九十九、九百一、九百一十，九百零一，九百，九十，十九，十，零，负九百九十九）\n  - 机械式的转化（例如：一零零）支持的范围：-2147483647到2147483647\n  - 传奇地加入了负零(效用等同于零)\n\n- 支持去除语句中多余的空格\n\n- 变量定义：整数 钱包 等于 零\n  - 支持定义多个变量\n\n- 运算操作：钱包 增加 十\n  - 支持增加、减少、乘以、除以、模除\n\n- 输出：看看 钱包  、 看看 “字符串”\n  - 支持输出字符串或者变量\n\n- 三目运算符：如果 钱包 大于 十 则 看看 “钱太多了” 否则 看看 “我穷死了”\n  - 条件判断两边都可以是整数变量或者整数常量\n\n- 异常处理\n  - 关键字不存在\n  - 运算时变量未定义\n  - 输出时变量未定义\n  - 除数不能为0\n  - 非法输入\n\n\n## 完整代码\nGitHub仓库地址：[learn-programming](https://github.com/aaronlinv/learn-programming)\n\n主函数\n```java\npublic class DemoMain {\n\n\tpublic static void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\twhile (true) {\n\t\t\tUtils.runMain(sc.nextLine());\n\t\t}\n\t}\n\n}\n\n```\n\n\nUtils类\n```java\n\npublic class Utils {\n\tprivate static String numWords = \"零一二三四五六七八九十\";\n\tprivate static Map<String, Integer> map = new HashMap<String, Integer>();\n\n\t/**\n\t * 运行语句并处理异常\n\t * @param str\n\t */\n\tpublic static void runMain(String str) {\n\t\ttry {\n\t\t\tUtils.callFunction(str);\n\t\t} catch (Exception e) {\n\t\t\tSystem.out.println(e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * 调用方法\n\t * @param str\n\t */\n\tpublic static void callFunction(String str) {\n\t\tString[] split = str.trim().split(\"\\\\s+\");\n\t\tString keyword = split[0];\n\t\tif (keyword.equals(\"无\")) {\n\t\t\treturn;\n\t\t}\n\t\tif (isManipulate(str) || isVar(keyword)) {\n\t\t\tUtils.manipulateNum(str);\n\t\t} else {\n\t\t\t// isManipulate 已经判断了len == 1情况 不会越界\n\t\t\tswitch (keyword) {\n\t\t\tcase \"整数\":\n\t\t\t\t// System.out.println(map.get(\"钱包\"));// 不存在返回null\n\t\t\t\tUtils.assignInt(str);\n\t\t\t\tbreak;\n\t\t\tcase \"看看\":\n\t\t\t\tUtils.printOut(str);\n\t\t\t\tbreak;\n\t\t\tcase \"如果\":\n\t\t\t\tUtils.ternaryOperator(str);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new IllegalArgumentException(\"没有关键字：\" + keyword + \" 请使用关键字：整数、看看、如果\");\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *  赋值整数变量\n\t * @param array\n\t * @return\n\t */\n\tpublic static void assignInt(String str) {\n\t\tString[] strArr = str.trim().split(\"\\\\s+\");\n\t\t// 短路 所以不会越界\n\t\tif (strArr.length != 4 || !strArr[2].equals(\"等于\")) {\n\t\t\tthrow new DemoException(\"语法有错，请检查语法\");\n\t\t}\n\n\t\tsetVar(strArr[1], toNum(strArr[3]));\n\t}\n\n\t/**\n\t * 输出字符串或者变量\n\t * @param array\n\t */\n\tpublic static void printOut(String str) {\n\t\tString[] strArr = str.trim().split(\"\\\\s+\");\n\n\t\t// 输出变量\n\t\tif (strArr.length == 2) {\n\t\t\tString varStr = strArr[1];\n\t\t\tif (isVar(varStr)) {\n\t\t\t\tSystem.out.println(toChStr(getVar(varStr)));\n\t\t\t\treturn;\n\t\t\t} else if (!varStr.contains(\"“\") && !varStr.contains(\"”\")) {\n\t\t\t\tthrow new DemoException(\"变量：\" + varStr + \" 未定义，请定义变量\");\n\t\t\t}\n\t\t\t\n\t\t}\n\t\t// 去除字符串中的“看看”\n\t\tString newStr = str.trim().substring(2).trim();\t\t\n\t\n\t\tif (newStr.indexOf(\"“\") == 0 && newStr.lastIndexOf(\"”\") == (newStr.length() - 1)) {\n\t\t\tSystem.out.println(newStr.substring(1, ( newStr.length()-1)  ));\n\t\t} else {\n\t\t\tthrow new DemoException(\"语法有错，请检查语法\");\n\t\t}\n\n//\t\tif (strArr.length != 2) {\n//\t\t\tthrow new DemoException(\"语法有错，请检查语法\");\n//\t\t}\n//\t\tString printStr = strArr[1];\n//\t\tif (printStr.contains(\"“\") && printStr.contains(\"”\")) {\n//\t\t\tSystem.out.println(printStr.replace(\"“\", \"\").replace(\"”\", \"\")); // 看看 “字符串”\n//\t\t} else {\n//\t\t\tSystem.out.println(toChStr(getVar(printStr)));\n//\t\t}\n\t}\n\n\n\t/**\n\t * 三目运算\n\t * @param str\n\t */\n\tpublic static void ternaryOperator(String str) {\n\t\t// 如果 钱包 大于 十 则 看看 “钱太多了” 否则 看看 “我穷死了”\n\t\t// 先不考虑三目嵌套三目的情况\n\t\tString statement1 = null;\n\t\tString statement2 = null;\n\t\tString statement3 = null;\n\t\ttry {\n\t\t\tstatement1 = str.substring(0, str.indexOf(\"则\")).replace(\"如果\", \"\");\n\t\t\tstatement2 = str.substring(str.indexOf(\"则\"), str.indexOf(\"否则\")).replace(\"则\", \"\");\n\t\t\tstatement3 = str.substring(str.indexOf(\"否则\")).replace(\"否则\", \"\");\n\t\t} catch (Exception e) {\n\t\t\tthrow new DemoException(\"语法有错，请检查语法\");\n\t\t}\n\n\t\tboolean judge = judgeOperator(statement1);\n\t\t// System.out.println(judge);\n\n\t\tif (judge) {\n\t\t\tcallFunction(statement2);\n\t\t} else {\n\t\t\tcallFunction(statement3);\n\t\t}\n\t}\n\n\t/**\n\t * 判断语句，传入如果语句 例如：零 等于 零\n\t * @param str\n\t * @return \n\t */\n\tpublic static boolean judgeOperator(String str) {\n\t\tString[] strArr = str.trim().split(\"\\\\s+\");// 不去除左右空格，空格会被加入到分割数组\n\t\tif (strArr.length != 3) {\n\t\t\tthrow new DemoException(\"语法有错，请检查语法\");\n\t\t}\n\t\tString leftStr = strArr[0];\n\t\tString rightStr = strArr[2];\n\t\tString middle = strArr[1];\n\t\tint leftInt = 0;\n\t\tint rightInt = 0;\n\n\t\t// 如果都不是变量，那么toNum来异常处理\n\t\tif (isVar(leftStr)) {\n\t\t\tleftInt = getVar(leftStr);\n\t\t} else {\n\t\t\ttry {\n\t\t\t\tleftInt = toNum(leftStr);\n\t\t\t} catch (Exception e) {\n\t\t\t\tthrow new DemoException(\"变量：\" + leftStr + \" 未定义，请定义变量\");\n\t\t\t}\n\t\t}\n\n\t\tif (isVar(rightStr)) {\n\t\t\trightInt = getVar(rightStr);\n\t\t} else {\n\t\t\ttry {\n\t\t\t\trightInt = toNum(rightStr);\n\t\t\t} catch (Exception e) {\n\t\t\t\tthrow new DemoException(\"变量：\" + rightStr + \" 未定义，请定义变量\");\n\t\t\t}\n\n\t\t}\n\n\t\tswitch (middle) {\n\t\tcase \"等于\":\n\t\t\treturn leftInt == rightInt;\n\t\tcase \"大于\":\n\t\t\treturn leftInt > rightInt;\n\t\tcase \"小于\":\n\t\t\treturn leftInt < rightInt;\n\n\t\tdefault:\n\t\t\tthrow new IllegalArgumentException(\"没有关键字：\" + middle + \" 请使用关键字：大于、等于、小于\");\n\t\t}\n\t}\n\n\t/**\n\t * 汉字单个转化为单个数字\n\t * @param str\n\t * @return\n\t */\n\n\tpublic static int toSingleNum(String str) {\n\t\tint num = numWords.indexOf(str);\n\t\tif (num == -1) {\n\t\t\tthrow new DemoException(\"语法有错，请检查语法，字符转化错误\");\n\t\t}\n\t\treturn num;// -1不存在\n\t}\n\n\t/**\n\t * 单个数字转化为单个汉字\n\t * @param num\n\t * @return\n\t */\n\tpublic static String toSingleChStr(int num) {\n\t\tif (num < 0 || num > 10) {\n\t\t\tthrow new DemoException(\"语法有错，请检查语法，字符转化错误\");\n\t\t}\n\t\treturn numWords.substring(num, num + 1);\n\t}\n\n\t/**\n\t * 汉字转化为数字\n\t * @return\n\t */\n\tpublic static int toNum(String str) {\n\t\tint flag = 1;// 负数标记\n\t\tint var = 0;\n\t\tchar[] arr = str.toCharArray();\n\t\tif (arr[0] == '负') {\n\t\t\tstr = str.replace(\"负\", \"\");\n\n\t\t\tflag = -1;\n\t\t}\n\t\tif (str.length() == 1 &&str.equals(\"百\")) {\n\t\t\treturn flag*100;\n\t\t}\n\t\t// 数字机械式的转化\n\t\tif (str.length() > 1 && !str.contains(\"百\") && !str.contains(\"十\")) {\n\t\t\tchar[] chArr = str.toCharArray();\n\t\t\tint temp = 1;\n\t\t\tfor (int i = chArr.length - 1; i >= 0; i--) {\n\t\t\t\tString s = \"\" + chArr[i];\n\t\t\t\tvar += temp * toSingleNum(s);\n\t\t\t\ttemp *= 10;\n\t\t\t}\n\t\t\treturn var * flag;\n\t\t}\n\n\t\tif (str.contains(\"百\")) {\n\t\t\tvar = 100 * toSingleNum(str.substring(0, str.indexOf('百')));// 百位\n\t\t\tstr = str.substring(str.indexOf('百') + 1);\n\t\t\tif (str.contains(\"零\")) {\n\t\t\t\tvar += toSingleNum(str.substring(str.indexOf(\"零\") + 1));// 几百零几\n\t\t\t\treturn var * flag;\n\t\t\t}\n\t\t}\n\n\t\tif (str.length() == 1 && var >= 100) { // 判断var 不然十 可能会输出100\n\t\t\tvar += 10 * toSingleNum(str); // 几百几：九百九\n\t\t\treturn var * flag;\n\t\t}\n\n\t\tif (str.contains(\"十\")) {\n\t\t\tif (str.indexOf('十') == 0) {\n\t\t\t\tvar += 10; // 十几\n\t\t\t}\n\t\t\tvar += 10 * toSingleNum(str.substring(0, str.indexOf('十')));// 十\n\t\t\tstr = str.substring(str.indexOf('十') + 1);\n\t\t}\n\n\t\tif (str.length() != 0) {\n\t\t\tvar += toSingleNum(str);\n\t\t}\n\n\t\treturn var * flag;\n\t}\n\n\t@Test\n\tpublic void test2() {\n\t\t// Java int Max ：2147483647 二一四七四八三六四七 Min：-2147483648\n\t\t// System.out.println(toNum(\"负二一四七四八三六四八\"));\n\t\tSystem.out.println(toNum(\"负九九九\"));\n\t}\n\n\t/**\n\t * 数字转化为汉字\n\t * @param num\n\t * @return\n\t */\n\tpublic static String toChStr(int num) {\n\n\t\tif (num == -2147483648) {\n\t\t\tthrow new DemoException(\"超出支持的输入输出范围(-2147483647到2147483647)\");\n\t\t}\n\t\tString varStr = \"\";\n\n\t\tif (num < 0) {\n\t\t\tvarStr += \"负\";\n\t\t\tnum = num * -1; // 转化为正数\n\t\t}\n\n\t\t// 数字机械式的转化\n\t\tif (num > 999) {\n\t\t\t// 1234\n\t\t\tchar[] CharArr = Integer.toString(num).toCharArray();\n\t\t\tfor (char c : CharArr) {\n\t\t\t\tString s = \"\" + c;\n\t\t\t\tvarStr += toSingleChStr(Integer.parseInt(s));\n\t\t\t}\n\t\t\treturn varStr;\n\t\t}\n\t\tif (num == 0) { // 零\n\t\t\treturn \"零\";\n\t\t}\n\n\t\tif (num / 10 == 1) { // 用十几 改变一十几的写法\n\t\t\tvarStr += \"十\";\n\t\t\tif (num % 10 != 0) {\n\t\t\t\tvarStr += toSingleChStr(num % 10);\n\t\t\t}\n\t\t\treturn varStr;\n\t\t}\n\n\t\tif (num / 100 > 0) {\n\t\t\tvarStr += toSingleChStr(num / 100) + \"百\";\n\t\t\tif (num % 100 == 0) {// 几百\n\t\t\t\treturn varStr;\n\t\t\t} else if (num % 100 < 10) { // 几百零几\n\t\t\t\treturn varStr += \"零\" + toSingleChStr(num % 100);\n\t\t\t}\n\t\t}\n\n\t\tnum %= 100;\n\t\tif (num / 10 != 0) {\n\t\t\tvarStr += toSingleChStr(num / 10) + \"十\";// 十\n\t\t}\n\n\t\tif (num % 10 != 0) {\n\t\t\tvarStr += toSingleChStr(num % 10); // 几\n\t\t}\n\n\t\treturn varStr;\n\t}\n\n\t/**\n\t * 运算操作\n\t * @param str\n\t */\n\tpublic static void manipulateNum(String str) {\n\t\tString[] strArray = str.trim().split(\"\\\\s+\");\n\t\tif (strArray.length != 3) {\n\t\t\tthrow new DemoException(\"语法有错，请检查语法\");\n\t\t}\n\n\t\tString operator = strArray[1];\n\t\tString varStr = strArray[0];\n\t\tString numStr = strArray[2];\n\n\t\tint var = getVar(varStr);\n\t\tint num = toNum(numStr);\n\n\t\tswitch (operator) {\n\t\tcase \"减少\":\n\t\t\tvar -= num;\n\t\t\tbreak;\n\t\tcase \"增加\":\n\t\t\tvar += num;\n\t\t\tbreak;\n\t\tcase \"乘以\":\n\t\t\tvar *= num;\n\t\t\tbreak;\n\t\tcase \"除以\":\n\t\t\tif (num == 0) {\n\t\t\t\tthrow new DemoException(\"除数不能等于零哦\");\n\t\t\t} else {\n\t\t\t\tvar /= num;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"模除\":\n\t\t\tvar %= num;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new IllegalArgumentException(\"没有关键字：\" + operator + \" 请使用关键字：增加、减少、乘以、除以、模除 \");\n\t\t}\n\n\t\tsetVar(varStr, var);\n\t}\n\n\t/**\n\t * 判断是否为运算操作语句\n\t * @param str\n\t * @return\n\t */\n\tpublic static boolean isManipulate(String str) {\n\t\tString[] array = str.trim().split(\"\\\\s+\");\n\n\t\tString[] keywords = { \"增加\", \"减少\", \"乘以\", \"除以\", \"模除\" };\n\n\t\t// 下面会用到array[1]\n\t\tif (array.length == 1) {\n\t\t\tthrow new DemoException(\"语法有错，请检查语法\");\n\t\t}\n\t\tString symbol = array[1];\n\n\t\tfor (String s : keywords) {\n\t\t\tif (symbol.equals(s)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t@Test\n\tpublic void testSymbol() {\n\t\tSystem.out.println(isManipulate(\"钱包 模除  十\"));\n\t}\n\n\t/**\n\t * 从Map中获取变量，不存在抛出异常\n\t * @param str 需要获取数据的变量名\n\t * @return\n\t */\n\tprivate static int getVar(String varStr) {\n\t\tif (isVar(varStr)) {\n\t\t\treturn map.get(varStr);\n\t\t} else {\n\t\t\tthrow new DemoException(\"变量：\" + varStr + \" 未定义，请定义变量\");\n\t\t}\n\t}\n\n\t/**\n\t * 存入变量到map中\n\t * @param varStr 键\n\t * @param var 值\n\t */\n\tprivate static void setVar(String varStr, int var) {\n\t\tmap.put(varStr, var);\n\t}\n\n\t/**\n\t * 判断是否为已存在的变量\n\t * @param varStr 键\n\t * @return\n\t */\n\tprivate static boolean isVar(String varStr) {\n\t\treturn map.get(varStr) != null ? true : false;\n\t}\n}\n\n\n\n```\n\n\nException类\n```java\npublic class DemoException extends RuntimeException {\n\npackage Demo1;\n\n\npublic class DemoException extends RuntimeException {\n\n\tpublic DemoException() {\n\t\tsuper();\n\t}\n\n\tpublic DemoException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {\n\t\tsuper(message, cause, enableSuppression, writableStackTrace);\n\t}\n\n\tpublic DemoException(String message, Throwable cause) {\n\t\tsuper(message, cause);\n\t}\n\n\tpublic DemoException(String message) {\n\t\tsuper(message);\n\t}\n\n\tpublic DemoException(Throwable cause) {\n\t\tsuper(cause);\n\t}\n\n}\n\n\n}\n\n```\n\n#### 思路\n代码有三个类\n- DemoMain 存放主函数（处理传入的字符串，分割成行）\n- Utils 字符处理的工具类 \n- DemoException （Demo的异常处理）\n\nUtils类\n- callFunction 传入一行字符串，判断逻辑关键字并调用对应的方法\n- assignInt 整数赋值\n- printOut 输出字符串或者整数\n- ternaryOperator 三目操作\n- judgeOperator 判断语句（举例：零 等于 零）\n- toNum 把中文数字转化为数字\n- toChStr 把数字转化为中文数字\n- manipulateNum 增减运算\n- toSingleNum 单个数字转化为单个汉字\n- toSingleChStr 单个汉字转化为单个数字\n- isManipulate 判断是否为运算操作语句\n- getVar从Map中获取变量，不存在抛出异常\n\n更新于2020.2.24","slug":"java-chinese-programing","published":1,"updated":"2020-06-13T02:55:34.733Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke3x9g4n000hzgvuemmyf19s","content":"<h2 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h2><p>请编写一个程序，制作一个简易的中文语言编译器，即使用中文语法进行编程，输入为逐行输入，每行为一个语句，一个语句代变一个操作，满足以下语法要求（括号内代变格式类型，具体参考样例）：</p>\n<ul>\n<li>变量定义：整数 （变量名） 等于 （数字）</li>\n<li>运算（加法）：（变量名） 增加 （数字）</li>\n<li>运算（减法）：（变量名） 减少 （数字）</li>\n<li>输出：看看 （变量名） or 看看 “（字符串内容）”</li>\n</ul>\n<p>附加要求：<br>选择：如果 （判断语句） 则 （操作语句） 否则 （操作语句）<br>若否则后没有任何操作使用（无）来进行填充（参考样例2）。</p>\n<h2 id=\"测试样例\"><a href=\"#测试样例\" class=\"headerlink\" title=\"测试样例\"></a>测试样例</h2><p>输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">整数 气温 等于 十</span><br><span class=\"line\">气温 减少 三</span><br><span class=\"line\">气温 增加 二</span><br><span class=\"line\">看看 气温</span><br><span class=\"line\">如果 气温 大于 八 则 看看 “你好，世界” 否则 看看 “冻死我了”</span><br></pre></td></tr></table></figure>\n<p>输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">九</span><br><span class=\"line\">你好，世界</span><br></pre></td></tr></table></figure>\n\n<p>输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">整数 小杨年龄 等于 八</span><br><span class=\"line\">整数 小杨零花钱 等于 二</span><br><span class=\"line\">小杨年龄 增加 一</span><br><span class=\"line\">如果 小杨年龄 大于 八 则 小杨零花钱 增加 一 否则 无</span><br><span class=\"line\">看看 小杨零花钱</span><br></pre></td></tr></table></figure>\n<p>输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">三</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>需求分析</p>\n<ul>\n<li>整数变量定义、赋值</li>\n<li>加减运算</li>\n<li>输出变量或字符串</li>\n<li>三目运算：如果 则 否则</li>\n</ul>\n<p>需要解决的问题</p>\n<ul>\n<li>字符串截取</li>\n<li>字符串语义判断</li>\n<li>异常处理</li>\n<li>负数，多位数</li>\n</ul>\n<h2 id=\"遇到的一些坑\"><a href=\"#遇到的一些坑\" class=\"headerlink\" title=\"遇到的一些坑\"></a>遇到的一些坑</h2><ul>\n<li>字符串split的时候左右边的空格会被加入到split返回的数组</li>\n</ul>\n<h2 id=\"功能实现情况\"><a href=\"#功能实现情况\" class=\"headerlink\" title=\"功能实现情况\"></a>功能实现情况</h2><ul>\n<li><p>数字输入输出（支持中文习惯和机械式的转化）</p>\n<ul>\n<li>符合中国人习惯的输入输出，支持-999到999（例如：九百九十九、九百一、九百一十，九百零一，九百，九十，十九，十，零，负九百九十九）</li>\n<li>机械式的转化（例如：一零零）支持的范围：-2147483647到2147483647</li>\n<li>传奇地加入了负零(效用等同于零)</li>\n</ul>\n</li>\n<li><p>支持去除语句中多余的空格</p>\n</li>\n<li><p>变量定义：整数 钱包 等于 零</p>\n<ul>\n<li>支持定义多个变量</li>\n</ul>\n</li>\n<li><p>运算操作：钱包 增加 十</p>\n<ul>\n<li>支持增加、减少、乘以、除以、模除</li>\n</ul>\n</li>\n<li><p>输出：看看 钱包  、 看看 “字符串”</p>\n<ul>\n<li>支持输出字符串或者变量</li>\n</ul>\n</li>\n<li><p>三目运算符：如果 钱包 大于 十 则 看看 “钱太多了” 否则 看看 “我穷死了”</p>\n<ul>\n<li>条件判断两边都可以是整数变量或者整数常量</li>\n</ul>\n</li>\n<li><p>异常处理</p>\n<ul>\n<li>关键字不存在</li>\n<li>运算时变量未定义</li>\n<li>输出时变量未定义</li>\n<li>除数不能为0</li>\n<li>非法输入</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><p>GitHub仓库地址：<a href=\"https://github.com/aaronlinv/learn-programming\" target=\"_blank\" rel=\"noopener\">learn-programming</a></p>\n<p>主函数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoMain</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t\tUtils.runMain(sc.nextLine());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>Utils类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Utils</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String numWords = <span class=\"string\">\"零一二三四五六七八九十\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Map&lt;String, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 运行语句并处理异常</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> str</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">runMain</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tUtils.callFunction(str);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(e.getMessage());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 调用方法</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> str</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">callFunction</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">\t\tString[] split = str.trim().split(<span class=\"string\">\"\\\\s+\"</span>);</span><br><span class=\"line\">\t\tString keyword = split[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (keyword.equals(<span class=\"string\">\"无\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isManipulate(str) || isVar(keyword)) &#123;</span><br><span class=\"line\">\t\t\tUtils.manipulateNum(str);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// isManipulate 已经判断了len == 1情况 不会越界</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">switch</span> (keyword) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">\"整数\"</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// System.out.println(map.get(\"钱包\"));// 不存在返回null</span></span><br><span class=\"line\">\t\t\t\tUtils.assignInt(str);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">\"看看\"</span>:</span><br><span class=\"line\">\t\t\t\tUtils.printOut(str);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">\"如果\"</span>:</span><br><span class=\"line\">\t\t\t\tUtils.ternaryOperator(str);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"没有关键字：\"</span> + keyword + <span class=\"string\">\" 请使用关键字：整数、看看、如果\"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t *  赋值整数变量</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> array</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">assignInt</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">\t\tString[] strArr = str.trim().split(<span class=\"string\">\"\\\\s+\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 短路 所以不会越界</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (strArr.length != <span class=\"number\">4</span> || !strArr[<span class=\"number\">2</span>].equals(<span class=\"string\">\"等于\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> DemoException(<span class=\"string\">\"语法有错，请检查语法\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsetVar(strArr[<span class=\"number\">1</span>], toNum(strArr[<span class=\"number\">3</span>]));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 输出字符串或者变量</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> array</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printOut</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">\t\tString[] strArr = str.trim().split(<span class=\"string\">\"\\\\s+\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 输出变量</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (strArr.length == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\t\tString varStr = strArr[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (isVar(varStr)) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(toChStr(getVar(varStr)));</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!varStr.contains(<span class=\"string\">\"“\"</span>) &amp;&amp; !varStr.contains(<span class=\"string\">\"”\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> DemoException(<span class=\"string\">\"变量：\"</span> + varStr + <span class=\"string\">\" 未定义，请定义变量\"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 去除字符串中的“看看”</span></span><br><span class=\"line\">\t\tString newStr = str.trim().substring(<span class=\"number\">2</span>).trim();\t\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (newStr.indexOf(<span class=\"string\">\"“\"</span>) == <span class=\"number\">0</span> &amp;&amp; newStr.lastIndexOf(<span class=\"string\">\"”\"</span>) == (newStr.length() - <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(newStr.substring(<span class=\"number\">1</span>, ( newStr.length()-<span class=\"number\">1</span>)  ));</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> DemoException(<span class=\"string\">\"语法有错，请检查语法\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t\tif (strArr.length != 2) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t\tthrow new DemoException(\"语法有错，请检查语法\");</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tString printStr = strArr[1];</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tif (printStr.contains(\"“\") &amp;&amp; printStr.contains(\"”\")) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t\tSystem.out.println(printStr.replace(\"“\", \"\").replace(\"”\", \"\")); // 看看 “字符串”</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t&#125; else &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t\tSystem.out.println(toChStr(getVar(printStr)));</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t&#125;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 三目运算</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> str</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ternaryOperator</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果 钱包 大于 十 则 看看 “钱太多了” 否则 看看 “我穷死了”</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 先不考虑三目嵌套三目的情况</span></span><br><span class=\"line\">\t\tString statement1 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tString statement2 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tString statement3 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tstatement1 = str.substring(<span class=\"number\">0</span>, str.indexOf(<span class=\"string\">\"则\"</span>)).replace(<span class=\"string\">\"如果\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">\t\t\tstatement2 = str.substring(str.indexOf(<span class=\"string\">\"则\"</span>), str.indexOf(<span class=\"string\">\"否则\"</span>)).replace(<span class=\"string\">\"则\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">\t\t\tstatement3 = str.substring(str.indexOf(<span class=\"string\">\"否则\"</span>)).replace(<span class=\"string\">\"否则\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> DemoException(<span class=\"string\">\"语法有错，请检查语法\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">boolean</span> judge = judgeOperator(statement1);</span><br><span class=\"line\">\t\t<span class=\"comment\">// System.out.println(judge);</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (judge) &#123;</span><br><span class=\"line\">\t\t\tcallFunction(statement2);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tcallFunction(statement3);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 判断语句，传入如果语句 例如：零 等于 零</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> str</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> </span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">judgeOperator</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">\t\tString[] strArr = str.trim().split(<span class=\"string\">\"\\\\s+\"</span>);<span class=\"comment\">// 不去除左右空格，空格会被加入到分割数组</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (strArr.length != <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> DemoException(<span class=\"string\">\"语法有错，请检查语法\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tString leftStr = strArr[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\tString rightStr = strArr[<span class=\"number\">2</span>];</span><br><span class=\"line\">\t\tString middle = strArr[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> leftInt = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> rightInt = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果都不是变量，那么toNum来异常处理</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isVar(leftStr)) &#123;</span><br><span class=\"line\">\t\t\tleftInt = getVar(leftStr);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tleftInt = toNum(leftStr);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> DemoException(<span class=\"string\">\"变量：\"</span> + leftStr + <span class=\"string\">\" 未定义，请定义变量\"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isVar(rightStr)) &#123;</span><br><span class=\"line\">\t\t\trightInt = getVar(rightStr);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\trightInt = toNum(rightStr);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> DemoException(<span class=\"string\">\"变量：\"</span> + rightStr + <span class=\"string\">\" 未定义，请定义变量\"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (middle) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">\"等于\"</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> leftInt == rightInt;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">\"大于\"</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> leftInt &gt; rightInt;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">\"小于\"</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> leftInt &lt; rightInt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"没有关键字：\"</span> + middle + <span class=\"string\">\" 请使用关键字：大于、等于、小于\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 汉字单个转化为单个数字</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> str</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">toSingleNum</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> num = numWords.indexOf(str);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (num == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> DemoException(<span class=\"string\">\"语法有错，请检查语法，字符转化错误\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> num;<span class=\"comment\">// -1不存在</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 单个数字转化为单个汉字</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> num</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">toSingleChStr</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (num &lt; <span class=\"number\">0</span> || num &gt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> DemoException(<span class=\"string\">\"语法有错，请检查语法，字符转化错误\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> numWords.substring(num, num + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 汉字转化为数字</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">toNum</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> flag = <span class=\"number\">1</span>;<span class=\"comment\">// 负数标记</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> <span class=\"keyword\">var</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span>[] arr = str.toCharArray();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (arr[<span class=\"number\">0</span>] == <span class=\"string\">'负'</span>) &#123;</span><br><span class=\"line\">\t\t\tstr = str.replace(<span class=\"string\">\"负\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tflag = -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (str.length() == <span class=\"number\">1</span> &amp;&amp;str.equals(<span class=\"string\">\"百\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> flag*<span class=\"number\">100</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 数字机械式的转化</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (str.length() &gt; <span class=\"number\">1</span> &amp;&amp; !str.contains(<span class=\"string\">\"百\"</span>) &amp;&amp; !str.contains(<span class=\"string\">\"十\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">char</span>[] chArr = str.toCharArray();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> temp = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = chArr.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">\t\t\t\tString s = <span class=\"string\">\"\"</span> + chArr[i];</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">var</span> += temp * toSingleNum(s);</span><br><span class=\"line\">\t\t\t\ttemp *= <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">var</span> * flag;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (str.contains(<span class=\"string\">\"百\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> = <span class=\"number\">100</span> * toSingleNum(str.substring(<span class=\"number\">0</span>, str.indexOf(<span class=\"string\">'百'</span>)));<span class=\"comment\">// 百位</span></span><br><span class=\"line\">\t\t\tstr = str.substring(str.indexOf(<span class=\"string\">'百'</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (str.contains(<span class=\"string\">\"零\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">var</span> += toSingleNum(str.substring(str.indexOf(<span class=\"string\">\"零\"</span>) + <span class=\"number\">1</span>));<span class=\"comment\">// 几百零几</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">var</span> * flag;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (str.length() == <span class=\"number\">1</span> &amp;&amp; <span class=\"keyword\">var</span> &gt;= <span class=\"number\">100</span>) &#123; <span class=\"comment\">// 判断var 不然十 可能会输出100</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> += <span class=\"number\">10</span> * toSingleNum(str); <span class=\"comment\">// 几百几：九百九</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">var</span> * flag;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (str.contains(<span class=\"string\">\"十\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (str.indexOf(<span class=\"string\">'十'</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">var</span> += <span class=\"number\">10</span>; <span class=\"comment\">// 十几</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> += <span class=\"number\">10</span> * toSingleNum(str.substring(<span class=\"number\">0</span>, str.indexOf(<span class=\"string\">'十'</span>)));<span class=\"comment\">// 十</span></span><br><span class=\"line\">\t\t\tstr = str.substring(str.indexOf(<span class=\"string\">'十'</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (str.length() != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> += toSingleNum(str);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">var</span> * flag;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Java int Max ：2147483647 二一四七四八三六四七 Min：-2147483648</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// System.out.println(toNum(\"负二一四七四八三六四八\"));</span></span><br><span class=\"line\">\t\tSystem.out.println(toNum(<span class=\"string\">\"负九九九\"</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 数字转化为汉字</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> num</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">toChStr</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (num == -<span class=\"number\">2147483648</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> DemoException(<span class=\"string\">\"超出支持的输入输出范围(-2147483647到2147483647)\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tString varStr = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (num &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tvarStr += <span class=\"string\">\"负\"</span>;</span><br><span class=\"line\">\t\t\tnum = num * -<span class=\"number\">1</span>; <span class=\"comment\">// 转化为正数</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 数字机械式的转化</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (num &gt; <span class=\"number\">999</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 1234</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">char</span>[] CharArr = Integer.toString(num).toCharArray();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> c : CharArr) &#123;</span><br><span class=\"line\">\t\t\t\tString s = <span class=\"string\">\"\"</span> + c;</span><br><span class=\"line\">\t\t\t\tvarStr += toSingleChStr(Integer.parseInt(s));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> varStr;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (num == <span class=\"number\">0</span>) &#123; <span class=\"comment\">// 零</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"零\"</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (num / <span class=\"number\">10</span> == <span class=\"number\">1</span>) &#123; <span class=\"comment\">// 用十几 改变一十几的写法</span></span><br><span class=\"line\">\t\t\tvarStr += <span class=\"string\">\"十\"</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (num % <span class=\"number\">10</span> != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\tvarStr += toSingleChStr(num % <span class=\"number\">10</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> varStr;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (num / <span class=\"number\">100</span> &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tvarStr += toSingleChStr(num / <span class=\"number\">100</span>) + <span class=\"string\">\"百\"</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (num % <span class=\"number\">100</span> == <span class=\"number\">0</span>) &#123;<span class=\"comment\">// 几百</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> varStr;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (num % <span class=\"number\">100</span> &lt; <span class=\"number\">10</span>) &#123; <span class=\"comment\">// 几百零几</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> varStr += <span class=\"string\">\"零\"</span> + toSingleChStr(num % <span class=\"number\">100</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tnum %= <span class=\"number\">100</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (num / <span class=\"number\">10</span> != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tvarStr += toSingleChStr(num / <span class=\"number\">10</span>) + <span class=\"string\">\"十\"</span>;<span class=\"comment\">// 十</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (num % <span class=\"number\">10</span> != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tvarStr += toSingleChStr(num % <span class=\"number\">10</span>); <span class=\"comment\">// 几</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> varStr;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 运算操作</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> str</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">manipulateNum</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">\t\tString[] strArray = str.trim().split(<span class=\"string\">\"\\\\s+\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (strArray.length != <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> DemoException(<span class=\"string\">\"语法有错，请检查语法\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tString operator = strArray[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\tString varStr = strArray[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\tString numStr = strArray[<span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> <span class=\"keyword\">var</span> = getVar(varStr);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> num = toNum(numStr);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (operator) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">\"减少\"</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> -= num;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">\"增加\"</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> += num;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">\"乘以\"</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> *= num;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">\"除以\"</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (num == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> DemoException(<span class=\"string\">\"除数不能等于零哦\"</span>);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">var</span> /= num;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">\"模除\"</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> %= num;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"没有关键字：\"</span> + operator + <span class=\"string\">\" 请使用关键字：增加、减少、乘以、除以、模除 \"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsetVar(varStr, <span class=\"keyword\">var</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 判断是否为运算操作语句</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> str</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isManipulate</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">\t\tString[] array = str.trim().split(<span class=\"string\">\"\\\\s+\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tString[] keywords = &#123; <span class=\"string\">\"增加\"</span>, <span class=\"string\">\"减少\"</span>, <span class=\"string\">\"乘以\"</span>, <span class=\"string\">\"除以\"</span>, <span class=\"string\">\"模除\"</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 下面会用到array[1]</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (array.length == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> DemoException(<span class=\"string\">\"语法有错，请检查语法\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tString symbol = array[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (String s : keywords) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (symbol.equals(s)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testSymbol</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(isManipulate(<span class=\"string\">\"钱包 模除  十\"</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 从Map中获取变量，不存在抛出异常</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> str 需要获取数据的变量名</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getVar</span><span class=\"params\">(String varStr)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isVar(varStr)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> map.get(varStr);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> DemoException(<span class=\"string\">\"变量：\"</span> + varStr + <span class=\"string\">\" 未定义，请定义变量\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 存入变量到map中</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> varStr 键</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> var 值</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setVar</span><span class=\"params\">(String varStr, <span class=\"keyword\">int</span> <span class=\"keyword\">var</span>)</span> </span>&#123;</span><br><span class=\"line\">\t\tmap.put(varStr, <span class=\"keyword\">var</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 判断是否为已存在的变量</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> varStr 键</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isVar</span><span class=\"params\">(String varStr)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> map.get(varStr) != <span class=\"keyword\">null</span> ? <span class=\"keyword\">true</span> : <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>Exception类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoException</span> <span class=\"keyword\">extends</span> <span class=\"title\">RuntimeException</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> Demo1;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoException</span> <span class=\"keyword\">extends</span> <span class=\"title\">RuntimeException</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DemoException</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DemoException</span><span class=\"params\">(String message, Throwable cause, <span class=\"keyword\">boolean</span> enableSuppression, <span class=\"keyword\">boolean</span> writableStackTrace)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DemoException</span><span class=\"params\">(String message, Throwable cause)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(message, cause);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DemoException</span><span class=\"params\">(String message)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(message);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DemoException</span><span class=\"params\">(Throwable cause)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(cause);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>代码有三个类</p>\n<ul>\n<li>DemoMain 存放主函数（处理传入的字符串，分割成行）</li>\n<li>Utils 字符处理的工具类 </li>\n<li>DemoException （Demo的异常处理）</li>\n</ul>\n<p>Utils类</p>\n<ul>\n<li>callFunction 传入一行字符串，判断逻辑关键字并调用对应的方法</li>\n<li>assignInt 整数赋值</li>\n<li>printOut 输出字符串或者整数</li>\n<li>ternaryOperator 三目操作</li>\n<li>judgeOperator 判断语句（举例：零 等于 零）</li>\n<li>toNum 把中文数字转化为数字</li>\n<li>toChStr 把数字转化为中文数字</li>\n<li>manipulateNum 增减运算</li>\n<li>toSingleNum 单个数字转化为单个汉字</li>\n<li>toSingleChStr 单个汉字转化为单个数字</li>\n<li>isManipulate 判断是否为运算操作语句</li>\n<li>getVar从Map中获取变量，不存在抛出异常</li>\n</ul>\n<p>更新于2020.2.24</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h2><p>请编写一个程序，制作一个简易的中文语言编译器，即使用中文语法进行编程，输入为逐行输入，每行为一个语句，一个语句代变一个操作，满足以下语法要求（括号内代变格式类型，具体参考样例）：</p>\n<ul>\n<li>变量定义：整数 （变量名） 等于 （数字）</li>\n<li>运算（加法）：（变量名） 增加 （数字）</li>\n<li>运算（减法）：（变量名） 减少 （数字）</li>\n<li>输出：看看 （变量名） or 看看 “（字符串内容）”</li>\n</ul>\n<p>附加要求：<br>选择：如果 （判断语句） 则 （操作语句） 否则 （操作语句）<br>若否则后没有任何操作使用（无）来进行填充（参考样例2）。</p>\n<h2 id=\"测试样例\"><a href=\"#测试样例\" class=\"headerlink\" title=\"测试样例\"></a>测试样例</h2><p>输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">整数 气温 等于 十</span><br><span class=\"line\">气温 减少 三</span><br><span class=\"line\">气温 增加 二</span><br><span class=\"line\">看看 气温</span><br><span class=\"line\">如果 气温 大于 八 则 看看 “你好，世界” 否则 看看 “冻死我了”</span><br></pre></td></tr></table></figure>\n<p>输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">九</span><br><span class=\"line\">你好，世界</span><br></pre></td></tr></table></figure>\n\n<p>输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">整数 小杨年龄 等于 八</span><br><span class=\"line\">整数 小杨零花钱 等于 二</span><br><span class=\"line\">小杨年龄 增加 一</span><br><span class=\"line\">如果 小杨年龄 大于 八 则 小杨零花钱 增加 一 否则 无</span><br><span class=\"line\">看看 小杨零花钱</span><br></pre></td></tr></table></figure>\n<p>输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">三</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>需求分析</p>\n<ul>\n<li>整数变量定义、赋值</li>\n<li>加减运算</li>\n<li>输出变量或字符串</li>\n<li>三目运算：如果 则 否则</li>\n</ul>\n<p>需要解决的问题</p>\n<ul>\n<li>字符串截取</li>\n<li>字符串语义判断</li>\n<li>异常处理</li>\n<li>负数，多位数</li>\n</ul>\n<h2 id=\"遇到的一些坑\"><a href=\"#遇到的一些坑\" class=\"headerlink\" title=\"遇到的一些坑\"></a>遇到的一些坑</h2><ul>\n<li>字符串split的时候左右边的空格会被加入到split返回的数组</li>\n</ul>\n<h2 id=\"功能实现情况\"><a href=\"#功能实现情况\" class=\"headerlink\" title=\"功能实现情况\"></a>功能实现情况</h2><ul>\n<li><p>数字输入输出（支持中文习惯和机械式的转化）</p>\n<ul>\n<li>符合中国人习惯的输入输出，支持-999到999（例如：九百九十九、九百一、九百一十，九百零一，九百，九十，十九，十，零，负九百九十九）</li>\n<li>机械式的转化（例如：一零零）支持的范围：-2147483647到2147483647</li>\n<li>传奇地加入了负零(效用等同于零)</li>\n</ul>\n</li>\n<li><p>支持去除语句中多余的空格</p>\n</li>\n<li><p>变量定义：整数 钱包 等于 零</p>\n<ul>\n<li>支持定义多个变量</li>\n</ul>\n</li>\n<li><p>运算操作：钱包 增加 十</p>\n<ul>\n<li>支持增加、减少、乘以、除以、模除</li>\n</ul>\n</li>\n<li><p>输出：看看 钱包  、 看看 “字符串”</p>\n<ul>\n<li>支持输出字符串或者变量</li>\n</ul>\n</li>\n<li><p>三目运算符：如果 钱包 大于 十 则 看看 “钱太多了” 否则 看看 “我穷死了”</p>\n<ul>\n<li>条件判断两边都可以是整数变量或者整数常量</li>\n</ul>\n</li>\n<li><p>异常处理</p>\n<ul>\n<li>关键字不存在</li>\n<li>运算时变量未定义</li>\n<li>输出时变量未定义</li>\n<li>除数不能为0</li>\n<li>非法输入</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><p>GitHub仓库地址：<a href=\"https://github.com/aaronlinv/learn-programming\" target=\"_blank\" rel=\"noopener\">learn-programming</a></p>\n<p>主函数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoMain</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tScanner sc = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">\t\t\tUtils.runMain(sc.nextLine());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>Utils类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Utils</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String numWords = <span class=\"string\">\"零一二三四五六七八九十\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Map&lt;String, Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 运行语句并处理异常</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> str</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">runMain</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tUtils.callFunction(str);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(e.getMessage());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 调用方法</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> str</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">callFunction</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">\t\tString[] split = str.trim().split(<span class=\"string\">\"\\\\s+\"</span>);</span><br><span class=\"line\">\t\tString keyword = split[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (keyword.equals(<span class=\"string\">\"无\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isManipulate(str) || isVar(keyword)) &#123;</span><br><span class=\"line\">\t\t\tUtils.manipulateNum(str);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// isManipulate 已经判断了len == 1情况 不会越界</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">switch</span> (keyword) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">\"整数\"</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// System.out.println(map.get(\"钱包\"));// 不存在返回null</span></span><br><span class=\"line\">\t\t\t\tUtils.assignInt(str);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">\"看看\"</span>:</span><br><span class=\"line\">\t\t\t\tUtils.printOut(str);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"string\">\"如果\"</span>:</span><br><span class=\"line\">\t\t\t\tUtils.ternaryOperator(str);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"没有关键字：\"</span> + keyword + <span class=\"string\">\" 请使用关键字：整数、看看、如果\"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t *  赋值整数变量</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> array</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">assignInt</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">\t\tString[] strArr = str.trim().split(<span class=\"string\">\"\\\\s+\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 短路 所以不会越界</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (strArr.length != <span class=\"number\">4</span> || !strArr[<span class=\"number\">2</span>].equals(<span class=\"string\">\"等于\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> DemoException(<span class=\"string\">\"语法有错，请检查语法\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsetVar(strArr[<span class=\"number\">1</span>], toNum(strArr[<span class=\"number\">3</span>]));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 输出字符串或者变量</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> array</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printOut</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">\t\tString[] strArr = str.trim().split(<span class=\"string\">\"\\\\s+\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 输出变量</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (strArr.length == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\t\tString varStr = strArr[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (isVar(varStr)) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(toChStr(getVar(varStr)));</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!varStr.contains(<span class=\"string\">\"“\"</span>) &amp;&amp; !varStr.contains(<span class=\"string\">\"”\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> DemoException(<span class=\"string\">\"变量：\"</span> + varStr + <span class=\"string\">\" 未定义，请定义变量\"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 去除字符串中的“看看”</span></span><br><span class=\"line\">\t\tString newStr = str.trim().substring(<span class=\"number\">2</span>).trim();\t\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (newStr.indexOf(<span class=\"string\">\"“\"</span>) == <span class=\"number\">0</span> &amp;&amp; newStr.lastIndexOf(<span class=\"string\">\"”\"</span>) == (newStr.length() - <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(newStr.substring(<span class=\"number\">1</span>, ( newStr.length()-<span class=\"number\">1</span>)  ));</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> DemoException(<span class=\"string\">\"语法有错，请检查语法\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//\t\tif (strArr.length != 2) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t\tthrow new DemoException(\"语法有错，请检查语法\");</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tString printStr = strArr[1];</span></span><br><span class=\"line\"><span class=\"comment\">//\t\tif (printStr.contains(\"“\") &amp;&amp; printStr.contains(\"”\")) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t\tSystem.out.println(printStr.replace(\"“\", \"\").replace(\"”\", \"\")); // 看看 “字符串”</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t&#125; else &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t\tSystem.out.println(toChStr(getVar(printStr)));</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t&#125;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 三目运算</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> str</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ternaryOperator</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果 钱包 大于 十 则 看看 “钱太多了” 否则 看看 “我穷死了”</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 先不考虑三目嵌套三目的情况</span></span><br><span class=\"line\">\t\tString statement1 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tString statement2 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tString statement3 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tstatement1 = str.substring(<span class=\"number\">0</span>, str.indexOf(<span class=\"string\">\"则\"</span>)).replace(<span class=\"string\">\"如果\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">\t\t\tstatement2 = str.substring(str.indexOf(<span class=\"string\">\"则\"</span>), str.indexOf(<span class=\"string\">\"否则\"</span>)).replace(<span class=\"string\">\"则\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">\t\t\tstatement3 = str.substring(str.indexOf(<span class=\"string\">\"否则\"</span>)).replace(<span class=\"string\">\"否则\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> DemoException(<span class=\"string\">\"语法有错，请检查语法\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">boolean</span> judge = judgeOperator(statement1);</span><br><span class=\"line\">\t\t<span class=\"comment\">// System.out.println(judge);</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (judge) &#123;</span><br><span class=\"line\">\t\t\tcallFunction(statement2);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tcallFunction(statement3);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 判断语句，传入如果语句 例如：零 等于 零</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> str</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> </span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">judgeOperator</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">\t\tString[] strArr = str.trim().split(<span class=\"string\">\"\\\\s+\"</span>);<span class=\"comment\">// 不去除左右空格，空格会被加入到分割数组</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (strArr.length != <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> DemoException(<span class=\"string\">\"语法有错，请检查语法\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tString leftStr = strArr[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\tString rightStr = strArr[<span class=\"number\">2</span>];</span><br><span class=\"line\">\t\tString middle = strArr[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> leftInt = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> rightInt = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果都不是变量，那么toNum来异常处理</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isVar(leftStr)) &#123;</span><br><span class=\"line\">\t\t\tleftInt = getVar(leftStr);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tleftInt = toNum(leftStr);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> DemoException(<span class=\"string\">\"变量：\"</span> + leftStr + <span class=\"string\">\" 未定义，请定义变量\"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isVar(rightStr)) &#123;</span><br><span class=\"line\">\t\t\trightInt = getVar(rightStr);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\trightInt = toNum(rightStr);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> DemoException(<span class=\"string\">\"变量：\"</span> + rightStr + <span class=\"string\">\" 未定义，请定义变量\"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (middle) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">\"等于\"</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> leftInt == rightInt;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">\"大于\"</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> leftInt &gt; rightInt;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">\"小于\"</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> leftInt &lt; rightInt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"没有关键字：\"</span> + middle + <span class=\"string\">\" 请使用关键字：大于、等于、小于\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 汉字单个转化为单个数字</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> str</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">toSingleNum</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> num = numWords.indexOf(str);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (num == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> DemoException(<span class=\"string\">\"语法有错，请检查语法，字符转化错误\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> num;<span class=\"comment\">// -1不存在</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 单个数字转化为单个汉字</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> num</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">toSingleChStr</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (num &lt; <span class=\"number\">0</span> || num &gt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> DemoException(<span class=\"string\">\"语法有错，请检查语法，字符转化错误\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> numWords.substring(num, num + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 汉字转化为数字</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">toNum</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> flag = <span class=\"number\">1</span>;<span class=\"comment\">// 负数标记</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> <span class=\"keyword\">var</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span>[] arr = str.toCharArray();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (arr[<span class=\"number\">0</span>] == <span class=\"string\">'负'</span>) &#123;</span><br><span class=\"line\">\t\t\tstr = str.replace(<span class=\"string\">\"负\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tflag = -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (str.length() == <span class=\"number\">1</span> &amp;&amp;str.equals(<span class=\"string\">\"百\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> flag*<span class=\"number\">100</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 数字机械式的转化</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (str.length() &gt; <span class=\"number\">1</span> &amp;&amp; !str.contains(<span class=\"string\">\"百\"</span>) &amp;&amp; !str.contains(<span class=\"string\">\"十\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">char</span>[] chArr = str.toCharArray();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> temp = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = chArr.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">\t\t\t\tString s = <span class=\"string\">\"\"</span> + chArr[i];</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">var</span> += temp * toSingleNum(s);</span><br><span class=\"line\">\t\t\t\ttemp *= <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">var</span> * flag;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (str.contains(<span class=\"string\">\"百\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> = <span class=\"number\">100</span> * toSingleNum(str.substring(<span class=\"number\">0</span>, str.indexOf(<span class=\"string\">'百'</span>)));<span class=\"comment\">// 百位</span></span><br><span class=\"line\">\t\t\tstr = str.substring(str.indexOf(<span class=\"string\">'百'</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (str.contains(<span class=\"string\">\"零\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">var</span> += toSingleNum(str.substring(str.indexOf(<span class=\"string\">\"零\"</span>) + <span class=\"number\">1</span>));<span class=\"comment\">// 几百零几</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">var</span> * flag;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (str.length() == <span class=\"number\">1</span> &amp;&amp; <span class=\"keyword\">var</span> &gt;= <span class=\"number\">100</span>) &#123; <span class=\"comment\">// 判断var 不然十 可能会输出100</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> += <span class=\"number\">10</span> * toSingleNum(str); <span class=\"comment\">// 几百几：九百九</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">var</span> * flag;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (str.contains(<span class=\"string\">\"十\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (str.indexOf(<span class=\"string\">'十'</span>) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">var</span> += <span class=\"number\">10</span>; <span class=\"comment\">// 十几</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> += <span class=\"number\">10</span> * toSingleNum(str.substring(<span class=\"number\">0</span>, str.indexOf(<span class=\"string\">'十'</span>)));<span class=\"comment\">// 十</span></span><br><span class=\"line\">\t\t\tstr = str.substring(str.indexOf(<span class=\"string\">'十'</span>) + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (str.length() != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> += toSingleNum(str);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">var</span> * flag;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Java int Max ：2147483647 二一四七四八三六四七 Min：-2147483648</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// System.out.println(toNum(\"负二一四七四八三六四八\"));</span></span><br><span class=\"line\">\t\tSystem.out.println(toNum(<span class=\"string\">\"负九九九\"</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 数字转化为汉字</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> num</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">toChStr</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (num == -<span class=\"number\">2147483648</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> DemoException(<span class=\"string\">\"超出支持的输入输出范围(-2147483647到2147483647)\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tString varStr = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (num &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tvarStr += <span class=\"string\">\"负\"</span>;</span><br><span class=\"line\">\t\t\tnum = num * -<span class=\"number\">1</span>; <span class=\"comment\">// 转化为正数</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 数字机械式的转化</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (num &gt; <span class=\"number\">999</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 1234</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">char</span>[] CharArr = Integer.toString(num).toCharArray();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">char</span> c : CharArr) &#123;</span><br><span class=\"line\">\t\t\t\tString s = <span class=\"string\">\"\"</span> + c;</span><br><span class=\"line\">\t\t\t\tvarStr += toSingleChStr(Integer.parseInt(s));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> varStr;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (num == <span class=\"number\">0</span>) &#123; <span class=\"comment\">// 零</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"零\"</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (num / <span class=\"number\">10</span> == <span class=\"number\">1</span>) &#123; <span class=\"comment\">// 用十几 改变一十几的写法</span></span><br><span class=\"line\">\t\t\tvarStr += <span class=\"string\">\"十\"</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (num % <span class=\"number\">10</span> != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\tvarStr += toSingleChStr(num % <span class=\"number\">10</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> varStr;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (num / <span class=\"number\">100</span> &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tvarStr += toSingleChStr(num / <span class=\"number\">100</span>) + <span class=\"string\">\"百\"</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (num % <span class=\"number\">100</span> == <span class=\"number\">0</span>) &#123;<span class=\"comment\">// 几百</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> varStr;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (num % <span class=\"number\">100</span> &lt; <span class=\"number\">10</span>) &#123; <span class=\"comment\">// 几百零几</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> varStr += <span class=\"string\">\"零\"</span> + toSingleChStr(num % <span class=\"number\">100</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tnum %= <span class=\"number\">100</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (num / <span class=\"number\">10</span> != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tvarStr += toSingleChStr(num / <span class=\"number\">10</span>) + <span class=\"string\">\"十\"</span>;<span class=\"comment\">// 十</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (num % <span class=\"number\">10</span> != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tvarStr += toSingleChStr(num % <span class=\"number\">10</span>); <span class=\"comment\">// 几</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> varStr;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 运算操作</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> str</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">manipulateNum</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">\t\tString[] strArray = str.trim().split(<span class=\"string\">\"\\\\s+\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (strArray.length != <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> DemoException(<span class=\"string\">\"语法有错，请检查语法\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tString operator = strArray[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\tString varStr = strArray[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\tString numStr = strArray[<span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> <span class=\"keyword\">var</span> = getVar(varStr);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> num = toNum(numStr);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (operator) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">\"减少\"</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> -= num;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">\"增加\"</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> += num;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">\"乘以\"</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> *= num;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">\"除以\"</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (num == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> DemoException(<span class=\"string\">\"除数不能等于零哦\"</span>);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">var</span> /= num;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">\"模除\"</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> %= num;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"没有关键字：\"</span> + operator + <span class=\"string\">\" 请使用关键字：增加、减少、乘以、除以、模除 \"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsetVar(varStr, <span class=\"keyword\">var</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 判断是否为运算操作语句</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> str</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isManipulate</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">\t\tString[] array = str.trim().split(<span class=\"string\">\"\\\\s+\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tString[] keywords = &#123; <span class=\"string\">\"增加\"</span>, <span class=\"string\">\"减少\"</span>, <span class=\"string\">\"乘以\"</span>, <span class=\"string\">\"除以\"</span>, <span class=\"string\">\"模除\"</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 下面会用到array[1]</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (array.length == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> DemoException(<span class=\"string\">\"语法有错，请检查语法\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tString symbol = array[<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (String s : keywords) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (symbol.equals(s)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testSymbol</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(isManipulate(<span class=\"string\">\"钱包 模除  十\"</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 从Map中获取变量，不存在抛出异常</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> str 需要获取数据的变量名</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getVar</span><span class=\"params\">(String varStr)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isVar(varStr)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> map.get(varStr);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> DemoException(<span class=\"string\">\"变量：\"</span> + varStr + <span class=\"string\">\" 未定义，请定义变量\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 存入变量到map中</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> varStr 键</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> var 值</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setVar</span><span class=\"params\">(String varStr, <span class=\"keyword\">int</span> <span class=\"keyword\">var</span>)</span> </span>&#123;</span><br><span class=\"line\">\t\tmap.put(varStr, <span class=\"keyword\">var</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 判断是否为已存在的变量</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> varStr 键</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isVar</span><span class=\"params\">(String varStr)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> map.get(varStr) != <span class=\"keyword\">null</span> ? <span class=\"keyword\">true</span> : <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>Exception类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoException</span> <span class=\"keyword\">extends</span> <span class=\"title\">RuntimeException</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> Demo1;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoException</span> <span class=\"keyword\">extends</span> <span class=\"title\">RuntimeException</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DemoException</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DemoException</span><span class=\"params\">(String message, Throwable cause, <span class=\"keyword\">boolean</span> enableSuppression, <span class=\"keyword\">boolean</span> writableStackTrace)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DemoException</span><span class=\"params\">(String message, Throwable cause)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(message, cause);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DemoException</span><span class=\"params\">(String message)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(message);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DemoException</span><span class=\"params\">(Throwable cause)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(cause);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>代码有三个类</p>\n<ul>\n<li>DemoMain 存放主函数（处理传入的字符串，分割成行）</li>\n<li>Utils 字符处理的工具类 </li>\n<li>DemoException （Demo的异常处理）</li>\n</ul>\n<p>Utils类</p>\n<ul>\n<li>callFunction 传入一行字符串，判断逻辑关键字并调用对应的方法</li>\n<li>assignInt 整数赋值</li>\n<li>printOut 输出字符串或者整数</li>\n<li>ternaryOperator 三目操作</li>\n<li>judgeOperator 判断语句（举例：零 等于 零）</li>\n<li>toNum 把中文数字转化为数字</li>\n<li>toChStr 把数字转化为中文数字</li>\n<li>manipulateNum 增减运算</li>\n<li>toSingleNum 单个数字转化为单个汉字</li>\n<li>toSingleChStr 单个汉字转化为单个数字</li>\n<li>isManipulate 判断是否为运算操作语句</li>\n<li>getVar从Map中获取变量，不存在抛出异常</li>\n</ul>\n<p>更新于2020.2.24</p>\n"},{"title":"Java笔记-面向对象1","date":"2019-12-25T13:15:27.000Z","_content":"#### 面向过程与面向对象\n如果用吃饭举例，面向过程就是把从买菜、洗菜、切菜、烹饪、装盘、吃饭、洗碗等的步骤都写好，而面向对象就像是去饭店吃饭，告诉服务员吃什么就好了，而不用考虑菜是怎么做的，只要吃就好了\n\n面向过程\n  -   面向过程性能比面向对象高，面向对象调用类需要实例化，资源开销大，而面向对象则不需要\n\n面向对象\n  -   易维护、易复用、易扩展，可以设计出低耦合的系统\n\n面向对象就像是盖浇饭，饭和菜分离可维护性好，耦合程度低，可根据需求更改饭或者菜，而不像蛋炒饭，蛋和饭杂糅在一起，想替换其中某一个都非常困难\n\n#### 面向对象三大特性\n封装：去饭店吃饭，你并不知道饭菜的具体做法，但是你可以通过服务员来点菜，得到点的饭菜\n继承：父亲有钱，儿子可以继承父亲的财产\n多态：亲戚结婚，邀请函上写的是你的父亲的名字，但实际上可以是你或你的妹妹去参加\n- 封装：封装是指将对象的实现细节隐藏起来，然后通过公共的方法来向外暴露该对象的功能\n- 继承：当子类继承父类后，子类是一种特殊的父类，能直接或间接获得父类里的成员\n- 多态：多态是可以直接把子类对象赋给父类变量，但是运行时依然表现出子类的行为特征，这意味着同一类型的对象在运行时可能表现出不同的行为特征\n\n#### 类与对象\n对象：可以是一个人，具有特性如：身高、体重，有行为如：跑、跳\n类：把具有共同特征的对象抽象出一个类，张三李四都属于人类\n实例化：就是根据某一个类的特征去塑造一个该类的对象\n- 对象（object）定义：包含特性和行为的一个实体，对象也称为实例（instance）\n- 类：把具有相同“特性”和“行为”的多个对象的抽象就是类\n- 实例化：把类具体到某一个对象上面，该对象有具体的什么的状态特征和什么行为\n\n#### 类的创建\n注意点\n1. 若类使用public修饰，则当前所在的文件名必须和类名相同\n2. 类型必须符合标识符的命名规范（使用名词，每个单词首字母都大写）\n\n\n#### JVM内存划分\nJVM将内存主要划分为：方法区、虚拟机栈、本地方法栈、堆、程序计数器\n- 方法区：存放程序中唯一的元素：class字节码文件、static变量\n- 栈：每调用一个函数，就创建一个栈帧，加入虚拟机栈，调用结束就出栈\n- 堆：所有new出来的东西\n\n\n#### 方法栈帧\n栈特点：先进后出（类似弹夹） \n写一个sum方法（在main函数外，和main函数在同一个类），再写一个main方法，在main中调用sum方法\n执行过程：\n- 执行main方法，main方法对应一个栈帧入栈，里面包含main的成员变量\n- 调用sum方法，sum方法栈帧入栈，里面包含sum的成员变量\n- 调用sum方法结束，sum方法出栈，sum方法成员变量清除\n- main方法结束，main方法出栈，程序执行结束\n\n#### 堆与数组初始化\n\nmain方法栈帧入栈\n1. 声明int类型的数组ages：int[]ages；\n2. 在堆中初始化数组： new int[]{10，20，30}；\n3. 把被初始数组的地址赋值给ages变量\nmain方法栈帧出栈\n\nGC垃圾回收机制：Java自动垃圾回收机制\n如果给一个数组变量赋了新的数组，就是把新数组的地址赋值给变量\n原来堆中的数组，就没被引用，等待被回收\n\n#### 对象堆内存分析\n方法区：存放类的class字节码文件（包括方法，常量，static变量类的描述信息）\nPerson类内存分析\n- Person.class 存放在方法区\n- main方法栈帧入栈\n- new一个具体Person，堆里有了一个Person对象\n- 将堆里的Person对象地址值赋值给main方法栈帧中的Person变量\n- main方法结束 main方法栈帧出栈\n\n\n堆里面都有初始值，基本类型为 0 引用类型为 null\n- byte short int 0\n- long 0L\n- float 0.0f\n- double 0.0d\n- char '/u0000'  空值，打印为空格\n- boolean false\n  \n基本数据类型：\n    只有一块存储空间，在栈中，存放的是具体的值\n引用数据类型：\n    引用数据类型有两块存储空间：一个在栈（Stack）中，一个在堆（heap）中\n    5种引用类型：类、接口、数组、枚举、注解\n\n基本数据类型：值传递\n引用数据类型：地址传递\n\n#### 匿名对象\n匿名对象：创建一个对象，没有把它赋值给任何一个变量，匿名对象只能使用一次\n一个对象没有任何人指向时，就会成为垃圾，等待垃圾回收器回收\n\n#### 构造器\n构造器：在创建对象时，自动调用的方法\n1. 和类名相同\n2. 不能定义返回值类型\n3. 不能returen（实际上返回的是创建对象的地址）\n默认构造器是无参构造，如果类用public修饰，默认构造器也用public修饰\n\n自己定义了构造器，编译器就不会帮你再生成构造器（需要无参构造就要自己写）\n\n构造器重载：和方法重载一样，方法名相同，参数不一样\n\n#### static\n在字段和方法前添加了static，那么这个字段或方法它**就属于类**\n状态和行为有： **类和对象之分**\n\n| 分类 | 状态 | 行为 |\n| :------ | :------: | :------ |\n| 对象 | 姓名 | 死亡 |\n| 类 | 人口总数 | 毁灭 |\n\n1. static修饰的内容随类的加载而加载，JVM把字节码加载到虚拟机中，static修饰的成员自动被加载到方法区\n2. **static修饰的内容优先于对象**\n3. static修饰的内容该类所有对象共享\n4. static修饰的内容可以通过类名调用(可以通过对象名调用，但编译了本质还是用类名调用)\n\n**类成员**：static修饰的成员\n**实例成员**：非static修饰的成员\n\n在static方法中只能调用static成员：例如main方法调用的方法就必须是是static方法\n非static方法可以访问静态成员也可以访问非静态成员：static\n\n\n运行：加载class字节码文件，加载static成员（变量、方法）到方法区\n\nstatic成员，被所有对象共享时，节省空间，没必须每个对象都存储一份，可以直接使用类名调用，生命周期长，虚拟机停止才消失\n\n总结：\nstatic的作用就是方便在不创建对象的情况下，进行调用方法或变量\nstatic方法不能调用非static成员，因为非static成员必须依赖具体对象才能被调用\n\n#### 成员变量和局部变量\n1. 成员变量：直接定义在类中的变量(也称全局变量或字段，不能称为属性)\n   \n- 类成员变量：static修饰的成员变量\n- 实例成员变量：没有static修饰的成员变量，注意：在方法当中不能定义static变量，包括main方法\n\n**有初始值，可以直接用**\n\n2. 局部变量：定义在方法当中的变量（方法的参数，和内部定的变量,代码块）\n\n**必须初始化才能用**\n\n![高新强](java-note-2/1.png)\n\n--- \n\n## 参考资料\n[Java零基础到高级JavaEE就业实战](https://study.163.com/course/introduction/1005537028.htm)\n[面向对象与面向过程的本质的区别](https://blog.csdn.net/jerry11112/article/details/79027834)\n[什么是多态？实现多态的机制是什么？](https://www.jianshu.com/p/68ddb5484ca2)\n[Java中的static关键字解析](https://www.cnblogs.com/dolphin0520/p/3799052.html)\n","source":"_posts/java-note-2.md","raw":"---\ntitle: Java笔记-面向对象1\ndate: 2019-12-25 21:15:27\ncategories: Java笔记\n---\n#### 面向过程与面向对象\n如果用吃饭举例，面向过程就是把从买菜、洗菜、切菜、烹饪、装盘、吃饭、洗碗等的步骤都写好，而面向对象就像是去饭店吃饭，告诉服务员吃什么就好了，而不用考虑菜是怎么做的，只要吃就好了\n\n面向过程\n  -   面向过程性能比面向对象高，面向对象调用类需要实例化，资源开销大，而面向对象则不需要\n\n面向对象\n  -   易维护、易复用、易扩展，可以设计出低耦合的系统\n\n面向对象就像是盖浇饭，饭和菜分离可维护性好，耦合程度低，可根据需求更改饭或者菜，而不像蛋炒饭，蛋和饭杂糅在一起，想替换其中某一个都非常困难\n\n#### 面向对象三大特性\n封装：去饭店吃饭，你并不知道饭菜的具体做法，但是你可以通过服务员来点菜，得到点的饭菜\n继承：父亲有钱，儿子可以继承父亲的财产\n多态：亲戚结婚，邀请函上写的是你的父亲的名字，但实际上可以是你或你的妹妹去参加\n- 封装：封装是指将对象的实现细节隐藏起来，然后通过公共的方法来向外暴露该对象的功能\n- 继承：当子类继承父类后，子类是一种特殊的父类，能直接或间接获得父类里的成员\n- 多态：多态是可以直接把子类对象赋给父类变量，但是运行时依然表现出子类的行为特征，这意味着同一类型的对象在运行时可能表现出不同的行为特征\n\n#### 类与对象\n对象：可以是一个人，具有特性如：身高、体重，有行为如：跑、跳\n类：把具有共同特征的对象抽象出一个类，张三李四都属于人类\n实例化：就是根据某一个类的特征去塑造一个该类的对象\n- 对象（object）定义：包含特性和行为的一个实体，对象也称为实例（instance）\n- 类：把具有相同“特性”和“行为”的多个对象的抽象就是类\n- 实例化：把类具体到某一个对象上面，该对象有具体的什么的状态特征和什么行为\n\n#### 类的创建\n注意点\n1. 若类使用public修饰，则当前所在的文件名必须和类名相同\n2. 类型必须符合标识符的命名规范（使用名词，每个单词首字母都大写）\n\n\n#### JVM内存划分\nJVM将内存主要划分为：方法区、虚拟机栈、本地方法栈、堆、程序计数器\n- 方法区：存放程序中唯一的元素：class字节码文件、static变量\n- 栈：每调用一个函数，就创建一个栈帧，加入虚拟机栈，调用结束就出栈\n- 堆：所有new出来的东西\n\n\n#### 方法栈帧\n栈特点：先进后出（类似弹夹） \n写一个sum方法（在main函数外，和main函数在同一个类），再写一个main方法，在main中调用sum方法\n执行过程：\n- 执行main方法，main方法对应一个栈帧入栈，里面包含main的成员变量\n- 调用sum方法，sum方法栈帧入栈，里面包含sum的成员变量\n- 调用sum方法结束，sum方法出栈，sum方法成员变量清除\n- main方法结束，main方法出栈，程序执行结束\n\n#### 堆与数组初始化\n\nmain方法栈帧入栈\n1. 声明int类型的数组ages：int[]ages；\n2. 在堆中初始化数组： new int[]{10，20，30}；\n3. 把被初始数组的地址赋值给ages变量\nmain方法栈帧出栈\n\nGC垃圾回收机制：Java自动垃圾回收机制\n如果给一个数组变量赋了新的数组，就是把新数组的地址赋值给变量\n原来堆中的数组，就没被引用，等待被回收\n\n#### 对象堆内存分析\n方法区：存放类的class字节码文件（包括方法，常量，static变量类的描述信息）\nPerson类内存分析\n- Person.class 存放在方法区\n- main方法栈帧入栈\n- new一个具体Person，堆里有了一个Person对象\n- 将堆里的Person对象地址值赋值给main方法栈帧中的Person变量\n- main方法结束 main方法栈帧出栈\n\n\n堆里面都有初始值，基本类型为 0 引用类型为 null\n- byte short int 0\n- long 0L\n- float 0.0f\n- double 0.0d\n- char '/u0000'  空值，打印为空格\n- boolean false\n  \n基本数据类型：\n    只有一块存储空间，在栈中，存放的是具体的值\n引用数据类型：\n    引用数据类型有两块存储空间：一个在栈（Stack）中，一个在堆（heap）中\n    5种引用类型：类、接口、数组、枚举、注解\n\n基本数据类型：值传递\n引用数据类型：地址传递\n\n#### 匿名对象\n匿名对象：创建一个对象，没有把它赋值给任何一个变量，匿名对象只能使用一次\n一个对象没有任何人指向时，就会成为垃圾，等待垃圾回收器回收\n\n#### 构造器\n构造器：在创建对象时，自动调用的方法\n1. 和类名相同\n2. 不能定义返回值类型\n3. 不能returen（实际上返回的是创建对象的地址）\n默认构造器是无参构造，如果类用public修饰，默认构造器也用public修饰\n\n自己定义了构造器，编译器就不会帮你再生成构造器（需要无参构造就要自己写）\n\n构造器重载：和方法重载一样，方法名相同，参数不一样\n\n#### static\n在字段和方法前添加了static，那么这个字段或方法它**就属于类**\n状态和行为有： **类和对象之分**\n\n| 分类 | 状态 | 行为 |\n| :------ | :------: | :------ |\n| 对象 | 姓名 | 死亡 |\n| 类 | 人口总数 | 毁灭 |\n\n1. static修饰的内容随类的加载而加载，JVM把字节码加载到虚拟机中，static修饰的成员自动被加载到方法区\n2. **static修饰的内容优先于对象**\n3. static修饰的内容该类所有对象共享\n4. static修饰的内容可以通过类名调用(可以通过对象名调用，但编译了本质还是用类名调用)\n\n**类成员**：static修饰的成员\n**实例成员**：非static修饰的成员\n\n在static方法中只能调用static成员：例如main方法调用的方法就必须是是static方法\n非static方法可以访问静态成员也可以访问非静态成员：static\n\n\n运行：加载class字节码文件，加载static成员（变量、方法）到方法区\n\nstatic成员，被所有对象共享时，节省空间，没必须每个对象都存储一份，可以直接使用类名调用，生命周期长，虚拟机停止才消失\n\n总结：\nstatic的作用就是方便在不创建对象的情况下，进行调用方法或变量\nstatic方法不能调用非static成员，因为非static成员必须依赖具体对象才能被调用\n\n#### 成员变量和局部变量\n1. 成员变量：直接定义在类中的变量(也称全局变量或字段，不能称为属性)\n   \n- 类成员变量：static修饰的成员变量\n- 实例成员变量：没有static修饰的成员变量，注意：在方法当中不能定义static变量，包括main方法\n\n**有初始值，可以直接用**\n\n2. 局部变量：定义在方法当中的变量（方法的参数，和内部定的变量,代码块）\n\n**必须初始化才能用**\n\n![高新强](java-note-2/1.png)\n\n--- \n\n## 参考资料\n[Java零基础到高级JavaEE就业实战](https://study.163.com/course/introduction/1005537028.htm)\n[面向对象与面向过程的本质的区别](https://blog.csdn.net/jerry11112/article/details/79027834)\n[什么是多态？实现多态的机制是什么？](https://www.jianshu.com/p/68ddb5484ca2)\n[Java中的static关键字解析](https://www.cnblogs.com/dolphin0520/p/3799052.html)\n","slug":"java-note-2","published":1,"updated":"2020-06-13T02:55:34.734Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke3x9g4s000izgvu1j8kf5wr","content":"<h4 id=\"面向过程与面向对象\"><a href=\"#面向过程与面向对象\" class=\"headerlink\" title=\"面向过程与面向对象\"></a>面向过程与面向对象</h4><p>如果用吃饭举例，面向过程就是把从买菜、洗菜、切菜、烹饪、装盘、吃饭、洗碗等的步骤都写好，而面向对象就像是去饭店吃饭，告诉服务员吃什么就好了，而不用考虑菜是怎么做的，只要吃就好了</p>\n<p>面向过程</p>\n<ul>\n<li>面向过程性能比面向对象高，面向对象调用类需要实例化，资源开销大，而面向对象则不需要</li>\n</ul>\n<p>面向对象</p>\n<ul>\n<li>易维护、易复用、易扩展，可以设计出低耦合的系统</li>\n</ul>\n<p>面向对象就像是盖浇饭，饭和菜分离可维护性好，耦合程度低，可根据需求更改饭或者菜，而不像蛋炒饭，蛋和饭杂糅在一起，想替换其中某一个都非常困难</p>\n<h4 id=\"面向对象三大特性\"><a href=\"#面向对象三大特性\" class=\"headerlink\" title=\"面向对象三大特性\"></a>面向对象三大特性</h4><p>封装：去饭店吃饭，你并不知道饭菜的具体做法，但是你可以通过服务员来点菜，得到点的饭菜<br>继承：父亲有钱，儿子可以继承父亲的财产<br>多态：亲戚结婚，邀请函上写的是你的父亲的名字，但实际上可以是你或你的妹妹去参加</p>\n<ul>\n<li>封装：封装是指将对象的实现细节隐藏起来，然后通过公共的方法来向外暴露该对象的功能</li>\n<li>继承：当子类继承父类后，子类是一种特殊的父类，能直接或间接获得父类里的成员</li>\n<li>多态：多态是可以直接把子类对象赋给父类变量，但是运行时依然表现出子类的行为特征，这意味着同一类型的对象在运行时可能表现出不同的行为特征</li>\n</ul>\n<h4 id=\"类与对象\"><a href=\"#类与对象\" class=\"headerlink\" title=\"类与对象\"></a>类与对象</h4><p>对象：可以是一个人，具有特性如：身高、体重，有行为如：跑、跳<br>类：把具有共同特征的对象抽象出一个类，张三李四都属于人类<br>实例化：就是根据某一个类的特征去塑造一个该类的对象</p>\n<ul>\n<li>对象（object）定义：包含特性和行为的一个实体，对象也称为实例（instance）</li>\n<li>类：把具有相同“特性”和“行为”的多个对象的抽象就是类</li>\n<li>实例化：把类具体到某一个对象上面，该对象有具体的什么的状态特征和什么行为</li>\n</ul>\n<h4 id=\"类的创建\"><a href=\"#类的创建\" class=\"headerlink\" title=\"类的创建\"></a>类的创建</h4><p>注意点</p>\n<ol>\n<li>若类使用public修饰，则当前所在的文件名必须和类名相同</li>\n<li>类型必须符合标识符的命名规范（使用名词，每个单词首字母都大写）</li>\n</ol>\n<h4 id=\"JVM内存划分\"><a href=\"#JVM内存划分\" class=\"headerlink\" title=\"JVM内存划分\"></a>JVM内存划分</h4><p>JVM将内存主要划分为：方法区、虚拟机栈、本地方法栈、堆、程序计数器</p>\n<ul>\n<li>方法区：存放程序中唯一的元素：class字节码文件、static变量</li>\n<li>栈：每调用一个函数，就创建一个栈帧，加入虚拟机栈，调用结束就出栈</li>\n<li>堆：所有new出来的东西</li>\n</ul>\n<h4 id=\"方法栈帧\"><a href=\"#方法栈帧\" class=\"headerlink\" title=\"方法栈帧\"></a>方法栈帧</h4><p>栈特点：先进后出（类似弹夹）<br>写一个sum方法（在main函数外，和main函数在同一个类），再写一个main方法，在main中调用sum方法<br>执行过程：</p>\n<ul>\n<li>执行main方法，main方法对应一个栈帧入栈，里面包含main的成员变量</li>\n<li>调用sum方法，sum方法栈帧入栈，里面包含sum的成员变量</li>\n<li>调用sum方法结束，sum方法出栈，sum方法成员变量清除</li>\n<li>main方法结束，main方法出栈，程序执行结束</li>\n</ul>\n<h4 id=\"堆与数组初始化\"><a href=\"#堆与数组初始化\" class=\"headerlink\" title=\"堆与数组初始化\"></a>堆与数组初始化</h4><p>main方法栈帧入栈</p>\n<ol>\n<li>声明int类型的数组ages：int[]ages；</li>\n<li>在堆中初始化数组： new int[]{10，20，30}；</li>\n<li>把被初始数组的地址赋值给ages变量<br>main方法栈帧出栈</li>\n</ol>\n<p>GC垃圾回收机制：Java自动垃圾回收机制<br>如果给一个数组变量赋了新的数组，就是把新数组的地址赋值给变量<br>原来堆中的数组，就没被引用，等待被回收</p>\n<h4 id=\"对象堆内存分析\"><a href=\"#对象堆内存分析\" class=\"headerlink\" title=\"对象堆内存分析\"></a>对象堆内存分析</h4><p>方法区：存放类的class字节码文件（包括方法，常量，static变量类的描述信息）<br>Person类内存分析</p>\n<ul>\n<li>Person.class 存放在方法区</li>\n<li>main方法栈帧入栈</li>\n<li>new一个具体Person，堆里有了一个Person对象</li>\n<li>将堆里的Person对象地址值赋值给main方法栈帧中的Person变量</li>\n<li>main方法结束 main方法栈帧出栈</li>\n</ul>\n<p>堆里面都有初始值，基本类型为 0 引用类型为 null</p>\n<ul>\n<li>byte short int 0</li>\n<li>long 0L</li>\n<li>float 0.0f</li>\n<li>double 0.0d</li>\n<li>char ‘/u0000’  空值，打印为空格</li>\n<li>boolean false</li>\n</ul>\n<p>基本数据类型：<br>    只有一块存储空间，在栈中，存放的是具体的值<br>引用数据类型：<br>    引用数据类型有两块存储空间：一个在栈（Stack）中，一个在堆（heap）中<br>    5种引用类型：类、接口、数组、枚举、注解</p>\n<p>基本数据类型：值传递<br>引用数据类型：地址传递</p>\n<h4 id=\"匿名对象\"><a href=\"#匿名对象\" class=\"headerlink\" title=\"匿名对象\"></a>匿名对象</h4><p>匿名对象：创建一个对象，没有把它赋值给任何一个变量，匿名对象只能使用一次<br>一个对象没有任何人指向时，就会成为垃圾，等待垃圾回收器回收</p>\n<h4 id=\"构造器\"><a href=\"#构造器\" class=\"headerlink\" title=\"构造器\"></a>构造器</h4><p>构造器：在创建对象时，自动调用的方法</p>\n<ol>\n<li>和类名相同</li>\n<li>不能定义返回值类型</li>\n<li>不能returen（实际上返回的是创建对象的地址）<br>默认构造器是无参构造，如果类用public修饰，默认构造器也用public修饰</li>\n</ol>\n<p>自己定义了构造器，编译器就不会帮你再生成构造器（需要无参构造就要自己写）</p>\n<p>构造器重载：和方法重载一样，方法名相同，参数不一样</p>\n<h4 id=\"static\"><a href=\"#static\" class=\"headerlink\" title=\"static\"></a>static</h4><p>在字段和方法前添加了static，那么这个字段或方法它<strong>就属于类</strong><br>状态和行为有： <strong>类和对象之分</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">分类</th>\n<th align=\"center\">状态</th>\n<th align=\"left\">行为</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">对象</td>\n<td align=\"center\">姓名</td>\n<td align=\"left\">死亡</td>\n</tr>\n<tr>\n<td align=\"left\">类</td>\n<td align=\"center\">人口总数</td>\n<td align=\"left\">毁灭</td>\n</tr>\n</tbody></table>\n<ol>\n<li>static修饰的内容随类的加载而加载，JVM把字节码加载到虚拟机中，static修饰的成员自动被加载到方法区</li>\n<li><strong>static修饰的内容优先于对象</strong></li>\n<li>static修饰的内容该类所有对象共享</li>\n<li>static修饰的内容可以通过类名调用(可以通过对象名调用，但编译了本质还是用类名调用)</li>\n</ol>\n<p><strong>类成员</strong>：static修饰的成员<br><strong>实例成员</strong>：非static修饰的成员</p>\n<p>在static方法中只能调用static成员：例如main方法调用的方法就必须是是static方法<br>非static方法可以访问静态成员也可以访问非静态成员：static</p>\n<p>运行：加载class字节码文件，加载static成员（变量、方法）到方法区</p>\n<p>static成员，被所有对象共享时，节省空间，没必须每个对象都存储一份，可以直接使用类名调用，生命周期长，虚拟机停止才消失</p>\n<p>总结：<br>static的作用就是方便在不创建对象的情况下，进行调用方法或变量<br>static方法不能调用非static成员，因为非static成员必须依赖具体对象才能被调用</p>\n<h4 id=\"成员变量和局部变量\"><a href=\"#成员变量和局部变量\" class=\"headerlink\" title=\"成员变量和局部变量\"></a>成员变量和局部变量</h4><ol>\n<li>成员变量：直接定义在类中的变量(也称全局变量或字段，不能称为属性)</li>\n</ol>\n<ul>\n<li>类成员变量：static修饰的成员变量</li>\n<li>实例成员变量：没有static修饰的成员变量，注意：在方法当中不能定义static变量，包括main方法</li>\n</ul>\n<p><strong>有初始值，可以直接用</strong></p>\n<ol start=\"2\">\n<li>局部变量：定义在方法当中的变量（方法的参数，和内部定的变量,代码块）</li>\n</ol>\n<p><strong>必须初始化才能用</strong></p>\n<p><img src=\"/2019/12/25/java-note-2/1.png\" alt=\"高新强\"></p>\n<hr>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005537028.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级JavaEE就业实战</a><br><a href=\"https://blog.csdn.net/jerry11112/article/details/79027834\" target=\"_blank\" rel=\"noopener\">面向对象与面向过程的本质的区别</a><br><a href=\"https://www.jianshu.com/p/68ddb5484ca2\" target=\"_blank\" rel=\"noopener\">什么是多态？实现多态的机制是什么？</a><br><a href=\"https://www.cnblogs.com/dolphin0520/p/3799052.html\" target=\"_blank\" rel=\"noopener\">Java中的static关键字解析</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"面向过程与面向对象\"><a href=\"#面向过程与面向对象\" class=\"headerlink\" title=\"面向过程与面向对象\"></a>面向过程与面向对象</h4><p>如果用吃饭举例，面向过程就是把从买菜、洗菜、切菜、烹饪、装盘、吃饭、洗碗等的步骤都写好，而面向对象就像是去饭店吃饭，告诉服务员吃什么就好了，而不用考虑菜是怎么做的，只要吃就好了</p>\n<p>面向过程</p>\n<ul>\n<li>面向过程性能比面向对象高，面向对象调用类需要实例化，资源开销大，而面向对象则不需要</li>\n</ul>\n<p>面向对象</p>\n<ul>\n<li>易维护、易复用、易扩展，可以设计出低耦合的系统</li>\n</ul>\n<p>面向对象就像是盖浇饭，饭和菜分离可维护性好，耦合程度低，可根据需求更改饭或者菜，而不像蛋炒饭，蛋和饭杂糅在一起，想替换其中某一个都非常困难</p>\n<h4 id=\"面向对象三大特性\"><a href=\"#面向对象三大特性\" class=\"headerlink\" title=\"面向对象三大特性\"></a>面向对象三大特性</h4><p>封装：去饭店吃饭，你并不知道饭菜的具体做法，但是你可以通过服务员来点菜，得到点的饭菜<br>继承：父亲有钱，儿子可以继承父亲的财产<br>多态：亲戚结婚，邀请函上写的是你的父亲的名字，但实际上可以是你或你的妹妹去参加</p>\n<ul>\n<li>封装：封装是指将对象的实现细节隐藏起来，然后通过公共的方法来向外暴露该对象的功能</li>\n<li>继承：当子类继承父类后，子类是一种特殊的父类，能直接或间接获得父类里的成员</li>\n<li>多态：多态是可以直接把子类对象赋给父类变量，但是运行时依然表现出子类的行为特征，这意味着同一类型的对象在运行时可能表现出不同的行为特征</li>\n</ul>\n<h4 id=\"类与对象\"><a href=\"#类与对象\" class=\"headerlink\" title=\"类与对象\"></a>类与对象</h4><p>对象：可以是一个人，具有特性如：身高、体重，有行为如：跑、跳<br>类：把具有共同特征的对象抽象出一个类，张三李四都属于人类<br>实例化：就是根据某一个类的特征去塑造一个该类的对象</p>\n<ul>\n<li>对象（object）定义：包含特性和行为的一个实体，对象也称为实例（instance）</li>\n<li>类：把具有相同“特性”和“行为”的多个对象的抽象就是类</li>\n<li>实例化：把类具体到某一个对象上面，该对象有具体的什么的状态特征和什么行为</li>\n</ul>\n<h4 id=\"类的创建\"><a href=\"#类的创建\" class=\"headerlink\" title=\"类的创建\"></a>类的创建</h4><p>注意点</p>\n<ol>\n<li>若类使用public修饰，则当前所在的文件名必须和类名相同</li>\n<li>类型必须符合标识符的命名规范（使用名词，每个单词首字母都大写）</li>\n</ol>\n<h4 id=\"JVM内存划分\"><a href=\"#JVM内存划分\" class=\"headerlink\" title=\"JVM内存划分\"></a>JVM内存划分</h4><p>JVM将内存主要划分为：方法区、虚拟机栈、本地方法栈、堆、程序计数器</p>\n<ul>\n<li>方法区：存放程序中唯一的元素：class字节码文件、static变量</li>\n<li>栈：每调用一个函数，就创建一个栈帧，加入虚拟机栈，调用结束就出栈</li>\n<li>堆：所有new出来的东西</li>\n</ul>\n<h4 id=\"方法栈帧\"><a href=\"#方法栈帧\" class=\"headerlink\" title=\"方法栈帧\"></a>方法栈帧</h4><p>栈特点：先进后出（类似弹夹）<br>写一个sum方法（在main函数外，和main函数在同一个类），再写一个main方法，在main中调用sum方法<br>执行过程：</p>\n<ul>\n<li>执行main方法，main方法对应一个栈帧入栈，里面包含main的成员变量</li>\n<li>调用sum方法，sum方法栈帧入栈，里面包含sum的成员变量</li>\n<li>调用sum方法结束，sum方法出栈，sum方法成员变量清除</li>\n<li>main方法结束，main方法出栈，程序执行结束</li>\n</ul>\n<h4 id=\"堆与数组初始化\"><a href=\"#堆与数组初始化\" class=\"headerlink\" title=\"堆与数组初始化\"></a>堆与数组初始化</h4><p>main方法栈帧入栈</p>\n<ol>\n<li>声明int类型的数组ages：int[]ages；</li>\n<li>在堆中初始化数组： new int[]{10，20，30}；</li>\n<li>把被初始数组的地址赋值给ages变量<br>main方法栈帧出栈</li>\n</ol>\n<p>GC垃圾回收机制：Java自动垃圾回收机制<br>如果给一个数组变量赋了新的数组，就是把新数组的地址赋值给变量<br>原来堆中的数组，就没被引用，等待被回收</p>\n<h4 id=\"对象堆内存分析\"><a href=\"#对象堆内存分析\" class=\"headerlink\" title=\"对象堆内存分析\"></a>对象堆内存分析</h4><p>方法区：存放类的class字节码文件（包括方法，常量，static变量类的描述信息）<br>Person类内存分析</p>\n<ul>\n<li>Person.class 存放在方法区</li>\n<li>main方法栈帧入栈</li>\n<li>new一个具体Person，堆里有了一个Person对象</li>\n<li>将堆里的Person对象地址值赋值给main方法栈帧中的Person变量</li>\n<li>main方法结束 main方法栈帧出栈</li>\n</ul>\n<p>堆里面都有初始值，基本类型为 0 引用类型为 null</p>\n<ul>\n<li>byte short int 0</li>\n<li>long 0L</li>\n<li>float 0.0f</li>\n<li>double 0.0d</li>\n<li>char ‘/u0000’  空值，打印为空格</li>\n<li>boolean false</li>\n</ul>\n<p>基本数据类型：<br>    只有一块存储空间，在栈中，存放的是具体的值<br>引用数据类型：<br>    引用数据类型有两块存储空间：一个在栈（Stack）中，一个在堆（heap）中<br>    5种引用类型：类、接口、数组、枚举、注解</p>\n<p>基本数据类型：值传递<br>引用数据类型：地址传递</p>\n<h4 id=\"匿名对象\"><a href=\"#匿名对象\" class=\"headerlink\" title=\"匿名对象\"></a>匿名对象</h4><p>匿名对象：创建一个对象，没有把它赋值给任何一个变量，匿名对象只能使用一次<br>一个对象没有任何人指向时，就会成为垃圾，等待垃圾回收器回收</p>\n<h4 id=\"构造器\"><a href=\"#构造器\" class=\"headerlink\" title=\"构造器\"></a>构造器</h4><p>构造器：在创建对象时，自动调用的方法</p>\n<ol>\n<li>和类名相同</li>\n<li>不能定义返回值类型</li>\n<li>不能returen（实际上返回的是创建对象的地址）<br>默认构造器是无参构造，如果类用public修饰，默认构造器也用public修饰</li>\n</ol>\n<p>自己定义了构造器，编译器就不会帮你再生成构造器（需要无参构造就要自己写）</p>\n<p>构造器重载：和方法重载一样，方法名相同，参数不一样</p>\n<h4 id=\"static\"><a href=\"#static\" class=\"headerlink\" title=\"static\"></a>static</h4><p>在字段和方法前添加了static，那么这个字段或方法它<strong>就属于类</strong><br>状态和行为有： <strong>类和对象之分</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">分类</th>\n<th align=\"center\">状态</th>\n<th align=\"left\">行为</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">对象</td>\n<td align=\"center\">姓名</td>\n<td align=\"left\">死亡</td>\n</tr>\n<tr>\n<td align=\"left\">类</td>\n<td align=\"center\">人口总数</td>\n<td align=\"left\">毁灭</td>\n</tr>\n</tbody></table>\n<ol>\n<li>static修饰的内容随类的加载而加载，JVM把字节码加载到虚拟机中，static修饰的成员自动被加载到方法区</li>\n<li><strong>static修饰的内容优先于对象</strong></li>\n<li>static修饰的内容该类所有对象共享</li>\n<li>static修饰的内容可以通过类名调用(可以通过对象名调用，但编译了本质还是用类名调用)</li>\n</ol>\n<p><strong>类成员</strong>：static修饰的成员<br><strong>实例成员</strong>：非static修饰的成员</p>\n<p>在static方法中只能调用static成员：例如main方法调用的方法就必须是是static方法<br>非static方法可以访问静态成员也可以访问非静态成员：static</p>\n<p>运行：加载class字节码文件，加载static成员（变量、方法）到方法区</p>\n<p>static成员，被所有对象共享时，节省空间，没必须每个对象都存储一份，可以直接使用类名调用，生命周期长，虚拟机停止才消失</p>\n<p>总结：<br>static的作用就是方便在不创建对象的情况下，进行调用方法或变量<br>static方法不能调用非static成员，因为非static成员必须依赖具体对象才能被调用</p>\n<h4 id=\"成员变量和局部变量\"><a href=\"#成员变量和局部变量\" class=\"headerlink\" title=\"成员变量和局部变量\"></a>成员变量和局部变量</h4><ol>\n<li>成员变量：直接定义在类中的变量(也称全局变量或字段，不能称为属性)</li>\n</ol>\n<ul>\n<li>类成员变量：static修饰的成员变量</li>\n<li>实例成员变量：没有static修饰的成员变量，注意：在方法当中不能定义static变量，包括main方法</li>\n</ul>\n<p><strong>有初始值，可以直接用</strong></p>\n<ol start=\"2\">\n<li>局部变量：定义在方法当中的变量（方法的参数，和内部定的变量,代码块）</li>\n</ol>\n<p><strong>必须初始化才能用</strong></p>\n<p><img src=\"/2019/12/25/java-note-2/1.png\" alt=\"高新强\"></p>\n<hr>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005537028.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级JavaEE就业实战</a><br><a href=\"https://blog.csdn.net/jerry11112/article/details/79027834\" target=\"_blank\" rel=\"noopener\">面向对象与面向过程的本质的区别</a><br><a href=\"https://www.jianshu.com/p/68ddb5484ca2\" target=\"_blank\" rel=\"noopener\">什么是多态？实现多态的机制是什么？</a><br><a href=\"https://www.cnblogs.com/dolphin0520/p/3799052.html\" target=\"_blank\" rel=\"noopener\">Java中的static关键字解析</a></p>\n"},{"title":"Java笔记-面向对象2","date":"2019-12-28T14:37:05.000Z","_content":"#### 包\n规范：\n1. 遵循关键字，全部小写\n2. 企业开发包名用公司域名倒写 域名倒写.模块名.组件名\n\n类的全限定名称：包名.类名\n\n静态导入：把其他包里面的内容在本类当中使用、不需要使用类名调用，直接使用包里面的方法\n\nimport static java.util.Arrays.sort;\n\n不推荐用：1.有些方法不能这么用比如toString，2.不知道是自己写的还是导入的\n\n#### 封装思想\n写一个用户注册，有很多信息需要填写，如果写方法，需要传入很多参数，有很多参数是非必要的但是都要写\n方法重载写起来麻烦\n封装到一个对象里，那就只要传一个参数即可new一个对象，其他用初始值，当成一个整体\n\n优点：\n1.参数少了很多，传的是一个对象，把某些信息当成一个整体去使用\n2.安全性：变量加private，不允许外部读取或者修改它\n\n\n#### 访问修饰符\n![高新强](java-note-3/1.png)\n\n默认和protected的区别：同包下都可以访问，但是只要继承默认权限就不能访问，protected则可以访问\n使用不同包的成员需要导入\n\n#### 属性概念\n字段或者成员变量 加上get和set方法才能叫属性\nEclipse自动生成右键 -> Source -> Generate Getters and Setters…\n\n#### this关键字\nthis:  “这个”指向当前正在使用对象的地址\n\n注意点：\n1. 帮我们区分成员变量和局部变量的二异性，必须得要使用this\n2. 在同类当中，实例方法的调用，前面其实是有this，可以省略\n3. 可以把this做为参数传递\n4. 可以当做返回值返回\n5. **static不能和this一起使用**\n6. 构造器的重载互调，this ( )；此时this代表是构造器名，**必须写到第一行**\n\n\n#### 继承思想\n老师、学生、员工这些类都有一些相同的变量：比如姓名、年龄，还有相同的方法比如吃\n代码出现重复，可以通过继承来解决这个问题\n\n父类：存放共同的状态和行为被继承的类我们称为父类或超类、基类、拓展类。\n子类：存放自己特有的状态和行为\n\n继承是一种从一般到特殊的关系，是一种“is a ”的关系，即子类是对父类的派生，是一种特殊的父类\n比如：狗是动物的一种特殊情况，狗属于动物。\n\n一般的，在开发工程中先编写多个自定义类，写完之后，发现多个类之间存在共同的代码，此时可以抽去出一个父类\n\n如果父类中的成员使用protected修饰，子类也继承，不同包也能继承\n父类的构造器，子类也不能继承，因为构造器必须和当前的类名相同\n\n#### 继承方法的覆盖\n子类你扩展了父类，就获得了父类当中的方法和成员变量，可是父类当中的某一些方法，不适合子类本身\n不适合子类的方法，可以覆盖，重新定义这个方法\n\n运行一个方法会在子类中找，有就调用，没有去父类中查找\n\n覆盖方法的原则：\n1. 必须得要跟父类当中的方法签名相同（签名：方法的名称+参数）\n2. 返回值类型必须得要和父类一样\n3. 访问权限不能比父类的还小\n\n判断是否是覆写方法：@Override标签,写在重写方法前一行，如果不是重写的方法编译会报错\n\n#### 方法重载与方法重写\n方法重载 Overload\n- 作用：解决了同一个类中，相同功能的方法名不同的问题\n- 规则：同类中，**方法名相同，方法参数列表不同**\n\n\n方法重写 Override\n- 作用：解决子类继承父类之后，可能父类的某一个方法不满足子类的具体特征，需要重新在子类中定义该方法，并重写方法体\n- 规则：**父类和子类的方法签名是相同的**\n\n#### super关键字\n代表是父类对象，到父类当中去找指定的方法\n\n内存分析：\n在类加载字节码时，会先判断有没有父类，如果有，会先把父类加载成字节码放到内存当中，然后再去把自己加载到内存（方法区）\n\n如果一个类有父类的，会在构造器当中，默认调用父类的构造器（**子类构造器第一句默认super( );** ）\n\nsuper( ) 调用父类构造方法 必须放在第一行\n凡是子类的构造方法当中都会有super( );\nthis()和super() 构造方法不能一起使用，因为两个都要求放第一行\n父类中定义了带参构造（就不会生成无参构造），子类一定要手动调用父类的带参构造器，不调用就报错\n\nsuper不能直接打印\n#### 字段隐藏\n1. this.字段或方法先到本类当中去找指定的内容，如果没有，再去到父当中去找\n如果父类有，再去看一下父类允不允许继承，如果允许就使用父类的\n\nsuper直接到父类当中去找，使用super可以访问父类被隐藏的字段\n\n2. **方法的隐藏**：子类和父类当中有相同的静态方法（**不是静态就是方法覆盖**）\n因为是静态，所以用对象名调用的本质还是用类名调用\n- 用子类对象调用，就是执行子类的静态方法\n- 用父类对象调用，就是执行子类的静态方法\n\n3. 本类隐藏：方法参数和本类字段名相同\n   用this.字段\n```java\n    String name=\"al\";\n        void test(String name) {\n            System.out.println(name);\n            System.out.println(this.name);//本类隐藏，用this关键字\n    }\n\n\n```\n\n#### Object类\nObject类是Java语言的根类，要么是一个类的直接父类，要么就是一个类的间接父类\nObject提供方法\n- hasCode( )\n- equals( ) //判断两个对象地址是否相等\n- getClass() //获取当前对象的真实类型\n- toString( )//打印对象地址值\n        ```java\n        System.out.print(对象名.toString);\n        //等价于\n        System.out.print(对象名)\n        ```\n可以用Eclipse自动生成重写这些方法\n\n#### 多态思想\n一个对象有多种形态 就称它是多态\n一个表示自己的类，一个表示自己父类的类型\n```java\nDog dog =new Dog( );\nAnimal dog =new Dog( );\n```\n多态特点：把子类对象赋给父类变量，在运行时期会表现出具体的**子类特征**\n\n多态优点\n```java\n\tclass Person {\n\t    \n\t    //有多种动物，要定义多种feed类\n\t    void feedCat(Cat cat) {\n\t        cat.eat();\n\t    }\n\t    void feedDog(Dog dog) {\n\t        dog.eat();\n\t    }\n\t    \n\t    //多态做法\n\t    void feedAnimal(Animal animal) {\n\t        animal.eat();\n\t    }\n\t    \n\t}\n\t\n\t\n\tpublic static void main(String[] args) {\n\t        Dog dog =new Dog();\n\t        Cat cat =new Cat();\n\t        \n\t        Person p=new Person();\n\t        //一般做法\n\t        p.feedCat(cat);\n\t        p.feedDog(dog);\n\t        //多态做法\n\t        p.feedAnimal(cat);\n\t        p.feedAnimal(dog);\n\t        \n\t    }\n\n```\n\n多态作用\n- 当把不同的子类对象都当作父类类型来看待，可以屏蔽不同子类对象之间的实现差异\n- 从而写出通用的代码达到通用编程，以适应需求的不断变化\n- 在这里使用了多态后，只需要写一个方法就能达到相同的功能（子类没有这个方法，会到父类种找）\n\n\n#### instanceof关键字\n类的强制类型转换：把父类对象赋值给子类类型\n判断一个对象是否是指定的类，如果是返回true不是，就返回false\n\n```java\n//Person类\nclass Person {\n\n\tvoid feed(Animal animal) {\n\t\tif (animal instanceof Dog) {\n\t\t\tDog dog = (Dog) animal;// 把Animal强制成Dog\n\t\t\tdog.eat();\n\t\t} else if (animal instanceof Cat) {\n\t\t\tCat cat = (Cat) animal;\n\t\t\tcat.eat();\n\t\t}\n\t}\n}\n\n//main方法\npublic static void main(String[] args) {\n    Person p = new Person();\n    Animal cat =new Cat();\n    Animal dog =new Dog();\n    p.feed(cat);\n    p.feed(dog);\n}\n```\n\n#### 多态中字段的注意点\n**方法存在多态，字段不存在多态**\n**字段前面对象是什么类型，就调用谁的**，**在编译的时候，就已经确定要去调用谁的**\n\n--- \n\n## 参考资料\n[Java零基础到高级JavaEE就业实战](https://study.163.com/course/introduction/1005537028.htm)","source":"_posts/java-note-3.md","raw":"---\ntitle: Java笔记-面向对象2\ncategories: Java笔记\ndate: 2019-12-28 22:37:05\n---\n#### 包\n规范：\n1. 遵循关键字，全部小写\n2. 企业开发包名用公司域名倒写 域名倒写.模块名.组件名\n\n类的全限定名称：包名.类名\n\n静态导入：把其他包里面的内容在本类当中使用、不需要使用类名调用，直接使用包里面的方法\n\nimport static java.util.Arrays.sort;\n\n不推荐用：1.有些方法不能这么用比如toString，2.不知道是自己写的还是导入的\n\n#### 封装思想\n写一个用户注册，有很多信息需要填写，如果写方法，需要传入很多参数，有很多参数是非必要的但是都要写\n方法重载写起来麻烦\n封装到一个对象里，那就只要传一个参数即可new一个对象，其他用初始值，当成一个整体\n\n优点：\n1.参数少了很多，传的是一个对象，把某些信息当成一个整体去使用\n2.安全性：变量加private，不允许外部读取或者修改它\n\n\n#### 访问修饰符\n![高新强](java-note-3/1.png)\n\n默认和protected的区别：同包下都可以访问，但是只要继承默认权限就不能访问，protected则可以访问\n使用不同包的成员需要导入\n\n#### 属性概念\n字段或者成员变量 加上get和set方法才能叫属性\nEclipse自动生成右键 -> Source -> Generate Getters and Setters…\n\n#### this关键字\nthis:  “这个”指向当前正在使用对象的地址\n\n注意点：\n1. 帮我们区分成员变量和局部变量的二异性，必须得要使用this\n2. 在同类当中，实例方法的调用，前面其实是有this，可以省略\n3. 可以把this做为参数传递\n4. 可以当做返回值返回\n5. **static不能和this一起使用**\n6. 构造器的重载互调，this ( )；此时this代表是构造器名，**必须写到第一行**\n\n\n#### 继承思想\n老师、学生、员工这些类都有一些相同的变量：比如姓名、年龄，还有相同的方法比如吃\n代码出现重复，可以通过继承来解决这个问题\n\n父类：存放共同的状态和行为被继承的类我们称为父类或超类、基类、拓展类。\n子类：存放自己特有的状态和行为\n\n继承是一种从一般到特殊的关系，是一种“is a ”的关系，即子类是对父类的派生，是一种特殊的父类\n比如：狗是动物的一种特殊情况，狗属于动物。\n\n一般的，在开发工程中先编写多个自定义类，写完之后，发现多个类之间存在共同的代码，此时可以抽去出一个父类\n\n如果父类中的成员使用protected修饰，子类也继承，不同包也能继承\n父类的构造器，子类也不能继承，因为构造器必须和当前的类名相同\n\n#### 继承方法的覆盖\n子类你扩展了父类，就获得了父类当中的方法和成员变量，可是父类当中的某一些方法，不适合子类本身\n不适合子类的方法，可以覆盖，重新定义这个方法\n\n运行一个方法会在子类中找，有就调用，没有去父类中查找\n\n覆盖方法的原则：\n1. 必须得要跟父类当中的方法签名相同（签名：方法的名称+参数）\n2. 返回值类型必须得要和父类一样\n3. 访问权限不能比父类的还小\n\n判断是否是覆写方法：@Override标签,写在重写方法前一行，如果不是重写的方法编译会报错\n\n#### 方法重载与方法重写\n方法重载 Overload\n- 作用：解决了同一个类中，相同功能的方法名不同的问题\n- 规则：同类中，**方法名相同，方法参数列表不同**\n\n\n方法重写 Override\n- 作用：解决子类继承父类之后，可能父类的某一个方法不满足子类的具体特征，需要重新在子类中定义该方法，并重写方法体\n- 规则：**父类和子类的方法签名是相同的**\n\n#### super关键字\n代表是父类对象，到父类当中去找指定的方法\n\n内存分析：\n在类加载字节码时，会先判断有没有父类，如果有，会先把父类加载成字节码放到内存当中，然后再去把自己加载到内存（方法区）\n\n如果一个类有父类的，会在构造器当中，默认调用父类的构造器（**子类构造器第一句默认super( );** ）\n\nsuper( ) 调用父类构造方法 必须放在第一行\n凡是子类的构造方法当中都会有super( );\nthis()和super() 构造方法不能一起使用，因为两个都要求放第一行\n父类中定义了带参构造（就不会生成无参构造），子类一定要手动调用父类的带参构造器，不调用就报错\n\nsuper不能直接打印\n#### 字段隐藏\n1. this.字段或方法先到本类当中去找指定的内容，如果没有，再去到父当中去找\n如果父类有，再去看一下父类允不允许继承，如果允许就使用父类的\n\nsuper直接到父类当中去找，使用super可以访问父类被隐藏的字段\n\n2. **方法的隐藏**：子类和父类当中有相同的静态方法（**不是静态就是方法覆盖**）\n因为是静态，所以用对象名调用的本质还是用类名调用\n- 用子类对象调用，就是执行子类的静态方法\n- 用父类对象调用，就是执行子类的静态方法\n\n3. 本类隐藏：方法参数和本类字段名相同\n   用this.字段\n```java\n    String name=\"al\";\n        void test(String name) {\n            System.out.println(name);\n            System.out.println(this.name);//本类隐藏，用this关键字\n    }\n\n\n```\n\n#### Object类\nObject类是Java语言的根类，要么是一个类的直接父类，要么就是一个类的间接父类\nObject提供方法\n- hasCode( )\n- equals( ) //判断两个对象地址是否相等\n- getClass() //获取当前对象的真实类型\n- toString( )//打印对象地址值\n        ```java\n        System.out.print(对象名.toString);\n        //等价于\n        System.out.print(对象名)\n        ```\n可以用Eclipse自动生成重写这些方法\n\n#### 多态思想\n一个对象有多种形态 就称它是多态\n一个表示自己的类，一个表示自己父类的类型\n```java\nDog dog =new Dog( );\nAnimal dog =new Dog( );\n```\n多态特点：把子类对象赋给父类变量，在运行时期会表现出具体的**子类特征**\n\n多态优点\n```java\n\tclass Person {\n\t    \n\t    //有多种动物，要定义多种feed类\n\t    void feedCat(Cat cat) {\n\t        cat.eat();\n\t    }\n\t    void feedDog(Dog dog) {\n\t        dog.eat();\n\t    }\n\t    \n\t    //多态做法\n\t    void feedAnimal(Animal animal) {\n\t        animal.eat();\n\t    }\n\t    \n\t}\n\t\n\t\n\tpublic static void main(String[] args) {\n\t        Dog dog =new Dog();\n\t        Cat cat =new Cat();\n\t        \n\t        Person p=new Person();\n\t        //一般做法\n\t        p.feedCat(cat);\n\t        p.feedDog(dog);\n\t        //多态做法\n\t        p.feedAnimal(cat);\n\t        p.feedAnimal(dog);\n\t        \n\t    }\n\n```\n\n多态作用\n- 当把不同的子类对象都当作父类类型来看待，可以屏蔽不同子类对象之间的实现差异\n- 从而写出通用的代码达到通用编程，以适应需求的不断变化\n- 在这里使用了多态后，只需要写一个方法就能达到相同的功能（子类没有这个方法，会到父类种找）\n\n\n#### instanceof关键字\n类的强制类型转换：把父类对象赋值给子类类型\n判断一个对象是否是指定的类，如果是返回true不是，就返回false\n\n```java\n//Person类\nclass Person {\n\n\tvoid feed(Animal animal) {\n\t\tif (animal instanceof Dog) {\n\t\t\tDog dog = (Dog) animal;// 把Animal强制成Dog\n\t\t\tdog.eat();\n\t\t} else if (animal instanceof Cat) {\n\t\t\tCat cat = (Cat) animal;\n\t\t\tcat.eat();\n\t\t}\n\t}\n}\n\n//main方法\npublic static void main(String[] args) {\n    Person p = new Person();\n    Animal cat =new Cat();\n    Animal dog =new Dog();\n    p.feed(cat);\n    p.feed(dog);\n}\n```\n\n#### 多态中字段的注意点\n**方法存在多态，字段不存在多态**\n**字段前面对象是什么类型，就调用谁的**，**在编译的时候，就已经确定要去调用谁的**\n\n--- \n\n## 参考资料\n[Java零基础到高级JavaEE就业实战](https://study.163.com/course/introduction/1005537028.htm)","slug":"java-note-3","published":1,"updated":"2020-06-13T02:55:34.735Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke3x9g4y000lzgvug8z461ta","content":"<h4 id=\"包\"><a href=\"#包\" class=\"headerlink\" title=\"包\"></a>包</h4><p>规范：</p>\n<ol>\n<li>遵循关键字，全部小写</li>\n<li>企业开发包名用公司域名倒写 域名倒写.模块名.组件名</li>\n</ol>\n<p>类的全限定名称：包名.类名</p>\n<p>静态导入：把其他包里面的内容在本类当中使用、不需要使用类名调用，直接使用包里面的方法</p>\n<p>import static java.util.Arrays.sort;</p>\n<p>不推荐用：1.有些方法不能这么用比如toString，2.不知道是自己写的还是导入的</p>\n<h4 id=\"封装思想\"><a href=\"#封装思想\" class=\"headerlink\" title=\"封装思想\"></a>封装思想</h4><p>写一个用户注册，有很多信息需要填写，如果写方法，需要传入很多参数，有很多参数是非必要的但是都要写<br>方法重载写起来麻烦<br>封装到一个对象里，那就只要传一个参数即可new一个对象，其他用初始值，当成一个整体</p>\n<p>优点：<br>1.参数少了很多，传的是一个对象，把某些信息当成一个整体去使用<br>2.安全性：变量加private，不允许外部读取或者修改它</p>\n<h4 id=\"访问修饰符\"><a href=\"#访问修饰符\" class=\"headerlink\" title=\"访问修饰符\"></a>访问修饰符</h4><p><img src=\"/2019/12/28/java-note-3/1.png\" alt=\"高新强\"></p>\n<p>默认和protected的区别：同包下都可以访问，但是只要继承默认权限就不能访问，protected则可以访问<br>使用不同包的成员需要导入</p>\n<h4 id=\"属性概念\"><a href=\"#属性概念\" class=\"headerlink\" title=\"属性概念\"></a>属性概念</h4><p>字段或者成员变量 加上get和set方法才能叫属性<br>Eclipse自动生成右键 -&gt; Source -&gt; Generate Getters and Setters…</p>\n<h4 id=\"this关键字\"><a href=\"#this关键字\" class=\"headerlink\" title=\"this关键字\"></a>this关键字</h4><p>this:  “这个”指向当前正在使用对象的地址</p>\n<p>注意点：</p>\n<ol>\n<li>帮我们区分成员变量和局部变量的二异性，必须得要使用this</li>\n<li>在同类当中，实例方法的调用，前面其实是有this，可以省略</li>\n<li>可以把this做为参数传递</li>\n<li>可以当做返回值返回</li>\n<li><strong>static不能和this一起使用</strong></li>\n<li>构造器的重载互调，this ( )；此时this代表是构造器名，<strong>必须写到第一行</strong></li>\n</ol>\n<h4 id=\"继承思想\"><a href=\"#继承思想\" class=\"headerlink\" title=\"继承思想\"></a>继承思想</h4><p>老师、学生、员工这些类都有一些相同的变量：比如姓名、年龄，还有相同的方法比如吃<br>代码出现重复，可以通过继承来解决这个问题</p>\n<p>父类：存放共同的状态和行为被继承的类我们称为父类或超类、基类、拓展类。<br>子类：存放自己特有的状态和行为</p>\n<p>继承是一种从一般到特殊的关系，是一种“is a ”的关系，即子类是对父类的派生，是一种特殊的父类<br>比如：狗是动物的一种特殊情况，狗属于动物。</p>\n<p>一般的，在开发工程中先编写多个自定义类，写完之后，发现多个类之间存在共同的代码，此时可以抽去出一个父类</p>\n<p>如果父类中的成员使用protected修饰，子类也继承，不同包也能继承<br>父类的构造器，子类也不能继承，因为构造器必须和当前的类名相同</p>\n<h4 id=\"继承方法的覆盖\"><a href=\"#继承方法的覆盖\" class=\"headerlink\" title=\"继承方法的覆盖\"></a>继承方法的覆盖</h4><p>子类你扩展了父类，就获得了父类当中的方法和成员变量，可是父类当中的某一些方法，不适合子类本身<br>不适合子类的方法，可以覆盖，重新定义这个方法</p>\n<p>运行一个方法会在子类中找，有就调用，没有去父类中查找</p>\n<p>覆盖方法的原则：</p>\n<ol>\n<li>必须得要跟父类当中的方法签名相同（签名：方法的名称+参数）</li>\n<li>返回值类型必须得要和父类一样</li>\n<li>访问权限不能比父类的还小</li>\n</ol>\n<p>判断是否是覆写方法：@Override标签,写在重写方法前一行，如果不是重写的方法编译会报错</p>\n<h4 id=\"方法重载与方法重写\"><a href=\"#方法重载与方法重写\" class=\"headerlink\" title=\"方法重载与方法重写\"></a>方法重载与方法重写</h4><p>方法重载 Overload</p>\n<ul>\n<li>作用：解决了同一个类中，相同功能的方法名不同的问题</li>\n<li>规则：同类中，<strong>方法名相同，方法参数列表不同</strong></li>\n</ul>\n<p>方法重写 Override</p>\n<ul>\n<li>作用：解决子类继承父类之后，可能父类的某一个方法不满足子类的具体特征，需要重新在子类中定义该方法，并重写方法体</li>\n<li>规则：<strong>父类和子类的方法签名是相同的</strong></li>\n</ul>\n<h4 id=\"super关键字\"><a href=\"#super关键字\" class=\"headerlink\" title=\"super关键字\"></a>super关键字</h4><p>代表是父类对象，到父类当中去找指定的方法</p>\n<p>内存分析：<br>在类加载字节码时，会先判断有没有父类，如果有，会先把父类加载成字节码放到内存当中，然后再去把自己加载到内存（方法区）</p>\n<p>如果一个类有父类的，会在构造器当中，默认调用父类的构造器（<strong>子类构造器第一句默认super( );</strong> ）</p>\n<p>super( ) 调用父类构造方法 必须放在第一行<br>凡是子类的构造方法当中都会有super( );<br>this()和super() 构造方法不能一起使用，因为两个都要求放第一行<br>父类中定义了带参构造（就不会生成无参构造），子类一定要手动调用父类的带参构造器，不调用就报错</p>\n<p>super不能直接打印</p>\n<h4 id=\"字段隐藏\"><a href=\"#字段隐藏\" class=\"headerlink\" title=\"字段隐藏\"></a>字段隐藏</h4><ol>\n<li>this.字段或方法先到本类当中去找指定的内容，如果没有，再去到父当中去找<br>如果父类有，再去看一下父类允不允许继承，如果允许就使用父类的</li>\n</ol>\n<p>super直接到父类当中去找，使用super可以访问父类被隐藏的字段</p>\n<ol start=\"2\">\n<li><strong>方法的隐藏</strong>：子类和父类当中有相同的静态方法（<strong>不是静态就是方法覆盖</strong>）<br>因为是静态，所以用对象名调用的本质还是用类名调用</li>\n</ol>\n<ul>\n<li>用子类对象调用，就是执行子类的静态方法</li>\n<li>用父类对象调用，就是执行子类的静态方法</li>\n</ul>\n<ol start=\"3\">\n<li>本类隐藏：方法参数和本类字段名相同<br>用this.字段<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String name=<span class=\"string\">\"al\"</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(name);</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">this</span>.name);<span class=\"comment\">//本类隐藏，用this关键字</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h4 id=\"Object类\"><a href=\"#Object类\" class=\"headerlink\" title=\"Object类\"></a>Object类</h4><p>Object类是Java语言的根类，要么是一个类的直接父类，要么就是一个类的间接父类<br>Object提供方法</p>\n<ul>\n<li>hasCode( )</li>\n<li>equals( ) //判断两个对象地址是否相等</li>\n<li>getClass() //获取当前对象的真实类型</li>\n<li>toString( )//打印对象地址值<pre><code><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.print(对象名.toString);</span><br><span class=\"line\"><span class=\"comment\">//等价于</span></span><br><span class=\"line\">System.out.print(对象名)</span><br></pre></td></tr></table></figure></code></pre>可以用Eclipse自动生成重写这些方法</li>\n</ul>\n<h4 id=\"多态思想\"><a href=\"#多态思想\" class=\"headerlink\" title=\"多态思想\"></a>多态思想</h4><p>一个对象有多种形态 就称它是多态<br>一个表示自己的类，一个表示自己父类的类型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Dog dog =<span class=\"keyword\">new</span> Dog( );</span><br><span class=\"line\">Animal dog =<span class=\"keyword\">new</span> Dog( );</span><br></pre></td></tr></table></figure>\n<p>多态特点：把子类对象赋给父类变量，在运行时期会表现出具体的<strong>子类特征</strong></p>\n<p>多态优点</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//有多种动物，要定义多种feed类</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">feedCat</span><span class=\"params\">(Cat cat)</span> </span>&#123;</span><br><span class=\"line\">        cat.eat();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">feedDog</span><span class=\"params\">(Dog dog)</span> </span>&#123;</span><br><span class=\"line\">        dog.eat();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//多态做法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">feedAnimal</span><span class=\"params\">(Animal animal)</span> </span>&#123;</span><br><span class=\"line\">        animal.eat();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Dog dog =<span class=\"keyword\">new</span> Dog();</span><br><span class=\"line\">        Cat cat =<span class=\"keyword\">new</span> Cat();</span><br><span class=\"line\">        </span><br><span class=\"line\">        Person p=<span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">        <span class=\"comment\">//一般做法</span></span><br><span class=\"line\">        p.feedCat(cat);</span><br><span class=\"line\">        p.feedDog(dog);</span><br><span class=\"line\">        <span class=\"comment\">//多态做法</span></span><br><span class=\"line\">        p.feedAnimal(cat);</span><br><span class=\"line\">        p.feedAnimal(dog);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>多态作用</p>\n<ul>\n<li>当把不同的子类对象都当作父类类型来看待，可以屏蔽不同子类对象之间的实现差异</li>\n<li>从而写出通用的代码达到通用编程，以适应需求的不断变化</li>\n<li>在这里使用了多态后，只需要写一个方法就能达到相同的功能（子类没有这个方法，会到父类种找）</li>\n</ul>\n<h4 id=\"instanceof关键字\"><a href=\"#instanceof关键字\" class=\"headerlink\" title=\"instanceof关键字\"></a>instanceof关键字</h4><p>类的强制类型转换：把父类对象赋值给子类类型<br>判断一个对象是否是指定的类，如果是返回true不是，就返回false</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Person类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">feed</span><span class=\"params\">(Animal animal)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (animal <span class=\"keyword\">instanceof</span> Dog) &#123;</span><br><span class=\"line\">\t\t\tDog dog = (Dog) animal;<span class=\"comment\">// 把Animal强制成Dog</span></span><br><span class=\"line\">\t\t\tdog.eat();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (animal <span class=\"keyword\">instanceof</span> Cat) &#123;</span><br><span class=\"line\">\t\t\tCat cat = (Cat) animal;</span><br><span class=\"line\">\t\t\tcat.eat();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//main方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Person p = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">    Animal cat =<span class=\"keyword\">new</span> Cat();</span><br><span class=\"line\">    Animal dog =<span class=\"keyword\">new</span> Dog();</span><br><span class=\"line\">    p.feed(cat);</span><br><span class=\"line\">    p.feed(dog);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"多态中字段的注意点\"><a href=\"#多态中字段的注意点\" class=\"headerlink\" title=\"多态中字段的注意点\"></a>多态中字段的注意点</h4><p><strong>方法存在多态，字段不存在多态</strong><br><strong>字段前面对象是什么类型，就调用谁的</strong>，<strong>在编译的时候，就已经确定要去调用谁的</strong></p>\n<hr>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005537028.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级JavaEE就业实战</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"包\"><a href=\"#包\" class=\"headerlink\" title=\"包\"></a>包</h4><p>规范：</p>\n<ol>\n<li>遵循关键字，全部小写</li>\n<li>企业开发包名用公司域名倒写 域名倒写.模块名.组件名</li>\n</ol>\n<p>类的全限定名称：包名.类名</p>\n<p>静态导入：把其他包里面的内容在本类当中使用、不需要使用类名调用，直接使用包里面的方法</p>\n<p>import static java.util.Arrays.sort;</p>\n<p>不推荐用：1.有些方法不能这么用比如toString，2.不知道是自己写的还是导入的</p>\n<h4 id=\"封装思想\"><a href=\"#封装思想\" class=\"headerlink\" title=\"封装思想\"></a>封装思想</h4><p>写一个用户注册，有很多信息需要填写，如果写方法，需要传入很多参数，有很多参数是非必要的但是都要写<br>方法重载写起来麻烦<br>封装到一个对象里，那就只要传一个参数即可new一个对象，其他用初始值，当成一个整体</p>\n<p>优点：<br>1.参数少了很多，传的是一个对象，把某些信息当成一个整体去使用<br>2.安全性：变量加private，不允许外部读取或者修改它</p>\n<h4 id=\"访问修饰符\"><a href=\"#访问修饰符\" class=\"headerlink\" title=\"访问修饰符\"></a>访问修饰符</h4><p><img src=\"/2019/12/28/java-note-3/1.png\" alt=\"高新强\"></p>\n<p>默认和protected的区别：同包下都可以访问，但是只要继承默认权限就不能访问，protected则可以访问<br>使用不同包的成员需要导入</p>\n<h4 id=\"属性概念\"><a href=\"#属性概念\" class=\"headerlink\" title=\"属性概念\"></a>属性概念</h4><p>字段或者成员变量 加上get和set方法才能叫属性<br>Eclipse自动生成右键 -&gt; Source -&gt; Generate Getters and Setters…</p>\n<h4 id=\"this关键字\"><a href=\"#this关键字\" class=\"headerlink\" title=\"this关键字\"></a>this关键字</h4><p>this:  “这个”指向当前正在使用对象的地址</p>\n<p>注意点：</p>\n<ol>\n<li>帮我们区分成员变量和局部变量的二异性，必须得要使用this</li>\n<li>在同类当中，实例方法的调用，前面其实是有this，可以省略</li>\n<li>可以把this做为参数传递</li>\n<li>可以当做返回值返回</li>\n<li><strong>static不能和this一起使用</strong></li>\n<li>构造器的重载互调，this ( )；此时this代表是构造器名，<strong>必须写到第一行</strong></li>\n</ol>\n<h4 id=\"继承思想\"><a href=\"#继承思想\" class=\"headerlink\" title=\"继承思想\"></a>继承思想</h4><p>老师、学生、员工这些类都有一些相同的变量：比如姓名、年龄，还有相同的方法比如吃<br>代码出现重复，可以通过继承来解决这个问题</p>\n<p>父类：存放共同的状态和行为被继承的类我们称为父类或超类、基类、拓展类。<br>子类：存放自己特有的状态和行为</p>\n<p>继承是一种从一般到特殊的关系，是一种“is a ”的关系，即子类是对父类的派生，是一种特殊的父类<br>比如：狗是动物的一种特殊情况，狗属于动物。</p>\n<p>一般的，在开发工程中先编写多个自定义类，写完之后，发现多个类之间存在共同的代码，此时可以抽去出一个父类</p>\n<p>如果父类中的成员使用protected修饰，子类也继承，不同包也能继承<br>父类的构造器，子类也不能继承，因为构造器必须和当前的类名相同</p>\n<h4 id=\"继承方法的覆盖\"><a href=\"#继承方法的覆盖\" class=\"headerlink\" title=\"继承方法的覆盖\"></a>继承方法的覆盖</h4><p>子类你扩展了父类，就获得了父类当中的方法和成员变量，可是父类当中的某一些方法，不适合子类本身<br>不适合子类的方法，可以覆盖，重新定义这个方法</p>\n<p>运行一个方法会在子类中找，有就调用，没有去父类中查找</p>\n<p>覆盖方法的原则：</p>\n<ol>\n<li>必须得要跟父类当中的方法签名相同（签名：方法的名称+参数）</li>\n<li>返回值类型必须得要和父类一样</li>\n<li>访问权限不能比父类的还小</li>\n</ol>\n<p>判断是否是覆写方法：@Override标签,写在重写方法前一行，如果不是重写的方法编译会报错</p>\n<h4 id=\"方法重载与方法重写\"><a href=\"#方法重载与方法重写\" class=\"headerlink\" title=\"方法重载与方法重写\"></a>方法重载与方法重写</h4><p>方法重载 Overload</p>\n<ul>\n<li>作用：解决了同一个类中，相同功能的方法名不同的问题</li>\n<li>规则：同类中，<strong>方法名相同，方法参数列表不同</strong></li>\n</ul>\n<p>方法重写 Override</p>\n<ul>\n<li>作用：解决子类继承父类之后，可能父类的某一个方法不满足子类的具体特征，需要重新在子类中定义该方法，并重写方法体</li>\n<li>规则：<strong>父类和子类的方法签名是相同的</strong></li>\n</ul>\n<h4 id=\"super关键字\"><a href=\"#super关键字\" class=\"headerlink\" title=\"super关键字\"></a>super关键字</h4><p>代表是父类对象，到父类当中去找指定的方法</p>\n<p>内存分析：<br>在类加载字节码时，会先判断有没有父类，如果有，会先把父类加载成字节码放到内存当中，然后再去把自己加载到内存（方法区）</p>\n<p>如果一个类有父类的，会在构造器当中，默认调用父类的构造器（<strong>子类构造器第一句默认super( );</strong> ）</p>\n<p>super( ) 调用父类构造方法 必须放在第一行<br>凡是子类的构造方法当中都会有super( );<br>this()和super() 构造方法不能一起使用，因为两个都要求放第一行<br>父类中定义了带参构造（就不会生成无参构造），子类一定要手动调用父类的带参构造器，不调用就报错</p>\n<p>super不能直接打印</p>\n<h4 id=\"字段隐藏\"><a href=\"#字段隐藏\" class=\"headerlink\" title=\"字段隐藏\"></a>字段隐藏</h4><ol>\n<li>this.字段或方法先到本类当中去找指定的内容，如果没有，再去到父当中去找<br>如果父类有，再去看一下父类允不允许继承，如果允许就使用父类的</li>\n</ol>\n<p>super直接到父类当中去找，使用super可以访问父类被隐藏的字段</p>\n<ol start=\"2\">\n<li><strong>方法的隐藏</strong>：子类和父类当中有相同的静态方法（<strong>不是静态就是方法覆盖</strong>）<br>因为是静态，所以用对象名调用的本质还是用类名调用</li>\n</ol>\n<ul>\n<li>用子类对象调用，就是执行子类的静态方法</li>\n<li>用父类对象调用，就是执行子类的静态方法</li>\n</ul>\n<ol start=\"3\">\n<li>本类隐藏：方法参数和本类字段名相同<br>用this.字段<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String name=<span class=\"string\">\"al\"</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(name);</span><br><span class=\"line\">        System.out.println(<span class=\"keyword\">this</span>.name);<span class=\"comment\">//本类隐藏，用this关键字</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h4 id=\"Object类\"><a href=\"#Object类\" class=\"headerlink\" title=\"Object类\"></a>Object类</h4><p>Object类是Java语言的根类，要么是一个类的直接父类，要么就是一个类的间接父类<br>Object提供方法</p>\n<ul>\n<li>hasCode( )</li>\n<li>equals( ) //判断两个对象地址是否相等</li>\n<li>getClass() //获取当前对象的真实类型</li>\n<li>toString( )//打印对象地址值<pre><code><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.print(对象名.toString);</span><br><span class=\"line\"><span class=\"comment\">//等价于</span></span><br><span class=\"line\">System.out.print(对象名)</span><br></pre></td></tr></table></figure></code></pre>可以用Eclipse自动生成重写这些方法</li>\n</ul>\n<h4 id=\"多态思想\"><a href=\"#多态思想\" class=\"headerlink\" title=\"多态思想\"></a>多态思想</h4><p>一个对象有多种形态 就称它是多态<br>一个表示自己的类，一个表示自己父类的类型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Dog dog =<span class=\"keyword\">new</span> Dog( );</span><br><span class=\"line\">Animal dog =<span class=\"keyword\">new</span> Dog( );</span><br></pre></td></tr></table></figure>\n<p>多态特点：把子类对象赋给父类变量，在运行时期会表现出具体的<strong>子类特征</strong></p>\n<p>多态优点</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//有多种动物，要定义多种feed类</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">feedCat</span><span class=\"params\">(Cat cat)</span> </span>&#123;</span><br><span class=\"line\">        cat.eat();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">feedDog</span><span class=\"params\">(Dog dog)</span> </span>&#123;</span><br><span class=\"line\">        dog.eat();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//多态做法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">feedAnimal</span><span class=\"params\">(Animal animal)</span> </span>&#123;</span><br><span class=\"line\">        animal.eat();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Dog dog =<span class=\"keyword\">new</span> Dog();</span><br><span class=\"line\">        Cat cat =<span class=\"keyword\">new</span> Cat();</span><br><span class=\"line\">        </span><br><span class=\"line\">        Person p=<span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">        <span class=\"comment\">//一般做法</span></span><br><span class=\"line\">        p.feedCat(cat);</span><br><span class=\"line\">        p.feedDog(dog);</span><br><span class=\"line\">        <span class=\"comment\">//多态做法</span></span><br><span class=\"line\">        p.feedAnimal(cat);</span><br><span class=\"line\">        p.feedAnimal(dog);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>多态作用</p>\n<ul>\n<li>当把不同的子类对象都当作父类类型来看待，可以屏蔽不同子类对象之间的实现差异</li>\n<li>从而写出通用的代码达到通用编程，以适应需求的不断变化</li>\n<li>在这里使用了多态后，只需要写一个方法就能达到相同的功能（子类没有这个方法，会到父类种找）</li>\n</ul>\n<h4 id=\"instanceof关键字\"><a href=\"#instanceof关键字\" class=\"headerlink\" title=\"instanceof关键字\"></a>instanceof关键字</h4><p>类的强制类型转换：把父类对象赋值给子类类型<br>判断一个对象是否是指定的类，如果是返回true不是，就返回false</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Person类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">feed</span><span class=\"params\">(Animal animal)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (animal <span class=\"keyword\">instanceof</span> Dog) &#123;</span><br><span class=\"line\">\t\t\tDog dog = (Dog) animal;<span class=\"comment\">// 把Animal强制成Dog</span></span><br><span class=\"line\">\t\t\tdog.eat();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (animal <span class=\"keyword\">instanceof</span> Cat) &#123;</span><br><span class=\"line\">\t\t\tCat cat = (Cat) animal;</span><br><span class=\"line\">\t\t\tcat.eat();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//main方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Person p = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">    Animal cat =<span class=\"keyword\">new</span> Cat();</span><br><span class=\"line\">    Animal dog =<span class=\"keyword\">new</span> Dog();</span><br><span class=\"line\">    p.feed(cat);</span><br><span class=\"line\">    p.feed(dog);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"多态中字段的注意点\"><a href=\"#多态中字段的注意点\" class=\"headerlink\" title=\"多态中字段的注意点\"></a>多态中字段的注意点</h4><p><strong>方法存在多态，字段不存在多态</strong><br><strong>字段前面对象是什么类型，就调用谁的</strong>，<strong>在编译的时候，就已经确定要去调用谁的</strong></p>\n<hr>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005537028.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级JavaEE就业实战</a></p>\n"},{"title":"Java笔记-面向对象3","date":"2019-12-29T00:36:40.000Z","_content":"#### 代码块\n\n在类中或方法中使用 { } 括起来的一段代码就称它是一个代码块\n代码块当中定义的变量，我们称它是局部变量\n\n1. 局部代码块：直接定义在方法内部的代码块  在调用方法的时候执行。（很少用，if while for（）{} 这个{} 就是局部代码块）\n2. 初始化代码块：直接在类当中定义代码块\n初始化代码块在运行时，还是要把它放到**构造方法**当中（编译时候直接初始代码块的写到构造方法第一行,带参无参都会）\n3. 静态代码块：在初始化代码块前面加上一个static\n在加载字节码时就会自动调用在主方法之前执行的。**只执行一次**（先执行静态代码块，然后再执行main）\n\n#### 组合关系和类的加载\n组合关系：自己当中的字段是一个“类”类型依赖其它的类（类的成员变量是另一个类）\n类加载：\n类在什么时候去加载：当第一次使用该类对象的时候，去加载到JVM当中\n**只加载一次，下一次直接从内存中使用了**\n\n\n#### 字段初始化\n1. 类的加载：第一次创建该类对象的时候，加载到内存中，加载时会执行static代码块\n2. 字段初始化\n- 静态字段：在静态代码块中初始化\n- 非静态字段：在构造器中初始化\n3. 子类构造器默认会调用父类构造器\n\n\n```java\nclass SuperClass{\n\tstatic {\n\t\tSystem.out.println(\"SuperClass static代码块\");\n\t}\n\tpublic SuperClass() {\n\t\tSystem.out.println(\"SuperClass 构造器\");\n\t}\n}\n\nclass SubClass extends SuperClass{\n\tstatic {\n\t\tSystem.out.println(\"SubClass static代码块\");\n\t}\n\tSubClass() {\n\t\tsuper();\n\t\tSystem.out.println(\"SubClass 构造器\");\n\t}\n}\n\n\npublic class MyXq {\n\t\n\t\n\t//private static MyXq xq=new MyXq(); //静态字段实在静态代码块中初始化\n\t//编译实际上是：\n\t \n\tprivate static MyXq xq=null;\n\tstatic {\n\t\txq=new MyXq();\n\t\tSystem.out.println(\"MyXq 类的static静态初始化 \");\n\t}\n\t\n\t\n\t\n\t\n\t//private SubClass sub=new SubClass();\n\t//编译实际上是:\n\tprivate SubClass sub=null;\n\tMyXq(){\n\t\tsub=new SubClass(); //在构造器中初始化\n\t\t\n\t\tSystem.out.println(\"MyXq构造器\");\n\t}\n\t\n\t\n\n\t\n\t\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(\"main\");\n\t}\n}\n\n/*\n输出结果：\nSuperClass static代码块\nSubClass static代码块\n\nSuperClass 构造器\nSubClass 构造器\n\nMyXq构造器\nMyXq 类的static静态初始化\nmain\n*/\n```\n1. 程序运行：执行main，在main之前需要对类初始化\n2. 对MyXq类进行初始化，会执行静态代码块：调用MyXq构造器\n3. MyXq构造器：new了一个SubClass，new之前先把SubClass这个类加载到内存，加载子类前会先判断有没有父类，如果有，会先把父类加载成字节码放到内存当中，然后再去把自己加载到内存，所以是先加载SuperClass，执行SuperClass的静态代码块，然后是SubClass的静态代码块\n4. 子类构造器第一句为super(),所以先执行SuperClass构造器，再执行SubClass构造器\n\n#### final关键字\n继承弊端：破坏了我们的封装，继承可去访问父类当中的实现细节，可以覆盖父类当中的方法\n\n字段：不能再去修改该字段\n方法：子类就能再去覆盖该方法\n类：该类就不能再去被继承\n\nfinal关键字：只能用，不能修改\n\n注意点：\n- final 修饰字段：必须得要自己手动设置初始值\n- final 修饰变量：就代表是一个常量，命令规则：所有的字母都大写MAX_VALUE\n- final 可以在局部代码块当中使用\n- final 修饰基本数据类型：值不能修改\n- final 修饰引用类型：可以修改类里面的成员，但是不能修改地址\n\n#### 单例设计模式\n设计模式：之前很多程序员经常无数次的尝试，总结出来一套最佳实践\n单例：一个类在内存当中只有一个对象。别人不能再去创建对象\n工具类一般都是单例设计模式\n工具类：把一些经常使用的功能，写在一个类当中，以后使用该功能时，直接调用\n\n\n饿汉模式（**这类的单例不能被继承**，因为子类默认有构造器，构造器默认有super()默认访问父类构造器，所以报错，其他形式单例可被继承）\n1.必须得要在该类中创建一个对象出来\n2.私有化自己的构造器。防止外界通过构造器来创建新的对象\n3.给外界提供一个方法，能够获取已经创建好的对象\n\n```java\nclass ToolUtil{\n\tprivate static ToolUtil instance=new ToolUtil();\n\tprivate ToolUtil(){}\n\t\n\tpublic static ToolUtil getInstantce() {\n\t\treturn instance;\n\t}\n}\n```\n优点\n1.控制资源的使用\n2.控制实例的产生数量，达到节省资源目的\n3.作为通信媒介，数据共享\n\n#### 包装类\n对基本数据类型进行包装，把基本数据类型包装一个对象。\n把基本数据类型变的更强大，以面向对象的思想来去使用这些类型。\n基本数据类型    包装类       （都是首字母大写，只有int和char是英文全称）\n\n| 基本数据类型 | 包装类| \n| :--: | :--: |\n| byte      |    Byte |           \n| short     |    Short|\n| int       |    **Integer**|\n| long      |    Long |\n| float     |     Float |\n| double    |  Double|\n| char      |    **Character** |\n| boolean   | Boolean|\n\n```java\npublic static void main(String[] args) {\n    int i=20;\n    Integer num=new Integer(i);\n    \n    System.out.println(num);\n    System.out.println(num.MAX_VALUE);//本质用类名调用 同下一行\n    System.out.println(Integer.MAX_VALUE);\n    System.out.println(Integer.MIN_VALUE);\n    System.out.println(num.TYPE);\n    \n    num=Integer.valueOf(30);\n}\n```\n\n装箱:基本数据类型 -> 包装类 \n拆箱:包装类->基本数据类型\n\n自动装箱 自动拆箱（语法糖）\n- 自动装箱\nInteger i1=10; \n//本质 Integer i1=Integer.valueOf(10);\n- 自动拆箱\nint i2=i; \n//本质int i2=i.intValue() ;\n\n#### 字符串与其他类型转换\n```java\n//字符串->包装类型\nInteger i =new Integer(\"10\");//字符串中不能有非数字，比如字母\n\n//包装类型->字符串\nString s=i.toString();\n\n//基本数据类型->字符串\nString str2=2+\"\";\n\n//字符串->基本数据类型\nString str3=\"2020\";\nint i3 =Integer.parseInt(str3);\n\n//字符串转boolean\nBoolean b=new Boolean(\"myxq\"); //除了字符串true其他都返回false\n```\n#### 基本数据类型和包装类区别\n1. 默认值\nint 0 \nInteger null\n2. 包装类当中提供了很多方法直接给我们使用如：\nInteger.toBinaryString(5)\n3. 集合框架当中不能存放基本数据类型，只能存对象\n\n什么时候使用基本数据类型什么时候使用包装类\n- 在类当中，成员变量一般都使用包装类\n- 在方法中，我们一般都使用基本数据类型\n\n方法中，基本数据类型存储在栈当中，包装类型存放在堆当中\n\n#### 包装类valueOf缓存设计\n用valueOf获取包装类对象，在缓存范围内直接使用缓存，超过缓存范围，则创建新的对象，返回新的地址\n- Boolean：(全部缓存)\n- Byte：(全部缓存)\n- Character(<= 127缓存)\n- Short(-128 — 127缓存)\n- Long(-128 — 127缓存)\n- Integer(-128 — 127缓存)\n- Float(没有缓存)\n- Doulbe(没有缓存)\n\n#### \t对基本数据类型包装的好处\n1.使用包装对象后，功能变的更加强大\n例如：使用Double表示一个人的分数，一个人的分数为0分，可以表示0.0，如果这个人没有来考试可以用null表示\n\n2.包装类当中给我们提供了很多方法\n例如：我们要将一个数据转成二进制，使用包装对象后，就可以直接调用方法\n\n---\n\n## 参考资料\n[Java零基础到高级JavaEE就业实战](https://study.163.com/course/introduction/1005537028.htm)\n[JAVA包装类的缓存范围](https://www.cnblogs.com/javatech/p/3650460.html)\n","source":"_posts/java-note-4.md","raw":"---\ntitle: Java笔记-面向对象3\ncategories: Java笔记\ndate: 2019-12-29 08:36:40\n---\n#### 代码块\n\n在类中或方法中使用 { } 括起来的一段代码就称它是一个代码块\n代码块当中定义的变量，我们称它是局部变量\n\n1. 局部代码块：直接定义在方法内部的代码块  在调用方法的时候执行。（很少用，if while for（）{} 这个{} 就是局部代码块）\n2. 初始化代码块：直接在类当中定义代码块\n初始化代码块在运行时，还是要把它放到**构造方法**当中（编译时候直接初始代码块的写到构造方法第一行,带参无参都会）\n3. 静态代码块：在初始化代码块前面加上一个static\n在加载字节码时就会自动调用在主方法之前执行的。**只执行一次**（先执行静态代码块，然后再执行main）\n\n#### 组合关系和类的加载\n组合关系：自己当中的字段是一个“类”类型依赖其它的类（类的成员变量是另一个类）\n类加载：\n类在什么时候去加载：当第一次使用该类对象的时候，去加载到JVM当中\n**只加载一次，下一次直接从内存中使用了**\n\n\n#### 字段初始化\n1. 类的加载：第一次创建该类对象的时候，加载到内存中，加载时会执行static代码块\n2. 字段初始化\n- 静态字段：在静态代码块中初始化\n- 非静态字段：在构造器中初始化\n3. 子类构造器默认会调用父类构造器\n\n\n```java\nclass SuperClass{\n\tstatic {\n\t\tSystem.out.println(\"SuperClass static代码块\");\n\t}\n\tpublic SuperClass() {\n\t\tSystem.out.println(\"SuperClass 构造器\");\n\t}\n}\n\nclass SubClass extends SuperClass{\n\tstatic {\n\t\tSystem.out.println(\"SubClass static代码块\");\n\t}\n\tSubClass() {\n\t\tsuper();\n\t\tSystem.out.println(\"SubClass 构造器\");\n\t}\n}\n\n\npublic class MyXq {\n\t\n\t\n\t//private static MyXq xq=new MyXq(); //静态字段实在静态代码块中初始化\n\t//编译实际上是：\n\t \n\tprivate static MyXq xq=null;\n\tstatic {\n\t\txq=new MyXq();\n\t\tSystem.out.println(\"MyXq 类的static静态初始化 \");\n\t}\n\t\n\t\n\t\n\t\n\t//private SubClass sub=new SubClass();\n\t//编译实际上是:\n\tprivate SubClass sub=null;\n\tMyXq(){\n\t\tsub=new SubClass(); //在构造器中初始化\n\t\t\n\t\tSystem.out.println(\"MyXq构造器\");\n\t}\n\t\n\t\n\n\t\n\t\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(\"main\");\n\t}\n}\n\n/*\n输出结果：\nSuperClass static代码块\nSubClass static代码块\n\nSuperClass 构造器\nSubClass 构造器\n\nMyXq构造器\nMyXq 类的static静态初始化\nmain\n*/\n```\n1. 程序运行：执行main，在main之前需要对类初始化\n2. 对MyXq类进行初始化，会执行静态代码块：调用MyXq构造器\n3. MyXq构造器：new了一个SubClass，new之前先把SubClass这个类加载到内存，加载子类前会先判断有没有父类，如果有，会先把父类加载成字节码放到内存当中，然后再去把自己加载到内存，所以是先加载SuperClass，执行SuperClass的静态代码块，然后是SubClass的静态代码块\n4. 子类构造器第一句为super(),所以先执行SuperClass构造器，再执行SubClass构造器\n\n#### final关键字\n继承弊端：破坏了我们的封装，继承可去访问父类当中的实现细节，可以覆盖父类当中的方法\n\n字段：不能再去修改该字段\n方法：子类就能再去覆盖该方法\n类：该类就不能再去被继承\n\nfinal关键字：只能用，不能修改\n\n注意点：\n- final 修饰字段：必须得要自己手动设置初始值\n- final 修饰变量：就代表是一个常量，命令规则：所有的字母都大写MAX_VALUE\n- final 可以在局部代码块当中使用\n- final 修饰基本数据类型：值不能修改\n- final 修饰引用类型：可以修改类里面的成员，但是不能修改地址\n\n#### 单例设计模式\n设计模式：之前很多程序员经常无数次的尝试，总结出来一套最佳实践\n单例：一个类在内存当中只有一个对象。别人不能再去创建对象\n工具类一般都是单例设计模式\n工具类：把一些经常使用的功能，写在一个类当中，以后使用该功能时，直接调用\n\n\n饿汉模式（**这类的单例不能被继承**，因为子类默认有构造器，构造器默认有super()默认访问父类构造器，所以报错，其他形式单例可被继承）\n1.必须得要在该类中创建一个对象出来\n2.私有化自己的构造器。防止外界通过构造器来创建新的对象\n3.给外界提供一个方法，能够获取已经创建好的对象\n\n```java\nclass ToolUtil{\n\tprivate static ToolUtil instance=new ToolUtil();\n\tprivate ToolUtil(){}\n\t\n\tpublic static ToolUtil getInstantce() {\n\t\treturn instance;\n\t}\n}\n```\n优点\n1.控制资源的使用\n2.控制实例的产生数量，达到节省资源目的\n3.作为通信媒介，数据共享\n\n#### 包装类\n对基本数据类型进行包装，把基本数据类型包装一个对象。\n把基本数据类型变的更强大，以面向对象的思想来去使用这些类型。\n基本数据类型    包装类       （都是首字母大写，只有int和char是英文全称）\n\n| 基本数据类型 | 包装类| \n| :--: | :--: |\n| byte      |    Byte |           \n| short     |    Short|\n| int       |    **Integer**|\n| long      |    Long |\n| float     |     Float |\n| double    |  Double|\n| char      |    **Character** |\n| boolean   | Boolean|\n\n```java\npublic static void main(String[] args) {\n    int i=20;\n    Integer num=new Integer(i);\n    \n    System.out.println(num);\n    System.out.println(num.MAX_VALUE);//本质用类名调用 同下一行\n    System.out.println(Integer.MAX_VALUE);\n    System.out.println(Integer.MIN_VALUE);\n    System.out.println(num.TYPE);\n    \n    num=Integer.valueOf(30);\n}\n```\n\n装箱:基本数据类型 -> 包装类 \n拆箱:包装类->基本数据类型\n\n自动装箱 自动拆箱（语法糖）\n- 自动装箱\nInteger i1=10; \n//本质 Integer i1=Integer.valueOf(10);\n- 自动拆箱\nint i2=i; \n//本质int i2=i.intValue() ;\n\n#### 字符串与其他类型转换\n```java\n//字符串->包装类型\nInteger i =new Integer(\"10\");//字符串中不能有非数字，比如字母\n\n//包装类型->字符串\nString s=i.toString();\n\n//基本数据类型->字符串\nString str2=2+\"\";\n\n//字符串->基本数据类型\nString str3=\"2020\";\nint i3 =Integer.parseInt(str3);\n\n//字符串转boolean\nBoolean b=new Boolean(\"myxq\"); //除了字符串true其他都返回false\n```\n#### 基本数据类型和包装类区别\n1. 默认值\nint 0 \nInteger null\n2. 包装类当中提供了很多方法直接给我们使用如：\nInteger.toBinaryString(5)\n3. 集合框架当中不能存放基本数据类型，只能存对象\n\n什么时候使用基本数据类型什么时候使用包装类\n- 在类当中，成员变量一般都使用包装类\n- 在方法中，我们一般都使用基本数据类型\n\n方法中，基本数据类型存储在栈当中，包装类型存放在堆当中\n\n#### 包装类valueOf缓存设计\n用valueOf获取包装类对象，在缓存范围内直接使用缓存，超过缓存范围，则创建新的对象，返回新的地址\n- Boolean：(全部缓存)\n- Byte：(全部缓存)\n- Character(<= 127缓存)\n- Short(-128 — 127缓存)\n- Long(-128 — 127缓存)\n- Integer(-128 — 127缓存)\n- Float(没有缓存)\n- Doulbe(没有缓存)\n\n#### \t对基本数据类型包装的好处\n1.使用包装对象后，功能变的更加强大\n例如：使用Double表示一个人的分数，一个人的分数为0分，可以表示0.0，如果这个人没有来考试可以用null表示\n\n2.包装类当中给我们提供了很多方法\n例如：我们要将一个数据转成二进制，使用包装对象后，就可以直接调用方法\n\n---\n\n## 参考资料\n[Java零基础到高级JavaEE就业实战](https://study.163.com/course/introduction/1005537028.htm)\n[JAVA包装类的缓存范围](https://www.cnblogs.com/javatech/p/3650460.html)\n","slug":"java-note-4","published":1,"updated":"2020-06-13T02:55:34.739Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke3x9g55000mzgvu65x1a40b","content":"<h4 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4><p>在类中或方法中使用 { } 括起来的一段代码就称它是一个代码块<br>代码块当中定义的变量，我们称它是局部变量</p>\n<ol>\n<li>局部代码块：直接定义在方法内部的代码块  在调用方法的时候执行。（很少用，if while for（）{} 这个{} 就是局部代码块）</li>\n<li>初始化代码块：直接在类当中定义代码块<br>初始化代码块在运行时，还是要把它放到<strong>构造方法</strong>当中（编译时候直接初始代码块的写到构造方法第一行,带参无参都会）</li>\n<li>静态代码块：在初始化代码块前面加上一个static<br>在加载字节码时就会自动调用在主方法之前执行的。<strong>只执行一次</strong>（先执行静态代码块，然后再执行main）</li>\n</ol>\n<h4 id=\"组合关系和类的加载\"><a href=\"#组合关系和类的加载\" class=\"headerlink\" title=\"组合关系和类的加载\"></a>组合关系和类的加载</h4><p>组合关系：自己当中的字段是一个“类”类型依赖其它的类（类的成员变量是另一个类）<br>类加载：<br>类在什么时候去加载：当第一次使用该类对象的时候，去加载到JVM当中<br><strong>只加载一次，下一次直接从内存中使用了</strong></p>\n<h4 id=\"字段初始化\"><a href=\"#字段初始化\" class=\"headerlink\" title=\"字段初始化\"></a>字段初始化</h4><ol>\n<li>类的加载：第一次创建该类对象的时候，加载到内存中，加载时会执行static代码块</li>\n<li>字段初始化</li>\n</ol>\n<ul>\n<li>静态字段：在静态代码块中初始化</li>\n<li>非静态字段：在构造器中初始化</li>\n</ul>\n<ol start=\"3\">\n<li>子类构造器默认会调用父类构造器</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SuperClass</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"SuperClass static代码块\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SuperClass</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"SuperClass 构造器\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubClass</span> <span class=\"keyword\">extends</span> <span class=\"title\">SuperClass</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"SubClass static代码块\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tSubClass() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"SubClass 构造器\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyXq</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//private static MyXq xq=new MyXq(); //静态字段实在静态代码块中初始化</span></span><br><span class=\"line\">\t<span class=\"comment\">//编译实际上是：</span></span><br><span class=\"line\">\t </span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> MyXq xq=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\t\txq=<span class=\"keyword\">new</span> MyXq();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"MyXq 类的static静态初始化 \"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//private SubClass sub=new SubClass();</span></span><br><span class=\"line\">\t<span class=\"comment\">//编译实际上是:</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> SubClass sub=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">\tMyXq()&#123;</span><br><span class=\"line\">\t\tsub=<span class=\"keyword\">new</span> SubClass(); <span class=\"comment\">//在构造器中初始化</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"MyXq构造器\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"main\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">输出结果：</span></span><br><span class=\"line\"><span class=\"comment\">SuperClass static代码块</span></span><br><span class=\"line\"><span class=\"comment\">SubClass static代码块</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">SuperClass 构造器</span></span><br><span class=\"line\"><span class=\"comment\">SubClass 构造器</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">MyXq构造器</span></span><br><span class=\"line\"><span class=\"comment\">MyXq 类的static静态初始化</span></span><br><span class=\"line\"><span class=\"comment\">main</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>程序运行：执行main，在main之前需要对类初始化</li>\n<li>对MyXq类进行初始化，会执行静态代码块：调用MyXq构造器</li>\n<li>MyXq构造器：new了一个SubClass，new之前先把SubClass这个类加载到内存，加载子类前会先判断有没有父类，如果有，会先把父类加载成字节码放到内存当中，然后再去把自己加载到内存，所以是先加载SuperClass，执行SuperClass的静态代码块，然后是SubClass的静态代码块</li>\n<li>子类构造器第一句为super(),所以先执行SuperClass构造器，再执行SubClass构造器</li>\n</ol>\n<h4 id=\"final关键字\"><a href=\"#final关键字\" class=\"headerlink\" title=\"final关键字\"></a>final关键字</h4><p>继承弊端：破坏了我们的封装，继承可去访问父类当中的实现细节，可以覆盖父类当中的方法</p>\n<p>字段：不能再去修改该字段<br>方法：子类就能再去覆盖该方法<br>类：该类就不能再去被继承</p>\n<p>final关键字：只能用，不能修改</p>\n<p>注意点：</p>\n<ul>\n<li>final 修饰字段：必须得要自己手动设置初始值</li>\n<li>final 修饰变量：就代表是一个常量，命令规则：所有的字母都大写MAX_VALUE</li>\n<li>final 可以在局部代码块当中使用</li>\n<li>final 修饰基本数据类型：值不能修改</li>\n<li>final 修饰引用类型：可以修改类里面的成员，但是不能修改地址</li>\n</ul>\n<h4 id=\"单例设计模式\"><a href=\"#单例设计模式\" class=\"headerlink\" title=\"单例设计模式\"></a>单例设计模式</h4><p>设计模式：之前很多程序员经常无数次的尝试，总结出来一套最佳实践<br>单例：一个类在内存当中只有一个对象。别人不能再去创建对象<br>工具类一般都是单例设计模式<br>工具类：把一些经常使用的功能，写在一个类当中，以后使用该功能时，直接调用</p>\n<p>饿汉模式（<strong>这类的单例不能被继承</strong>，因为子类默认有构造器，构造器默认有super()默认访问父类构造器，所以报错，其他形式单例可被继承）<br>1.必须得要在该类中创建一个对象出来<br>2.私有化自己的构造器。防止外界通过构造器来创建新的对象<br>3.给外界提供一个方法，能够获取已经创建好的对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ToolUtil</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ToolUtil instance=<span class=\"keyword\">new</span> ToolUtil();</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">ToolUtil</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ToolUtil <span class=\"title\">getInstantce</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>优点<br>1.控制资源的使用<br>2.控制实例的产生数量，达到节省资源目的<br>3.作为通信媒介，数据共享</p>\n<h4 id=\"包装类\"><a href=\"#包装类\" class=\"headerlink\" title=\"包装类\"></a>包装类</h4><p>对基本数据类型进行包装，把基本数据类型包装一个对象。<br>把基本数据类型变的更强大，以面向对象的思想来去使用这些类型。<br>基本数据类型    包装类       （都是首字母大写，只有int和char是英文全称）</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">基本数据类型</th>\n<th align=\"center\">包装类</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">byte</td>\n<td align=\"center\">Byte</td>\n</tr>\n<tr>\n<td align=\"center\">short</td>\n<td align=\"center\">Short</td>\n</tr>\n<tr>\n<td align=\"center\">int</td>\n<td align=\"center\"><strong>Integer</strong></td>\n</tr>\n<tr>\n<td align=\"center\">long</td>\n<td align=\"center\">Long</td>\n</tr>\n<tr>\n<td align=\"center\">float</td>\n<td align=\"center\">Float</td>\n</tr>\n<tr>\n<td align=\"center\">double</td>\n<td align=\"center\">Double</td>\n</tr>\n<tr>\n<td align=\"center\">char</td>\n<td align=\"center\"><strong>Character</strong></td>\n</tr>\n<tr>\n<td align=\"center\">boolean</td>\n<td align=\"center\">Boolean</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i=<span class=\"number\">20</span>;</span><br><span class=\"line\">    Integer num=<span class=\"keyword\">new</span> Integer(i);</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(num);</span><br><span class=\"line\">    System.out.println(num.MAX_VALUE);<span class=\"comment\">//本质用类名调用 同下一行</span></span><br><span class=\"line\">    System.out.println(Integer.MAX_VALUE);</span><br><span class=\"line\">    System.out.println(Integer.MIN_VALUE);</span><br><span class=\"line\">    System.out.println(num.TYPE);</span><br><span class=\"line\">    </span><br><span class=\"line\">    num=Integer.valueOf(<span class=\"number\">30</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>装箱:基本数据类型 -&gt; 包装类<br>拆箱:包装类-&gt;基本数据类型</p>\n<p>自动装箱 自动拆箱（语法糖）</p>\n<ul>\n<li>自动装箱<br>Integer i1=10;<br>//本质 Integer i1=Integer.valueOf(10);</li>\n<li>自动拆箱<br>int i2=i;<br>//本质int i2=i.intValue() ;</li>\n</ul>\n<h4 id=\"字符串与其他类型转换\"><a href=\"#字符串与其他类型转换\" class=\"headerlink\" title=\"字符串与其他类型转换\"></a>字符串与其他类型转换</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//字符串-&gt;包装类型</span></span><br><span class=\"line\">Integer i =<span class=\"keyword\">new</span> Integer(<span class=\"string\">\"10\"</span>);<span class=\"comment\">//字符串中不能有非数字，比如字母</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//包装类型-&gt;字符串</span></span><br><span class=\"line\">String s=i.toString();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//基本数据类型-&gt;字符串</span></span><br><span class=\"line\">String str2=<span class=\"number\">2</span>+<span class=\"string\">\"\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//字符串-&gt;基本数据类型</span></span><br><span class=\"line\">String str3=<span class=\"string\">\"2020\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> i3 =Integer.parseInt(str3);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//字符串转boolean</span></span><br><span class=\"line\">Boolean b=<span class=\"keyword\">new</span> Boolean(<span class=\"string\">\"myxq\"</span>); <span class=\"comment\">//除了字符串true其他都返回false</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"基本数据类型和包装类区别\"><a href=\"#基本数据类型和包装类区别\" class=\"headerlink\" title=\"基本数据类型和包装类区别\"></a>基本数据类型和包装类区别</h4><ol>\n<li>默认值<br>int 0<br>Integer null</li>\n<li>包装类当中提供了很多方法直接给我们使用如：<br>Integer.toBinaryString(5)</li>\n<li>集合框架当中不能存放基本数据类型，只能存对象</li>\n</ol>\n<p>什么时候使用基本数据类型什么时候使用包装类</p>\n<ul>\n<li>在类当中，成员变量一般都使用包装类</li>\n<li>在方法中，我们一般都使用基本数据类型</li>\n</ul>\n<p>方法中，基本数据类型存储在栈当中，包装类型存放在堆当中</p>\n<h4 id=\"包装类valueOf缓存设计\"><a href=\"#包装类valueOf缓存设计\" class=\"headerlink\" title=\"包装类valueOf缓存设计\"></a>包装类valueOf缓存设计</h4><p>用valueOf获取包装类对象，在缓存范围内直接使用缓存，超过缓存范围，则创建新的对象，返回新的地址</p>\n<ul>\n<li>Boolean：(全部缓存)</li>\n<li>Byte：(全部缓存)</li>\n<li>Character(&lt;= 127缓存)</li>\n<li>Short(-128 — 127缓存)</li>\n<li>Long(-128 — 127缓存)</li>\n<li>Integer(-128 — 127缓存)</li>\n<li>Float(没有缓存)</li>\n<li>Doulbe(没有缓存)</li>\n</ul>\n<h4 id=\"对基本数据类型包装的好处\"><a href=\"#对基本数据类型包装的好处\" class=\"headerlink\" title=\"对基本数据类型包装的好处\"></a>对基本数据类型包装的好处</h4><p>1.使用包装对象后，功能变的更加强大<br>例如：使用Double表示一个人的分数，一个人的分数为0分，可以表示0.0，如果这个人没有来考试可以用null表示</p>\n<p>2.包装类当中给我们提供了很多方法<br>例如：我们要将一个数据转成二进制，使用包装对象后，就可以直接调用方法</p>\n<hr>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005537028.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级JavaEE就业实战</a><br><a href=\"https://www.cnblogs.com/javatech/p/3650460.html\" target=\"_blank\" rel=\"noopener\">JAVA包装类的缓存范围</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h4><p>在类中或方法中使用 { } 括起来的一段代码就称它是一个代码块<br>代码块当中定义的变量，我们称它是局部变量</p>\n<ol>\n<li>局部代码块：直接定义在方法内部的代码块  在调用方法的时候执行。（很少用，if while for（）{} 这个{} 就是局部代码块）</li>\n<li>初始化代码块：直接在类当中定义代码块<br>初始化代码块在运行时，还是要把它放到<strong>构造方法</strong>当中（编译时候直接初始代码块的写到构造方法第一行,带参无参都会）</li>\n<li>静态代码块：在初始化代码块前面加上一个static<br>在加载字节码时就会自动调用在主方法之前执行的。<strong>只执行一次</strong>（先执行静态代码块，然后再执行main）</li>\n</ol>\n<h4 id=\"组合关系和类的加载\"><a href=\"#组合关系和类的加载\" class=\"headerlink\" title=\"组合关系和类的加载\"></a>组合关系和类的加载</h4><p>组合关系：自己当中的字段是一个“类”类型依赖其它的类（类的成员变量是另一个类）<br>类加载：<br>类在什么时候去加载：当第一次使用该类对象的时候，去加载到JVM当中<br><strong>只加载一次，下一次直接从内存中使用了</strong></p>\n<h4 id=\"字段初始化\"><a href=\"#字段初始化\" class=\"headerlink\" title=\"字段初始化\"></a>字段初始化</h4><ol>\n<li>类的加载：第一次创建该类对象的时候，加载到内存中，加载时会执行static代码块</li>\n<li>字段初始化</li>\n</ol>\n<ul>\n<li>静态字段：在静态代码块中初始化</li>\n<li>非静态字段：在构造器中初始化</li>\n</ul>\n<ol start=\"3\">\n<li>子类构造器默认会调用父类构造器</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SuperClass</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"SuperClass static代码块\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SuperClass</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"SuperClass 构造器\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubClass</span> <span class=\"keyword\">extends</span> <span class=\"title\">SuperClass</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"SubClass static代码块\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tSubClass() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"SubClass 构造器\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyXq</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//private static MyXq xq=new MyXq(); //静态字段实在静态代码块中初始化</span></span><br><span class=\"line\">\t<span class=\"comment\">//编译实际上是：</span></span><br><span class=\"line\">\t </span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> MyXq xq=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\t\txq=<span class=\"keyword\">new</span> MyXq();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"MyXq 类的static静态初始化 \"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//private SubClass sub=new SubClass();</span></span><br><span class=\"line\">\t<span class=\"comment\">//编译实际上是:</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> SubClass sub=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">\tMyXq()&#123;</span><br><span class=\"line\">\t\tsub=<span class=\"keyword\">new</span> SubClass(); <span class=\"comment\">//在构造器中初始化</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"MyXq构造器\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"main\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">输出结果：</span></span><br><span class=\"line\"><span class=\"comment\">SuperClass static代码块</span></span><br><span class=\"line\"><span class=\"comment\">SubClass static代码块</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">SuperClass 构造器</span></span><br><span class=\"line\"><span class=\"comment\">SubClass 构造器</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">MyXq构造器</span></span><br><span class=\"line\"><span class=\"comment\">MyXq 类的static静态初始化</span></span><br><span class=\"line\"><span class=\"comment\">main</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>程序运行：执行main，在main之前需要对类初始化</li>\n<li>对MyXq类进行初始化，会执行静态代码块：调用MyXq构造器</li>\n<li>MyXq构造器：new了一个SubClass，new之前先把SubClass这个类加载到内存，加载子类前会先判断有没有父类，如果有，会先把父类加载成字节码放到内存当中，然后再去把自己加载到内存，所以是先加载SuperClass，执行SuperClass的静态代码块，然后是SubClass的静态代码块</li>\n<li>子类构造器第一句为super(),所以先执行SuperClass构造器，再执行SubClass构造器</li>\n</ol>\n<h4 id=\"final关键字\"><a href=\"#final关键字\" class=\"headerlink\" title=\"final关键字\"></a>final关键字</h4><p>继承弊端：破坏了我们的封装，继承可去访问父类当中的实现细节，可以覆盖父类当中的方法</p>\n<p>字段：不能再去修改该字段<br>方法：子类就能再去覆盖该方法<br>类：该类就不能再去被继承</p>\n<p>final关键字：只能用，不能修改</p>\n<p>注意点：</p>\n<ul>\n<li>final 修饰字段：必须得要自己手动设置初始值</li>\n<li>final 修饰变量：就代表是一个常量，命令规则：所有的字母都大写MAX_VALUE</li>\n<li>final 可以在局部代码块当中使用</li>\n<li>final 修饰基本数据类型：值不能修改</li>\n<li>final 修饰引用类型：可以修改类里面的成员，但是不能修改地址</li>\n</ul>\n<h4 id=\"单例设计模式\"><a href=\"#单例设计模式\" class=\"headerlink\" title=\"单例设计模式\"></a>单例设计模式</h4><p>设计模式：之前很多程序员经常无数次的尝试，总结出来一套最佳实践<br>单例：一个类在内存当中只有一个对象。别人不能再去创建对象<br>工具类一般都是单例设计模式<br>工具类：把一些经常使用的功能，写在一个类当中，以后使用该功能时，直接调用</p>\n<p>饿汉模式（<strong>这类的单例不能被继承</strong>，因为子类默认有构造器，构造器默认有super()默认访问父类构造器，所以报错，其他形式单例可被继承）<br>1.必须得要在该类中创建一个对象出来<br>2.私有化自己的构造器。防止外界通过构造器来创建新的对象<br>3.给外界提供一个方法，能够获取已经创建好的对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ToolUtil</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ToolUtil instance=<span class=\"keyword\">new</span> ToolUtil();</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">ToolUtil</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ToolUtil <span class=\"title\">getInstantce</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>优点<br>1.控制资源的使用<br>2.控制实例的产生数量，达到节省资源目的<br>3.作为通信媒介，数据共享</p>\n<h4 id=\"包装类\"><a href=\"#包装类\" class=\"headerlink\" title=\"包装类\"></a>包装类</h4><p>对基本数据类型进行包装，把基本数据类型包装一个对象。<br>把基本数据类型变的更强大，以面向对象的思想来去使用这些类型。<br>基本数据类型    包装类       （都是首字母大写，只有int和char是英文全称）</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">基本数据类型</th>\n<th align=\"center\">包装类</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">byte</td>\n<td align=\"center\">Byte</td>\n</tr>\n<tr>\n<td align=\"center\">short</td>\n<td align=\"center\">Short</td>\n</tr>\n<tr>\n<td align=\"center\">int</td>\n<td align=\"center\"><strong>Integer</strong></td>\n</tr>\n<tr>\n<td align=\"center\">long</td>\n<td align=\"center\">Long</td>\n</tr>\n<tr>\n<td align=\"center\">float</td>\n<td align=\"center\">Float</td>\n</tr>\n<tr>\n<td align=\"center\">double</td>\n<td align=\"center\">Double</td>\n</tr>\n<tr>\n<td align=\"center\">char</td>\n<td align=\"center\"><strong>Character</strong></td>\n</tr>\n<tr>\n<td align=\"center\">boolean</td>\n<td align=\"center\">Boolean</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i=<span class=\"number\">20</span>;</span><br><span class=\"line\">    Integer num=<span class=\"keyword\">new</span> Integer(i);</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(num);</span><br><span class=\"line\">    System.out.println(num.MAX_VALUE);<span class=\"comment\">//本质用类名调用 同下一行</span></span><br><span class=\"line\">    System.out.println(Integer.MAX_VALUE);</span><br><span class=\"line\">    System.out.println(Integer.MIN_VALUE);</span><br><span class=\"line\">    System.out.println(num.TYPE);</span><br><span class=\"line\">    </span><br><span class=\"line\">    num=Integer.valueOf(<span class=\"number\">30</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>装箱:基本数据类型 -&gt; 包装类<br>拆箱:包装类-&gt;基本数据类型</p>\n<p>自动装箱 自动拆箱（语法糖）</p>\n<ul>\n<li>自动装箱<br>Integer i1=10;<br>//本质 Integer i1=Integer.valueOf(10);</li>\n<li>自动拆箱<br>int i2=i;<br>//本质int i2=i.intValue() ;</li>\n</ul>\n<h4 id=\"字符串与其他类型转换\"><a href=\"#字符串与其他类型转换\" class=\"headerlink\" title=\"字符串与其他类型转换\"></a>字符串与其他类型转换</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//字符串-&gt;包装类型</span></span><br><span class=\"line\">Integer i =<span class=\"keyword\">new</span> Integer(<span class=\"string\">\"10\"</span>);<span class=\"comment\">//字符串中不能有非数字，比如字母</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//包装类型-&gt;字符串</span></span><br><span class=\"line\">String s=i.toString();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//基本数据类型-&gt;字符串</span></span><br><span class=\"line\">String str2=<span class=\"number\">2</span>+<span class=\"string\">\"\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//字符串-&gt;基本数据类型</span></span><br><span class=\"line\">String str3=<span class=\"string\">\"2020\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> i3 =Integer.parseInt(str3);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//字符串转boolean</span></span><br><span class=\"line\">Boolean b=<span class=\"keyword\">new</span> Boolean(<span class=\"string\">\"myxq\"</span>); <span class=\"comment\">//除了字符串true其他都返回false</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"基本数据类型和包装类区别\"><a href=\"#基本数据类型和包装类区别\" class=\"headerlink\" title=\"基本数据类型和包装类区别\"></a>基本数据类型和包装类区别</h4><ol>\n<li>默认值<br>int 0<br>Integer null</li>\n<li>包装类当中提供了很多方法直接给我们使用如：<br>Integer.toBinaryString(5)</li>\n<li>集合框架当中不能存放基本数据类型，只能存对象</li>\n</ol>\n<p>什么时候使用基本数据类型什么时候使用包装类</p>\n<ul>\n<li>在类当中，成员变量一般都使用包装类</li>\n<li>在方法中，我们一般都使用基本数据类型</li>\n</ul>\n<p>方法中，基本数据类型存储在栈当中，包装类型存放在堆当中</p>\n<h4 id=\"包装类valueOf缓存设计\"><a href=\"#包装类valueOf缓存设计\" class=\"headerlink\" title=\"包装类valueOf缓存设计\"></a>包装类valueOf缓存设计</h4><p>用valueOf获取包装类对象，在缓存范围内直接使用缓存，超过缓存范围，则创建新的对象，返回新的地址</p>\n<ul>\n<li>Boolean：(全部缓存)</li>\n<li>Byte：(全部缓存)</li>\n<li>Character(&lt;= 127缓存)</li>\n<li>Short(-128 — 127缓存)</li>\n<li>Long(-128 — 127缓存)</li>\n<li>Integer(-128 — 127缓存)</li>\n<li>Float(没有缓存)</li>\n<li>Doulbe(没有缓存)</li>\n</ul>\n<h4 id=\"对基本数据类型包装的好处\"><a href=\"#对基本数据类型包装的好处\" class=\"headerlink\" title=\"对基本数据类型包装的好处\"></a>对基本数据类型包装的好处</h4><p>1.使用包装对象后，功能变的更加强大<br>例如：使用Double表示一个人的分数，一个人的分数为0分，可以表示0.0，如果这个人没有来考试可以用null表示</p>\n<p>2.包装类当中给我们提供了很多方法<br>例如：我们要将一个数据转成二进制，使用包装对象后，就可以直接调用方法</p>\n<hr>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005537028.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级JavaEE就业实战</a><br><a href=\"https://www.cnblogs.com/javatech/p/3650460.html\" target=\"_blank\" rel=\"noopener\">JAVA包装类的缓存范围</a></p>\n"},{"title":"Java笔记-面向对象4","date":"2019-12-30T07:16:57.000Z","_content":"#### 抽象\n求不同图形的面积\n定义一个Graph类，getArea方法求图形面积，不同的图形求面积算法是不一样，不同图形写不同子类，继承Graph类\n\n1. 每一个图形子类，都必须得要覆盖getArea方法，在每个里面写上自己的方法体\n2. 父类不知道方法体里面该怎么写，不需要方法体\n\n抽象方法（在方法前面添加了一个关键字abstract）：\n1. 没有方法体（但是有返回值）\n2. 必须要定义在抽象类当中或接口（在类前面添加上了一个abstract就成为了抽象类）\n3. 不能是私有的**private**（子类就不能访问该方法就不能重写），不能使用**final**修饰（final要求子类不能重写，但是abstract要求必须要重写），不能同时使用**static**（static属于类，方法属于对象）\n\n抽象类\n抽象类必须得要有子类才行（抽象类一般都当作父类来继承）\n\n抽象类的注意点：\n1. 抽象类是不能直接创建对象的（但**抽象类是有构造器的**）\n2. 抽象类当中，可以有抽象方法，也**可以有非抽象方法**（普通方法：给子类调用的）\n3. 子类没有去覆盖抽象方法，把子类也变成抽象类（子类没有实现抽象方法，有孙类孙类就要实现，总有人要还的）\n4. 构造方法不能定义为私有化（抽象方法必须得要让子类继承之后，才能实现内部的方法体）（子类继承的话，先去调用父类的构造方法）\n5. 抽象类不能使用final来去修饰\n\n抽象类和普通类的区别\n其实是一个不完整类。需要做为一个父类，子类才能完成对应的功能。\n命名：抽象类命令时，都喜欢在前面添加上一个Abstract\n\n抽象类与普通的类有什么区别？\n1. 普通类（方法，字段，构造器），抽象类都有\n2. 抽象不能创建对象\n3. 抽象类可以包含抽象方法，也可以包含非抽象方法\n4. 抽象类必须有子类才有意义\n\n\n#### 接口\n接口只定义了类应当遵循的规范，却不关心这些类的内部数据和其功能的实现细节\n站在程序角度上说接口只**规定了类里必须提供的方法，从而分离了规范和实现**，增强了系统的可拓展性和可维护性\n\nJava接口也是表示一种规范，使用**抽象方法**来去定义一组功能，必须要实现者给提供方法的实现\n\n\n接口命名：I+名字+able\n\n接口它其实是一个特殊的抽象类(abstract 可以不写)，接口也会生成对应的字节码\n\n内部方法的abstract可以省略不写，如果没有在方法前面添加abstract会在编译时自动的添加上public abstract\n```java\nvoid transData();\n//编译自动加上等同于：\npublic abstract void transData();\n```\n\n接口当中的注意点\n1. 接口是**没有构造器**，接口是不能创建对象\n2. 接口当中定义变量，都是**全局的静态常量**,少用\nString name=\"myxq\";\n编译后：public static final String name；   //final 修饰的变量必须初始化\n3. 接口当中定义的方法都是**公共的抽象方法**\nvoid transData（）;\n编译后：**public abstract** void transData（）;\n4. 接口可以多继承 (类不能多继承，接口继承的时候，不会去覆盖父接口的方法，因为没有方法体，所以无意义）\n```java\n    interface Iwalkable {\n        public abstract void walk(); // 接口方法默认public abstract ，可以不写\n    }\n\n    interface Iswimable {\n        void swim();\n    }\n\n    interface Iamphibiousable extends Iwalkable, Iswimable {\n    //\tvoid swim(); 接口继承的时候，一般都不进行方法覆盖，无意义\n    }\n\n```\n5. 接口中 可以定义内部类，内部类也是public abstract\n\n\n#### 接口的实现\n\n实现类 extends 父类（只能继承一个类）implements其它的接口（接口可以实现多个）\n例如：class Cat extends Animal implements Iwalkable{}\n\n在实现类当中必须得要去覆盖接口当中定义的方法\n实现的方法必须得是public（子类权限不能比父类小）\n\n\n多态\n```java\npublic static void main(String[] args) {\n    \n    //(Iamphibiousable接口可以说是forg的父类)\n    //多态写法，把子类对象赋值给父类类型\n    Iamphibiousable frog = new Frog();//面向接口编程\n    frog.swim();//多态运行时表现子类特征（编译看左边，运行看右边）\n}\n```\n运行时看左边的Iamphibiousable又没有swin方法（这里是继承自Iswimable），没有就报错，有的话运行右边的Frog类的的swim方法\n\n\n#### 接口和抽象类区别\n相同点\n1. 都是被其它类实现或者被继承\n2. 都不能实例化\n3. 都可以定义抽象方法，定义的抽象方法子类都必须得要覆盖\n\n不同点\n1. 抽象类当中是有构造器，接口是没有构造器\n2. 抽象类可以包含普通方法和抽象方法，接口当中只能有抽象方法，不能有普通方法（带有方法体）(Java8开始，接口可以有普通方法)\n3. 成员变量：抽象类当中默认的权限，接口当中默认：public static final变量 -> 全局静态常量    \n4. 方法：抽象类默认的权限，接口当中默认方法public abstract 方法名；\n\n#### 面向接口编程\n把实现类对象赋值给接口类型的变量\n好处：蔽了不同类之间实现差异，从而达到通用编程（就是多态的好处）\n\n1. 定义接口\n2. 定义接口实现类\n3. 创建具体对象\n#### 内部类\n定义在**类当中的一个类**\n\n为什么要使用内部类\n1.增强封装，把内部类隐藏在外部类当中，不允许其它类访问这个内部类\n2.增加了代码一个维护性\n3.内部类可以直接访问外部类当中的成员\n\n内部类的分类（4种）\n1.实例内部类：直接定义在类当中的一个类，在类前面没有任何一个修饰符\n2.静态内部类：在内部类前面加上一个static\n3.局部内部类：定义在方法的内部类\n4.匿名内部类：属于局部内部的一种特殊情况\n\n外部类的修饰符只能有两个：public或者默认修饰符，内部类可以使用很多个修饰符\n#### 实例内部类\n类当中的成员：\n字段\n方法\n内部类\n\n实例内部类：属于对象的内部类，不属于类的，不使用static修饰\n想要使用内部类，必须得要先创建外部类在内部类\n当中可以访问外部类中的成员，外部类是不能直接访问内部中的成员\n\n```java\nclass Outer {\n\tString name = \"Outer\";\n\n\tclass Inner {\n\t\tString name = \"Inner\";\n\n\t\tvoid test() {\n\t\t\tString name = \"Inner test()\";\n\t\t\t\n\t\t\tSystem.out.println(name);\n\t\t\tSystem.out.println(this.name);\n\t\t\tSystem.out.println(Outer.this.name); //调用外部类的变量\n\t\t}\n\t}\n}\n\npublic class Test {\n\tpublic static void main(String[] args) {\n\t\tOuter outer=new Outer(); //先new 外部类\n\t\tOuter.Inner inner=outer.new Inner();//赋值给 Inner inner 会报错\n\t\tinner.test();\n\t}\n}\n```\n\n创建内部类对象当中，会有一个**外部类的引用**\n![高新强](java-note-5/1.png)\n\n#### 静态内部类\n```java\nclass Outer {\n\tString name = \"Outer\";\n\tstatic String sname = \"Outer staic\";\n\n\tstatic class Inner {\n\t\tint i = 10;// 5.可以定义非静态成员\n\t\tstatic String iname = \"Inner static\";\n\n\t\tvoid test() {\n\t\t\tSystem.out.println(sname);\n\t\t\t// System.out.println(name); 报错，非静态变量,可以创建实例对象来访问\n\t\t\tSystem.out.println(new Outer().name);\n\n\t\t}\n\t}\n}\npublic class Test {\n\tpublic static void main(String[] args) {\n\t\t// 1.static 静态的，属于类，就不需要创建外部类\n\t\tOuter.Inner inner = new Outer.Inner(); // 类型Outer.Inner 和实例内部类相同\n\t\tinner.test();\n\n\t\t// 4.调用静态类中的静态变量\n\t\tSystem.out.println(Outer.Inner.iname);\n\t}\n}\n```\n\n静态内部类：在内部类前面加上static\n1. 静态内部类是**不需要创建外部对象**（因为是static，所以是属于类）\noutter.Inner in=new outter.Inner（）；\n2. 在静态内部类中，**没有外部类引用**\n3. 静态内部类，可以访问外部类的静态成员\n4. 访问静态内部类当中的静态成员Outter.Inner.iname\n5. 静态内部当中可以定义静态成员，也可以定义非静态成员\n\n\n\n####  局部内部类（少用）\n```java\nclass Outer {\n\n\tvoid myxq() {\n\n\t\tString name = \"Outer test()\";// 4.本质final 编译自动加\n\t\tclass Inner {// 局部内部类\n\n\t\t\t// 局部内部类的方法test\n\t\t\tvoid test() {\n\t\t\t\tSystem.out.println(name);\n\t\t\t\t//name=\"test\"; 因为是final 所以不能修改\n\t\t\t}\n\n\t\t}\n\t\tInner in = new Inner();\n\t\tin.test();\n\t}\n\n}\npublic class Test {\n\tpublic static void main(String[] args) {\n\t\tnew Outer().myxq();\n\n\t}\n}\n```\n定义在方法中的内部类\n1.不能用一些修饰符public private（因为只在方法的局部生效）\n2.只能在定义的方法中使用\n3.不能包含静态变量（staic是属于类，但是这个变量属于方法）\n4.可以包含局部变量，本质是final，编译自动加上（JDK1.8之后可以省略final）（这里的局部变量指的是与局部内部类同级的变量，就是在myxq方法里的局部变量，至于局部内部类里面非final也可以）\n\n内存分析\nmyxq方法栈帧 入栈 有一个变量name\n堆中创建Inner对象，地址0x0001赋值栈的in\nInner对象的test方法引用了name，指向栈里的\n![高新强](java-note-5/2.png)\n\nmyxq方法出栈后\n堆中一个对象没有人引用，它并不是直接就销毁\n所以name现在空指针\n所以引用的必须是final 常量（在方法区）\n![高新强](java-note-5/3.png)\n\n\n\n#### 匿名内部类\n```java\ninterface IUSB {\n\tvoid swapData();// public abstract\n}\n\nclass MotherBoard {\n\tvoid PluginIn(IUSB iusb) {\n\t\tiusb.swapData();\n\t}\n\n}\n\npublic class Test {\n\tpublic static void main(String[] args) {\n\t\tMotherBoard board = new MotherBoard();\n\n\t\t// 匿名内部类\n\t\tboard.PluginIn(new IUSB() { // 这里new的不是接口而是匿名内部类\n\n\t\t\t@Override\n\t\t\tpublic void swapData() {\n\t\t\t\tSystem.out.println(\"打印工作\");\n\t\t\t}\n\t\t}\n\n\t\t);\n\n\t}\n}\n```\n就是一个没有名字的局部内部类  安卓用的比较多\n匿名内部类是没有构造器\n只使用一次的时候,来去使用匿名内部类  \n\nnew 父类的构造器 或 接口( ){\n内部写的代码（在new时候就会自动执行）\n}      \n\n匿名内部类必须得要有父类才,或者是实现了接口\n\n---\n\n## 参考资料\n[Java零基础到高级JavaEE就业实战](https://study.163.com/course/introduction/1005537028.htm)\n","source":"_posts/java-note-5.md","raw":"---\ntitle: Java笔记-面向对象4\ncategories: Java笔记\ndate: 2019-12-30 15:16:57\n---\n#### 抽象\n求不同图形的面积\n定义一个Graph类，getArea方法求图形面积，不同的图形求面积算法是不一样，不同图形写不同子类，继承Graph类\n\n1. 每一个图形子类，都必须得要覆盖getArea方法，在每个里面写上自己的方法体\n2. 父类不知道方法体里面该怎么写，不需要方法体\n\n抽象方法（在方法前面添加了一个关键字abstract）：\n1. 没有方法体（但是有返回值）\n2. 必须要定义在抽象类当中或接口（在类前面添加上了一个abstract就成为了抽象类）\n3. 不能是私有的**private**（子类就不能访问该方法就不能重写），不能使用**final**修饰（final要求子类不能重写，但是abstract要求必须要重写），不能同时使用**static**（static属于类，方法属于对象）\n\n抽象类\n抽象类必须得要有子类才行（抽象类一般都当作父类来继承）\n\n抽象类的注意点：\n1. 抽象类是不能直接创建对象的（但**抽象类是有构造器的**）\n2. 抽象类当中，可以有抽象方法，也**可以有非抽象方法**（普通方法：给子类调用的）\n3. 子类没有去覆盖抽象方法，把子类也变成抽象类（子类没有实现抽象方法，有孙类孙类就要实现，总有人要还的）\n4. 构造方法不能定义为私有化（抽象方法必须得要让子类继承之后，才能实现内部的方法体）（子类继承的话，先去调用父类的构造方法）\n5. 抽象类不能使用final来去修饰\n\n抽象类和普通类的区别\n其实是一个不完整类。需要做为一个父类，子类才能完成对应的功能。\n命名：抽象类命令时，都喜欢在前面添加上一个Abstract\n\n抽象类与普通的类有什么区别？\n1. 普通类（方法，字段，构造器），抽象类都有\n2. 抽象不能创建对象\n3. 抽象类可以包含抽象方法，也可以包含非抽象方法\n4. 抽象类必须有子类才有意义\n\n\n#### 接口\n接口只定义了类应当遵循的规范，却不关心这些类的内部数据和其功能的实现细节\n站在程序角度上说接口只**规定了类里必须提供的方法，从而分离了规范和实现**，增强了系统的可拓展性和可维护性\n\nJava接口也是表示一种规范，使用**抽象方法**来去定义一组功能，必须要实现者给提供方法的实现\n\n\n接口命名：I+名字+able\n\n接口它其实是一个特殊的抽象类(abstract 可以不写)，接口也会生成对应的字节码\n\n内部方法的abstract可以省略不写，如果没有在方法前面添加abstract会在编译时自动的添加上public abstract\n```java\nvoid transData();\n//编译自动加上等同于：\npublic abstract void transData();\n```\n\n接口当中的注意点\n1. 接口是**没有构造器**，接口是不能创建对象\n2. 接口当中定义变量，都是**全局的静态常量**,少用\nString name=\"myxq\";\n编译后：public static final String name；   //final 修饰的变量必须初始化\n3. 接口当中定义的方法都是**公共的抽象方法**\nvoid transData（）;\n编译后：**public abstract** void transData（）;\n4. 接口可以多继承 (类不能多继承，接口继承的时候，不会去覆盖父接口的方法，因为没有方法体，所以无意义）\n```java\n    interface Iwalkable {\n        public abstract void walk(); // 接口方法默认public abstract ，可以不写\n    }\n\n    interface Iswimable {\n        void swim();\n    }\n\n    interface Iamphibiousable extends Iwalkable, Iswimable {\n    //\tvoid swim(); 接口继承的时候，一般都不进行方法覆盖，无意义\n    }\n\n```\n5. 接口中 可以定义内部类，内部类也是public abstract\n\n\n#### 接口的实现\n\n实现类 extends 父类（只能继承一个类）implements其它的接口（接口可以实现多个）\n例如：class Cat extends Animal implements Iwalkable{}\n\n在实现类当中必须得要去覆盖接口当中定义的方法\n实现的方法必须得是public（子类权限不能比父类小）\n\n\n多态\n```java\npublic static void main(String[] args) {\n    \n    //(Iamphibiousable接口可以说是forg的父类)\n    //多态写法，把子类对象赋值给父类类型\n    Iamphibiousable frog = new Frog();//面向接口编程\n    frog.swim();//多态运行时表现子类特征（编译看左边，运行看右边）\n}\n```\n运行时看左边的Iamphibiousable又没有swin方法（这里是继承自Iswimable），没有就报错，有的话运行右边的Frog类的的swim方法\n\n\n#### 接口和抽象类区别\n相同点\n1. 都是被其它类实现或者被继承\n2. 都不能实例化\n3. 都可以定义抽象方法，定义的抽象方法子类都必须得要覆盖\n\n不同点\n1. 抽象类当中是有构造器，接口是没有构造器\n2. 抽象类可以包含普通方法和抽象方法，接口当中只能有抽象方法，不能有普通方法（带有方法体）(Java8开始，接口可以有普通方法)\n3. 成员变量：抽象类当中默认的权限，接口当中默认：public static final变量 -> 全局静态常量    \n4. 方法：抽象类默认的权限，接口当中默认方法public abstract 方法名；\n\n#### 面向接口编程\n把实现类对象赋值给接口类型的变量\n好处：蔽了不同类之间实现差异，从而达到通用编程（就是多态的好处）\n\n1. 定义接口\n2. 定义接口实现类\n3. 创建具体对象\n#### 内部类\n定义在**类当中的一个类**\n\n为什么要使用内部类\n1.增强封装，把内部类隐藏在外部类当中，不允许其它类访问这个内部类\n2.增加了代码一个维护性\n3.内部类可以直接访问外部类当中的成员\n\n内部类的分类（4种）\n1.实例内部类：直接定义在类当中的一个类，在类前面没有任何一个修饰符\n2.静态内部类：在内部类前面加上一个static\n3.局部内部类：定义在方法的内部类\n4.匿名内部类：属于局部内部的一种特殊情况\n\n外部类的修饰符只能有两个：public或者默认修饰符，内部类可以使用很多个修饰符\n#### 实例内部类\n类当中的成员：\n字段\n方法\n内部类\n\n实例内部类：属于对象的内部类，不属于类的，不使用static修饰\n想要使用内部类，必须得要先创建外部类在内部类\n当中可以访问外部类中的成员，外部类是不能直接访问内部中的成员\n\n```java\nclass Outer {\n\tString name = \"Outer\";\n\n\tclass Inner {\n\t\tString name = \"Inner\";\n\n\t\tvoid test() {\n\t\t\tString name = \"Inner test()\";\n\t\t\t\n\t\t\tSystem.out.println(name);\n\t\t\tSystem.out.println(this.name);\n\t\t\tSystem.out.println(Outer.this.name); //调用外部类的变量\n\t\t}\n\t}\n}\n\npublic class Test {\n\tpublic static void main(String[] args) {\n\t\tOuter outer=new Outer(); //先new 外部类\n\t\tOuter.Inner inner=outer.new Inner();//赋值给 Inner inner 会报错\n\t\tinner.test();\n\t}\n}\n```\n\n创建内部类对象当中，会有一个**外部类的引用**\n![高新强](java-note-5/1.png)\n\n#### 静态内部类\n```java\nclass Outer {\n\tString name = \"Outer\";\n\tstatic String sname = \"Outer staic\";\n\n\tstatic class Inner {\n\t\tint i = 10;// 5.可以定义非静态成员\n\t\tstatic String iname = \"Inner static\";\n\n\t\tvoid test() {\n\t\t\tSystem.out.println(sname);\n\t\t\t// System.out.println(name); 报错，非静态变量,可以创建实例对象来访问\n\t\t\tSystem.out.println(new Outer().name);\n\n\t\t}\n\t}\n}\npublic class Test {\n\tpublic static void main(String[] args) {\n\t\t// 1.static 静态的，属于类，就不需要创建外部类\n\t\tOuter.Inner inner = new Outer.Inner(); // 类型Outer.Inner 和实例内部类相同\n\t\tinner.test();\n\n\t\t// 4.调用静态类中的静态变量\n\t\tSystem.out.println(Outer.Inner.iname);\n\t}\n}\n```\n\n静态内部类：在内部类前面加上static\n1. 静态内部类是**不需要创建外部对象**（因为是static，所以是属于类）\noutter.Inner in=new outter.Inner（）；\n2. 在静态内部类中，**没有外部类引用**\n3. 静态内部类，可以访问外部类的静态成员\n4. 访问静态内部类当中的静态成员Outter.Inner.iname\n5. 静态内部当中可以定义静态成员，也可以定义非静态成员\n\n\n\n####  局部内部类（少用）\n```java\nclass Outer {\n\n\tvoid myxq() {\n\n\t\tString name = \"Outer test()\";// 4.本质final 编译自动加\n\t\tclass Inner {// 局部内部类\n\n\t\t\t// 局部内部类的方法test\n\t\t\tvoid test() {\n\t\t\t\tSystem.out.println(name);\n\t\t\t\t//name=\"test\"; 因为是final 所以不能修改\n\t\t\t}\n\n\t\t}\n\t\tInner in = new Inner();\n\t\tin.test();\n\t}\n\n}\npublic class Test {\n\tpublic static void main(String[] args) {\n\t\tnew Outer().myxq();\n\n\t}\n}\n```\n定义在方法中的内部类\n1.不能用一些修饰符public private（因为只在方法的局部生效）\n2.只能在定义的方法中使用\n3.不能包含静态变量（staic是属于类，但是这个变量属于方法）\n4.可以包含局部变量，本质是final，编译自动加上（JDK1.8之后可以省略final）（这里的局部变量指的是与局部内部类同级的变量，就是在myxq方法里的局部变量，至于局部内部类里面非final也可以）\n\n内存分析\nmyxq方法栈帧 入栈 有一个变量name\n堆中创建Inner对象，地址0x0001赋值栈的in\nInner对象的test方法引用了name，指向栈里的\n![高新强](java-note-5/2.png)\n\nmyxq方法出栈后\n堆中一个对象没有人引用，它并不是直接就销毁\n所以name现在空指针\n所以引用的必须是final 常量（在方法区）\n![高新强](java-note-5/3.png)\n\n\n\n#### 匿名内部类\n```java\ninterface IUSB {\n\tvoid swapData();// public abstract\n}\n\nclass MotherBoard {\n\tvoid PluginIn(IUSB iusb) {\n\t\tiusb.swapData();\n\t}\n\n}\n\npublic class Test {\n\tpublic static void main(String[] args) {\n\t\tMotherBoard board = new MotherBoard();\n\n\t\t// 匿名内部类\n\t\tboard.PluginIn(new IUSB() { // 这里new的不是接口而是匿名内部类\n\n\t\t\t@Override\n\t\t\tpublic void swapData() {\n\t\t\t\tSystem.out.println(\"打印工作\");\n\t\t\t}\n\t\t}\n\n\t\t);\n\n\t}\n}\n```\n就是一个没有名字的局部内部类  安卓用的比较多\n匿名内部类是没有构造器\n只使用一次的时候,来去使用匿名内部类  \n\nnew 父类的构造器 或 接口( ){\n内部写的代码（在new时候就会自动执行）\n}      \n\n匿名内部类必须得要有父类才,或者是实现了接口\n\n---\n\n## 参考资料\n[Java零基础到高级JavaEE就业实战](https://study.163.com/course/introduction/1005537028.htm)\n","slug":"java-note-5","published":1,"updated":"2020-06-13T02:55:34.739Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke3x9g5b000pzgvu33echb35","content":"<h4 id=\"抽象\"><a href=\"#抽象\" class=\"headerlink\" title=\"抽象\"></a>抽象</h4><p>求不同图形的面积<br>定义一个Graph类，getArea方法求图形面积，不同的图形求面积算法是不一样，不同图形写不同子类，继承Graph类</p>\n<ol>\n<li>每一个图形子类，都必须得要覆盖getArea方法，在每个里面写上自己的方法体</li>\n<li>父类不知道方法体里面该怎么写，不需要方法体</li>\n</ol>\n<p>抽象方法（在方法前面添加了一个关键字abstract）：</p>\n<ol>\n<li>没有方法体（但是有返回值）</li>\n<li>必须要定义在抽象类当中或接口（在类前面添加上了一个abstract就成为了抽象类）</li>\n<li>不能是私有的<strong>private</strong>（子类就不能访问该方法就不能重写），不能使用<strong>final</strong>修饰（final要求子类不能重写，但是abstract要求必须要重写），不能同时使用<strong>static</strong>（static属于类，方法属于对象）</li>\n</ol>\n<p>抽象类<br>抽象类必须得要有子类才行（抽象类一般都当作父类来继承）</p>\n<p>抽象类的注意点：</p>\n<ol>\n<li>抽象类是不能直接创建对象的（但<strong>抽象类是有构造器的</strong>）</li>\n<li>抽象类当中，可以有抽象方法，也<strong>可以有非抽象方法</strong>（普通方法：给子类调用的）</li>\n<li>子类没有去覆盖抽象方法，把子类也变成抽象类（子类没有实现抽象方法，有孙类孙类就要实现，总有人要还的）</li>\n<li>构造方法不能定义为私有化（抽象方法必须得要让子类继承之后，才能实现内部的方法体）（子类继承的话，先去调用父类的构造方法）</li>\n<li>抽象类不能使用final来去修饰</li>\n</ol>\n<p>抽象类和普通类的区别<br>其实是一个不完整类。需要做为一个父类，子类才能完成对应的功能。<br>命名：抽象类命令时，都喜欢在前面添加上一个Abstract</p>\n<p>抽象类与普通的类有什么区别？</p>\n<ol>\n<li>普通类（方法，字段，构造器），抽象类都有</li>\n<li>抽象不能创建对象</li>\n<li>抽象类可以包含抽象方法，也可以包含非抽象方法</li>\n<li>抽象类必须有子类才有意义</li>\n</ol>\n<h4 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h4><p>接口只定义了类应当遵循的规范，却不关心这些类的内部数据和其功能的实现细节<br>站在程序角度上说接口只<strong>规定了类里必须提供的方法，从而分离了规范和实现</strong>，增强了系统的可拓展性和可维护性</p>\n<p>Java接口也是表示一种规范，使用<strong>抽象方法</strong>来去定义一组功能，必须要实现者给提供方法的实现</p>\n<p>接口命名：I+名字+able</p>\n<p>接口它其实是一个特殊的抽象类(abstract 可以不写)，接口也会生成对应的字节码</p>\n<p>内部方法的abstract可以省略不写，如果没有在方法前面添加abstract会在编译时自动的添加上public abstract</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">transData</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//编译自动加上等同于：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">transData</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>接口当中的注意点</p>\n<ol>\n<li>接口是<strong>没有构造器</strong>，接口是不能创建对象</li>\n<li>接口当中定义变量，都是<strong>全局的静态常量</strong>,少用<br>String name=”myxq”;<br>编译后：public static final String name；   //final 修饰的变量必须初始化</li>\n<li>接口当中定义的方法都是<strong>公共的抽象方法</strong><br>void transData（）;<br>编译后：<strong>public abstract</strong> void transData（）;</li>\n<li>接口可以多继承 (类不能多继承，接口继承的时候，不会去覆盖父接口的方法，因为没有方法体，所以无意义）<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Iwalkable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">walk</span><span class=\"params\">()</span></span>; <span class=\"comment\">// 接口方法默认public abstract ，可以不写</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Iswimable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swim</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Iamphibiousable</span> <span class=\"keyword\">extends</span> <span class=\"title\">Iwalkable</span>, <span class=\"title\">Iswimable</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//\tvoid swim(); 接口继承的时候，一般都不进行方法覆盖，无意义</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>接口中 可以定义内部类，内部类也是public abstract</li>\n</ol>\n<h4 id=\"接口的实现\"><a href=\"#接口的实现\" class=\"headerlink\" title=\"接口的实现\"></a>接口的实现</h4><p>实现类 extends 父类（只能继承一个类）implements其它的接口（接口可以实现多个）<br>例如：class Cat extends Animal implements Iwalkable{}</p>\n<p>在实现类当中必须得要去覆盖接口当中定义的方法<br>实现的方法必须得是public（子类权限不能比父类小）</p>\n<p>多态</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//(Iamphibiousable接口可以说是forg的父类)</span></span><br><span class=\"line\">    <span class=\"comment\">//多态写法，把子类对象赋值给父类类型</span></span><br><span class=\"line\">    Iamphibiousable frog = <span class=\"keyword\">new</span> Frog();<span class=\"comment\">//面向接口编程</span></span><br><span class=\"line\">    frog.swim();<span class=\"comment\">//多态运行时表现子类特征（编译看左边，运行看右边）</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行时看左边的Iamphibiousable又没有swin方法（这里是继承自Iswimable），没有就报错，有的话运行右边的Frog类的的swim方法</p>\n<h4 id=\"接口和抽象类区别\"><a href=\"#接口和抽象类区别\" class=\"headerlink\" title=\"接口和抽象类区别\"></a>接口和抽象类区别</h4><p>相同点</p>\n<ol>\n<li>都是被其它类实现或者被继承</li>\n<li>都不能实例化</li>\n<li>都可以定义抽象方法，定义的抽象方法子类都必须得要覆盖</li>\n</ol>\n<p>不同点</p>\n<ol>\n<li>抽象类当中是有构造器，接口是没有构造器</li>\n<li>抽象类可以包含普通方法和抽象方法，接口当中只能有抽象方法，不能有普通方法（带有方法体）(Java8开始，接口可以有普通方法)</li>\n<li>成员变量：抽象类当中默认的权限，接口当中默认：public static final变量 -&gt; 全局静态常量    </li>\n<li>方法：抽象类默认的权限，接口当中默认方法public abstract 方法名；</li>\n</ol>\n<h4 id=\"面向接口编程\"><a href=\"#面向接口编程\" class=\"headerlink\" title=\"面向接口编程\"></a>面向接口编程</h4><p>把实现类对象赋值给接口类型的变量<br>好处：蔽了不同类之间实现差异，从而达到通用编程（就是多态的好处）</p>\n<ol>\n<li>定义接口</li>\n<li>定义接口实现类</li>\n<li>创建具体对象<h4 id=\"内部类\"><a href=\"#内部类\" class=\"headerlink\" title=\"内部类\"></a>内部类</h4>定义在<strong>类当中的一个类</strong></li>\n</ol>\n<p>为什么要使用内部类<br>1.增强封装，把内部类隐藏在外部类当中，不允许其它类访问这个内部类<br>2.增加了代码一个维护性<br>3.内部类可以直接访问外部类当中的成员</p>\n<p>内部类的分类（4种）<br>1.实例内部类：直接定义在类当中的一个类，在类前面没有任何一个修饰符<br>2.静态内部类：在内部类前面加上一个static<br>3.局部内部类：定义在方法的内部类<br>4.匿名内部类：属于局部内部的一种特殊情况</p>\n<p>外部类的修饰符只能有两个：public或者默认修饰符，内部类可以使用很多个修饰符</p>\n<h4 id=\"实例内部类\"><a href=\"#实例内部类\" class=\"headerlink\" title=\"实例内部类\"></a>实例内部类</h4><p>类当中的成员：<br>字段<br>方法<br>内部类</p>\n<p>实例内部类：属于对象的内部类，不属于类的，不使用static修饰<br>想要使用内部类，必须得要先创建外部类在内部类<br>当中可以访问外部类中的成员，外部类是不能直接访问内部中的成员</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer</span> </span>&#123;</span><br><span class=\"line\">\tString name = <span class=\"string\">\"Outer\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inner</span> </span>&#123;</span><br><span class=\"line\">\t\tString name = <span class=\"string\">\"Inner\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\tString name = <span class=\"string\">\"Inner test()\"</span>;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tSystem.out.println(name);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">\t\t\tSystem.out.println(Outer.<span class=\"keyword\">this</span>.name); <span class=\"comment\">//调用外部类的变量</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tOuter outer=<span class=\"keyword\">new</span> Outer(); <span class=\"comment\">//先new 外部类</span></span><br><span class=\"line\">\t\tOuter.Inner inner=outer.new Inner();<span class=\"comment\">//赋值给 Inner inner 会报错</span></span><br><span class=\"line\">\t\tinner.test();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建内部类对象当中，会有一个<strong>外部类的引用</strong><br><img src=\"/2019/12/30/java-note-5/1.png\" alt=\"高新强\"></p>\n<h4 id=\"静态内部类\"><a href=\"#静态内部类\" class=\"headerlink\" title=\"静态内部类\"></a>静态内部类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer</span> </span>&#123;</span><br><span class=\"line\">\tString name = <span class=\"string\">\"Outer\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> String sname = <span class=\"string\">\"Outer staic\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inner</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i = <span class=\"number\">10</span>;<span class=\"comment\">// 5.可以定义非静态成员</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">static</span> String iname = <span class=\"string\">\"Inner static\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(sname);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// System.out.println(name); 报错，非静态变量,可以创建实例对象来访问</span></span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"keyword\">new</span> Outer().name);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.static 静态的，属于类，就不需要创建外部类</span></span><br><span class=\"line\">\t\tOuter.Inner inner = <span class=\"keyword\">new</span> Outer.Inner(); <span class=\"comment\">// 类型Outer.Inner 和实例内部类相同</span></span><br><span class=\"line\">\t\tinner.test();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 4.调用静态类中的静态变量</span></span><br><span class=\"line\">\t\tSystem.out.println(Outer.Inner.iname);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>静态内部类：在内部类前面加上static</p>\n<ol>\n<li>静态内部类是<strong>不需要创建外部对象</strong>（因为是static，所以是属于类）<br>outter.Inner in=new outter.Inner（）；</li>\n<li>在静态内部类中，<strong>没有外部类引用</strong></li>\n<li>静态内部类，可以访问外部类的静态成员</li>\n<li>访问静态内部类当中的静态成员Outter.Inner.iname</li>\n<li>静态内部当中可以定义静态成员，也可以定义非静态成员</li>\n</ol>\n<h4 id=\"局部内部类（少用）\"><a href=\"#局部内部类（少用）\" class=\"headerlink\" title=\"局部内部类（少用）\"></a>局部内部类（少用）</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">myxq</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tString name = <span class=\"string\">\"Outer test()\"</span>;<span class=\"comment\">// 4.本质final 编译自动加</span></span><br><span class=\"line\">\t\t<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inner</span> </span>&#123;<span class=\"comment\">// 局部内部类</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 局部内部类的方法test</span></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(name);</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//name=\"test\"; 因为是final 所以不能修改</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tInner in = <span class=\"keyword\">new</span> Inner();</span><br><span class=\"line\">\t\tin.test();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> Outer().myxq();</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>定义在方法中的内部类<br>1.不能用一些修饰符public private（因为只在方法的局部生效）<br>2.只能在定义的方法中使用<br>3.不能包含静态变量（staic是属于类，但是这个变量属于方法）<br>4.可以包含局部变量，本质是final，编译自动加上（JDK1.8之后可以省略final）（这里的局部变量指的是与局部内部类同级的变量，就是在myxq方法里的局部变量，至于局部内部类里面非final也可以）</p>\n<p>内存分析<br>myxq方法栈帧 入栈 有一个变量name<br>堆中创建Inner对象，地址0x0001赋值栈的in<br>Inner对象的test方法引用了name，指向栈里的<br><img src=\"/2019/12/30/java-note-5/2.png\" alt=\"高新强\"></p>\n<p>myxq方法出栈后<br>堆中一个对象没有人引用，它并不是直接就销毁<br>所以name现在空指针<br>所以引用的必须是final 常量（在方法区）<br><img src=\"/2019/12/30/java-note-5/3.png\" alt=\"高新强\"></p>\n<h4 id=\"匿名内部类\"><a href=\"#匿名内部类\" class=\"headerlink\" title=\"匿名内部类\"></a>匿名内部类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IUSB</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swapData</span><span class=\"params\">()</span></span>;<span class=\"comment\">// public abstract</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MotherBoard</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">PluginIn</span><span class=\"params\">(IUSB iusb)</span> </span>&#123;</span><br><span class=\"line\">\t\tiusb.swapData();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tMotherBoard board = <span class=\"keyword\">new</span> MotherBoard();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 匿名内部类</span></span><br><span class=\"line\">\t\tboard.PluginIn(<span class=\"keyword\">new</span> IUSB() &#123; <span class=\"comment\">// 这里new的不是接口而是匿名内部类</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">swapData</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"打印工作\"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>就是一个没有名字的局部内部类  安卓用的比较多<br>匿名内部类是没有构造器<br>只使用一次的时候,来去使用匿名内部类  </p>\n<p>new 父类的构造器 或 接口( ){<br>内部写的代码（在new时候就会自动执行）<br>}      </p>\n<p>匿名内部类必须得要有父类才,或者是实现了接口</p>\n<hr>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005537028.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级JavaEE就业实战</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"抽象\"><a href=\"#抽象\" class=\"headerlink\" title=\"抽象\"></a>抽象</h4><p>求不同图形的面积<br>定义一个Graph类，getArea方法求图形面积，不同的图形求面积算法是不一样，不同图形写不同子类，继承Graph类</p>\n<ol>\n<li>每一个图形子类，都必须得要覆盖getArea方法，在每个里面写上自己的方法体</li>\n<li>父类不知道方法体里面该怎么写，不需要方法体</li>\n</ol>\n<p>抽象方法（在方法前面添加了一个关键字abstract）：</p>\n<ol>\n<li>没有方法体（但是有返回值）</li>\n<li>必须要定义在抽象类当中或接口（在类前面添加上了一个abstract就成为了抽象类）</li>\n<li>不能是私有的<strong>private</strong>（子类就不能访问该方法就不能重写），不能使用<strong>final</strong>修饰（final要求子类不能重写，但是abstract要求必须要重写），不能同时使用<strong>static</strong>（static属于类，方法属于对象）</li>\n</ol>\n<p>抽象类<br>抽象类必须得要有子类才行（抽象类一般都当作父类来继承）</p>\n<p>抽象类的注意点：</p>\n<ol>\n<li>抽象类是不能直接创建对象的（但<strong>抽象类是有构造器的</strong>）</li>\n<li>抽象类当中，可以有抽象方法，也<strong>可以有非抽象方法</strong>（普通方法：给子类调用的）</li>\n<li>子类没有去覆盖抽象方法，把子类也变成抽象类（子类没有实现抽象方法，有孙类孙类就要实现，总有人要还的）</li>\n<li>构造方法不能定义为私有化（抽象方法必须得要让子类继承之后，才能实现内部的方法体）（子类继承的话，先去调用父类的构造方法）</li>\n<li>抽象类不能使用final来去修饰</li>\n</ol>\n<p>抽象类和普通类的区别<br>其实是一个不完整类。需要做为一个父类，子类才能完成对应的功能。<br>命名：抽象类命令时，都喜欢在前面添加上一个Abstract</p>\n<p>抽象类与普通的类有什么区别？</p>\n<ol>\n<li>普通类（方法，字段，构造器），抽象类都有</li>\n<li>抽象不能创建对象</li>\n<li>抽象类可以包含抽象方法，也可以包含非抽象方法</li>\n<li>抽象类必须有子类才有意义</li>\n</ol>\n<h4 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h4><p>接口只定义了类应当遵循的规范，却不关心这些类的内部数据和其功能的实现细节<br>站在程序角度上说接口只<strong>规定了类里必须提供的方法，从而分离了规范和实现</strong>，增强了系统的可拓展性和可维护性</p>\n<p>Java接口也是表示一种规范，使用<strong>抽象方法</strong>来去定义一组功能，必须要实现者给提供方法的实现</p>\n<p>接口命名：I+名字+able</p>\n<p>接口它其实是一个特殊的抽象类(abstract 可以不写)，接口也会生成对应的字节码</p>\n<p>内部方法的abstract可以省略不写，如果没有在方法前面添加abstract会在编译时自动的添加上public abstract</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">transData</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//编译自动加上等同于：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">transData</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>接口当中的注意点</p>\n<ol>\n<li>接口是<strong>没有构造器</strong>，接口是不能创建对象</li>\n<li>接口当中定义变量，都是<strong>全局的静态常量</strong>,少用<br>String name=”myxq”;<br>编译后：public static final String name；   //final 修饰的变量必须初始化</li>\n<li>接口当中定义的方法都是<strong>公共的抽象方法</strong><br>void transData（）;<br>编译后：<strong>public abstract</strong> void transData（）;</li>\n<li>接口可以多继承 (类不能多继承，接口继承的时候，不会去覆盖父接口的方法，因为没有方法体，所以无意义）<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Iwalkable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">walk</span><span class=\"params\">()</span></span>; <span class=\"comment\">// 接口方法默认public abstract ，可以不写</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Iswimable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swim</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Iamphibiousable</span> <span class=\"keyword\">extends</span> <span class=\"title\">Iwalkable</span>, <span class=\"title\">Iswimable</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//\tvoid swim(); 接口继承的时候，一般都不进行方法覆盖，无意义</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>接口中 可以定义内部类，内部类也是public abstract</li>\n</ol>\n<h4 id=\"接口的实现\"><a href=\"#接口的实现\" class=\"headerlink\" title=\"接口的实现\"></a>接口的实现</h4><p>实现类 extends 父类（只能继承一个类）implements其它的接口（接口可以实现多个）<br>例如：class Cat extends Animal implements Iwalkable{}</p>\n<p>在实现类当中必须得要去覆盖接口当中定义的方法<br>实现的方法必须得是public（子类权限不能比父类小）</p>\n<p>多态</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//(Iamphibiousable接口可以说是forg的父类)</span></span><br><span class=\"line\">    <span class=\"comment\">//多态写法，把子类对象赋值给父类类型</span></span><br><span class=\"line\">    Iamphibiousable frog = <span class=\"keyword\">new</span> Frog();<span class=\"comment\">//面向接口编程</span></span><br><span class=\"line\">    frog.swim();<span class=\"comment\">//多态运行时表现子类特征（编译看左边，运行看右边）</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行时看左边的Iamphibiousable又没有swin方法（这里是继承自Iswimable），没有就报错，有的话运行右边的Frog类的的swim方法</p>\n<h4 id=\"接口和抽象类区别\"><a href=\"#接口和抽象类区别\" class=\"headerlink\" title=\"接口和抽象类区别\"></a>接口和抽象类区别</h4><p>相同点</p>\n<ol>\n<li>都是被其它类实现或者被继承</li>\n<li>都不能实例化</li>\n<li>都可以定义抽象方法，定义的抽象方法子类都必须得要覆盖</li>\n</ol>\n<p>不同点</p>\n<ol>\n<li>抽象类当中是有构造器，接口是没有构造器</li>\n<li>抽象类可以包含普通方法和抽象方法，接口当中只能有抽象方法，不能有普通方法（带有方法体）(Java8开始，接口可以有普通方法)</li>\n<li>成员变量：抽象类当中默认的权限，接口当中默认：public static final变量 -&gt; 全局静态常量    </li>\n<li>方法：抽象类默认的权限，接口当中默认方法public abstract 方法名；</li>\n</ol>\n<h4 id=\"面向接口编程\"><a href=\"#面向接口编程\" class=\"headerlink\" title=\"面向接口编程\"></a>面向接口编程</h4><p>把实现类对象赋值给接口类型的变量<br>好处：蔽了不同类之间实现差异，从而达到通用编程（就是多态的好处）</p>\n<ol>\n<li>定义接口</li>\n<li>定义接口实现类</li>\n<li>创建具体对象<h4 id=\"内部类\"><a href=\"#内部类\" class=\"headerlink\" title=\"内部类\"></a>内部类</h4>定义在<strong>类当中的一个类</strong></li>\n</ol>\n<p>为什么要使用内部类<br>1.增强封装，把内部类隐藏在外部类当中，不允许其它类访问这个内部类<br>2.增加了代码一个维护性<br>3.内部类可以直接访问外部类当中的成员</p>\n<p>内部类的分类（4种）<br>1.实例内部类：直接定义在类当中的一个类，在类前面没有任何一个修饰符<br>2.静态内部类：在内部类前面加上一个static<br>3.局部内部类：定义在方法的内部类<br>4.匿名内部类：属于局部内部的一种特殊情况</p>\n<p>外部类的修饰符只能有两个：public或者默认修饰符，内部类可以使用很多个修饰符</p>\n<h4 id=\"实例内部类\"><a href=\"#实例内部类\" class=\"headerlink\" title=\"实例内部类\"></a>实例内部类</h4><p>类当中的成员：<br>字段<br>方法<br>内部类</p>\n<p>实例内部类：属于对象的内部类，不属于类的，不使用static修饰<br>想要使用内部类，必须得要先创建外部类在内部类<br>当中可以访问外部类中的成员，外部类是不能直接访问内部中的成员</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer</span> </span>&#123;</span><br><span class=\"line\">\tString name = <span class=\"string\">\"Outer\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inner</span> </span>&#123;</span><br><span class=\"line\">\t\tString name = <span class=\"string\">\"Inner\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\tString name = <span class=\"string\">\"Inner test()\"</span>;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tSystem.out.println(name);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">\t\t\tSystem.out.println(Outer.<span class=\"keyword\">this</span>.name); <span class=\"comment\">//调用外部类的变量</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tOuter outer=<span class=\"keyword\">new</span> Outer(); <span class=\"comment\">//先new 外部类</span></span><br><span class=\"line\">\t\tOuter.Inner inner=outer.new Inner();<span class=\"comment\">//赋值给 Inner inner 会报错</span></span><br><span class=\"line\">\t\tinner.test();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建内部类对象当中，会有一个<strong>外部类的引用</strong><br><img src=\"/2019/12/30/java-note-5/1.png\" alt=\"高新强\"></p>\n<h4 id=\"静态内部类\"><a href=\"#静态内部类\" class=\"headerlink\" title=\"静态内部类\"></a>静态内部类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer</span> </span>&#123;</span><br><span class=\"line\">\tString name = <span class=\"string\">\"Outer\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> String sname = <span class=\"string\">\"Outer staic\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inner</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i = <span class=\"number\">10</span>;<span class=\"comment\">// 5.可以定义非静态成员</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">static</span> String iname = <span class=\"string\">\"Inner static\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(sname);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// System.out.println(name); 报错，非静态变量,可以创建实例对象来访问</span></span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"keyword\">new</span> Outer().name);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.static 静态的，属于类，就不需要创建外部类</span></span><br><span class=\"line\">\t\tOuter.Inner inner = <span class=\"keyword\">new</span> Outer.Inner(); <span class=\"comment\">// 类型Outer.Inner 和实例内部类相同</span></span><br><span class=\"line\">\t\tinner.test();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 4.调用静态类中的静态变量</span></span><br><span class=\"line\">\t\tSystem.out.println(Outer.Inner.iname);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>静态内部类：在内部类前面加上static</p>\n<ol>\n<li>静态内部类是<strong>不需要创建外部对象</strong>（因为是static，所以是属于类）<br>outter.Inner in=new outter.Inner（）；</li>\n<li>在静态内部类中，<strong>没有外部类引用</strong></li>\n<li>静态内部类，可以访问外部类的静态成员</li>\n<li>访问静态内部类当中的静态成员Outter.Inner.iname</li>\n<li>静态内部当中可以定义静态成员，也可以定义非静态成员</li>\n</ol>\n<h4 id=\"局部内部类（少用）\"><a href=\"#局部内部类（少用）\" class=\"headerlink\" title=\"局部内部类（少用）\"></a>局部内部类（少用）</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Outer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">myxq</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tString name = <span class=\"string\">\"Outer test()\"</span>;<span class=\"comment\">// 4.本质final 编译自动加</span></span><br><span class=\"line\">\t\t<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inner</span> </span>&#123;<span class=\"comment\">// 局部内部类</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 局部内部类的方法test</span></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(name);</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//name=\"test\"; 因为是final 所以不能修改</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tInner in = <span class=\"keyword\">new</span> Inner();</span><br><span class=\"line\">\t\tin.test();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> Outer().myxq();</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>定义在方法中的内部类<br>1.不能用一些修饰符public private（因为只在方法的局部生效）<br>2.只能在定义的方法中使用<br>3.不能包含静态变量（staic是属于类，但是这个变量属于方法）<br>4.可以包含局部变量，本质是final，编译自动加上（JDK1.8之后可以省略final）（这里的局部变量指的是与局部内部类同级的变量，就是在myxq方法里的局部变量，至于局部内部类里面非final也可以）</p>\n<p>内存分析<br>myxq方法栈帧 入栈 有一个变量name<br>堆中创建Inner对象，地址0x0001赋值栈的in<br>Inner对象的test方法引用了name，指向栈里的<br><img src=\"/2019/12/30/java-note-5/2.png\" alt=\"高新强\"></p>\n<p>myxq方法出栈后<br>堆中一个对象没有人引用，它并不是直接就销毁<br>所以name现在空指针<br>所以引用的必须是final 常量（在方法区）<br><img src=\"/2019/12/30/java-note-5/3.png\" alt=\"高新强\"></p>\n<h4 id=\"匿名内部类\"><a href=\"#匿名内部类\" class=\"headerlink\" title=\"匿名内部类\"></a>匿名内部类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IUSB</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swapData</span><span class=\"params\">()</span></span>;<span class=\"comment\">// public abstract</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MotherBoard</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">PluginIn</span><span class=\"params\">(IUSB iusb)</span> </span>&#123;</span><br><span class=\"line\">\t\tiusb.swapData();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tMotherBoard board = <span class=\"keyword\">new</span> MotherBoard();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 匿名内部类</span></span><br><span class=\"line\">\t\tboard.PluginIn(<span class=\"keyword\">new</span> IUSB() &#123; <span class=\"comment\">// 这里new的不是接口而是匿名内部类</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">swapData</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"打印工作\"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>就是一个没有名字的局部内部类  安卓用的比较多<br>匿名内部类是没有构造器<br>只使用一次的时候,来去使用匿名内部类  </p>\n<p>new 父类的构造器 或 接口( ){<br>内部写的代码（在new时候就会自动执行）<br>}      </p>\n<p>匿名内部类必须得要有父类才,或者是实现了接口</p>\n<hr>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005537028.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级JavaEE就业实战</a></p>\n"},{"title":"Java笔记","date":"2020-03-24T11:51:42.000Z","_content":"## 创建工程%20问题\n创建Maven工程，需要获取 resources 下文件夹路径\n```java\nthis.getClass().getResource(“/”).getPath();\n```\n返回的路径String中含有%20，原因是 resources 完整路径存在空格\n所以创建项目应尽量避免使用空格和中文\n\n参考：[【整】getResource().getPath() 路径带 %20 问题展开](https://blog.csdn.net/renminzdb/article/details/88339383)","source":"_posts/java-note.md","raw":"---\ntitle: Java笔记\ncategories: Java笔记\ndate: 2020-03-24 19:51:42\n---\n## 创建工程%20问题\n创建Maven工程，需要获取 resources 下文件夹路径\n```java\nthis.getClass().getResource(“/”).getPath();\n```\n返回的路径String中含有%20，原因是 resources 完整路径存在空格\n所以创建项目应尽量避免使用空格和中文\n\n参考：[【整】getResource().getPath() 路径带 %20 问题展开](https://blog.csdn.net/renminzdb/article/details/88339383)","slug":"java-note","published":1,"updated":"2020-06-13T02:55:34.742Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke3x9g5c000qzgvu5xnp5dv9","content":"<h2 id=\"创建工程-20问题\"><a href=\"#创建工程-20问题\" class=\"headerlink\" title=\"创建工程%20问题\"></a>创建工程%20问题</h2><p>创建Maven工程，需要获取 resources 下文件夹路径</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.getClass().getResource(“/”).getPath();</span><br></pre></td></tr></table></figure>\n<p>返回的路径String中含有%20，原因是 resources 完整路径存在空格<br>所以创建项目应尽量避免使用空格和中文</p>\n<p>参考：<a href=\"https://blog.csdn.net/renminzdb/article/details/88339383\" target=\"_blank\" rel=\"noopener\">【整】getResource().getPath() 路径带 %20 问题展开</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"创建工程-20问题\"><a href=\"#创建工程-20问题\" class=\"headerlink\" title=\"创建工程%20问题\"></a>创建工程%20问题</h2><p>创建Maven工程，需要获取 resources 下文件夹路径</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.getClass().getResource(“/”).getPath();</span><br></pre></td></tr></table></figure>\n<p>返回的路径String中含有%20，原因是 resources 完整路径存在空格<br>所以创建项目应尽量避免使用空格和中文</p>\n<p>参考：<a href=\"https://blog.csdn.net/renminzdb/article/details/88339383\" target=\"_blank\" rel=\"noopener\">【整】getResource().getPath() 路径带 %20 问题展开</a></p>\n"},{"title":"JDBC笔记-基础","date":"2020-02-01T04:01:14.000Z","_content":"## JDBC 概述\nJava数据库连接 (Java Database Connectivity)\n用于执行SQL语句的Java API，它由一组用Java语言编写的类和接口组成\nJDBC提供了一种操作数据的标准，JDBC的目标是使Java程序员使用JDBC可以连接任何提供了JDBC驱动程序的数据库系统\n\njava.sql包装的就是JDBC的API\n![高新强](jdbc-note-1/1.png)\n\n## 连接MySQL\n\n新建一个lib文件夹，拖入MySQL驱动，builder path 编译路径\n![加载驱动](jdbc-note-1/2.png)\n\n查看驱动相关API：Ctrl+Shift+T 查找driver，关联源码\n![关联源码](jdbc-note-1/3.png)\n\n```java\nimport java.sql.Connection;\nimport java.sql.DriverManager;\n\npublic class _01Connect {\n\n\tpublic static void main(String[] args) throws Exception {\n\n\t\t// 把com.mysql.jdbc.Driver这份字节码加载进JVM，会执行该字节码中的静态代码块\n\t\tClass.forName(\"com.mysql.jdbc.Driver\");// ClassNotFoundException异常\n\n\t\tString url = \"jdbc:mysql://localhost:3306/jdbc_db\";// 需要创建jdbc_db这个数据库\n\t\tString user = \"root\";\n\t\tString password = \"1234\";\n\t\tConnection conn = DriverManager.getConnection(url, user, password);// SQLException异常\n\n\t}\n\n}\n```\n\n从1.6开始它会自动读这个文件，不用手动加载驱动\n在JavaWeb中不支持自动注册，所以以后我们都要自己手动写上\n\n## 操作数据库\n用Statement接口执行静态SQL语句对象\n\n把SQL语句发送到数据库中去执行，并返回执行的结果\n- 对于DQL返回查询的结果集\n- 对于DML返回受影响的行数\n- 对于DDL返回0\n\n执行sql后需要释放资源\nConnection连接就相当于Java和到Mysql之间建立管道\nStatement就相当于从数据库又接了一个管道连接MySQL的执行程序\n![释放资源](jdbc-note-1/4.png)\n\n```java\npublic static void main(String[] args) {\n\t\tString url = \"jdbc:mysql://localhost:3306/jdbc_db\";\n\t\tString user = \"root\";\n\t\tString password = \"1234\";\n\t\t\n\t\tConnection conn = null;\n\t\tStatement st = null;\n\n\t\ttry {\n\t\t\tClass.forName(\"com.mysql.jdbc.Driver\");\t\n\t\t\tconn = DriverManager.getConnection(url, user, password);\n\t\t\tst = conn.createStatement();\n\t\t\t\n\t\t\tString sql = \"create table jdbc_stu(id int,name varchar(30),age int)\";\n\t\t\tint row = st.executeUpdate(sql);\n\t\t\tSystem.out.println(row);\n\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tif (st != null) {\n\t\t\t\t\tst.close();\n\t\t\t\t}\n\t\t\t} catch (SQLException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\t\n\t\t\ttry {\n\t\t\t\tif (conn != null) {\n\t\t\t\t\tconn.close();\n\t\t\t\t}\n\t\t\t} catch (SQLException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n```\n执行DML和执行DDL步骤相同，只有sql语句发生了改变\n\n## 查询操作\n\n常用方法\n- boolean  next():判断是否有下一行数据,若有,则向下移动一行指针\n- getXxx(int columnIndex):获取当前行中,第几列.(从1开始)不推荐\n- getXxx(String columnName):获取当前行中的,指定列名的列的值.columnName是列名/列的别名\n- 若列的类型是VARCHAR/CHAR/TEXT,都使用getString来获取列的值\n- 若列的类型是int/integer/-->getInt来获取列的值\n![MySQL与Java数据类型对照表](jdbc-note-1/5.png)\n\n```java\npublic static void main(String[] args) {\n\t\tString url = \"jdbc:mysql://localhost:3306/jdbc_db\";\n\t\tString user = \"root\";\n\t\tString password = \"1234\";\n\t\t\n\t\tConnection conn = null;\n\t\tStatement st = null;\n\t\t// 1.executeQuery(Sql)会得到一个结果集ResultSet，最后也需要释放\n\t\tResultSet rs = null;\n\t\ttry {\n\t\t\tClass.forName(\"com.mysql.jdbc.Driver\");\t\n\t\t\tconn = DriverManager.getConnection(url, user, password);\n\t\t\tst = conn.createStatement();\n\n\t\t\t// 2.executeQuery执行DQL返回一个结果集\n\t\t\tString sql = \"select * from emp where ename = '李白' \";//需要有建emp表，否则会报错\n\t\t\trs = st.executeQuery(sql);\n\t\t\tif (rs.next()) {\n\t\t\t\tString ename = rs.getString(\"ename\");\n\t\t\t\tint salary = rs.getInt(\"salary\");\n\t\t\t\tSystem.out.println(\"姓名：\"+ename+\" 薪水：\"+salary);\n\t\t\t}\n\t\t\t//\n\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tif (st != null) {\n\t\t\t\t\tst.close();\n\t\t\t\t}\n\t\t\t} catch (SQLException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\t\n\t\t\ttry {\n\t\t\t\tif (conn != null) {\n\t\t\t\t\tconn.close();\n\t\t\t\t}\n\t\t\t} catch (SQLException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\n\t\t\t// 3.结果集也要释放\n\t\t\ttry {\n\t\t\t\tif (rs != null) {\n\t\t\t\t\trs.close();\n\t\t\t\t}\n\t\t\t} catch (SQLException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n```\n\n## DAO设计\nData Access Object（数据存取对象）\n位于业务逻辑和持久化数据之间，实现对持久化数据的访问\n解决问题：多个地方都要都同时做CRUD操作时，重复的代码就会很多\n![DAO示例图](jdbc-note-1/6.png)\n\n## ORM\nObject Relational Mapping（对象关系映射）\n将关系数据库中表中的记录映射成为对象，以对象的形式展现\n方便开发人员以面向对象的思想来实现对数据库的操作\n![对应关系](jdbc-note-1/7.png)\n![ORM示例图](jdbc-note-1/8.png)\n\n## domain\n符合JavaBean规范的类\nJavaBean：一个类当中有字段和该字段的getter与Setter方法\n作用：是用户与数据库交互的核心中转站\n\n## 参考资料\n[Java零基础到高级JDBC连接数据库](https://study.163.com/course/introduction/1005977005.htm)\n","source":"_posts/jdbc-note-1.md","raw":"---\ntitle: JDBC笔记-基础\ncategories: JDBC笔记\ndate: 2020-02-01 12:01:14\n---\n## JDBC 概述\nJava数据库连接 (Java Database Connectivity)\n用于执行SQL语句的Java API，它由一组用Java语言编写的类和接口组成\nJDBC提供了一种操作数据的标准，JDBC的目标是使Java程序员使用JDBC可以连接任何提供了JDBC驱动程序的数据库系统\n\njava.sql包装的就是JDBC的API\n![高新强](jdbc-note-1/1.png)\n\n## 连接MySQL\n\n新建一个lib文件夹，拖入MySQL驱动，builder path 编译路径\n![加载驱动](jdbc-note-1/2.png)\n\n查看驱动相关API：Ctrl+Shift+T 查找driver，关联源码\n![关联源码](jdbc-note-1/3.png)\n\n```java\nimport java.sql.Connection;\nimport java.sql.DriverManager;\n\npublic class _01Connect {\n\n\tpublic static void main(String[] args) throws Exception {\n\n\t\t// 把com.mysql.jdbc.Driver这份字节码加载进JVM，会执行该字节码中的静态代码块\n\t\tClass.forName(\"com.mysql.jdbc.Driver\");// ClassNotFoundException异常\n\n\t\tString url = \"jdbc:mysql://localhost:3306/jdbc_db\";// 需要创建jdbc_db这个数据库\n\t\tString user = \"root\";\n\t\tString password = \"1234\";\n\t\tConnection conn = DriverManager.getConnection(url, user, password);// SQLException异常\n\n\t}\n\n}\n```\n\n从1.6开始它会自动读这个文件，不用手动加载驱动\n在JavaWeb中不支持自动注册，所以以后我们都要自己手动写上\n\n## 操作数据库\n用Statement接口执行静态SQL语句对象\n\n把SQL语句发送到数据库中去执行，并返回执行的结果\n- 对于DQL返回查询的结果集\n- 对于DML返回受影响的行数\n- 对于DDL返回0\n\n执行sql后需要释放资源\nConnection连接就相当于Java和到Mysql之间建立管道\nStatement就相当于从数据库又接了一个管道连接MySQL的执行程序\n![释放资源](jdbc-note-1/4.png)\n\n```java\npublic static void main(String[] args) {\n\t\tString url = \"jdbc:mysql://localhost:3306/jdbc_db\";\n\t\tString user = \"root\";\n\t\tString password = \"1234\";\n\t\t\n\t\tConnection conn = null;\n\t\tStatement st = null;\n\n\t\ttry {\n\t\t\tClass.forName(\"com.mysql.jdbc.Driver\");\t\n\t\t\tconn = DriverManager.getConnection(url, user, password);\n\t\t\tst = conn.createStatement();\n\t\t\t\n\t\t\tString sql = \"create table jdbc_stu(id int,name varchar(30),age int)\";\n\t\t\tint row = st.executeUpdate(sql);\n\t\t\tSystem.out.println(row);\n\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tif (st != null) {\n\t\t\t\t\tst.close();\n\t\t\t\t}\n\t\t\t} catch (SQLException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\t\n\t\t\ttry {\n\t\t\t\tif (conn != null) {\n\t\t\t\t\tconn.close();\n\t\t\t\t}\n\t\t\t} catch (SQLException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n```\n执行DML和执行DDL步骤相同，只有sql语句发生了改变\n\n## 查询操作\n\n常用方法\n- boolean  next():判断是否有下一行数据,若有,则向下移动一行指针\n- getXxx(int columnIndex):获取当前行中,第几列.(从1开始)不推荐\n- getXxx(String columnName):获取当前行中的,指定列名的列的值.columnName是列名/列的别名\n- 若列的类型是VARCHAR/CHAR/TEXT,都使用getString来获取列的值\n- 若列的类型是int/integer/-->getInt来获取列的值\n![MySQL与Java数据类型对照表](jdbc-note-1/5.png)\n\n```java\npublic static void main(String[] args) {\n\t\tString url = \"jdbc:mysql://localhost:3306/jdbc_db\";\n\t\tString user = \"root\";\n\t\tString password = \"1234\";\n\t\t\n\t\tConnection conn = null;\n\t\tStatement st = null;\n\t\t// 1.executeQuery(Sql)会得到一个结果集ResultSet，最后也需要释放\n\t\tResultSet rs = null;\n\t\ttry {\n\t\t\tClass.forName(\"com.mysql.jdbc.Driver\");\t\n\t\t\tconn = DriverManager.getConnection(url, user, password);\n\t\t\tst = conn.createStatement();\n\n\t\t\t// 2.executeQuery执行DQL返回一个结果集\n\t\t\tString sql = \"select * from emp where ename = '李白' \";//需要有建emp表，否则会报错\n\t\t\trs = st.executeQuery(sql);\n\t\t\tif (rs.next()) {\n\t\t\t\tString ename = rs.getString(\"ename\");\n\t\t\t\tint salary = rs.getInt(\"salary\");\n\t\t\t\tSystem.out.println(\"姓名：\"+ename+\" 薪水：\"+salary);\n\t\t\t}\n\t\t\t//\n\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tif (st != null) {\n\t\t\t\t\tst.close();\n\t\t\t\t}\n\t\t\t} catch (SQLException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\t\n\t\t\ttry {\n\t\t\t\tif (conn != null) {\n\t\t\t\t\tconn.close();\n\t\t\t\t}\n\t\t\t} catch (SQLException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\n\t\t\t// 3.结果集也要释放\n\t\t\ttry {\n\t\t\t\tif (rs != null) {\n\t\t\t\t\trs.close();\n\t\t\t\t}\n\t\t\t} catch (SQLException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n```\n\n## DAO设计\nData Access Object（数据存取对象）\n位于业务逻辑和持久化数据之间，实现对持久化数据的访问\n解决问题：多个地方都要都同时做CRUD操作时，重复的代码就会很多\n![DAO示例图](jdbc-note-1/6.png)\n\n## ORM\nObject Relational Mapping（对象关系映射）\n将关系数据库中表中的记录映射成为对象，以对象的形式展现\n方便开发人员以面向对象的思想来实现对数据库的操作\n![对应关系](jdbc-note-1/7.png)\n![ORM示例图](jdbc-note-1/8.png)\n\n## domain\n符合JavaBean规范的类\nJavaBean：一个类当中有字段和该字段的getter与Setter方法\n作用：是用户与数据库交互的核心中转站\n\n## 参考资料\n[Java零基础到高级JDBC连接数据库](https://study.163.com/course/introduction/1005977005.htm)\n","slug":"jdbc-note-1","published":1,"updated":"2020-06-13T02:55:34.743Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke3x9g5e000tzgvu2pclfpw0","content":"<h2 id=\"JDBC-概述\"><a href=\"#JDBC-概述\" class=\"headerlink\" title=\"JDBC 概述\"></a>JDBC 概述</h2><p>Java数据库连接 (Java Database Connectivity)<br>用于执行SQL语句的Java API，它由一组用Java语言编写的类和接口组成<br>JDBC提供了一种操作数据的标准，JDBC的目标是使Java程序员使用JDBC可以连接任何提供了JDBC驱动程序的数据库系统</p>\n<p>java.sql包装的就是JDBC的API<br><img src=\"/2020/02/01/jdbc-note-1/1.png\" alt=\"高新强\"></p>\n<h2 id=\"连接MySQL\"><a href=\"#连接MySQL\" class=\"headerlink\" title=\"连接MySQL\"></a>连接MySQL</h2><p>新建一个lib文件夹，拖入MySQL驱动，builder path 编译路径<br><img src=\"/2020/02/01/jdbc-note-1/2.png\" alt=\"加载驱动\"></p>\n<p>查看驱动相关API：Ctrl+Shift+T 查找driver，关联源码<br><img src=\"/2020/02/01/jdbc-note-1/3.png\" alt=\"关联源码\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Connection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.DriverManager;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_01Connect</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 把com.mysql.jdbc.Driver这份字节码加载进JVM，会执行该字节码中的静态代码块</span></span><br><span class=\"line\">\t\tClass.forName(<span class=\"string\">\"com.mysql.jdbc.Driver\"</span>);<span class=\"comment\">// ClassNotFoundException异常</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tString url = <span class=\"string\">\"jdbc:mysql://localhost:3306/jdbc_db\"</span>;<span class=\"comment\">// 需要创建jdbc_db这个数据库</span></span><br><span class=\"line\">\t\tString user = <span class=\"string\">\"root\"</span>;</span><br><span class=\"line\">\t\tString password = <span class=\"string\">\"1234\"</span>;</span><br><span class=\"line\">\t\tConnection conn = DriverManager.getConnection(url, user, password);<span class=\"comment\">// SQLException异常</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从1.6开始它会自动读这个文件，不用手动加载驱动<br>在JavaWeb中不支持自动注册，所以以后我们都要自己手动写上</p>\n<h2 id=\"操作数据库\"><a href=\"#操作数据库\" class=\"headerlink\" title=\"操作数据库\"></a>操作数据库</h2><p>用Statement接口执行静态SQL语句对象</p>\n<p>把SQL语句发送到数据库中去执行，并返回执行的结果</p>\n<ul>\n<li>对于DQL返回查询的结果集</li>\n<li>对于DML返回受影响的行数</li>\n<li>对于DDL返回0</li>\n</ul>\n<p>执行sql后需要释放资源<br>Connection连接就相当于Java和到Mysql之间建立管道<br>Statement就相当于从数据库又接了一个管道连接MySQL的执行程序<br><img src=\"/2020/02/01/jdbc-note-1/4.png\" alt=\"释放资源\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tString url = <span class=\"string\">\"jdbc:mysql://localhost:3306/jdbc_db\"</span>;</span><br><span class=\"line\">\t\tString user = <span class=\"string\">\"root\"</span>;</span><br><span class=\"line\">\t\tString password = <span class=\"string\">\"1234\"</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tConnection conn = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tStatement st = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tClass.forName(<span class=\"string\">\"com.mysql.jdbc.Driver\"</span>);\t</span><br><span class=\"line\">\t\t\tconn = DriverManager.getConnection(url, user, password);</span><br><span class=\"line\">\t\t\tst = conn.createStatement();</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tString sql = <span class=\"string\">\"create table jdbc_stu(id int,name varchar(30),age int)\"</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> row = st.executeUpdate(sql);</span><br><span class=\"line\">\t\t\tSystem.out.println(row);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (st != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tst.close();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (conn != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tconn.close();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>执行DML和执行DDL步骤相同，只有sql语句发生了改变</p>\n<h2 id=\"查询操作\"><a href=\"#查询操作\" class=\"headerlink\" title=\"查询操作\"></a>查询操作</h2><p>常用方法</p>\n<ul>\n<li>boolean  next():判断是否有下一行数据,若有,则向下移动一行指针</li>\n<li>getXxx(int columnIndex):获取当前行中,第几列.(从1开始)不推荐</li>\n<li>getXxx(String columnName):获取当前行中的,指定列名的列的值.columnName是列名/列的别名</li>\n<li>若列的类型是VARCHAR/CHAR/TEXT,都使用getString来获取列的值</li>\n<li>若列的类型是int/integer/–&gt;getInt来获取列的值<br><img src=\"/2020/02/01/jdbc-note-1/5.png\" alt=\"MySQL与Java数据类型对照表\"></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tString url = <span class=\"string\">\"jdbc:mysql://localhost:3306/jdbc_db\"</span>;</span><br><span class=\"line\">\t\tString user = <span class=\"string\">\"root\"</span>;</span><br><span class=\"line\">\t\tString password = <span class=\"string\">\"1234\"</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tConnection conn = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tStatement st = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.executeQuery(Sql)会得到一个结果集ResultSet，最后也需要释放</span></span><br><span class=\"line\">\t\tResultSet rs = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tClass.forName(<span class=\"string\">\"com.mysql.jdbc.Driver\"</span>);\t</span><br><span class=\"line\">\t\t\tconn = DriverManager.getConnection(url, user, password);</span><br><span class=\"line\">\t\t\tst = conn.createStatement();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 2.executeQuery执行DQL返回一个结果集</span></span><br><span class=\"line\">\t\t\tString sql = <span class=\"string\">\"select * from emp where ename = '李白' \"</span>;<span class=\"comment\">//需要有建emp表，否则会报错</span></span><br><span class=\"line\">\t\t\trs = st.executeQuery(sql);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (rs.next()) &#123;</span><br><span class=\"line\">\t\t\t\tString ename = rs.getString(<span class=\"string\">\"ename\"</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> salary = rs.getInt(<span class=\"string\">\"salary\"</span>);</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"姓名：\"</span>+ename+<span class=\"string\">\" 薪水：\"</span>+salary);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (st != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tst.close();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (conn != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tconn.close();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 3.结果集也要释放</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (rs != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\trs.close();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"DAO设计\"><a href=\"#DAO设计\" class=\"headerlink\" title=\"DAO设计\"></a>DAO设计</h2><p>Data Access Object（数据存取对象）<br>位于业务逻辑和持久化数据之间，实现对持久化数据的访问<br>解决问题：多个地方都要都同时做CRUD操作时，重复的代码就会很多<br><img src=\"/2020/02/01/jdbc-note-1/6.png\" alt=\"DAO示例图\"></p>\n<h2 id=\"ORM\"><a href=\"#ORM\" class=\"headerlink\" title=\"ORM\"></a>ORM</h2><p>Object Relational Mapping（对象关系映射）<br>将关系数据库中表中的记录映射成为对象，以对象的形式展现<br>方便开发人员以面向对象的思想来实现对数据库的操作<br><img src=\"/2020/02/01/jdbc-note-1/7.png\" alt=\"对应关系\"><br><img src=\"/2020/02/01/jdbc-note-1/8.png\" alt=\"ORM示例图\"></p>\n<h2 id=\"domain\"><a href=\"#domain\" class=\"headerlink\" title=\"domain\"></a>domain</h2><p>符合JavaBean规范的类<br>JavaBean：一个类当中有字段和该字段的getter与Setter方法<br>作用：是用户与数据库交互的核心中转站</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005977005.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级JDBC连接数据库</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"JDBC-概述\"><a href=\"#JDBC-概述\" class=\"headerlink\" title=\"JDBC 概述\"></a>JDBC 概述</h2><p>Java数据库连接 (Java Database Connectivity)<br>用于执行SQL语句的Java API，它由一组用Java语言编写的类和接口组成<br>JDBC提供了一种操作数据的标准，JDBC的目标是使Java程序员使用JDBC可以连接任何提供了JDBC驱动程序的数据库系统</p>\n<p>java.sql包装的就是JDBC的API<br><img src=\"/2020/02/01/jdbc-note-1/1.png\" alt=\"高新强\"></p>\n<h2 id=\"连接MySQL\"><a href=\"#连接MySQL\" class=\"headerlink\" title=\"连接MySQL\"></a>连接MySQL</h2><p>新建一个lib文件夹，拖入MySQL驱动，builder path 编译路径<br><img src=\"/2020/02/01/jdbc-note-1/2.png\" alt=\"加载驱动\"></p>\n<p>查看驱动相关API：Ctrl+Shift+T 查找driver，关联源码<br><img src=\"/2020/02/01/jdbc-note-1/3.png\" alt=\"关联源码\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.sql.Connection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.DriverManager;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_01Connect</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 把com.mysql.jdbc.Driver这份字节码加载进JVM，会执行该字节码中的静态代码块</span></span><br><span class=\"line\">\t\tClass.forName(<span class=\"string\">\"com.mysql.jdbc.Driver\"</span>);<span class=\"comment\">// ClassNotFoundException异常</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tString url = <span class=\"string\">\"jdbc:mysql://localhost:3306/jdbc_db\"</span>;<span class=\"comment\">// 需要创建jdbc_db这个数据库</span></span><br><span class=\"line\">\t\tString user = <span class=\"string\">\"root\"</span>;</span><br><span class=\"line\">\t\tString password = <span class=\"string\">\"1234\"</span>;</span><br><span class=\"line\">\t\tConnection conn = DriverManager.getConnection(url, user, password);<span class=\"comment\">// SQLException异常</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从1.6开始它会自动读这个文件，不用手动加载驱动<br>在JavaWeb中不支持自动注册，所以以后我们都要自己手动写上</p>\n<h2 id=\"操作数据库\"><a href=\"#操作数据库\" class=\"headerlink\" title=\"操作数据库\"></a>操作数据库</h2><p>用Statement接口执行静态SQL语句对象</p>\n<p>把SQL语句发送到数据库中去执行，并返回执行的结果</p>\n<ul>\n<li>对于DQL返回查询的结果集</li>\n<li>对于DML返回受影响的行数</li>\n<li>对于DDL返回0</li>\n</ul>\n<p>执行sql后需要释放资源<br>Connection连接就相当于Java和到Mysql之间建立管道<br>Statement就相当于从数据库又接了一个管道连接MySQL的执行程序<br><img src=\"/2020/02/01/jdbc-note-1/4.png\" alt=\"释放资源\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tString url = <span class=\"string\">\"jdbc:mysql://localhost:3306/jdbc_db\"</span>;</span><br><span class=\"line\">\t\tString user = <span class=\"string\">\"root\"</span>;</span><br><span class=\"line\">\t\tString password = <span class=\"string\">\"1234\"</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tConnection conn = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tStatement st = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tClass.forName(<span class=\"string\">\"com.mysql.jdbc.Driver\"</span>);\t</span><br><span class=\"line\">\t\t\tconn = DriverManager.getConnection(url, user, password);</span><br><span class=\"line\">\t\t\tst = conn.createStatement();</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tString sql = <span class=\"string\">\"create table jdbc_stu(id int,name varchar(30),age int)\"</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> row = st.executeUpdate(sql);</span><br><span class=\"line\">\t\t\tSystem.out.println(row);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (st != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tst.close();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (conn != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tconn.close();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>执行DML和执行DDL步骤相同，只有sql语句发生了改变</p>\n<h2 id=\"查询操作\"><a href=\"#查询操作\" class=\"headerlink\" title=\"查询操作\"></a>查询操作</h2><p>常用方法</p>\n<ul>\n<li>boolean  next():判断是否有下一行数据,若有,则向下移动一行指针</li>\n<li>getXxx(int columnIndex):获取当前行中,第几列.(从1开始)不推荐</li>\n<li>getXxx(String columnName):获取当前行中的,指定列名的列的值.columnName是列名/列的别名</li>\n<li>若列的类型是VARCHAR/CHAR/TEXT,都使用getString来获取列的值</li>\n<li>若列的类型是int/integer/–&gt;getInt来获取列的值<br><img src=\"/2020/02/01/jdbc-note-1/5.png\" alt=\"MySQL与Java数据类型对照表\"></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tString url = <span class=\"string\">\"jdbc:mysql://localhost:3306/jdbc_db\"</span>;</span><br><span class=\"line\">\t\tString user = <span class=\"string\">\"root\"</span>;</span><br><span class=\"line\">\t\tString password = <span class=\"string\">\"1234\"</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tConnection conn = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tStatement st = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.executeQuery(Sql)会得到一个结果集ResultSet，最后也需要释放</span></span><br><span class=\"line\">\t\tResultSet rs = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tClass.forName(<span class=\"string\">\"com.mysql.jdbc.Driver\"</span>);\t</span><br><span class=\"line\">\t\t\tconn = DriverManager.getConnection(url, user, password);</span><br><span class=\"line\">\t\t\tst = conn.createStatement();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 2.executeQuery执行DQL返回一个结果集</span></span><br><span class=\"line\">\t\t\tString sql = <span class=\"string\">\"select * from emp where ename = '李白' \"</span>;<span class=\"comment\">//需要有建emp表，否则会报错</span></span><br><span class=\"line\">\t\t\trs = st.executeQuery(sql);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (rs.next()) &#123;</span><br><span class=\"line\">\t\t\t\tString ename = rs.getString(<span class=\"string\">\"ename\"</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> salary = rs.getInt(<span class=\"string\">\"salary\"</span>);</span><br><span class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"姓名：\"</span>+ename+<span class=\"string\">\" 薪水：\"</span>+salary);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (st != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tst.close();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (conn != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tconn.close();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 3.结果集也要释放</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (rs != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\trs.close();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"DAO设计\"><a href=\"#DAO设计\" class=\"headerlink\" title=\"DAO设计\"></a>DAO设计</h2><p>Data Access Object（数据存取对象）<br>位于业务逻辑和持久化数据之间，实现对持久化数据的访问<br>解决问题：多个地方都要都同时做CRUD操作时，重复的代码就会很多<br><img src=\"/2020/02/01/jdbc-note-1/6.png\" alt=\"DAO示例图\"></p>\n<h2 id=\"ORM\"><a href=\"#ORM\" class=\"headerlink\" title=\"ORM\"></a>ORM</h2><p>Object Relational Mapping（对象关系映射）<br>将关系数据库中表中的记录映射成为对象，以对象的形式展现<br>方便开发人员以面向对象的思想来实现对数据库的操作<br><img src=\"/2020/02/01/jdbc-note-1/7.png\" alt=\"对应关系\"><br><img src=\"/2020/02/01/jdbc-note-1/8.png\" alt=\"ORM示例图\"></p>\n<h2 id=\"domain\"><a href=\"#domain\" class=\"headerlink\" title=\"domain\"></a>domain</h2><p>符合JavaBean规范的类<br>JavaBean：一个类当中有字段和该字段的getter与Setter方法<br>作用：是用户与数据库交互的核心中转站</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005977005.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级JDBC连接数据库</a></p>\n"},{"title":"JDBC笔记-DAO","date":"2020-02-03T06:19:33.000Z","_content":"## DAO设计规范\n编写DAO组件\n1. 定义DAO接口\n2. 编写对应DAO实现类\n   \n面向接口编程\n根据客户提出的需求，定义接口，业务具体实现是通过实现类来完成\n当客户提出新的需求，只需要编写该业务逻辑新的实现类\n好处\n- 业务逻辑更加清晰\n- 增强代码的扩展性，可维护性\n- 接口和实现相分离，适合团队协作开发\n- 降低耦合度，便于以后升级扩展\n\n包名的规范\n\n域名倒写.模块名称.组件名称\n- 存储所有的domain：package com.it666.jdbc.domain\n- 存储所有的dao接口：page com.it666.jdbc.dao\n- 存储所有的Dao接口实现类：page com.it666.jdbc.dao.impl\n- 存储Dao组件的测试类：page com.it666.jdbc.dao.test\n\n类名规范\n- domain类：存储在domain包中，用于描述一个对象，是一个javaBean,写时要见名知意\n- dao接口：存储在dao包中，用于表示某一个对象的CRUD声明，起名规范IDomainDao\n- dao实现类：存储到dao.impl包中，用于表示DAO接口的实现类，要实现DAO接口\n\n## 开发步骤\n1. 创建表\n2. 建立domain包和domain类\n3. 建立dao包和dao接口\n4. 建立dao.impl包和dao实现类\n5. 根据dao接口创建dao测试类\n6. 编写实现类当中dao的声明的方法体\n7. 每编写一个dao方法，进行测试功能是否正确\n\n（放大图片，Chrome浏览器可以用imagus插件，或者按Ctrl和加号键，Ctrl和0 还原网页大小）\n建立stu表，设置id,name,age字段，id设置为主键和自动递增\n\n![包结构](jdbc-note-2/1.png)\n![内部结构](jdbc-note-2/2.png)\n\n写IStudentDao接口，写类StudentDaoImpl应用接口，重写方法\n写完一个方法就在测试类中写测试方法\n\n使用单元测试，在测试StudentDaoTest类中，写一个public方法\n在方法上面加@Test，Ctrl+1 选择Adds the JUnit 4 library to the build path.\n点想要单元测试的方法，点击运行或者Ctrl+F11\n\n```java\n@Test\npublic void save() {\n    Student stu = new Student();\n    stu.setName(\"al\");\n    stu.setAge(22);\n\n    IStudentDao dao = new StudentDaoImpl();\n    dao.save(stu);\n\n}\n```\n\n保存方法\n![保存方法](jdbc-note-2/3.png)\n\n删除方法\n![删除方法](jdbc-note-2/4.png)\n\n修改方法\n![修改方法](jdbc-note-2/5.png)\n\n获取一个学生\n![获取一个学生](jdbc-note-2/6.png)\n\n获取所有学生\n![获取所有学生](jdbc-note-2/7.png)\n\n## 预编译语句\nStatement接口：用于进行Java程序和数据库之间的数据传输\n具体类有3个实现\n- Statement：用于对数据库进行通用访问，使用的是静态sql\n- PreparedStatement：用于预编译模板SQL语句,在运行时接受sql输入参数\n- CallableStatement：要访问数据库存储过程时使用，也可以接受运行时输入参数\n\n#### PreparedStatement\n没有预编译语句，所有的sql都是进行拼接\n\nPreparedStatement 用于预编译模板SQL语句\n在性能和代码灵活性上有显著地提高\nPreparedStatement 对象使用 ? 作为占位符，即参数标记\n使用 setXXX( index，value) 方法将值绑定到参数中，index是引用顺序从 1 开始\n\nPreparedStatement 对象执行SQL语句（注意，它们都没有参数，不同于Statement要传入sql语句）\n- executeQuery()\n- executeUpdate()\n\n内部优化：MySql不支持，Oracle支持\n预编译语句更安全，防止sql注入（通过把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令）\n\nPreparedStatement能防止注入是因为它把单引号转义了，变成了\\'\n这样一来，就无法截断SQL语句，进而无法拼接SQL语句 基本上没有办法注入了\n![sql注入](./jdbc-note-2/8.png)\n\t\t\n\n\n\n\n## 重构1-抽取JDBCUtil\n1. 每一个DAO方法当中都会写驱动名称、url、用户名、密码，把公共的这些声明为成员变量，在一个类当中能够共享这些成员变量\n2. 不需要每次都注册驱动，把加载驱动放到静态代码块当中，只会在类被加载到JVM时，才会执行一次\n3. 每个dao方法每次操作只需要connection对象，至于是怎么样创建的不关心，把创建Connection代码抽取到jdbcUtil当中，并提供一个getConn就能够获得连接对象\n4. 每个dao方法都要关闭资源，在util当中提供一个方法专门关闭资源，在方法当中传入要关闭哪些资源\n5. DAO方法中，拼接SQL太麻烦，要使用预编译语句对象\n\n\n6. （代办）DAO方法当中每次都创建一个connection对象，用完就关闭了，创建Connection成本很大，通过数据库连接池来解决\n7. （代办）JDBCUtil当中的用户名，密码这些信息都写到了文件当中，不便于维护，给写到一个单独的配置文件当中\n\t\t\n```java\n// package com.it666.jdbc.util;\n// 需要import包\npublic class JDBCUtil {\n    // 1.公共成员变量\n\tpublic static String url = \"jdbc:mysql://localhost:3306/jdbc_db\";\n\tpublic static String user = \"root\";\n\tpublic static String password = \"1234\";\n\tpublic static String driverName = \"com.mysql.jdbc.Driver\";\n\n    /*\n\t注意！！变量这些要写在前面，如果把静态代码块写在静态字段前，会导致这些变量无法初始化（报错：初始化异常）\n    因为这些静态变量都是在静态代码块中初始化的\n    */\n\tstatic {\n\t\ttry {\n        // 2. 加载驱动只执行一次，用静态代码块加载驱动   \n\t\t\tClass.forName(driverName);\n\t\t} catch (ClassNotFoundException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n    // 3.getConn方法\n\tpublic static Connection getConn() {\n\t\ttry {\n\t\t\treturn DriverManager.getConnection(url, user, password);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn null;\n\t}\n    // 4.close方法\n\tpublic static void close(Connection conn, Statement st, ResultSet rs) {\n\t\tif (st != null) {\n\t\t\ttry {\n\t\t\t\tst.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\n\t\tif (conn != null) {\n\t\t\ttry {\n\t\t\t\tconn.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (rs != null) {\n\t\t\ttry {\n\t\t\t\trs.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n}\n\n```\n\n修改StudentDaoImpl类\n```java\n// package com.it666.jdbc.dao.impl;\npublic class StudentDaoImpl implements IStudentDao {\n\n\t@Override\n\tpublic void save(Student stu) {\n\t\tConnection conn = null;\n        // 5.使用预编译语句\n\t\tPreparedStatement ps = null;// 用预编译语句\n\n\t\ttry {\n\n\t\t\tconn = JDBCUtil.getConn();\n\t\t\tString sql = \"insert into stu (name,age) values (?,?)\"; // 预编译语句用?占位\n\t\t\tps = conn.prepareStatement(sql);\n\n\t\t\tps.setString(1, stu.getName());// 设置第一个占位符?的值\n\t\t\tps.setInt(2, stu.getAge());\n\n\t\t\tps.executeUpdate(); //执行sql语句\n\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tJDBCUtil.close(conn, ps, null); //因为PreparedStatement是Statement的实现类，所以可以传入ps\n\t\t}\n\n\t}\n\n    //DML语句同理\n\t@Override\n\tpublic void delete(int id) {\n\n\t}\n\n\t@Override\n\tpublic void update(int id, Student stu) {\n\n\t}\n\n\t@Override\n\tpublic Student get(int id) {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\tResultSet rs = null;\n\n\t\ttry {\n\t\t\tconn = JDBCUtil.getConn();\n\t\t\tString sql = \"select * from stu where id = ?\";\n\t\t\tps = conn.prepareStatement(sql);\n\n\t\t\tps.setInt(1, id);\n\n\t\t\trs = ps.executeQuery();\n\n\t\t\tif (rs.next()) {\n\t\t\t\tStudent stu = new Student();\n\t\t\t\tstu.setName(rs.getString(\"name\"));\n\t\t\t\tstu.setAge(rs.getInt(\"age\"));\n\t\t\t\tstu.setId(rs.getInt(\"id\"));\n\t\t\t\treturn stu;\n\t\t\t}\n\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tJDBCUtil.close(conn, ps, rs);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t@Override\n\tpublic List<Student> getAll() {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\tResultSet rs = null;\n\n\t\ttry {\n\t\t\tconn = JDBCUtil.getConn();\n\t\t\tString sql = \"select * from stu\";\n\t\t\tps = conn.prepareStatement(sql);\n\n\t\t\trs = ps.executeQuery();\n\t\t\tList<Student> list = new ArrayList<>();\n\t\t\twhile (rs.next()) {\n\t\t\t\tStudent stu = new Student();\n\t\t\t\t\n\t\t\t\tstu.setId(rs.getInt(\"id\"));\n\t\t\t\tstu.setName(rs.getString(\"name\"));\n\t\t\t\tstu.setAge(rs.getInt(\"age\"));\n\t\t\t\tlist.add(stu);\n\t\t\t}\n\t\t\treturn list;\n\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tJDBCUtil.close(conn, ps, rs);\n\t\t}\n\t\treturn null;\n\t}\n\n}\n\n```\n\n## 参考资料\n[Java零基础到高级JDBC连接数据库](https://study.163.com/course/introduction/1005977005.htm)\n","source":"_posts/jdbc-note-2.md","raw":"---\ntitle: JDBC笔记-DAO\ncategories: JDBC笔记\ndate: 2020-02-03 14:19:33\n---\n## DAO设计规范\n编写DAO组件\n1. 定义DAO接口\n2. 编写对应DAO实现类\n   \n面向接口编程\n根据客户提出的需求，定义接口，业务具体实现是通过实现类来完成\n当客户提出新的需求，只需要编写该业务逻辑新的实现类\n好处\n- 业务逻辑更加清晰\n- 增强代码的扩展性，可维护性\n- 接口和实现相分离，适合团队协作开发\n- 降低耦合度，便于以后升级扩展\n\n包名的规范\n\n域名倒写.模块名称.组件名称\n- 存储所有的domain：package com.it666.jdbc.domain\n- 存储所有的dao接口：page com.it666.jdbc.dao\n- 存储所有的Dao接口实现类：page com.it666.jdbc.dao.impl\n- 存储Dao组件的测试类：page com.it666.jdbc.dao.test\n\n类名规范\n- domain类：存储在domain包中，用于描述一个对象，是一个javaBean,写时要见名知意\n- dao接口：存储在dao包中，用于表示某一个对象的CRUD声明，起名规范IDomainDao\n- dao实现类：存储到dao.impl包中，用于表示DAO接口的实现类，要实现DAO接口\n\n## 开发步骤\n1. 创建表\n2. 建立domain包和domain类\n3. 建立dao包和dao接口\n4. 建立dao.impl包和dao实现类\n5. 根据dao接口创建dao测试类\n6. 编写实现类当中dao的声明的方法体\n7. 每编写一个dao方法，进行测试功能是否正确\n\n（放大图片，Chrome浏览器可以用imagus插件，或者按Ctrl和加号键，Ctrl和0 还原网页大小）\n建立stu表，设置id,name,age字段，id设置为主键和自动递增\n\n![包结构](jdbc-note-2/1.png)\n![内部结构](jdbc-note-2/2.png)\n\n写IStudentDao接口，写类StudentDaoImpl应用接口，重写方法\n写完一个方法就在测试类中写测试方法\n\n使用单元测试，在测试StudentDaoTest类中，写一个public方法\n在方法上面加@Test，Ctrl+1 选择Adds the JUnit 4 library to the build path.\n点想要单元测试的方法，点击运行或者Ctrl+F11\n\n```java\n@Test\npublic void save() {\n    Student stu = new Student();\n    stu.setName(\"al\");\n    stu.setAge(22);\n\n    IStudentDao dao = new StudentDaoImpl();\n    dao.save(stu);\n\n}\n```\n\n保存方法\n![保存方法](jdbc-note-2/3.png)\n\n删除方法\n![删除方法](jdbc-note-2/4.png)\n\n修改方法\n![修改方法](jdbc-note-2/5.png)\n\n获取一个学生\n![获取一个学生](jdbc-note-2/6.png)\n\n获取所有学生\n![获取所有学生](jdbc-note-2/7.png)\n\n## 预编译语句\nStatement接口：用于进行Java程序和数据库之间的数据传输\n具体类有3个实现\n- Statement：用于对数据库进行通用访问，使用的是静态sql\n- PreparedStatement：用于预编译模板SQL语句,在运行时接受sql输入参数\n- CallableStatement：要访问数据库存储过程时使用，也可以接受运行时输入参数\n\n#### PreparedStatement\n没有预编译语句，所有的sql都是进行拼接\n\nPreparedStatement 用于预编译模板SQL语句\n在性能和代码灵活性上有显著地提高\nPreparedStatement 对象使用 ? 作为占位符，即参数标记\n使用 setXXX( index，value) 方法将值绑定到参数中，index是引用顺序从 1 开始\n\nPreparedStatement 对象执行SQL语句（注意，它们都没有参数，不同于Statement要传入sql语句）\n- executeQuery()\n- executeUpdate()\n\n内部优化：MySql不支持，Oracle支持\n预编译语句更安全，防止sql注入（通过把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令）\n\nPreparedStatement能防止注入是因为它把单引号转义了，变成了\\'\n这样一来，就无法截断SQL语句，进而无法拼接SQL语句 基本上没有办法注入了\n![sql注入](./jdbc-note-2/8.png)\n\t\t\n\n\n\n\n## 重构1-抽取JDBCUtil\n1. 每一个DAO方法当中都会写驱动名称、url、用户名、密码，把公共的这些声明为成员变量，在一个类当中能够共享这些成员变量\n2. 不需要每次都注册驱动，把加载驱动放到静态代码块当中，只会在类被加载到JVM时，才会执行一次\n3. 每个dao方法每次操作只需要connection对象，至于是怎么样创建的不关心，把创建Connection代码抽取到jdbcUtil当中，并提供一个getConn就能够获得连接对象\n4. 每个dao方法都要关闭资源，在util当中提供一个方法专门关闭资源，在方法当中传入要关闭哪些资源\n5. DAO方法中，拼接SQL太麻烦，要使用预编译语句对象\n\n\n6. （代办）DAO方法当中每次都创建一个connection对象，用完就关闭了，创建Connection成本很大，通过数据库连接池来解决\n7. （代办）JDBCUtil当中的用户名，密码这些信息都写到了文件当中，不便于维护，给写到一个单独的配置文件当中\n\t\t\n```java\n// package com.it666.jdbc.util;\n// 需要import包\npublic class JDBCUtil {\n    // 1.公共成员变量\n\tpublic static String url = \"jdbc:mysql://localhost:3306/jdbc_db\";\n\tpublic static String user = \"root\";\n\tpublic static String password = \"1234\";\n\tpublic static String driverName = \"com.mysql.jdbc.Driver\";\n\n    /*\n\t注意！！变量这些要写在前面，如果把静态代码块写在静态字段前，会导致这些变量无法初始化（报错：初始化异常）\n    因为这些静态变量都是在静态代码块中初始化的\n    */\n\tstatic {\n\t\ttry {\n        // 2. 加载驱动只执行一次，用静态代码块加载驱动   \n\t\t\tClass.forName(driverName);\n\t\t} catch (ClassNotFoundException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n    // 3.getConn方法\n\tpublic static Connection getConn() {\n\t\ttry {\n\t\t\treturn DriverManager.getConnection(url, user, password);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn null;\n\t}\n    // 4.close方法\n\tpublic static void close(Connection conn, Statement st, ResultSet rs) {\n\t\tif (st != null) {\n\t\t\ttry {\n\t\t\t\tst.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\n\t\tif (conn != null) {\n\t\t\ttry {\n\t\t\t\tconn.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (rs != null) {\n\t\t\ttry {\n\t\t\t\trs.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n}\n\n```\n\n修改StudentDaoImpl类\n```java\n// package com.it666.jdbc.dao.impl;\npublic class StudentDaoImpl implements IStudentDao {\n\n\t@Override\n\tpublic void save(Student stu) {\n\t\tConnection conn = null;\n        // 5.使用预编译语句\n\t\tPreparedStatement ps = null;// 用预编译语句\n\n\t\ttry {\n\n\t\t\tconn = JDBCUtil.getConn();\n\t\t\tString sql = \"insert into stu (name,age) values (?,?)\"; // 预编译语句用?占位\n\t\t\tps = conn.prepareStatement(sql);\n\n\t\t\tps.setString(1, stu.getName());// 设置第一个占位符?的值\n\t\t\tps.setInt(2, stu.getAge());\n\n\t\t\tps.executeUpdate(); //执行sql语句\n\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tJDBCUtil.close(conn, ps, null); //因为PreparedStatement是Statement的实现类，所以可以传入ps\n\t\t}\n\n\t}\n\n    //DML语句同理\n\t@Override\n\tpublic void delete(int id) {\n\n\t}\n\n\t@Override\n\tpublic void update(int id, Student stu) {\n\n\t}\n\n\t@Override\n\tpublic Student get(int id) {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\tResultSet rs = null;\n\n\t\ttry {\n\t\t\tconn = JDBCUtil.getConn();\n\t\t\tString sql = \"select * from stu where id = ?\";\n\t\t\tps = conn.prepareStatement(sql);\n\n\t\t\tps.setInt(1, id);\n\n\t\t\trs = ps.executeQuery();\n\n\t\t\tif (rs.next()) {\n\t\t\t\tStudent stu = new Student();\n\t\t\t\tstu.setName(rs.getString(\"name\"));\n\t\t\t\tstu.setAge(rs.getInt(\"age\"));\n\t\t\t\tstu.setId(rs.getInt(\"id\"));\n\t\t\t\treturn stu;\n\t\t\t}\n\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tJDBCUtil.close(conn, ps, rs);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t@Override\n\tpublic List<Student> getAll() {\n\t\tConnection conn = null;\n\t\tPreparedStatement ps = null;\n\t\tResultSet rs = null;\n\n\t\ttry {\n\t\t\tconn = JDBCUtil.getConn();\n\t\t\tString sql = \"select * from stu\";\n\t\t\tps = conn.prepareStatement(sql);\n\n\t\t\trs = ps.executeQuery();\n\t\t\tList<Student> list = new ArrayList<>();\n\t\t\twhile (rs.next()) {\n\t\t\t\tStudent stu = new Student();\n\t\t\t\t\n\t\t\t\tstu.setId(rs.getInt(\"id\"));\n\t\t\t\tstu.setName(rs.getString(\"name\"));\n\t\t\t\tstu.setAge(rs.getInt(\"age\"));\n\t\t\t\tlist.add(stu);\n\t\t\t}\n\t\t\treturn list;\n\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tJDBCUtil.close(conn, ps, rs);\n\t\t}\n\t\treturn null;\n\t}\n\n}\n\n```\n\n## 参考资料\n[Java零基础到高级JDBC连接数据库](https://study.163.com/course/introduction/1005977005.htm)\n","slug":"jdbc-note-2","published":1,"updated":"2020-06-13T02:55:34.751Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke3x9g5g000uzgvu7e3behua","content":"<h2 id=\"DAO设计规范\"><a href=\"#DAO设计规范\" class=\"headerlink\" title=\"DAO设计规范\"></a>DAO设计规范</h2><p>编写DAO组件</p>\n<ol>\n<li>定义DAO接口</li>\n<li>编写对应DAO实现类</li>\n</ol>\n<p>面向接口编程<br>根据客户提出的需求，定义接口，业务具体实现是通过实现类来完成<br>当客户提出新的需求，只需要编写该业务逻辑新的实现类<br>好处</p>\n<ul>\n<li>业务逻辑更加清晰</li>\n<li>增强代码的扩展性，可维护性</li>\n<li>接口和实现相分离，适合团队协作开发</li>\n<li>降低耦合度，便于以后升级扩展</li>\n</ul>\n<p>包名的规范</p>\n<p>域名倒写.模块名称.组件名称</p>\n<ul>\n<li>存储所有的domain：package com.it666.jdbc.domain</li>\n<li>存储所有的dao接口：page com.it666.jdbc.dao</li>\n<li>存储所有的Dao接口实现类：page com.it666.jdbc.dao.impl</li>\n<li>存储Dao组件的测试类：page com.it666.jdbc.dao.test</li>\n</ul>\n<p>类名规范</p>\n<ul>\n<li>domain类：存储在domain包中，用于描述一个对象，是一个javaBean,写时要见名知意</li>\n<li>dao接口：存储在dao包中，用于表示某一个对象的CRUD声明，起名规范IDomainDao</li>\n<li>dao实现类：存储到dao.impl包中，用于表示DAO接口的实现类，要实现DAO接口</li>\n</ul>\n<h2 id=\"开发步骤\"><a href=\"#开发步骤\" class=\"headerlink\" title=\"开发步骤\"></a>开发步骤</h2><ol>\n<li>创建表</li>\n<li>建立domain包和domain类</li>\n<li>建立dao包和dao接口</li>\n<li>建立dao.impl包和dao实现类</li>\n<li>根据dao接口创建dao测试类</li>\n<li>编写实现类当中dao的声明的方法体</li>\n<li>每编写一个dao方法，进行测试功能是否正确</li>\n</ol>\n<p>（放大图片，Chrome浏览器可以用imagus插件，或者按Ctrl和加号键，Ctrl和0 还原网页大小）<br>建立stu表，设置id,name,age字段，id设置为主键和自动递增</p>\n<p><img src=\"/2020/02/03/jdbc-note-2/1.png\" alt=\"包结构\"><br><img src=\"/2020/02/03/jdbc-note-2/2.png\" alt=\"内部结构\"></p>\n<p>写IStudentDao接口，写类StudentDaoImpl应用接口，重写方法<br>写完一个方法就在测试类中写测试方法</p>\n<p>使用单元测试，在测试StudentDaoTest类中，写一个public方法<br>在方法上面加@Test，Ctrl+1 选择Adds the JUnit 4 library to the build path.<br>点想要单元测试的方法，点击运行或者Ctrl+F11</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Student stu = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">    stu.setName(<span class=\"string\">\"al\"</span>);</span><br><span class=\"line\">    stu.setAge(<span class=\"number\">22</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    IStudentDao dao = <span class=\"keyword\">new</span> StudentDaoImpl();</span><br><span class=\"line\">    dao.save(stu);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>保存方法<br><img src=\"/2020/02/03/jdbc-note-2/3.png\" alt=\"保存方法\"></p>\n<p>删除方法<br><img src=\"/2020/02/03/jdbc-note-2/4.png\" alt=\"删除方法\"></p>\n<p>修改方法<br><img src=\"/2020/02/03/jdbc-note-2/5.png\" alt=\"修改方法\"></p>\n<p>获取一个学生<br><img src=\"/2020/02/03/jdbc-note-2/6.png\" alt=\"获取一个学生\"></p>\n<p>获取所有学生<br><img src=\"/2020/02/03/jdbc-note-2/7.png\" alt=\"获取所有学生\"></p>\n<h2 id=\"预编译语句\"><a href=\"#预编译语句\" class=\"headerlink\" title=\"预编译语句\"></a>预编译语句</h2><p>Statement接口：用于进行Java程序和数据库之间的数据传输<br>具体类有3个实现</p>\n<ul>\n<li>Statement：用于对数据库进行通用访问，使用的是静态sql</li>\n<li>PreparedStatement：用于预编译模板SQL语句,在运行时接受sql输入参数</li>\n<li>CallableStatement：要访问数据库存储过程时使用，也可以接受运行时输入参数</li>\n</ul>\n<h4 id=\"PreparedStatement\"><a href=\"#PreparedStatement\" class=\"headerlink\" title=\"PreparedStatement\"></a>PreparedStatement</h4><p>没有预编译语句，所有的sql都是进行拼接</p>\n<p>PreparedStatement 用于预编译模板SQL语句<br>在性能和代码灵活性上有显著地提高<br>PreparedStatement 对象使用 ? 作为占位符，即参数标记<br>使用 setXXX( index，value) 方法将值绑定到参数中，index是引用顺序从 1 开始</p>\n<p>PreparedStatement 对象执行SQL语句（注意，它们都没有参数，不同于Statement要传入sql语句）</p>\n<ul>\n<li>executeQuery()</li>\n<li>executeUpdate()</li>\n</ul>\n<p>内部优化：MySql不支持，Oracle支持<br>预编译语句更安全，防止sql注入（通过把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令）</p>\n<p>PreparedStatement能防止注入是因为它把单引号转义了，变成了&#39;<br>这样一来，就无法截断SQL语句，进而无法拼接SQL语句 基本上没有办法注入了<br><img src=\"/2020/02/03/jdbc-note-2/8.png\" alt=\"sql注入\"></p>\n<h2 id=\"重构1-抽取JDBCUtil\"><a href=\"#重构1-抽取JDBCUtil\" class=\"headerlink\" title=\"重构1-抽取JDBCUtil\"></a>重构1-抽取JDBCUtil</h2><ol>\n<li>每一个DAO方法当中都会写驱动名称、url、用户名、密码，把公共的这些声明为成员变量，在一个类当中能够共享这些成员变量</li>\n<li>不需要每次都注册驱动，把加载驱动放到静态代码块当中，只会在类被加载到JVM时，才会执行一次</li>\n<li>每个dao方法每次操作只需要connection对象，至于是怎么样创建的不关心，把创建Connection代码抽取到jdbcUtil当中，并提供一个getConn就能够获得连接对象</li>\n<li>每个dao方法都要关闭资源，在util当中提供一个方法专门关闭资源，在方法当中传入要关闭哪些资源</li>\n<li>DAO方法中，拼接SQL太麻烦，要使用预编译语句对象</li>\n</ol>\n<ol start=\"6\">\n<li>（代办）DAO方法当中每次都创建一个connection对象，用完就关闭了，创建Connection成本很大，通过数据库连接池来解决</li>\n<li>（代办）JDBCUtil当中的用户名，密码这些信息都写到了文件当中，不便于维护，给写到一个单独的配置文件当中</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// package com.it666.jdbc.util;</span></span><br><span class=\"line\"><span class=\"comment\">// 需要import包</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JDBCUtil</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.公共成员变量</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String url = <span class=\"string\">\"jdbc:mysql://localhost:3306/jdbc_db\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String user = <span class=\"string\">\"root\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String password = <span class=\"string\">\"1234\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String driverName = <span class=\"string\">\"com.mysql.jdbc.Driver\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t注意！！变量这些要写在前面，如果把静态代码块写在静态字段前，会导致这些变量无法初始化（报错：初始化异常）</span></span><br><span class=\"line\"><span class=\"comment\">    因为这些静态变量都是在静态代码块中初始化的</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 2. 加载驱动只执行一次，用静态代码块加载驱动   </span></span><br><span class=\"line\">\t\t\tClass.forName(driverName);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 3.getConn方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Connection <span class=\"title\">getConn</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> DriverManager.getConnection(url, user, password);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 4.close方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">(Connection conn, Statement st, ResultSet rs)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (st != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tst.close();</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (conn != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tconn.close();</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (rs != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\trs.close();</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改StudentDaoImpl类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// package com.it666.jdbc.dao.impl;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudentDaoImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">IStudentDao</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">(Student stu)</span> </span>&#123;</span><br><span class=\"line\">\t\tConnection conn = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 5.使用预编译语句</span></span><br><span class=\"line\">\t\tPreparedStatement ps = <span class=\"keyword\">null</span>;<span class=\"comment\">// 用预编译语句</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tconn = JDBCUtil.getConn();</span><br><span class=\"line\">\t\t\tString sql = <span class=\"string\">\"insert into stu (name,age) values (?,?)\"</span>; <span class=\"comment\">// 预编译语句用?占位</span></span><br><span class=\"line\">\t\t\tps = conn.prepareStatement(sql);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tps.setString(<span class=\"number\">1</span>, stu.getName());<span class=\"comment\">// 设置第一个占位符?的值</span></span><br><span class=\"line\">\t\t\tps.setInt(<span class=\"number\">2</span>, stu.getAge());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tps.executeUpdate(); <span class=\"comment\">//执行sql语句</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\tJDBCUtil.close(conn, ps, <span class=\"keyword\">null</span>); <span class=\"comment\">//因为PreparedStatement是Statement的实现类，所以可以传入ps</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//DML语句同理</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> id, Student stu)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Student <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">\t\tConnection conn = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tPreparedStatement ps = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tResultSet rs = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tconn = JDBCUtil.getConn();</span><br><span class=\"line\">\t\t\tString sql = <span class=\"string\">\"select * from stu where id = ?\"</span>;</span><br><span class=\"line\">\t\t\tps = conn.prepareStatement(sql);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tps.setInt(<span class=\"number\">1</span>, id);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\trs = ps.executeQuery();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (rs.next()) &#123;</span><br><span class=\"line\">\t\t\t\tStudent stu = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">\t\t\t\tstu.setName(rs.getString(<span class=\"string\">\"name\"</span>));</span><br><span class=\"line\">\t\t\t\tstu.setAge(rs.getInt(<span class=\"string\">\"age\"</span>));</span><br><span class=\"line\">\t\t\t\tstu.setId(rs.getInt(<span class=\"string\">\"id\"</span>));</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> stu;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\tJDBCUtil.close(conn, ps, rs);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;Student&gt; <span class=\"title\">getAll</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tConnection conn = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tPreparedStatement ps = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tResultSet rs = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tconn = JDBCUtil.getConn();</span><br><span class=\"line\">\t\t\tString sql = <span class=\"string\">\"select * from stu\"</span>;</span><br><span class=\"line\">\t\t\tps = conn.prepareStatement(sql);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\trs = ps.executeQuery();</span><br><span class=\"line\">\t\t\tList&lt;Student&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (rs.next()) &#123;</span><br><span class=\"line\">\t\t\t\tStudent stu = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\tstu.setId(rs.getInt(<span class=\"string\">\"id\"</span>));</span><br><span class=\"line\">\t\t\t\tstu.setName(rs.getString(<span class=\"string\">\"name\"</span>));</span><br><span class=\"line\">\t\t\t\tstu.setAge(rs.getInt(<span class=\"string\">\"age\"</span>));</span><br><span class=\"line\">\t\t\t\tlist.add(stu);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> list;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\tJDBCUtil.close(conn, ps, rs);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005977005.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级JDBC连接数据库</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"DAO设计规范\"><a href=\"#DAO设计规范\" class=\"headerlink\" title=\"DAO设计规范\"></a>DAO设计规范</h2><p>编写DAO组件</p>\n<ol>\n<li>定义DAO接口</li>\n<li>编写对应DAO实现类</li>\n</ol>\n<p>面向接口编程<br>根据客户提出的需求，定义接口，业务具体实现是通过实现类来完成<br>当客户提出新的需求，只需要编写该业务逻辑新的实现类<br>好处</p>\n<ul>\n<li>业务逻辑更加清晰</li>\n<li>增强代码的扩展性，可维护性</li>\n<li>接口和实现相分离，适合团队协作开发</li>\n<li>降低耦合度，便于以后升级扩展</li>\n</ul>\n<p>包名的规范</p>\n<p>域名倒写.模块名称.组件名称</p>\n<ul>\n<li>存储所有的domain：package com.it666.jdbc.domain</li>\n<li>存储所有的dao接口：page com.it666.jdbc.dao</li>\n<li>存储所有的Dao接口实现类：page com.it666.jdbc.dao.impl</li>\n<li>存储Dao组件的测试类：page com.it666.jdbc.dao.test</li>\n</ul>\n<p>类名规范</p>\n<ul>\n<li>domain类：存储在domain包中，用于描述一个对象，是一个javaBean,写时要见名知意</li>\n<li>dao接口：存储在dao包中，用于表示某一个对象的CRUD声明，起名规范IDomainDao</li>\n<li>dao实现类：存储到dao.impl包中，用于表示DAO接口的实现类，要实现DAO接口</li>\n</ul>\n<h2 id=\"开发步骤\"><a href=\"#开发步骤\" class=\"headerlink\" title=\"开发步骤\"></a>开发步骤</h2><ol>\n<li>创建表</li>\n<li>建立domain包和domain类</li>\n<li>建立dao包和dao接口</li>\n<li>建立dao.impl包和dao实现类</li>\n<li>根据dao接口创建dao测试类</li>\n<li>编写实现类当中dao的声明的方法体</li>\n<li>每编写一个dao方法，进行测试功能是否正确</li>\n</ol>\n<p>（放大图片，Chrome浏览器可以用imagus插件，或者按Ctrl和加号键，Ctrl和0 还原网页大小）<br>建立stu表，设置id,name,age字段，id设置为主键和自动递增</p>\n<p><img src=\"/2020/02/03/jdbc-note-2/1.png\" alt=\"包结构\"><br><img src=\"/2020/02/03/jdbc-note-2/2.png\" alt=\"内部结构\"></p>\n<p>写IStudentDao接口，写类StudentDaoImpl应用接口，重写方法<br>写完一个方法就在测试类中写测试方法</p>\n<p>使用单元测试，在测试StudentDaoTest类中，写一个public方法<br>在方法上面加@Test，Ctrl+1 选择Adds the JUnit 4 library to the build path.<br>点想要单元测试的方法，点击运行或者Ctrl+F11</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    Student stu = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">    stu.setName(<span class=\"string\">\"al\"</span>);</span><br><span class=\"line\">    stu.setAge(<span class=\"number\">22</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    IStudentDao dao = <span class=\"keyword\">new</span> StudentDaoImpl();</span><br><span class=\"line\">    dao.save(stu);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>保存方法<br><img src=\"/2020/02/03/jdbc-note-2/3.png\" alt=\"保存方法\"></p>\n<p>删除方法<br><img src=\"/2020/02/03/jdbc-note-2/4.png\" alt=\"删除方法\"></p>\n<p>修改方法<br><img src=\"/2020/02/03/jdbc-note-2/5.png\" alt=\"修改方法\"></p>\n<p>获取一个学生<br><img src=\"/2020/02/03/jdbc-note-2/6.png\" alt=\"获取一个学生\"></p>\n<p>获取所有学生<br><img src=\"/2020/02/03/jdbc-note-2/7.png\" alt=\"获取所有学生\"></p>\n<h2 id=\"预编译语句\"><a href=\"#预编译语句\" class=\"headerlink\" title=\"预编译语句\"></a>预编译语句</h2><p>Statement接口：用于进行Java程序和数据库之间的数据传输<br>具体类有3个实现</p>\n<ul>\n<li>Statement：用于对数据库进行通用访问，使用的是静态sql</li>\n<li>PreparedStatement：用于预编译模板SQL语句,在运行时接受sql输入参数</li>\n<li>CallableStatement：要访问数据库存储过程时使用，也可以接受运行时输入参数</li>\n</ul>\n<h4 id=\"PreparedStatement\"><a href=\"#PreparedStatement\" class=\"headerlink\" title=\"PreparedStatement\"></a>PreparedStatement</h4><p>没有预编译语句，所有的sql都是进行拼接</p>\n<p>PreparedStatement 用于预编译模板SQL语句<br>在性能和代码灵活性上有显著地提高<br>PreparedStatement 对象使用 ? 作为占位符，即参数标记<br>使用 setXXX( index，value) 方法将值绑定到参数中，index是引用顺序从 1 开始</p>\n<p>PreparedStatement 对象执行SQL语句（注意，它们都没有参数，不同于Statement要传入sql语句）</p>\n<ul>\n<li>executeQuery()</li>\n<li>executeUpdate()</li>\n</ul>\n<p>内部优化：MySql不支持，Oracle支持<br>预编译语句更安全，防止sql注入（通过把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令）</p>\n<p>PreparedStatement能防止注入是因为它把单引号转义了，变成了&#39;<br>这样一来，就无法截断SQL语句，进而无法拼接SQL语句 基本上没有办法注入了<br><img src=\"/2020/02/03/jdbc-note-2/8.png\" alt=\"sql注入\"></p>\n<h2 id=\"重构1-抽取JDBCUtil\"><a href=\"#重构1-抽取JDBCUtil\" class=\"headerlink\" title=\"重构1-抽取JDBCUtil\"></a>重构1-抽取JDBCUtil</h2><ol>\n<li>每一个DAO方法当中都会写驱动名称、url、用户名、密码，把公共的这些声明为成员变量，在一个类当中能够共享这些成员变量</li>\n<li>不需要每次都注册驱动，把加载驱动放到静态代码块当中，只会在类被加载到JVM时，才会执行一次</li>\n<li>每个dao方法每次操作只需要connection对象，至于是怎么样创建的不关心，把创建Connection代码抽取到jdbcUtil当中，并提供一个getConn就能够获得连接对象</li>\n<li>每个dao方法都要关闭资源，在util当中提供一个方法专门关闭资源，在方法当中传入要关闭哪些资源</li>\n<li>DAO方法中，拼接SQL太麻烦，要使用预编译语句对象</li>\n</ol>\n<ol start=\"6\">\n<li>（代办）DAO方法当中每次都创建一个connection对象，用完就关闭了，创建Connection成本很大，通过数据库连接池来解决</li>\n<li>（代办）JDBCUtil当中的用户名，密码这些信息都写到了文件当中，不便于维护，给写到一个单独的配置文件当中</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// package com.it666.jdbc.util;</span></span><br><span class=\"line\"><span class=\"comment\">// 需要import包</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JDBCUtil</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1.公共成员变量</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String url = <span class=\"string\">\"jdbc:mysql://localhost:3306/jdbc_db\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String user = <span class=\"string\">\"root\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String password = <span class=\"string\">\"1234\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String driverName = <span class=\"string\">\"com.mysql.jdbc.Driver\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t注意！！变量这些要写在前面，如果把静态代码块写在静态字段前，会导致这些变量无法初始化（报错：初始化异常）</span></span><br><span class=\"line\"><span class=\"comment\">    因为这些静态变量都是在静态代码块中初始化的</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 2. 加载驱动只执行一次，用静态代码块加载驱动   </span></span><br><span class=\"line\">\t\t\tClass.forName(driverName);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 3.getConn方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Connection <span class=\"title\">getConn</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> DriverManager.getConnection(url, user, password);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 4.close方法</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">(Connection conn, Statement st, ResultSet rs)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (st != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tst.close();</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (conn != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tconn.close();</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (rs != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\trs.close();</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改StudentDaoImpl类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// package com.it666.jdbc.dao.impl;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudentDaoImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">IStudentDao</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">(Student stu)</span> </span>&#123;</span><br><span class=\"line\">\t\tConnection conn = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 5.使用预编译语句</span></span><br><span class=\"line\">\t\tPreparedStatement ps = <span class=\"keyword\">null</span>;<span class=\"comment\">// 用预编译语句</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tconn = JDBCUtil.getConn();</span><br><span class=\"line\">\t\t\tString sql = <span class=\"string\">\"insert into stu (name,age) values (?,?)\"</span>; <span class=\"comment\">// 预编译语句用?占位</span></span><br><span class=\"line\">\t\t\tps = conn.prepareStatement(sql);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tps.setString(<span class=\"number\">1</span>, stu.getName());<span class=\"comment\">// 设置第一个占位符?的值</span></span><br><span class=\"line\">\t\t\tps.setInt(<span class=\"number\">2</span>, stu.getAge());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tps.executeUpdate(); <span class=\"comment\">//执行sql语句</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\tJDBCUtil.close(conn, ps, <span class=\"keyword\">null</span>); <span class=\"comment\">//因为PreparedStatement是Statement的实现类，所以可以传入ps</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//DML语句同理</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delete</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> id, Student stu)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Student <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">\t\tConnection conn = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tPreparedStatement ps = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tResultSet rs = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tconn = JDBCUtil.getConn();</span><br><span class=\"line\">\t\t\tString sql = <span class=\"string\">\"select * from stu where id = ?\"</span>;</span><br><span class=\"line\">\t\t\tps = conn.prepareStatement(sql);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tps.setInt(<span class=\"number\">1</span>, id);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\trs = ps.executeQuery();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (rs.next()) &#123;</span><br><span class=\"line\">\t\t\t\tStudent stu = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">\t\t\t\tstu.setName(rs.getString(<span class=\"string\">\"name\"</span>));</span><br><span class=\"line\">\t\t\t\tstu.setAge(rs.getInt(<span class=\"string\">\"age\"</span>));</span><br><span class=\"line\">\t\t\t\tstu.setId(rs.getInt(<span class=\"string\">\"id\"</span>));</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> stu;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\tJDBCUtil.close(conn, ps, rs);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;Student&gt; <span class=\"title\">getAll</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tConnection conn = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tPreparedStatement ps = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tResultSet rs = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tconn = JDBCUtil.getConn();</span><br><span class=\"line\">\t\t\tString sql = <span class=\"string\">\"select * from stu\"</span>;</span><br><span class=\"line\">\t\t\tps = conn.prepareStatement(sql);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\trs = ps.executeQuery();</span><br><span class=\"line\">\t\t\tList&lt;Student&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (rs.next()) &#123;</span><br><span class=\"line\">\t\t\t\tStudent stu = <span class=\"keyword\">new</span> Student();</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\tstu.setId(rs.getInt(<span class=\"string\">\"id\"</span>));</span><br><span class=\"line\">\t\t\t\tstu.setName(rs.getString(<span class=\"string\">\"name\"</span>));</span><br><span class=\"line\">\t\t\t\tstu.setAge(rs.getInt(<span class=\"string\">\"age\"</span>));</span><br><span class=\"line\">\t\t\t\tlist.add(stu);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> list;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\tJDBCUtil.close(conn, ps, rs);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005977005.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级JDBC连接数据库</a></p>\n"},{"title":"JDBC笔记-连接池","date":"2020-02-03T07:55:04.000Z","_content":"## 存储过程\n1. 在数据库当中定义一个存储过程\n![定义存储过程](jdbc-note-3/1.png)\n2. JDBC调用一个参数的存储过程\n![jdbc执行存储过程](jdbc-note-3/2.png)\n3. 编写输入参数和输出参数的存储过程\n![2定义存储过程](jdbc-note-3/3.png)\n4. JDBC调用二个参数的存储过程\n![2jdbc执行存储过程](jdbc-note-3/4.png)\n\n## 事物\n模拟zs与ls进行转账\n1.检查zs账户余额\n2.减少zs账户1000\n3.增加ls账户1000\n![模拟转账](./jdbc-note-3/5.png)\n\n#### 处理事务过程\n1. 关闭自动提交 conn.setAutoCommit(false);\n2. 没有问题时，提交事务 conn.commit();\n3. 出现异常时，进行回滚操作 conn.rollback()\n\n\n![模拟转账事物](./jdbc-note-3/6.png)\n\n回滚之后，事务结束，释放资源\n出现异常，没有提交，也不会更新数据库，但是会占用资源，所以要出现异常时，进行回滚操作\n只有增、删、改才需要事务，查询不需要事务\n\n如果代码是正确的，测试也成功，但是数据库当中的数据不变，可能是事务没有提交\n\nInnoDB才支持外键和事务。MyISAM不支持外键和事务\n设置事务的隔离级别 conn.setTransactionIsolation(Connection.TRANSACTION_REPATABLE_READ)\n\n## 批处理\n一次性执行多条Sql语句，允许多条语句一次性提交给数据库批量处理，比单独提交处理要效率高\n\n批处理方法\n- addBatch(String) 添加需要批处理的sql语句\n- executeBatch() 最后执批处理\n\nMySQL默认情况下是不支持批处理的，从5.1.13开始，添加了一个rewriteBatchedStatement参数\n```java\npublic static String url = \"jdbc:mysql://localhost:3306/jdbc_db?rewriteBatchedStatements=true\";\n```\n![批处理](./jdbc-note-3/7.png)\n## 存储图片\n数据库当中的BLOB：以二进制流的形式存储图片、音频、视频等多媒体信息\n\n真正开发中，不会把二进制的文件存放在数据库当中\n而是把文件存储的路径保存在数据库当中，以后再取出路径，到该路径下读取信息\n\nBLOB类型\n- TINYBLOB (255个字节)\n- BLOB (65535字节)\n- MEDIUMBLOB (16M)\n- LONGBLOB(4G)\n\n```java\npublic class BlobTest {\n\n    //写入图片\n\tvoid write() throws Exception, SQLException {\n\t\tConnection conn = JDBCUtil.getConn();\n\t\tString sql = \"insert into student (img) values (?)\";\n\n\t\tPreparedStatement ps = conn.prepareStatement(sql);\n\n\t\t// 读取文件转换成二进制\n\t\tps.setBlob(1, new FileInputStream(\"d:/test.jpg\"));\n\t\tps.executeUpdate();\n\n\t\tJDBCUtil.close(conn, ps, null);\n\t}\n\n\t// 读取数据库图片\n\tpublic static void main(String[] args) throws Exception {\n\t\tConnection conn = JDBCUtil.getConn();\n\n\t\tString sql = \"select * from student where id=?\";\n\t\tPreparedStatement ps = conn.prepareStatement(sql);\n\t\tps.setInt(1, 1);\n\n\t\tResultSet rs = ps.executeQuery();\n\t\tif (rs.next()) {\n\t\t\t// 获取图片\n\t\t\tBlob blob = rs.getBlob(\"img\");\n\t\t\t// 获取图片二进制流\n\t\t\tInputStream in = blob.getBinaryStream();\n\t\t\t// 写入磁盘\n\t\t\tFiles.copy(in, Paths.get(\"d:/myxq.jpg\"));\n\t\t}\n\n\t\tJDBCUtil.close(conn, ps, rs);\n\t}\n\n}\n\n```\n\n## 获取自动生成的主键\n需求场景\n用户注册时，添加用户名，密码后，插入到数据库当中\n跳转成完善个人信息页，完善信息更新到刚插入的那个记录当中，所以要获取刚插入的那个主键是多少\n\n``` java\npublic static void main(String[] args) throws Exception {\n    Connection conn = JDBCUtil.getConn();\n    String sql = \"insert into stu (name,age) values (?,?)\";\n    //PreparedStatement sql参数是在定义的时候设置的，所有与Statement不同的是，这个的RETURN_GENERATED_KEYS 是设置在这定义这里\n    PreparedStatement ps = conn.prepareStatement(sql,Statement.RETURN_GENERATED_KEYS);\n    \n    ps.setString(1, \"张三\");\n    ps.setInt(2, 30);\n    // 这里面是空的\n    ps.executeUpdate();\n    \n    ResultSet rs = ps.getGeneratedKeys();\n    if (rs.next()) {\n        int id =rs.getInt(1);//获取第一列\n        System.out.println(id);\n    }\n    JDBCUtil.close(conn, ps, rs);\n    \n}\n\n\nvoid test() throws Exception {\n    Connection conn = JDBCUtil.getConn();\n    String sql = \"insert into stu (name,age) values ('张三',30)\";\n    \n    Statement st = conn.createStatement();\n    // 1.创建语句时，设置可以获取主键\n    st.executeUpdate(sql,Statement.RETURN_GENERATED_KEYS);\n    // 2.通过语句对象的getGeneratedKeys获取主键\n    ResultSet rs = st.getGeneratedKeys();\n    if (rs.next()) {\n        int id =rs.getInt(1);//获取第一列\n        System.out.println(id);\n    }\n    JDBCUtil.close(conn, st, rs);\n}\n\n```\n\n## 连接池\n\n#### 没有连接池的情况\n- 每次CRUD操作都要使用数据库的时候，都要创建一个数据库连接对象\n- 普通的JDBC数据库连接使用 DriverManager 来获取\n- 每次向数据库建立连接的时候都要将 Connection 加载到内存中\n- 然后再验证用户名和密码花费时间0.05s～1s左右\n- 每次CRUD操作就向数据库要一个连接\n- 执行完成后再断开连接，这样的方式将会消耗大量的资源和时间，若同时有几百人甚至几千人在线，频繁的进行数据库连接操作将占用很多的系统资源，严重的甚至会造成服务器的崩溃\n\n\n#### 数据库连接池\n- 池\n保存对象的容器\n- 连接池\n保存数据库连接对象的容器\n- 作用\n初始化时创建一定数量的对象。需要时直接从池中取出一个空闲对象 \n用完后并不直接释放掉对象，而是再放到对象池中以方便下一次对象请求可以直接复用 \n池技术的优势是，可以消除对象创建所带来的延迟，从而提高系统的性能 \n- 数据库连接池\n数据库连接池的基本思想就是为数据库连接建立一个“缓冲池”\n预先在缓冲池中放入一定数量的连接，当需要建立数据库连接时\n只需从“缓冲池”中取出一个，使用完毕之后再放回去\n我们可以通过设定连接池最大连接数来防止系统无尽的与数据库连接\n可以通过连接池的管理机制监视数据库的连接的数量﹑使用情况，为系统开发﹑测试及性能调整提供依据\n\n![连接池](jdbc-note-3/8.png)\n连接对象是以链表形式存放，已释放的连接，放到最后\n\n#### 连接池中的属性\n合理的设置连接池的属性，会提高连接池的性能\n1. 连接数据库时需要的4个要素\n驱动名称，数据库地址，用户名，密码\n2. 初始化连接数\n初始化时，连接池当中创建多少个Connection对象\n3. 最大连接数\n连接池当中最多存储多少个Connection对象\n4. 最小连接数\n连接池当中最少得存多个少Connection对象\n5. 最大的空闲时间\n如果一个获取了连接对象，在指定时间内没有任何动作，就会自动释放链接\n6. 最大等待时间\n在指定时间内，尝试获取连接，如果超出了指定时间，就会提示获取失败\n\n#### 连接池使用\n连接池是使用javax.sql.DataSource接口来表示连接池\nDataSource和jdbc一样，也是只提供一个接口，由第三方组织来提供\nDataSource数据源和连接池Connection Pool是同一个东西，只是叫法不一样而已\n\n常见连接池\n- DBCP\nSpring推荐，Tomcat的数据源使用的就是DBCP\n- C3P0\nC3P0是一个开放源代码的JDBC连接池，它在lib目录中与Hibernate一起发布\n从2007年就没有更新了，性能比较差\n- Druid\n阿里巴巴提供的连接池-德鲁伊-号称最好的连接池，它里面除了这些， 还有更多的功能\n\n使用连接池与不使用连接池区别\n1. 获取方式不同\n传统：Connection conn = DriverManager.getConnection(url.userName,pwd);\n连接池：Conneciton conn = DataSource对象.getConnection();\n2. 释放资源不同\n传统：和数据库断开conn.close();\n连接池：把数据库连接对象还给连接池，还可以给下一个人来使用\n\n#### 创建DataSource\n使用DBCP，DBCP是Apache软件基金组织下的开源连接池实现\n\n1.导入相关的jar包\ncommons-dbcp-1.4.jar\ncommons-pool-1.5.6.jar\n记得build path\n\n![DBCP](jdbc-note-3/9.png)\n\n#### 配置文件\n以.properties作为扩展名的文件\n把库的连接地址，用户名，密码都写在了代码当中，不便于后期的维护\n专门为数据库提供一个配置文件，里面就专门存放连接数据库的相关信息\n\n配置文件的书写\n- db.properties\n- 内部是以key-value的形式存放\nuserName=root\npassword=1234\n- 在Java中读取配置文件\n\n![配置文件](jdbc-note-3/10.png)\n\n#### 改写配置文件\n创建一个Source Folder文件夹，命名为:resource\n只有Source Folder才会编译到字节码中，会编译到bin目录中\n![Source Folder](jdbc-note-3/11.png)\n\n创建db.properties配置文件，注意key值必须和规定的一致\n```\nurl=jdbc:mysql://localhost:3306/jdbc_db\nusername=root\npassword=1234\ndriverClassName=com.mysql.jdbc.Driver\n```\n\n修改后的JDBCUtil\n```java\n// package com.it666.jdbc.util;\npublic class JDBCUtil {\n\n\tpublic static DataSource ds = null;\n\tstatic {\n\t\ttry {\n\t\t\tProperties p = new Properties();\n\t\t\tFileInputStream in = new FileInputStream(\"resource/db.properties\");\n\t\t\tp.load(in);\n\n\t\t\tds = DruidDataSourceFactory.createDataSource(p);\n\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic static Connection getConn() {\n\t\ttry {\n\t\t\treturn ds.getConnection();\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn null;\n\t}\n\n    // close方法没有变化\n\tpublic static void close(Connection conn, Statement st, ResultSet rs) {\n\t\tif (st != null) {\n\t\t\ttry {\n\t\t\t\tst.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\n\t\tif (conn != null) {\n\t\t\ttry {\n\t\t\t\tconn.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\n\t\tif (rs != null) {\n\t\t\ttry {\n\t\t\t\trs.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n}\n\n```\n\n#### 使用Druid\n开源地址：https://github.com/alibaba/druid\nDruid是一个JDBC组件库，包括数据库连接池、SQL Parser等组件。DruidDataSource是最好的数据库连接池\n\n从DBCP到Druid\nDruidDataSource的配置是兼容DBCP的，从DBCP迁移到DruidDataSource，只需要修改数据源的实现类就可以了\n只需要导入jar包(druid-1.0.15.jar)，修改代码即可\n\n```java\n// 修改创建DataSource的实现类即可，将Basic修改为Druid\nds = BasicDataSourceFactory.createDataSource(p); // DBCP\nds = DruidDataSourceFactory.createDataSource(p); // Druid\n```\n\n## 参考资料\n[Java零基础到高级JDBC连接数据库](https://study.163.com/course/introduction/1005977005.htm)","source":"_posts/jdbc-note-3.md","raw":"---\ntitle: JDBC笔记-连接池\ncategories: JDBC笔记\ndate: 2020-02-03 15:55:04\n---\n## 存储过程\n1. 在数据库当中定义一个存储过程\n![定义存储过程](jdbc-note-3/1.png)\n2. JDBC调用一个参数的存储过程\n![jdbc执行存储过程](jdbc-note-3/2.png)\n3. 编写输入参数和输出参数的存储过程\n![2定义存储过程](jdbc-note-3/3.png)\n4. JDBC调用二个参数的存储过程\n![2jdbc执行存储过程](jdbc-note-3/4.png)\n\n## 事物\n模拟zs与ls进行转账\n1.检查zs账户余额\n2.减少zs账户1000\n3.增加ls账户1000\n![模拟转账](./jdbc-note-3/5.png)\n\n#### 处理事务过程\n1. 关闭自动提交 conn.setAutoCommit(false);\n2. 没有问题时，提交事务 conn.commit();\n3. 出现异常时，进行回滚操作 conn.rollback()\n\n\n![模拟转账事物](./jdbc-note-3/6.png)\n\n回滚之后，事务结束，释放资源\n出现异常，没有提交，也不会更新数据库，但是会占用资源，所以要出现异常时，进行回滚操作\n只有增、删、改才需要事务，查询不需要事务\n\n如果代码是正确的，测试也成功，但是数据库当中的数据不变，可能是事务没有提交\n\nInnoDB才支持外键和事务。MyISAM不支持外键和事务\n设置事务的隔离级别 conn.setTransactionIsolation(Connection.TRANSACTION_REPATABLE_READ)\n\n## 批处理\n一次性执行多条Sql语句，允许多条语句一次性提交给数据库批量处理，比单独提交处理要效率高\n\n批处理方法\n- addBatch(String) 添加需要批处理的sql语句\n- executeBatch() 最后执批处理\n\nMySQL默认情况下是不支持批处理的，从5.1.13开始，添加了一个rewriteBatchedStatement参数\n```java\npublic static String url = \"jdbc:mysql://localhost:3306/jdbc_db?rewriteBatchedStatements=true\";\n```\n![批处理](./jdbc-note-3/7.png)\n## 存储图片\n数据库当中的BLOB：以二进制流的形式存储图片、音频、视频等多媒体信息\n\n真正开发中，不会把二进制的文件存放在数据库当中\n而是把文件存储的路径保存在数据库当中，以后再取出路径，到该路径下读取信息\n\nBLOB类型\n- TINYBLOB (255个字节)\n- BLOB (65535字节)\n- MEDIUMBLOB (16M)\n- LONGBLOB(4G)\n\n```java\npublic class BlobTest {\n\n    //写入图片\n\tvoid write() throws Exception, SQLException {\n\t\tConnection conn = JDBCUtil.getConn();\n\t\tString sql = \"insert into student (img) values (?)\";\n\n\t\tPreparedStatement ps = conn.prepareStatement(sql);\n\n\t\t// 读取文件转换成二进制\n\t\tps.setBlob(1, new FileInputStream(\"d:/test.jpg\"));\n\t\tps.executeUpdate();\n\n\t\tJDBCUtil.close(conn, ps, null);\n\t}\n\n\t// 读取数据库图片\n\tpublic static void main(String[] args) throws Exception {\n\t\tConnection conn = JDBCUtil.getConn();\n\n\t\tString sql = \"select * from student where id=?\";\n\t\tPreparedStatement ps = conn.prepareStatement(sql);\n\t\tps.setInt(1, 1);\n\n\t\tResultSet rs = ps.executeQuery();\n\t\tif (rs.next()) {\n\t\t\t// 获取图片\n\t\t\tBlob blob = rs.getBlob(\"img\");\n\t\t\t// 获取图片二进制流\n\t\t\tInputStream in = blob.getBinaryStream();\n\t\t\t// 写入磁盘\n\t\t\tFiles.copy(in, Paths.get(\"d:/myxq.jpg\"));\n\t\t}\n\n\t\tJDBCUtil.close(conn, ps, rs);\n\t}\n\n}\n\n```\n\n## 获取自动生成的主键\n需求场景\n用户注册时，添加用户名，密码后，插入到数据库当中\n跳转成完善个人信息页，完善信息更新到刚插入的那个记录当中，所以要获取刚插入的那个主键是多少\n\n``` java\npublic static void main(String[] args) throws Exception {\n    Connection conn = JDBCUtil.getConn();\n    String sql = \"insert into stu (name,age) values (?,?)\";\n    //PreparedStatement sql参数是在定义的时候设置的，所有与Statement不同的是，这个的RETURN_GENERATED_KEYS 是设置在这定义这里\n    PreparedStatement ps = conn.prepareStatement(sql,Statement.RETURN_GENERATED_KEYS);\n    \n    ps.setString(1, \"张三\");\n    ps.setInt(2, 30);\n    // 这里面是空的\n    ps.executeUpdate();\n    \n    ResultSet rs = ps.getGeneratedKeys();\n    if (rs.next()) {\n        int id =rs.getInt(1);//获取第一列\n        System.out.println(id);\n    }\n    JDBCUtil.close(conn, ps, rs);\n    \n}\n\n\nvoid test() throws Exception {\n    Connection conn = JDBCUtil.getConn();\n    String sql = \"insert into stu (name,age) values ('张三',30)\";\n    \n    Statement st = conn.createStatement();\n    // 1.创建语句时，设置可以获取主键\n    st.executeUpdate(sql,Statement.RETURN_GENERATED_KEYS);\n    // 2.通过语句对象的getGeneratedKeys获取主键\n    ResultSet rs = st.getGeneratedKeys();\n    if (rs.next()) {\n        int id =rs.getInt(1);//获取第一列\n        System.out.println(id);\n    }\n    JDBCUtil.close(conn, st, rs);\n}\n\n```\n\n## 连接池\n\n#### 没有连接池的情况\n- 每次CRUD操作都要使用数据库的时候，都要创建一个数据库连接对象\n- 普通的JDBC数据库连接使用 DriverManager 来获取\n- 每次向数据库建立连接的时候都要将 Connection 加载到内存中\n- 然后再验证用户名和密码花费时间0.05s～1s左右\n- 每次CRUD操作就向数据库要一个连接\n- 执行完成后再断开连接，这样的方式将会消耗大量的资源和时间，若同时有几百人甚至几千人在线，频繁的进行数据库连接操作将占用很多的系统资源，严重的甚至会造成服务器的崩溃\n\n\n#### 数据库连接池\n- 池\n保存对象的容器\n- 连接池\n保存数据库连接对象的容器\n- 作用\n初始化时创建一定数量的对象。需要时直接从池中取出一个空闲对象 \n用完后并不直接释放掉对象，而是再放到对象池中以方便下一次对象请求可以直接复用 \n池技术的优势是，可以消除对象创建所带来的延迟，从而提高系统的性能 \n- 数据库连接池\n数据库连接池的基本思想就是为数据库连接建立一个“缓冲池”\n预先在缓冲池中放入一定数量的连接，当需要建立数据库连接时\n只需从“缓冲池”中取出一个，使用完毕之后再放回去\n我们可以通过设定连接池最大连接数来防止系统无尽的与数据库连接\n可以通过连接池的管理机制监视数据库的连接的数量﹑使用情况，为系统开发﹑测试及性能调整提供依据\n\n![连接池](jdbc-note-3/8.png)\n连接对象是以链表形式存放，已释放的连接，放到最后\n\n#### 连接池中的属性\n合理的设置连接池的属性，会提高连接池的性能\n1. 连接数据库时需要的4个要素\n驱动名称，数据库地址，用户名，密码\n2. 初始化连接数\n初始化时，连接池当中创建多少个Connection对象\n3. 最大连接数\n连接池当中最多存储多少个Connection对象\n4. 最小连接数\n连接池当中最少得存多个少Connection对象\n5. 最大的空闲时间\n如果一个获取了连接对象，在指定时间内没有任何动作，就会自动释放链接\n6. 最大等待时间\n在指定时间内，尝试获取连接，如果超出了指定时间，就会提示获取失败\n\n#### 连接池使用\n连接池是使用javax.sql.DataSource接口来表示连接池\nDataSource和jdbc一样，也是只提供一个接口，由第三方组织来提供\nDataSource数据源和连接池Connection Pool是同一个东西，只是叫法不一样而已\n\n常见连接池\n- DBCP\nSpring推荐，Tomcat的数据源使用的就是DBCP\n- C3P0\nC3P0是一个开放源代码的JDBC连接池，它在lib目录中与Hibernate一起发布\n从2007年就没有更新了，性能比较差\n- Druid\n阿里巴巴提供的连接池-德鲁伊-号称最好的连接池，它里面除了这些， 还有更多的功能\n\n使用连接池与不使用连接池区别\n1. 获取方式不同\n传统：Connection conn = DriverManager.getConnection(url.userName,pwd);\n连接池：Conneciton conn = DataSource对象.getConnection();\n2. 释放资源不同\n传统：和数据库断开conn.close();\n连接池：把数据库连接对象还给连接池，还可以给下一个人来使用\n\n#### 创建DataSource\n使用DBCP，DBCP是Apache软件基金组织下的开源连接池实现\n\n1.导入相关的jar包\ncommons-dbcp-1.4.jar\ncommons-pool-1.5.6.jar\n记得build path\n\n![DBCP](jdbc-note-3/9.png)\n\n#### 配置文件\n以.properties作为扩展名的文件\n把库的连接地址，用户名，密码都写在了代码当中，不便于后期的维护\n专门为数据库提供一个配置文件，里面就专门存放连接数据库的相关信息\n\n配置文件的书写\n- db.properties\n- 内部是以key-value的形式存放\nuserName=root\npassword=1234\n- 在Java中读取配置文件\n\n![配置文件](jdbc-note-3/10.png)\n\n#### 改写配置文件\n创建一个Source Folder文件夹，命名为:resource\n只有Source Folder才会编译到字节码中，会编译到bin目录中\n![Source Folder](jdbc-note-3/11.png)\n\n创建db.properties配置文件，注意key值必须和规定的一致\n```\nurl=jdbc:mysql://localhost:3306/jdbc_db\nusername=root\npassword=1234\ndriverClassName=com.mysql.jdbc.Driver\n```\n\n修改后的JDBCUtil\n```java\n// package com.it666.jdbc.util;\npublic class JDBCUtil {\n\n\tpublic static DataSource ds = null;\n\tstatic {\n\t\ttry {\n\t\t\tProperties p = new Properties();\n\t\t\tFileInputStream in = new FileInputStream(\"resource/db.properties\");\n\t\t\tp.load(in);\n\n\t\t\tds = DruidDataSourceFactory.createDataSource(p);\n\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic static Connection getConn() {\n\t\ttry {\n\t\t\treturn ds.getConnection();\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn null;\n\t}\n\n    // close方法没有变化\n\tpublic static void close(Connection conn, Statement st, ResultSet rs) {\n\t\tif (st != null) {\n\t\t\ttry {\n\t\t\t\tst.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\n\t\tif (conn != null) {\n\t\t\ttry {\n\t\t\t\tconn.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\n\t\tif (rs != null) {\n\t\t\ttry {\n\t\t\t\trs.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n}\n\n```\n\n#### 使用Druid\n开源地址：https://github.com/alibaba/druid\nDruid是一个JDBC组件库，包括数据库连接池、SQL Parser等组件。DruidDataSource是最好的数据库连接池\n\n从DBCP到Druid\nDruidDataSource的配置是兼容DBCP的，从DBCP迁移到DruidDataSource，只需要修改数据源的实现类就可以了\n只需要导入jar包(druid-1.0.15.jar)，修改代码即可\n\n```java\n// 修改创建DataSource的实现类即可，将Basic修改为Druid\nds = BasicDataSourceFactory.createDataSource(p); // DBCP\nds = DruidDataSourceFactory.createDataSource(p); // Druid\n```\n\n## 参考资料\n[Java零基础到高级JDBC连接数据库](https://study.163.com/course/introduction/1005977005.htm)","slug":"jdbc-note-3","published":1,"updated":"2020-06-13T02:55:34.764Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke3x9g5i000xzgvu5z44cwwb","content":"<h2 id=\"存储过程\"><a href=\"#存储过程\" class=\"headerlink\" title=\"存储过程\"></a>存储过程</h2><ol>\n<li>在数据库当中定义一个存储过程<br><img src=\"/2020/02/03/jdbc-note-3/1.png\" alt=\"定义存储过程\"></li>\n<li>JDBC调用一个参数的存储过程<br><img src=\"/2020/02/03/jdbc-note-3/2.png\" alt=\"jdbc执行存储过程\"></li>\n<li>编写输入参数和输出参数的存储过程<br><img src=\"/2020/02/03/jdbc-note-3/3.png\" alt=\"2定义存储过程\"></li>\n<li>JDBC调用二个参数的存储过程<br><img src=\"/2020/02/03/jdbc-note-3/4.png\" alt=\"2jdbc执行存储过程\"></li>\n</ol>\n<h2 id=\"事物\"><a href=\"#事物\" class=\"headerlink\" title=\"事物\"></a>事物</h2><p>模拟zs与ls进行转账<br>1.检查zs账户余额<br>2.减少zs账户1000<br>3.增加ls账户1000<br><img src=\"/2020/02/03/jdbc-note-3/5.png\" alt=\"模拟转账\"></p>\n<h4 id=\"处理事务过程\"><a href=\"#处理事务过程\" class=\"headerlink\" title=\"处理事务过程\"></a>处理事务过程</h4><ol>\n<li>关闭自动提交 conn.setAutoCommit(false);</li>\n<li>没有问题时，提交事务 conn.commit();</li>\n<li>出现异常时，进行回滚操作 conn.rollback()</li>\n</ol>\n<p><img src=\"/2020/02/03/jdbc-note-3/6.png\" alt=\"模拟转账事物\"></p>\n<p>回滚之后，事务结束，释放资源<br>出现异常，没有提交，也不会更新数据库，但是会占用资源，所以要出现异常时，进行回滚操作<br>只有增、删、改才需要事务，查询不需要事务</p>\n<p>如果代码是正确的，测试也成功，但是数据库当中的数据不变，可能是事务没有提交</p>\n<p>InnoDB才支持外键和事务。MyISAM不支持外键和事务<br>设置事务的隔离级别 conn.setTransactionIsolation(Connection.TRANSACTION_REPATABLE_READ)</p>\n<h2 id=\"批处理\"><a href=\"#批处理\" class=\"headerlink\" title=\"批处理\"></a>批处理</h2><p>一次性执行多条Sql语句，允许多条语句一次性提交给数据库批量处理，比单独提交处理要效率高</p>\n<p>批处理方法</p>\n<ul>\n<li>addBatch(String) 添加需要批处理的sql语句</li>\n<li>executeBatch() 最后执批处理</li>\n</ul>\n<p>MySQL默认情况下是不支持批处理的，从5.1.13开始，添加了一个rewriteBatchedStatement参数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String url = <span class=\"string\">\"jdbc:mysql://localhost:3306/jdbc_db?rewriteBatchedStatements=true\"</span>;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2020/02/03/jdbc-note-3/7.png\" alt=\"批处理\"></p>\n<h2 id=\"存储图片\"><a href=\"#存储图片\" class=\"headerlink\" title=\"存储图片\"></a>存储图片</h2><p>数据库当中的BLOB：以二进制流的形式存储图片、音频、视频等多媒体信息</p>\n<p>真正开发中，不会把二进制的文件存放在数据库当中<br>而是把文件存储的路径保存在数据库当中，以后再取出路径，到该路径下读取信息</p>\n<p>BLOB类型</p>\n<ul>\n<li>TINYBLOB (255个字节)</li>\n<li>BLOB (65535字节)</li>\n<li>MEDIUMBLOB (16M)</li>\n<li>LONGBLOB(4G)</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BlobTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//写入图片</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception, SQLException </span>&#123;</span><br><span class=\"line\">\t\tConnection conn = JDBCUtil.getConn();</span><br><span class=\"line\">\t\tString sql = <span class=\"string\">\"insert into student (img) values (?)\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tPreparedStatement ps = conn.prepareStatement(sql);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 读取文件转换成二进制</span></span><br><span class=\"line\">\t\tps.setBlob(<span class=\"number\">1</span>, <span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"d:/test.jpg\"</span>));</span><br><span class=\"line\">\t\tps.executeUpdate();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tJDBCUtil.close(conn, ps, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 读取数据库图片</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\tConnection conn = JDBCUtil.getConn();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tString sql = <span class=\"string\">\"select * from student where id=?\"</span>;</span><br><span class=\"line\">\t\tPreparedStatement ps = conn.prepareStatement(sql);</span><br><span class=\"line\">\t\tps.setInt(<span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tResultSet rs = ps.executeQuery();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (rs.next()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 获取图片</span></span><br><span class=\"line\">\t\t\tBlob blob = rs.getBlob(<span class=\"string\">\"img\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 获取图片二进制流</span></span><br><span class=\"line\">\t\t\tInputStream in = blob.getBinaryStream();</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 写入磁盘</span></span><br><span class=\"line\">\t\t\tFiles.copy(in, Paths.get(<span class=\"string\">\"d:/myxq.jpg\"</span>));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tJDBCUtil.close(conn, ps, rs);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"获取自动生成的主键\"><a href=\"#获取自动生成的主键\" class=\"headerlink\" title=\"获取自动生成的主键\"></a>获取自动生成的主键</h2><p>需求场景<br>用户注册时，添加用户名，密码后，插入到数据库当中<br>跳转成完善个人信息页，完善信息更新到刚插入的那个记录当中，所以要获取刚插入的那个主键是多少</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    Connection conn = JDBCUtil.getConn();</span><br><span class=\"line\">    String sql = <span class=\"string\">\"insert into stu (name,age) values (?,?)\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">//PreparedStatement sql参数是在定义的时候设置的，所有与Statement不同的是，这个的RETURN_GENERATED_KEYS 是设置在这定义这里</span></span><br><span class=\"line\">    PreparedStatement ps = conn.prepareStatement(sql,Statement.RETURN_GENERATED_KEYS);</span><br><span class=\"line\">    </span><br><span class=\"line\">    ps.setString(<span class=\"number\">1</span>, <span class=\"string\">\"张三\"</span>);</span><br><span class=\"line\">    ps.setInt(<span class=\"number\">2</span>, <span class=\"number\">30</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 这里面是空的</span></span><br><span class=\"line\">    ps.executeUpdate();</span><br><span class=\"line\">    </span><br><span class=\"line\">    ResultSet rs = ps.getGeneratedKeys();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rs.next()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> id =rs.getInt(<span class=\"number\">1</span>);<span class=\"comment\">//获取第一列</span></span><br><span class=\"line\">        System.out.println(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    JDBCUtil.close(conn, ps, rs);</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    Connection conn = JDBCUtil.getConn();</span><br><span class=\"line\">    String sql = <span class=\"string\">\"insert into stu (name,age) values ('张三',30)\"</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Statement st = conn.createStatement();</span><br><span class=\"line\">    <span class=\"comment\">// 1.创建语句时，设置可以获取主键</span></span><br><span class=\"line\">    st.executeUpdate(sql,Statement.RETURN_GENERATED_KEYS);</span><br><span class=\"line\">    <span class=\"comment\">// 2.通过语句对象的getGeneratedKeys获取主键</span></span><br><span class=\"line\">    ResultSet rs = st.getGeneratedKeys();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rs.next()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> id =rs.getInt(<span class=\"number\">1</span>);<span class=\"comment\">//获取第一列</span></span><br><span class=\"line\">        System.out.println(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    JDBCUtil.close(conn, st, rs);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"连接池\"><a href=\"#连接池\" class=\"headerlink\" title=\"连接池\"></a>连接池</h2><h4 id=\"没有连接池的情况\"><a href=\"#没有连接池的情况\" class=\"headerlink\" title=\"没有连接池的情况\"></a>没有连接池的情况</h4><ul>\n<li>每次CRUD操作都要使用数据库的时候，都要创建一个数据库连接对象</li>\n<li>普通的JDBC数据库连接使用 DriverManager 来获取</li>\n<li>每次向数据库建立连接的时候都要将 Connection 加载到内存中</li>\n<li>然后再验证用户名和密码花费时间0.05s～1s左右</li>\n<li>每次CRUD操作就向数据库要一个连接</li>\n<li>执行完成后再断开连接，这样的方式将会消耗大量的资源和时间，若同时有几百人甚至几千人在线，频繁的进行数据库连接操作将占用很多的系统资源，严重的甚至会造成服务器的崩溃</li>\n</ul>\n<h4 id=\"数据库连接池\"><a href=\"#数据库连接池\" class=\"headerlink\" title=\"数据库连接池\"></a>数据库连接池</h4><ul>\n<li>池<br>保存对象的容器</li>\n<li>连接池<br>保存数据库连接对象的容器</li>\n<li>作用<br>初始化时创建一定数量的对象。需要时直接从池中取出一个空闲对象<br>用完后并不直接释放掉对象，而是再放到对象池中以方便下一次对象请求可以直接复用<br>池技术的优势是，可以消除对象创建所带来的延迟，从而提高系统的性能 </li>\n<li>数据库连接池<br>数据库连接池的基本思想就是为数据库连接建立一个“缓冲池”<br>预先在缓冲池中放入一定数量的连接，当需要建立数据库连接时<br>只需从“缓冲池”中取出一个，使用完毕之后再放回去<br>我们可以通过设定连接池最大连接数来防止系统无尽的与数据库连接<br>可以通过连接池的管理机制监视数据库的连接的数量﹑使用情况，为系统开发﹑测试及性能调整提供依据</li>\n</ul>\n<p><img src=\"/2020/02/03/jdbc-note-3/8.png\" alt=\"连接池\"><br>连接对象是以链表形式存放，已释放的连接，放到最后</p>\n<h4 id=\"连接池中的属性\"><a href=\"#连接池中的属性\" class=\"headerlink\" title=\"连接池中的属性\"></a>连接池中的属性</h4><p>合理的设置连接池的属性，会提高连接池的性能</p>\n<ol>\n<li>连接数据库时需要的4个要素<br>驱动名称，数据库地址，用户名，密码</li>\n<li>初始化连接数<br>初始化时，连接池当中创建多少个Connection对象</li>\n<li>最大连接数<br>连接池当中最多存储多少个Connection对象</li>\n<li>最小连接数<br>连接池当中最少得存多个少Connection对象</li>\n<li>最大的空闲时间<br>如果一个获取了连接对象，在指定时间内没有任何动作，就会自动释放链接</li>\n<li>最大等待时间<br>在指定时间内，尝试获取连接，如果超出了指定时间，就会提示获取失败</li>\n</ol>\n<h4 id=\"连接池使用\"><a href=\"#连接池使用\" class=\"headerlink\" title=\"连接池使用\"></a>连接池使用</h4><p>连接池是使用javax.sql.DataSource接口来表示连接池<br>DataSource和jdbc一样，也是只提供一个接口，由第三方组织来提供<br>DataSource数据源和连接池Connection Pool是同一个东西，只是叫法不一样而已</p>\n<p>常见连接池</p>\n<ul>\n<li>DBCP<br>Spring推荐，Tomcat的数据源使用的就是DBCP</li>\n<li>C3P0<br>C3P0是一个开放源代码的JDBC连接池，它在lib目录中与Hibernate一起发布<br>从2007年就没有更新了，性能比较差</li>\n<li>Druid<br>阿里巴巴提供的连接池-德鲁伊-号称最好的连接池，它里面除了这些， 还有更多的功能</li>\n</ul>\n<p>使用连接池与不使用连接池区别</p>\n<ol>\n<li>获取方式不同<br>传统：Connection conn = DriverManager.getConnection(url.userName,pwd);<br>连接池：Conneciton conn = DataSource对象.getConnection();</li>\n<li>释放资源不同<br>传统：和数据库断开conn.close();<br>连接池：把数据库连接对象还给连接池，还可以给下一个人来使用</li>\n</ol>\n<h4 id=\"创建DataSource\"><a href=\"#创建DataSource\" class=\"headerlink\" title=\"创建DataSource\"></a>创建DataSource</h4><p>使用DBCP，DBCP是Apache软件基金组织下的开源连接池实现</p>\n<p>1.导入相关的jar包<br>commons-dbcp-1.4.jar<br>commons-pool-1.5.6.jar<br>记得build path</p>\n<p><img src=\"/2020/02/03/jdbc-note-3/9.png\" alt=\"DBCP\"></p>\n<h4 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h4><p>以.properties作为扩展名的文件<br>把库的连接地址，用户名，密码都写在了代码当中，不便于后期的维护<br>专门为数据库提供一个配置文件，里面就专门存放连接数据库的相关信息</p>\n<p>配置文件的书写</p>\n<ul>\n<li>db.properties</li>\n<li>内部是以key-value的形式存放<br>userName=root<br>password=1234</li>\n<li>在Java中读取配置文件</li>\n</ul>\n<p><img src=\"/2020/02/03/jdbc-note-3/10.png\" alt=\"配置文件\"></p>\n<h4 id=\"改写配置文件\"><a href=\"#改写配置文件\" class=\"headerlink\" title=\"改写配置文件\"></a>改写配置文件</h4><p>创建一个Source Folder文件夹，命名为:resource<br>只有Source Folder才会编译到字节码中，会编译到bin目录中<br><img src=\"/2020/02/03/jdbc-note-3/11.png\" alt=\"Source Folder\"></p>\n<p>创建db.properties配置文件，注意key值必须和规定的一致</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url=jdbc:mysql://localhost:3306/jdbc_db</span><br><span class=\"line\">username=root</span><br><span class=\"line\">password=1234</span><br><span class=\"line\">driverClassName=com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure>\n\n<p>修改后的JDBCUtil</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// package com.it666.jdbc.util;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JDBCUtil</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> DataSource ds = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tProperties p = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">\t\t\tFileInputStream in = <span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"resource/db.properties\"</span>);</span><br><span class=\"line\">\t\t\tp.load(in);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tds = DruidDataSourceFactory.createDataSource(p);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Connection <span class=\"title\">getConn</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> ds.getConnection();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// close方法没有变化</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">(Connection conn, Statement st, ResultSet rs)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (st != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tst.close();</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (conn != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tconn.close();</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (rs != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\trs.close();</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用Druid\"><a href=\"#使用Druid\" class=\"headerlink\" title=\"使用Druid\"></a>使用Druid</h4><p>开源地址：<a href=\"https://github.com/alibaba/druid\" target=\"_blank\" rel=\"noopener\">https://github.com/alibaba/druid</a><br>Druid是一个JDBC组件库，包括数据库连接池、SQL Parser等组件。DruidDataSource是最好的数据库连接池</p>\n<p>从DBCP到Druid<br>DruidDataSource的配置是兼容DBCP的，从DBCP迁移到DruidDataSource，只需要修改数据源的实现类就可以了<br>只需要导入jar包(druid-1.0.15.jar)，修改代码即可</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 修改创建DataSource的实现类即可，将Basic修改为Druid</span></span><br><span class=\"line\">ds = BasicDataSourceFactory.createDataSource(p); <span class=\"comment\">// DBCP</span></span><br><span class=\"line\">ds = DruidDataSourceFactory.createDataSource(p); <span class=\"comment\">// Druid</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005977005.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级JDBC连接数据库</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"存储过程\"><a href=\"#存储过程\" class=\"headerlink\" title=\"存储过程\"></a>存储过程</h2><ol>\n<li>在数据库当中定义一个存储过程<br><img src=\"/2020/02/03/jdbc-note-3/1.png\" alt=\"定义存储过程\"></li>\n<li>JDBC调用一个参数的存储过程<br><img src=\"/2020/02/03/jdbc-note-3/2.png\" alt=\"jdbc执行存储过程\"></li>\n<li>编写输入参数和输出参数的存储过程<br><img src=\"/2020/02/03/jdbc-note-3/3.png\" alt=\"2定义存储过程\"></li>\n<li>JDBC调用二个参数的存储过程<br><img src=\"/2020/02/03/jdbc-note-3/4.png\" alt=\"2jdbc执行存储过程\"></li>\n</ol>\n<h2 id=\"事物\"><a href=\"#事物\" class=\"headerlink\" title=\"事物\"></a>事物</h2><p>模拟zs与ls进行转账<br>1.检查zs账户余额<br>2.减少zs账户1000<br>3.增加ls账户1000<br><img src=\"/2020/02/03/jdbc-note-3/5.png\" alt=\"模拟转账\"></p>\n<h4 id=\"处理事务过程\"><a href=\"#处理事务过程\" class=\"headerlink\" title=\"处理事务过程\"></a>处理事务过程</h4><ol>\n<li>关闭自动提交 conn.setAutoCommit(false);</li>\n<li>没有问题时，提交事务 conn.commit();</li>\n<li>出现异常时，进行回滚操作 conn.rollback()</li>\n</ol>\n<p><img src=\"/2020/02/03/jdbc-note-3/6.png\" alt=\"模拟转账事物\"></p>\n<p>回滚之后，事务结束，释放资源<br>出现异常，没有提交，也不会更新数据库，但是会占用资源，所以要出现异常时，进行回滚操作<br>只有增、删、改才需要事务，查询不需要事务</p>\n<p>如果代码是正确的，测试也成功，但是数据库当中的数据不变，可能是事务没有提交</p>\n<p>InnoDB才支持外键和事务。MyISAM不支持外键和事务<br>设置事务的隔离级别 conn.setTransactionIsolation(Connection.TRANSACTION_REPATABLE_READ)</p>\n<h2 id=\"批处理\"><a href=\"#批处理\" class=\"headerlink\" title=\"批处理\"></a>批处理</h2><p>一次性执行多条Sql语句，允许多条语句一次性提交给数据库批量处理，比单独提交处理要效率高</p>\n<p>批处理方法</p>\n<ul>\n<li>addBatch(String) 添加需要批处理的sql语句</li>\n<li>executeBatch() 最后执批处理</li>\n</ul>\n<p>MySQL默认情况下是不支持批处理的，从5.1.13开始，添加了一个rewriteBatchedStatement参数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String url = <span class=\"string\">\"jdbc:mysql://localhost:3306/jdbc_db?rewriteBatchedStatements=true\"</span>;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2020/02/03/jdbc-note-3/7.png\" alt=\"批处理\"></p>\n<h2 id=\"存储图片\"><a href=\"#存储图片\" class=\"headerlink\" title=\"存储图片\"></a>存储图片</h2><p>数据库当中的BLOB：以二进制流的形式存储图片、音频、视频等多媒体信息</p>\n<p>真正开发中，不会把二进制的文件存放在数据库当中<br>而是把文件存储的路径保存在数据库当中，以后再取出路径，到该路径下读取信息</p>\n<p>BLOB类型</p>\n<ul>\n<li>TINYBLOB (255个字节)</li>\n<li>BLOB (65535字节)</li>\n<li>MEDIUMBLOB (16M)</li>\n<li>LONGBLOB(4G)</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BlobTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//写入图片</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception, SQLException </span>&#123;</span><br><span class=\"line\">\t\tConnection conn = JDBCUtil.getConn();</span><br><span class=\"line\">\t\tString sql = <span class=\"string\">\"insert into student (img) values (?)\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tPreparedStatement ps = conn.prepareStatement(sql);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 读取文件转换成二进制</span></span><br><span class=\"line\">\t\tps.setBlob(<span class=\"number\">1</span>, <span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"d:/test.jpg\"</span>));</span><br><span class=\"line\">\t\tps.executeUpdate();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tJDBCUtil.close(conn, ps, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 读取数据库图片</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\tConnection conn = JDBCUtil.getConn();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tString sql = <span class=\"string\">\"select * from student where id=?\"</span>;</span><br><span class=\"line\">\t\tPreparedStatement ps = conn.prepareStatement(sql);</span><br><span class=\"line\">\t\tps.setInt(<span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tResultSet rs = ps.executeQuery();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (rs.next()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 获取图片</span></span><br><span class=\"line\">\t\t\tBlob blob = rs.getBlob(<span class=\"string\">\"img\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 获取图片二进制流</span></span><br><span class=\"line\">\t\t\tInputStream in = blob.getBinaryStream();</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 写入磁盘</span></span><br><span class=\"line\">\t\t\tFiles.copy(in, Paths.get(<span class=\"string\">\"d:/myxq.jpg\"</span>));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tJDBCUtil.close(conn, ps, rs);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"获取自动生成的主键\"><a href=\"#获取自动生成的主键\" class=\"headerlink\" title=\"获取自动生成的主键\"></a>获取自动生成的主键</h2><p>需求场景<br>用户注册时，添加用户名，密码后，插入到数据库当中<br>跳转成完善个人信息页，完善信息更新到刚插入的那个记录当中，所以要获取刚插入的那个主键是多少</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    Connection conn = JDBCUtil.getConn();</span><br><span class=\"line\">    String sql = <span class=\"string\">\"insert into stu (name,age) values (?,?)\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">//PreparedStatement sql参数是在定义的时候设置的，所有与Statement不同的是，这个的RETURN_GENERATED_KEYS 是设置在这定义这里</span></span><br><span class=\"line\">    PreparedStatement ps = conn.prepareStatement(sql,Statement.RETURN_GENERATED_KEYS);</span><br><span class=\"line\">    </span><br><span class=\"line\">    ps.setString(<span class=\"number\">1</span>, <span class=\"string\">\"张三\"</span>);</span><br><span class=\"line\">    ps.setInt(<span class=\"number\">2</span>, <span class=\"number\">30</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 这里面是空的</span></span><br><span class=\"line\">    ps.executeUpdate();</span><br><span class=\"line\">    </span><br><span class=\"line\">    ResultSet rs = ps.getGeneratedKeys();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rs.next()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> id =rs.getInt(<span class=\"number\">1</span>);<span class=\"comment\">//获取第一列</span></span><br><span class=\"line\">        System.out.println(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    JDBCUtil.close(conn, ps, rs);</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    Connection conn = JDBCUtil.getConn();</span><br><span class=\"line\">    String sql = <span class=\"string\">\"insert into stu (name,age) values ('张三',30)\"</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Statement st = conn.createStatement();</span><br><span class=\"line\">    <span class=\"comment\">// 1.创建语句时，设置可以获取主键</span></span><br><span class=\"line\">    st.executeUpdate(sql,Statement.RETURN_GENERATED_KEYS);</span><br><span class=\"line\">    <span class=\"comment\">// 2.通过语句对象的getGeneratedKeys获取主键</span></span><br><span class=\"line\">    ResultSet rs = st.getGeneratedKeys();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rs.next()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> id =rs.getInt(<span class=\"number\">1</span>);<span class=\"comment\">//获取第一列</span></span><br><span class=\"line\">        System.out.println(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    JDBCUtil.close(conn, st, rs);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"连接池\"><a href=\"#连接池\" class=\"headerlink\" title=\"连接池\"></a>连接池</h2><h4 id=\"没有连接池的情况\"><a href=\"#没有连接池的情况\" class=\"headerlink\" title=\"没有连接池的情况\"></a>没有连接池的情况</h4><ul>\n<li>每次CRUD操作都要使用数据库的时候，都要创建一个数据库连接对象</li>\n<li>普通的JDBC数据库连接使用 DriverManager 来获取</li>\n<li>每次向数据库建立连接的时候都要将 Connection 加载到内存中</li>\n<li>然后再验证用户名和密码花费时间0.05s～1s左右</li>\n<li>每次CRUD操作就向数据库要一个连接</li>\n<li>执行完成后再断开连接，这样的方式将会消耗大量的资源和时间，若同时有几百人甚至几千人在线，频繁的进行数据库连接操作将占用很多的系统资源，严重的甚至会造成服务器的崩溃</li>\n</ul>\n<h4 id=\"数据库连接池\"><a href=\"#数据库连接池\" class=\"headerlink\" title=\"数据库连接池\"></a>数据库连接池</h4><ul>\n<li>池<br>保存对象的容器</li>\n<li>连接池<br>保存数据库连接对象的容器</li>\n<li>作用<br>初始化时创建一定数量的对象。需要时直接从池中取出一个空闲对象<br>用完后并不直接释放掉对象，而是再放到对象池中以方便下一次对象请求可以直接复用<br>池技术的优势是，可以消除对象创建所带来的延迟，从而提高系统的性能 </li>\n<li>数据库连接池<br>数据库连接池的基本思想就是为数据库连接建立一个“缓冲池”<br>预先在缓冲池中放入一定数量的连接，当需要建立数据库连接时<br>只需从“缓冲池”中取出一个，使用完毕之后再放回去<br>我们可以通过设定连接池最大连接数来防止系统无尽的与数据库连接<br>可以通过连接池的管理机制监视数据库的连接的数量﹑使用情况，为系统开发﹑测试及性能调整提供依据</li>\n</ul>\n<p><img src=\"/2020/02/03/jdbc-note-3/8.png\" alt=\"连接池\"><br>连接对象是以链表形式存放，已释放的连接，放到最后</p>\n<h4 id=\"连接池中的属性\"><a href=\"#连接池中的属性\" class=\"headerlink\" title=\"连接池中的属性\"></a>连接池中的属性</h4><p>合理的设置连接池的属性，会提高连接池的性能</p>\n<ol>\n<li>连接数据库时需要的4个要素<br>驱动名称，数据库地址，用户名，密码</li>\n<li>初始化连接数<br>初始化时，连接池当中创建多少个Connection对象</li>\n<li>最大连接数<br>连接池当中最多存储多少个Connection对象</li>\n<li>最小连接数<br>连接池当中最少得存多个少Connection对象</li>\n<li>最大的空闲时间<br>如果一个获取了连接对象，在指定时间内没有任何动作，就会自动释放链接</li>\n<li>最大等待时间<br>在指定时间内，尝试获取连接，如果超出了指定时间，就会提示获取失败</li>\n</ol>\n<h4 id=\"连接池使用\"><a href=\"#连接池使用\" class=\"headerlink\" title=\"连接池使用\"></a>连接池使用</h4><p>连接池是使用javax.sql.DataSource接口来表示连接池<br>DataSource和jdbc一样，也是只提供一个接口，由第三方组织来提供<br>DataSource数据源和连接池Connection Pool是同一个东西，只是叫法不一样而已</p>\n<p>常见连接池</p>\n<ul>\n<li>DBCP<br>Spring推荐，Tomcat的数据源使用的就是DBCP</li>\n<li>C3P0<br>C3P0是一个开放源代码的JDBC连接池，它在lib目录中与Hibernate一起发布<br>从2007年就没有更新了，性能比较差</li>\n<li>Druid<br>阿里巴巴提供的连接池-德鲁伊-号称最好的连接池，它里面除了这些， 还有更多的功能</li>\n</ul>\n<p>使用连接池与不使用连接池区别</p>\n<ol>\n<li>获取方式不同<br>传统：Connection conn = DriverManager.getConnection(url.userName,pwd);<br>连接池：Conneciton conn = DataSource对象.getConnection();</li>\n<li>释放资源不同<br>传统：和数据库断开conn.close();<br>连接池：把数据库连接对象还给连接池，还可以给下一个人来使用</li>\n</ol>\n<h4 id=\"创建DataSource\"><a href=\"#创建DataSource\" class=\"headerlink\" title=\"创建DataSource\"></a>创建DataSource</h4><p>使用DBCP，DBCP是Apache软件基金组织下的开源连接池实现</p>\n<p>1.导入相关的jar包<br>commons-dbcp-1.4.jar<br>commons-pool-1.5.6.jar<br>记得build path</p>\n<p><img src=\"/2020/02/03/jdbc-note-3/9.png\" alt=\"DBCP\"></p>\n<h4 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h4><p>以.properties作为扩展名的文件<br>把库的连接地址，用户名，密码都写在了代码当中，不便于后期的维护<br>专门为数据库提供一个配置文件，里面就专门存放连接数据库的相关信息</p>\n<p>配置文件的书写</p>\n<ul>\n<li>db.properties</li>\n<li>内部是以key-value的形式存放<br>userName=root<br>password=1234</li>\n<li>在Java中读取配置文件</li>\n</ul>\n<p><img src=\"/2020/02/03/jdbc-note-3/10.png\" alt=\"配置文件\"></p>\n<h4 id=\"改写配置文件\"><a href=\"#改写配置文件\" class=\"headerlink\" title=\"改写配置文件\"></a>改写配置文件</h4><p>创建一个Source Folder文件夹，命名为:resource<br>只有Source Folder才会编译到字节码中，会编译到bin目录中<br><img src=\"/2020/02/03/jdbc-note-3/11.png\" alt=\"Source Folder\"></p>\n<p>创建db.properties配置文件，注意key值必须和规定的一致</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url=jdbc:mysql://localhost:3306/jdbc_db</span><br><span class=\"line\">username=root</span><br><span class=\"line\">password=1234</span><br><span class=\"line\">driverClassName=com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure>\n\n<p>修改后的JDBCUtil</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// package com.it666.jdbc.util;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JDBCUtil</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> DataSource ds = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tProperties p = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">\t\t\tFileInputStream in = <span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"resource/db.properties\"</span>);</span><br><span class=\"line\">\t\t\tp.load(in);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tds = DruidDataSourceFactory.createDataSource(p);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Connection <span class=\"title\">getConn</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> ds.getConnection();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// close方法没有变化</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">(Connection conn, Statement st, ResultSet rs)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (st != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tst.close();</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (conn != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tconn.close();</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (rs != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\trs.close();</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用Druid\"><a href=\"#使用Druid\" class=\"headerlink\" title=\"使用Druid\"></a>使用Druid</h4><p>开源地址：<a href=\"https://github.com/alibaba/druid\" target=\"_blank\" rel=\"noopener\">https://github.com/alibaba/druid</a><br>Druid是一个JDBC组件库，包括数据库连接池、SQL Parser等组件。DruidDataSource是最好的数据库连接池</p>\n<p>从DBCP到Druid<br>DruidDataSource的配置是兼容DBCP的，从DBCP迁移到DruidDataSource，只需要修改数据源的实现类就可以了<br>只需要导入jar包(druid-1.0.15.jar)，修改代码即可</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 修改创建DataSource的实现类即可，将Basic修改为Druid</span></span><br><span class=\"line\">ds = BasicDataSourceFactory.createDataSource(p); <span class=\"comment\">// DBCP</span></span><br><span class=\"line\">ds = DruidDataSourceFactory.createDataSource(p); <span class=\"comment\">// Druid</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005977005.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级JDBC连接数据库</a></p>\n"},{"title":"JDBC笔记-改进","date":"2020-02-04T03:40:49.000Z","_content":"## 重构DAO\n![重构代码](jdbc-note-4/1.png)\n\n重构代码原则\n- 同一个类中\n在一个类当中有多个方法当中有太多相同的代码\n不同的地方通过参数传递进去\n把它们抽到一个方法当中\n- 不同类中\n不同类当中有共同的代码给抽取到一个新类当中。\n大家同时共享该类中的内容\n\n\n\n## 抽取DML方法\n1. 设计一个方法\n2. 要求传入两个参数\n第一个参数sql语句模板\n第二个参数为可变参数，设置语句参数值\n1. 返回值\n返回值为int，受影响的行数\n\n抽取代码\n1. 用可变参数（可变参数要放在参数的最后一个，可变参数本质是数组\n）\n2. 在com.it666.jdbc.util中新建一个CRUDTemplate类\n![抽取代码](jdbc-note-4/2.png)\n调用代码\n![调用代码](jdbc-note-4/3.png)\n\n## 抽取DQL\n抽取代码前\n![抽取代码](jdbc-note-4/4.png)\n抽取代码，也是写在com.it666.jdbc.util中的CRUDTemplate类中\n![调用代码](jdbc-note-4/5.png)\n\n\n## 用结果集处理器改进DQL\n每一个都封装成了student对象，这写死了，只能查询学生，使用泛型改进\n不知道封装成什么类型的对象，就不应该处理结果集\n\n解决办法\n- 把处理结果集的行为交给每个DAO\n- 为了规范每个DAO的处理结果集，大家都叫同样的名字，这样在模板中就可以调用同一个名称\n- 定义一个处理结果集的接口\n\n1. 定义一个接口\n\n声明一个处理结果集方法 com.it666.jdbc.handler中的IResultSetHandler\n![定义接口](jdbc-note-4/6.png)\n2. 在具体DAO当中实现接口\n\n实现处理结果集方法 com.it666.jdbc.handler中的StudentResHandleImp\n![实现接口](jdbc-note-4/7.png)\n\n3. 创建一个接口实现对象传给查询方法\n\ncom.it666.jdbc.dao.impl中的StudentDaoImpl\n![传递接口](jdbc-note-4/8.png)\n\n4. 在查询方法当中调用处理结果集方法\n\ncom.it666.jdbc.util中的CRUDTemplate\n![调用结果集](jdbc-note-4/9.png)\n\n项目结构\n![调用结果集](jdbc-note-4/11.png)\n\n总流程\n![调用结果集](jdbc-note-4/10.png)\n\n## 用泛型改进结果集处理器\n1. 直接定义为T\n\n处理所有结果集都必须得要返回List\n有的时候没有必要返回List,想要查询的仅仅是一个结果整数，此时还必须得要从List当中出来\n\n2. 由调用者自己来决定返回什么内容\n\n统一规定返回类型为T类型，调用者使用时去决定是什么类型\n![定义接口](jdbc-note-4/12.png)\n\n3. 实现类当中实现接口时，要指定返回什么类型\n![实现类](jdbc-note-4/13.png)\n\n4.声明方法时，声明返回值为一个泛型类型，具体是什么类型，有参数来指定\n\n在方法的参数中标识泛型 必须在方法名前加<T> T 不然报错\n![声明方法](jdbc-note-4/14.png)\n\n\n总体结构\n![](jdbc-note-4/15.png)\n\n例子：添加获取总人数方法\n![](jdbc-note-4/16.png)\n\n## 结构集处理器\n\n存在的问题\n该类只能将结果集中的一行数据封装成一个Student对象\n我们如果有多个domain，就得提供多个结果集处理器\n\n自动的把一行行数据封装成对象，自动设置属性，结果集处理器，处理不同表时，干的事都一样\n1.给我一个要封装的类\n2.自动设置属性\n\n规定\n1.表中的列名必须和对象中的属性名相同\n2.规定表中的类型必须和Java中的类型匹配\n想要完成此项工作，就要使用内省机制\n\n#### 实现步骤\n1.创建一个类实现结果集处理器\n    实现的时候也不知道是什么类型，所以也可以指定为一个泛型\n2.提供一个字段，表示要封装成对象的类型\n3.提供一个构造器，在创建时，就指定是什么类型\n4.在实现方法当中，通过内省机制获取所有属性名称，做为列名\n5.通过传入的类字节码创建对象\n6.通过内省获取字节码中所有的信息\n7.获取所有的属性描述器\n8.遍历属性描述器，获取对象的属性名称 ，规定的属性名和列名相同\n9.通过列名获取结果集中的值\n10.调用属性的set方法把属性的值设置进去\n\n## 内省\nClass类型\n- 字节码类型\n- 所有的字节码把他们当做一个群体类型\n- 通过字节码创建对象\nStudent stu = Student.class.newInstance();\n\n#### 内省\n\n内省 (Introspector类)\n用于查看和操作JavaBean中的属性\n    \nIntrospector.getBeanInfo(A.class,B.class);\n- 获取指定类当中的字节码属性信息\n- 获取A类及A类父类当中的属性，但是不包括指定的类\n- 返回值BeanInfo\n\n\nBeanInfo\n\n- getPropertyDescriptors()\n\n获取JavaBean中的属性描述器\n返回的是一个数组（PropertyDescriptor[]）\n每一个属性都有描述器\nJavaBean中有多个属性，所以返回了一个数组\n\n- 获取属性名\npd.getName();\n- 获取get方法\npd.getReadMethod();\n- 获取set方法\npd.getWriteMethod\n- 动态调用方法\n方法名.invoke(对象名称,\"值\")\n## 内省改进结果集处理器\n\n注意属性必须和数据字段名相同\n\n封装一个对象的通用结果集处理器\n```java\n// package com.it666.jdbc.handler;\n// BeanHandler 封装一个对象\npublic class BeanHandler<T> implements IResultSetHandler<T> {\n\tprivate Class<T> classType;\n\n\tpublic BeanHandler(Class<T> classType) {\n\t\tthis.classType = classType;\n\t}\n\n\t@Override\n\tpublic T handle(ResultSet rs) throws Exception {\n\t\tif (rs.next()) {\n\t\t\t// 创建一个对象\n\t\t\tT obj = this.classType.newInstance();\n\t\t\t// 通过内省来拿属性\n\t\t\tBeanInfo bf = Introspector.getBeanInfo(classType,Object.class);//Object.class代表不要获取Object，获取到Object就停止\n            \n            // 获取所有描述器\n\t\t\tPropertyDescriptor[] pds = bf.getPropertyDescriptors();\n\t\t\t\n\t\t\tfor (PropertyDescriptor pd : pds) {\n\t\t\t\t// 根据属性名去数据库里取值\n                Object val = rs.getObject(pd.getName());\n\t\t\t\t\n                // 给创建的对象设置属性值\n\t\t\t\tpd.getWriteMethod().invoke(obj, val);\n\t\t\t}\n\t\t\treturn obj;\n\t\t}\n\t\t\n\t\treturn null;\n\t}\n\n}\n```\n调用通用结果集处理器\n```java\n@Override\npublic Student get(int id) {  \n    String sql = \"select * from stu where id = ?\";\n    // 传入new BeanHandler<Student>(Student.class)\n    // Student.class代表需要封装一个Student类型\n    // <Student>代表返回值为Student类型\n\n    return  CRUDTemplate.executeQuery(sql,new BeanHandler<Student>(Student.class) ,id);\n    \n}\n```\n\n封装多个对象的通用结果集处理器\n\n```java\n// package com.it666.jdbc.handler;\n// BeanListHandler 封装多条信息的结果集处理器\npublic class BeanListHandler<T> implements IResultSetHandler<List<T>> {\n\tprivate Class<T> classType;\n\tpublic BeanListHandler(Class<T> classType) {\n\t\tthis.classType = classType;\n\t}\n\t\n\t@Override\n\tpublic List<T> handle(ResultSet rs) throws Exception {\n\t\tList<T> list = new ArrayList<>();\n\t\t\n\t\twhile (rs.next()) {\n\t\t\tT obj = classType.newInstance();\n\t\t\tBeanInfo bf = Introspector.getBeanInfo(this.classType,Object.class);\n\t\t\tPropertyDescriptor [] pds = bf.getPropertyDescriptors();\n\t\t\t\n\t\t\tfor (PropertyDescriptor pd : pds) {\n\t\t\t\tObject val = rs.getObject(pd.getName());\n\t\t\t\tpd.getWriteMethod().invoke(obj, val);\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tlist.add(obj);\n\t\t}\n\t\t\n\t\treturn list;\n\t}\n\n}\n\n```\n\n调用通用结果集处理器\n\n```java\n@Override\npublic List<Student> getAll() {\n    String sql = \"select * from stu\";\n    return CRUDTemplate.executeQuery(sql,new BeanListHandler<Student>(Student.class));\n}\n```\n工程结构\n![内省工程结构](./jdbc-note-4/17.png)\n\n\n## 整体重构思路\n1. 写DAO接口，在实现类中现实各种方法save(),delete(),updata(),get(),getAll();\n![原始代码](./jdbc-note-4/18.png)\n- 声明静态变量：驱动名称、url、用户名、密码\n- 静态代码块加载驱动\n- JDBCUtil提供获取Connection对象和关闭资源的方法\n- 预编译语句对象，解决拼接sql语句太麻烦的问题\n\n2. 用连接池和配置文件改进，创建CRUDTemplate类，DML使用executeUpdate方法，DQL使用executeQuery方法\n\n![重构1](./jdbc-note-4/19.png)\n\n3. 结果集处理器改进\n\n在实现类StudentDaoImpl中添加class StudentResHandleImp implements IResultSetHandler\n\n![重构2](./jdbc-note-4/20.png)\n\n\n4. 用泛型改进结果集处理器\n```java\n// 接口\npublic interface IResultSetHandler<T> {\n\tT handle (ResultSet rs) throws Exception;\n}\n// 接口实现类\n// package com.it666.jdbc.dao.impl;\n// 获取对象List的结果集处理器\nclass StudentResHandleImp implements IResultSetHandler<List<Student>>{ }\n// 获取一个Integer的结果集处理器\nclass StuCountResultSetImpl implements IResultSetHandler<Integer>{ }\n\n```\n\n![重构3](./jdbc-note-4/21.png)\n\n5. 用内省改进\n针对DQL，对get()和getAll()的改进代码不同\n![重构4](./jdbc-note-4/22.png)\n\n## 参考资料\n[Java零基础到高级JDBC连接数据库](https://study.163.com/course/introduction/1005977005.htm)","source":"_posts/jdbc-note-4.md","raw":"---\ntitle: JDBC笔记-改进\ncategories: JDBC笔记\ndate: 2020-02-04 11:40:49\n---\n## 重构DAO\n![重构代码](jdbc-note-4/1.png)\n\n重构代码原则\n- 同一个类中\n在一个类当中有多个方法当中有太多相同的代码\n不同的地方通过参数传递进去\n把它们抽到一个方法当中\n- 不同类中\n不同类当中有共同的代码给抽取到一个新类当中。\n大家同时共享该类中的内容\n\n\n\n## 抽取DML方法\n1. 设计一个方法\n2. 要求传入两个参数\n第一个参数sql语句模板\n第二个参数为可变参数，设置语句参数值\n1. 返回值\n返回值为int，受影响的行数\n\n抽取代码\n1. 用可变参数（可变参数要放在参数的最后一个，可变参数本质是数组\n）\n2. 在com.it666.jdbc.util中新建一个CRUDTemplate类\n![抽取代码](jdbc-note-4/2.png)\n调用代码\n![调用代码](jdbc-note-4/3.png)\n\n## 抽取DQL\n抽取代码前\n![抽取代码](jdbc-note-4/4.png)\n抽取代码，也是写在com.it666.jdbc.util中的CRUDTemplate类中\n![调用代码](jdbc-note-4/5.png)\n\n\n## 用结果集处理器改进DQL\n每一个都封装成了student对象，这写死了，只能查询学生，使用泛型改进\n不知道封装成什么类型的对象，就不应该处理结果集\n\n解决办法\n- 把处理结果集的行为交给每个DAO\n- 为了规范每个DAO的处理结果集，大家都叫同样的名字，这样在模板中就可以调用同一个名称\n- 定义一个处理结果集的接口\n\n1. 定义一个接口\n\n声明一个处理结果集方法 com.it666.jdbc.handler中的IResultSetHandler\n![定义接口](jdbc-note-4/6.png)\n2. 在具体DAO当中实现接口\n\n实现处理结果集方法 com.it666.jdbc.handler中的StudentResHandleImp\n![实现接口](jdbc-note-4/7.png)\n\n3. 创建一个接口实现对象传给查询方法\n\ncom.it666.jdbc.dao.impl中的StudentDaoImpl\n![传递接口](jdbc-note-4/8.png)\n\n4. 在查询方法当中调用处理结果集方法\n\ncom.it666.jdbc.util中的CRUDTemplate\n![调用结果集](jdbc-note-4/9.png)\n\n项目结构\n![调用结果集](jdbc-note-4/11.png)\n\n总流程\n![调用结果集](jdbc-note-4/10.png)\n\n## 用泛型改进结果集处理器\n1. 直接定义为T\n\n处理所有结果集都必须得要返回List\n有的时候没有必要返回List,想要查询的仅仅是一个结果整数，此时还必须得要从List当中出来\n\n2. 由调用者自己来决定返回什么内容\n\n统一规定返回类型为T类型，调用者使用时去决定是什么类型\n![定义接口](jdbc-note-4/12.png)\n\n3. 实现类当中实现接口时，要指定返回什么类型\n![实现类](jdbc-note-4/13.png)\n\n4.声明方法时，声明返回值为一个泛型类型，具体是什么类型，有参数来指定\n\n在方法的参数中标识泛型 必须在方法名前加<T> T 不然报错\n![声明方法](jdbc-note-4/14.png)\n\n\n总体结构\n![](jdbc-note-4/15.png)\n\n例子：添加获取总人数方法\n![](jdbc-note-4/16.png)\n\n## 结构集处理器\n\n存在的问题\n该类只能将结果集中的一行数据封装成一个Student对象\n我们如果有多个domain，就得提供多个结果集处理器\n\n自动的把一行行数据封装成对象，自动设置属性，结果集处理器，处理不同表时，干的事都一样\n1.给我一个要封装的类\n2.自动设置属性\n\n规定\n1.表中的列名必须和对象中的属性名相同\n2.规定表中的类型必须和Java中的类型匹配\n想要完成此项工作，就要使用内省机制\n\n#### 实现步骤\n1.创建一个类实现结果集处理器\n    实现的时候也不知道是什么类型，所以也可以指定为一个泛型\n2.提供一个字段，表示要封装成对象的类型\n3.提供一个构造器，在创建时，就指定是什么类型\n4.在实现方法当中，通过内省机制获取所有属性名称，做为列名\n5.通过传入的类字节码创建对象\n6.通过内省获取字节码中所有的信息\n7.获取所有的属性描述器\n8.遍历属性描述器，获取对象的属性名称 ，规定的属性名和列名相同\n9.通过列名获取结果集中的值\n10.调用属性的set方法把属性的值设置进去\n\n## 内省\nClass类型\n- 字节码类型\n- 所有的字节码把他们当做一个群体类型\n- 通过字节码创建对象\nStudent stu = Student.class.newInstance();\n\n#### 内省\n\n内省 (Introspector类)\n用于查看和操作JavaBean中的属性\n    \nIntrospector.getBeanInfo(A.class,B.class);\n- 获取指定类当中的字节码属性信息\n- 获取A类及A类父类当中的属性，但是不包括指定的类\n- 返回值BeanInfo\n\n\nBeanInfo\n\n- getPropertyDescriptors()\n\n获取JavaBean中的属性描述器\n返回的是一个数组（PropertyDescriptor[]）\n每一个属性都有描述器\nJavaBean中有多个属性，所以返回了一个数组\n\n- 获取属性名\npd.getName();\n- 获取get方法\npd.getReadMethod();\n- 获取set方法\npd.getWriteMethod\n- 动态调用方法\n方法名.invoke(对象名称,\"值\")\n## 内省改进结果集处理器\n\n注意属性必须和数据字段名相同\n\n封装一个对象的通用结果集处理器\n```java\n// package com.it666.jdbc.handler;\n// BeanHandler 封装一个对象\npublic class BeanHandler<T> implements IResultSetHandler<T> {\n\tprivate Class<T> classType;\n\n\tpublic BeanHandler(Class<T> classType) {\n\t\tthis.classType = classType;\n\t}\n\n\t@Override\n\tpublic T handle(ResultSet rs) throws Exception {\n\t\tif (rs.next()) {\n\t\t\t// 创建一个对象\n\t\t\tT obj = this.classType.newInstance();\n\t\t\t// 通过内省来拿属性\n\t\t\tBeanInfo bf = Introspector.getBeanInfo(classType,Object.class);//Object.class代表不要获取Object，获取到Object就停止\n            \n            // 获取所有描述器\n\t\t\tPropertyDescriptor[] pds = bf.getPropertyDescriptors();\n\t\t\t\n\t\t\tfor (PropertyDescriptor pd : pds) {\n\t\t\t\t// 根据属性名去数据库里取值\n                Object val = rs.getObject(pd.getName());\n\t\t\t\t\n                // 给创建的对象设置属性值\n\t\t\t\tpd.getWriteMethod().invoke(obj, val);\n\t\t\t}\n\t\t\treturn obj;\n\t\t}\n\t\t\n\t\treturn null;\n\t}\n\n}\n```\n调用通用结果集处理器\n```java\n@Override\npublic Student get(int id) {  \n    String sql = \"select * from stu where id = ?\";\n    // 传入new BeanHandler<Student>(Student.class)\n    // Student.class代表需要封装一个Student类型\n    // <Student>代表返回值为Student类型\n\n    return  CRUDTemplate.executeQuery(sql,new BeanHandler<Student>(Student.class) ,id);\n    \n}\n```\n\n封装多个对象的通用结果集处理器\n\n```java\n// package com.it666.jdbc.handler;\n// BeanListHandler 封装多条信息的结果集处理器\npublic class BeanListHandler<T> implements IResultSetHandler<List<T>> {\n\tprivate Class<T> classType;\n\tpublic BeanListHandler(Class<T> classType) {\n\t\tthis.classType = classType;\n\t}\n\t\n\t@Override\n\tpublic List<T> handle(ResultSet rs) throws Exception {\n\t\tList<T> list = new ArrayList<>();\n\t\t\n\t\twhile (rs.next()) {\n\t\t\tT obj = classType.newInstance();\n\t\t\tBeanInfo bf = Introspector.getBeanInfo(this.classType,Object.class);\n\t\t\tPropertyDescriptor [] pds = bf.getPropertyDescriptors();\n\t\t\t\n\t\t\tfor (PropertyDescriptor pd : pds) {\n\t\t\t\tObject val = rs.getObject(pd.getName());\n\t\t\t\tpd.getWriteMethod().invoke(obj, val);\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tlist.add(obj);\n\t\t}\n\t\t\n\t\treturn list;\n\t}\n\n}\n\n```\n\n调用通用结果集处理器\n\n```java\n@Override\npublic List<Student> getAll() {\n    String sql = \"select * from stu\";\n    return CRUDTemplate.executeQuery(sql,new BeanListHandler<Student>(Student.class));\n}\n```\n工程结构\n![内省工程结构](./jdbc-note-4/17.png)\n\n\n## 整体重构思路\n1. 写DAO接口，在实现类中现实各种方法save(),delete(),updata(),get(),getAll();\n![原始代码](./jdbc-note-4/18.png)\n- 声明静态变量：驱动名称、url、用户名、密码\n- 静态代码块加载驱动\n- JDBCUtil提供获取Connection对象和关闭资源的方法\n- 预编译语句对象，解决拼接sql语句太麻烦的问题\n\n2. 用连接池和配置文件改进，创建CRUDTemplate类，DML使用executeUpdate方法，DQL使用executeQuery方法\n\n![重构1](./jdbc-note-4/19.png)\n\n3. 结果集处理器改进\n\n在实现类StudentDaoImpl中添加class StudentResHandleImp implements IResultSetHandler\n\n![重构2](./jdbc-note-4/20.png)\n\n\n4. 用泛型改进结果集处理器\n```java\n// 接口\npublic interface IResultSetHandler<T> {\n\tT handle (ResultSet rs) throws Exception;\n}\n// 接口实现类\n// package com.it666.jdbc.dao.impl;\n// 获取对象List的结果集处理器\nclass StudentResHandleImp implements IResultSetHandler<List<Student>>{ }\n// 获取一个Integer的结果集处理器\nclass StuCountResultSetImpl implements IResultSetHandler<Integer>{ }\n\n```\n\n![重构3](./jdbc-note-4/21.png)\n\n5. 用内省改进\n针对DQL，对get()和getAll()的改进代码不同\n![重构4](./jdbc-note-4/22.png)\n\n## 参考资料\n[Java零基础到高级JDBC连接数据库](https://study.163.com/course/introduction/1005977005.htm)","slug":"jdbc-note-4","published":1,"updated":"2020-06-13T02:55:34.776Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke3x9g5j000yzgvubgcs7jtu","content":"<h2 id=\"重构DAO\"><a href=\"#重构DAO\" class=\"headerlink\" title=\"重构DAO\"></a>重构DAO</h2><p><img src=\"/2020/02/04/jdbc-note-4/1.png\" alt=\"重构代码\"></p>\n<p>重构代码原则</p>\n<ul>\n<li>同一个类中<br>在一个类当中有多个方法当中有太多相同的代码<br>不同的地方通过参数传递进去<br>把它们抽到一个方法当中</li>\n<li>不同类中<br>不同类当中有共同的代码给抽取到一个新类当中。<br>大家同时共享该类中的内容</li>\n</ul>\n<h2 id=\"抽取DML方法\"><a href=\"#抽取DML方法\" class=\"headerlink\" title=\"抽取DML方法\"></a>抽取DML方法</h2><ol>\n<li>设计一个方法</li>\n<li>要求传入两个参数<br>第一个参数sql语句模板<br>第二个参数为可变参数，设置语句参数值</li>\n<li>返回值<br>返回值为int，受影响的行数</li>\n</ol>\n<p>抽取代码</p>\n<ol>\n<li>用可变参数（可变参数要放在参数的最后一个，可变参数本质是数组<br>）</li>\n<li>在com.it666.jdbc.util中新建一个CRUDTemplate类<br><img src=\"/2020/02/04/jdbc-note-4/2.png\" alt=\"抽取代码\"><br>调用代码<br><img src=\"/2020/02/04/jdbc-note-4/3.png\" alt=\"调用代码\"></li>\n</ol>\n<h2 id=\"抽取DQL\"><a href=\"#抽取DQL\" class=\"headerlink\" title=\"抽取DQL\"></a>抽取DQL</h2><p>抽取代码前<br><img src=\"/2020/02/04/jdbc-note-4/4.png\" alt=\"抽取代码\"><br>抽取代码，也是写在com.it666.jdbc.util中的CRUDTemplate类中<br><img src=\"/2020/02/04/jdbc-note-4/5.png\" alt=\"调用代码\"></p>\n<h2 id=\"用结果集处理器改进DQL\"><a href=\"#用结果集处理器改进DQL\" class=\"headerlink\" title=\"用结果集处理器改进DQL\"></a>用结果集处理器改进DQL</h2><p>每一个都封装成了student对象，这写死了，只能查询学生，使用泛型改进<br>不知道封装成什么类型的对象，就不应该处理结果集</p>\n<p>解决办法</p>\n<ul>\n<li>把处理结果集的行为交给每个DAO</li>\n<li>为了规范每个DAO的处理结果集，大家都叫同样的名字，这样在模板中就可以调用同一个名称</li>\n<li>定义一个处理结果集的接口</li>\n</ul>\n<ol>\n<li>定义一个接口</li>\n</ol>\n<p>声明一个处理结果集方法 com.it666.jdbc.handler中的IResultSetHandler<br><img src=\"/2020/02/04/jdbc-note-4/6.png\" alt=\"定义接口\"><br>2. 在具体DAO当中实现接口</p>\n<p>实现处理结果集方法 com.it666.jdbc.handler中的StudentResHandleImp<br><img src=\"/2020/02/04/jdbc-note-4/7.png\" alt=\"实现接口\"></p>\n<ol start=\"3\">\n<li>创建一个接口实现对象传给查询方法</li>\n</ol>\n<p>com.it666.jdbc.dao.impl中的StudentDaoImpl<br><img src=\"/2020/02/04/jdbc-note-4/8.png\" alt=\"传递接口\"></p>\n<ol start=\"4\">\n<li>在查询方法当中调用处理结果集方法</li>\n</ol>\n<p>com.it666.jdbc.util中的CRUDTemplate<br><img src=\"/2020/02/04/jdbc-note-4/9.png\" alt=\"调用结果集\"></p>\n<p>项目结构<br><img src=\"/2020/02/04/jdbc-note-4/11.png\" alt=\"调用结果集\"></p>\n<p>总流程<br><img src=\"/2020/02/04/jdbc-note-4/10.png\" alt=\"调用结果集\"></p>\n<h2 id=\"用泛型改进结果集处理器\"><a href=\"#用泛型改进结果集处理器\" class=\"headerlink\" title=\"用泛型改进结果集处理器\"></a>用泛型改进结果集处理器</h2><ol>\n<li>直接定义为T</li>\n</ol>\n<p>处理所有结果集都必须得要返回List<br>有的时候没有必要返回List,想要查询的仅仅是一个结果整数，此时还必须得要从List当中出来</p>\n<ol start=\"2\">\n<li>由调用者自己来决定返回什么内容</li>\n</ol>\n<p>统一规定返回类型为T类型，调用者使用时去决定是什么类型<br><img src=\"/2020/02/04/jdbc-note-4/12.png\" alt=\"定义接口\"></p>\n<ol start=\"3\">\n<li>实现类当中实现接口时，要指定返回什么类型<br><img src=\"/2020/02/04/jdbc-note-4/13.png\" alt=\"实现类\"></li>\n</ol>\n<p>4.声明方法时，声明返回值为一个泛型类型，具体是什么类型，有参数来指定</p>\n<p>在方法的参数中标识泛型 必须在方法名前加<T> T 不然报错<br><img src=\"/2020/02/04/jdbc-note-4/14.png\" alt=\"声明方法\"></T></p>\n<p>总体结构<br><img src=\"/2020/02/04/jdbc-note-4/15.png\" alt></p>\n<p>例子：添加获取总人数方法<br><img src=\"/2020/02/04/jdbc-note-4/16.png\" alt></p>\n<h2 id=\"结构集处理器\"><a href=\"#结构集处理器\" class=\"headerlink\" title=\"结构集处理器\"></a>结构集处理器</h2><p>存在的问题<br>该类只能将结果集中的一行数据封装成一个Student对象<br>我们如果有多个domain，就得提供多个结果集处理器</p>\n<p>自动的把一行行数据封装成对象，自动设置属性，结果集处理器，处理不同表时，干的事都一样<br>1.给我一个要封装的类<br>2.自动设置属性</p>\n<p>规定<br>1.表中的列名必须和对象中的属性名相同<br>2.规定表中的类型必须和Java中的类型匹配<br>想要完成此项工作，就要使用内省机制</p>\n<h4 id=\"实现步骤\"><a href=\"#实现步骤\" class=\"headerlink\" title=\"实现步骤\"></a>实现步骤</h4><p>1.创建一个类实现结果集处理器<br>    实现的时候也不知道是什么类型，所以也可以指定为一个泛型<br>2.提供一个字段，表示要封装成对象的类型<br>3.提供一个构造器，在创建时，就指定是什么类型<br>4.在实现方法当中，通过内省机制获取所有属性名称，做为列名<br>5.通过传入的类字节码创建对象<br>6.通过内省获取字节码中所有的信息<br>7.获取所有的属性描述器<br>8.遍历属性描述器，获取对象的属性名称 ，规定的属性名和列名相同<br>9.通过列名获取结果集中的值<br>10.调用属性的set方法把属性的值设置进去</p>\n<h2 id=\"内省\"><a href=\"#内省\" class=\"headerlink\" title=\"内省\"></a>内省</h2><p>Class类型</p>\n<ul>\n<li>字节码类型</li>\n<li>所有的字节码把他们当做一个群体类型</li>\n<li>通过字节码创建对象<br>Student stu = Student.class.newInstance();</li>\n</ul>\n<h4 id=\"内省-1\"><a href=\"#内省-1\" class=\"headerlink\" title=\"内省\"></a>内省</h4><p>内省 (Introspector类)<br>用于查看和操作JavaBean中的属性</p>\n<p>Introspector.getBeanInfo(A.class,B.class);</p>\n<ul>\n<li>获取指定类当中的字节码属性信息</li>\n<li>获取A类及A类父类当中的属性，但是不包括指定的类</li>\n<li>返回值BeanInfo</li>\n</ul>\n<p>BeanInfo</p>\n<ul>\n<li>getPropertyDescriptors()</li>\n</ul>\n<p>获取JavaBean中的属性描述器<br>返回的是一个数组（PropertyDescriptor[]）<br>每一个属性都有描述器<br>JavaBean中有多个属性，所以返回了一个数组</p>\n<ul>\n<li>获取属性名<br>pd.getName();</li>\n<li>获取get方法<br>pd.getReadMethod();</li>\n<li>获取set方法<br>pd.getWriteMethod</li>\n<li>动态调用方法<br>方法名.invoke(对象名称,”值”)<h2 id=\"内省改进结果集处理器\"><a href=\"#内省改进结果集处理器\" class=\"headerlink\" title=\"内省改进结果集处理器\"></a>内省改进结果集处理器</h2></li>\n</ul>\n<p>注意属性必须和数据字段名相同</p>\n<p>封装一个对象的通用结果集处理器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// package com.it666.jdbc.handler;</span></span><br><span class=\"line\"><span class=\"comment\">// BeanHandler 封装一个对象</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BeanHandler</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">IResultSetHandler</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Class&lt;T&gt; classType;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BeanHandler</span><span class=\"params\">(Class&lt;T&gt; classType)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.classType = classType;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">handle</span><span class=\"params\">(ResultSet rs)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (rs.next()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 创建一个对象</span></span><br><span class=\"line\">\t\t\tT obj = <span class=\"keyword\">this</span>.classType.newInstance();</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 通过内省来拿属性</span></span><br><span class=\"line\">\t\t\tBeanInfo bf = Introspector.getBeanInfo(classType,Object.class);<span class=\"comment\">//Object.class代表不要获取Object，获取到Object就停止</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// 获取所有描述器</span></span><br><span class=\"line\">\t\t\tPropertyDescriptor[] pds = bf.getPropertyDescriptors();</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (PropertyDescriptor pd : pds) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 根据属性名去数据库里取值</span></span><br><span class=\"line\">                Object val = rs.getObject(pd.getName());</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">                <span class=\"comment\">// 给创建的对象设置属性值</span></span><br><span class=\"line\">\t\t\t\tpd.getWriteMethod().invoke(obj, val);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>调用通用结果集处理器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Student <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;  </span><br><span class=\"line\">    String sql = <span class=\"string\">\"select * from stu where id = ?\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 传入new BeanHandler&lt;Student&gt;(Student.class)</span></span><br><span class=\"line\">    <span class=\"comment\">// Student.class代表需要封装一个Student类型</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;Student&gt;代表返回值为Student类型</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span>  CRUDTemplate.executeQuery(sql,<span class=\"keyword\">new</span> BeanHandler&lt;Student&gt;(Student.class) ,id);</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>封装多个对象的通用结果集处理器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// package com.it666.jdbc.handler;</span></span><br><span class=\"line\"><span class=\"comment\">// BeanListHandler 封装多条信息的结果集处理器</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BeanListHandler</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">IResultSetHandler</span>&lt;<span class=\"title\">List</span>&lt;<span class=\"title\">T</span>&gt;&gt; </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Class&lt;T&gt; classType;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BeanListHandler</span><span class=\"params\">(Class&lt;T&gt; classType)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.classType = classType;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;T&gt; <span class=\"title\">handle</span><span class=\"params\">(ResultSet rs)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\tList&lt;T&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (rs.next()) &#123;</span><br><span class=\"line\">\t\t\tT obj = classType.newInstance();</span><br><span class=\"line\">\t\t\tBeanInfo bf = Introspector.getBeanInfo(<span class=\"keyword\">this</span>.classType,Object.class);</span><br><span class=\"line\">\t\t\tPropertyDescriptor [] pds = bf.getPropertyDescriptors();</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (PropertyDescriptor pd : pds) &#123;</span><br><span class=\"line\">\t\t\t\tObject val = rs.getObject(pd.getName());</span><br><span class=\"line\">\t\t\t\tpd.getWriteMethod().invoke(obj, val);</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tlist.add(obj);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> list;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调用通用结果集处理器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Student&gt; <span class=\"title\">getAll</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    String sql = <span class=\"string\">\"select * from stu\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> CRUDTemplate.executeQuery(sql,<span class=\"keyword\">new</span> BeanListHandler&lt;Student&gt;(Student.class));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>工程结构<br><img src=\"/2020/02/04/jdbc-note-4/17.png\" alt=\"内省工程结构\"></p>\n<h2 id=\"整体重构思路\"><a href=\"#整体重构思路\" class=\"headerlink\" title=\"整体重构思路\"></a>整体重构思路</h2><ol>\n<li>写DAO接口，在实现类中现实各种方法save(),delete(),updata(),get(),getAll();<br><img src=\"/2020/02/04/jdbc-note-4/18.png\" alt=\"原始代码\"></li>\n</ol>\n<ul>\n<li>声明静态变量：驱动名称、url、用户名、密码</li>\n<li>静态代码块加载驱动</li>\n<li>JDBCUtil提供获取Connection对象和关闭资源的方法</li>\n<li>预编译语句对象，解决拼接sql语句太麻烦的问题</li>\n</ul>\n<ol start=\"2\">\n<li>用连接池和配置文件改进，创建CRUDTemplate类，DML使用executeUpdate方法，DQL使用executeQuery方法</li>\n</ol>\n<p><img src=\"/2020/02/04/jdbc-note-4/19.png\" alt=\"重构1\"></p>\n<ol start=\"3\">\n<li>结果集处理器改进</li>\n</ol>\n<p>在实现类StudentDaoImpl中添加class StudentResHandleImp implements IResultSetHandler</p>\n<p><img src=\"/2020/02/04/jdbc-note-4/20.png\" alt=\"重构2\"></p>\n<ol start=\"4\">\n<li>用泛型改进结果集处理器<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IResultSetHandler</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">T <span class=\"title\">handle</span> <span class=\"params\">(ResultSet rs)</span> <span class=\"keyword\">throws</span> Exception</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 接口实现类</span></span><br><span class=\"line\"><span class=\"comment\">// package com.it666.jdbc.dao.impl;</span></span><br><span class=\"line\"><span class=\"comment\">// 获取对象List的结果集处理器</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudentResHandleImp</span> <span class=\"keyword\">implements</span> <span class=\"title\">IResultSetHandler</span>&lt;<span class=\"title\">List</span>&lt;<span class=\"title\">Student</span>&gt;&gt;</span>&#123; &#125;</span><br><span class=\"line\"><span class=\"comment\">// 获取一个Integer的结果集处理器</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StuCountResultSetImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">IResultSetHandler</span>&lt;<span class=\"title\">Integer</span>&gt;</span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p><img src=\"/2020/02/04/jdbc-note-4/21.png\" alt=\"重构3\"></p>\n<ol start=\"5\">\n<li>用内省改进<br>针对DQL，对get()和getAll()的改进代码不同<br><img src=\"/2020/02/04/jdbc-note-4/22.png\" alt=\"重构4\"></li>\n</ol>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005977005.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级JDBC连接数据库</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"重构DAO\"><a href=\"#重构DAO\" class=\"headerlink\" title=\"重构DAO\"></a>重构DAO</h2><p><img src=\"/2020/02/04/jdbc-note-4/1.png\" alt=\"重构代码\"></p>\n<p>重构代码原则</p>\n<ul>\n<li>同一个类中<br>在一个类当中有多个方法当中有太多相同的代码<br>不同的地方通过参数传递进去<br>把它们抽到一个方法当中</li>\n<li>不同类中<br>不同类当中有共同的代码给抽取到一个新类当中。<br>大家同时共享该类中的内容</li>\n</ul>\n<h2 id=\"抽取DML方法\"><a href=\"#抽取DML方法\" class=\"headerlink\" title=\"抽取DML方法\"></a>抽取DML方法</h2><ol>\n<li>设计一个方法</li>\n<li>要求传入两个参数<br>第一个参数sql语句模板<br>第二个参数为可变参数，设置语句参数值</li>\n<li>返回值<br>返回值为int，受影响的行数</li>\n</ol>\n<p>抽取代码</p>\n<ol>\n<li>用可变参数（可变参数要放在参数的最后一个，可变参数本质是数组<br>）</li>\n<li>在com.it666.jdbc.util中新建一个CRUDTemplate类<br><img src=\"/2020/02/04/jdbc-note-4/2.png\" alt=\"抽取代码\"><br>调用代码<br><img src=\"/2020/02/04/jdbc-note-4/3.png\" alt=\"调用代码\"></li>\n</ol>\n<h2 id=\"抽取DQL\"><a href=\"#抽取DQL\" class=\"headerlink\" title=\"抽取DQL\"></a>抽取DQL</h2><p>抽取代码前<br><img src=\"/2020/02/04/jdbc-note-4/4.png\" alt=\"抽取代码\"><br>抽取代码，也是写在com.it666.jdbc.util中的CRUDTemplate类中<br><img src=\"/2020/02/04/jdbc-note-4/5.png\" alt=\"调用代码\"></p>\n<h2 id=\"用结果集处理器改进DQL\"><a href=\"#用结果集处理器改进DQL\" class=\"headerlink\" title=\"用结果集处理器改进DQL\"></a>用结果集处理器改进DQL</h2><p>每一个都封装成了student对象，这写死了，只能查询学生，使用泛型改进<br>不知道封装成什么类型的对象，就不应该处理结果集</p>\n<p>解决办法</p>\n<ul>\n<li>把处理结果集的行为交给每个DAO</li>\n<li>为了规范每个DAO的处理结果集，大家都叫同样的名字，这样在模板中就可以调用同一个名称</li>\n<li>定义一个处理结果集的接口</li>\n</ul>\n<ol>\n<li>定义一个接口</li>\n</ol>\n<p>声明一个处理结果集方法 com.it666.jdbc.handler中的IResultSetHandler<br><img src=\"/2020/02/04/jdbc-note-4/6.png\" alt=\"定义接口\"><br>2. 在具体DAO当中实现接口</p>\n<p>实现处理结果集方法 com.it666.jdbc.handler中的StudentResHandleImp<br><img src=\"/2020/02/04/jdbc-note-4/7.png\" alt=\"实现接口\"></p>\n<ol start=\"3\">\n<li>创建一个接口实现对象传给查询方法</li>\n</ol>\n<p>com.it666.jdbc.dao.impl中的StudentDaoImpl<br><img src=\"/2020/02/04/jdbc-note-4/8.png\" alt=\"传递接口\"></p>\n<ol start=\"4\">\n<li>在查询方法当中调用处理结果集方法</li>\n</ol>\n<p>com.it666.jdbc.util中的CRUDTemplate<br><img src=\"/2020/02/04/jdbc-note-4/9.png\" alt=\"调用结果集\"></p>\n<p>项目结构<br><img src=\"/2020/02/04/jdbc-note-4/11.png\" alt=\"调用结果集\"></p>\n<p>总流程<br><img src=\"/2020/02/04/jdbc-note-4/10.png\" alt=\"调用结果集\"></p>\n<h2 id=\"用泛型改进结果集处理器\"><a href=\"#用泛型改进结果集处理器\" class=\"headerlink\" title=\"用泛型改进结果集处理器\"></a>用泛型改进结果集处理器</h2><ol>\n<li>直接定义为T</li>\n</ol>\n<p>处理所有结果集都必须得要返回List<br>有的时候没有必要返回List,想要查询的仅仅是一个结果整数，此时还必须得要从List当中出来</p>\n<ol start=\"2\">\n<li>由调用者自己来决定返回什么内容</li>\n</ol>\n<p>统一规定返回类型为T类型，调用者使用时去决定是什么类型<br><img src=\"/2020/02/04/jdbc-note-4/12.png\" alt=\"定义接口\"></p>\n<ol start=\"3\">\n<li>实现类当中实现接口时，要指定返回什么类型<br><img src=\"/2020/02/04/jdbc-note-4/13.png\" alt=\"实现类\"></li>\n</ol>\n<p>4.声明方法时，声明返回值为一个泛型类型，具体是什么类型，有参数来指定</p>\n<p>在方法的参数中标识泛型 必须在方法名前加<T> T 不然报错<br><img src=\"/2020/02/04/jdbc-note-4/14.png\" alt=\"声明方法\"></T></p>\n<p>总体结构<br><img src=\"/2020/02/04/jdbc-note-4/15.png\" alt></p>\n<p>例子：添加获取总人数方法<br><img src=\"/2020/02/04/jdbc-note-4/16.png\" alt></p>\n<h2 id=\"结构集处理器\"><a href=\"#结构集处理器\" class=\"headerlink\" title=\"结构集处理器\"></a>结构集处理器</h2><p>存在的问题<br>该类只能将结果集中的一行数据封装成一个Student对象<br>我们如果有多个domain，就得提供多个结果集处理器</p>\n<p>自动的把一行行数据封装成对象，自动设置属性，结果集处理器，处理不同表时，干的事都一样<br>1.给我一个要封装的类<br>2.自动设置属性</p>\n<p>规定<br>1.表中的列名必须和对象中的属性名相同<br>2.规定表中的类型必须和Java中的类型匹配<br>想要完成此项工作，就要使用内省机制</p>\n<h4 id=\"实现步骤\"><a href=\"#实现步骤\" class=\"headerlink\" title=\"实现步骤\"></a>实现步骤</h4><p>1.创建一个类实现结果集处理器<br>    实现的时候也不知道是什么类型，所以也可以指定为一个泛型<br>2.提供一个字段，表示要封装成对象的类型<br>3.提供一个构造器，在创建时，就指定是什么类型<br>4.在实现方法当中，通过内省机制获取所有属性名称，做为列名<br>5.通过传入的类字节码创建对象<br>6.通过内省获取字节码中所有的信息<br>7.获取所有的属性描述器<br>8.遍历属性描述器，获取对象的属性名称 ，规定的属性名和列名相同<br>9.通过列名获取结果集中的值<br>10.调用属性的set方法把属性的值设置进去</p>\n<h2 id=\"内省\"><a href=\"#内省\" class=\"headerlink\" title=\"内省\"></a>内省</h2><p>Class类型</p>\n<ul>\n<li>字节码类型</li>\n<li>所有的字节码把他们当做一个群体类型</li>\n<li>通过字节码创建对象<br>Student stu = Student.class.newInstance();</li>\n</ul>\n<h4 id=\"内省-1\"><a href=\"#内省-1\" class=\"headerlink\" title=\"内省\"></a>内省</h4><p>内省 (Introspector类)<br>用于查看和操作JavaBean中的属性</p>\n<p>Introspector.getBeanInfo(A.class,B.class);</p>\n<ul>\n<li>获取指定类当中的字节码属性信息</li>\n<li>获取A类及A类父类当中的属性，但是不包括指定的类</li>\n<li>返回值BeanInfo</li>\n</ul>\n<p>BeanInfo</p>\n<ul>\n<li>getPropertyDescriptors()</li>\n</ul>\n<p>获取JavaBean中的属性描述器<br>返回的是一个数组（PropertyDescriptor[]）<br>每一个属性都有描述器<br>JavaBean中有多个属性，所以返回了一个数组</p>\n<ul>\n<li>获取属性名<br>pd.getName();</li>\n<li>获取get方法<br>pd.getReadMethod();</li>\n<li>获取set方法<br>pd.getWriteMethod</li>\n<li>动态调用方法<br>方法名.invoke(对象名称,”值”)<h2 id=\"内省改进结果集处理器\"><a href=\"#内省改进结果集处理器\" class=\"headerlink\" title=\"内省改进结果集处理器\"></a>内省改进结果集处理器</h2></li>\n</ul>\n<p>注意属性必须和数据字段名相同</p>\n<p>封装一个对象的通用结果集处理器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// package com.it666.jdbc.handler;</span></span><br><span class=\"line\"><span class=\"comment\">// BeanHandler 封装一个对象</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BeanHandler</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">IResultSetHandler</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Class&lt;T&gt; classType;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BeanHandler</span><span class=\"params\">(Class&lt;T&gt; classType)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.classType = classType;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">handle</span><span class=\"params\">(ResultSet rs)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (rs.next()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 创建一个对象</span></span><br><span class=\"line\">\t\t\tT obj = <span class=\"keyword\">this</span>.classType.newInstance();</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 通过内省来拿属性</span></span><br><span class=\"line\">\t\t\tBeanInfo bf = Introspector.getBeanInfo(classType,Object.class);<span class=\"comment\">//Object.class代表不要获取Object，获取到Object就停止</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// 获取所有描述器</span></span><br><span class=\"line\">\t\t\tPropertyDescriptor[] pds = bf.getPropertyDescriptors();</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (PropertyDescriptor pd : pds) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 根据属性名去数据库里取值</span></span><br><span class=\"line\">                Object val = rs.getObject(pd.getName());</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">                <span class=\"comment\">// 给创建的对象设置属性值</span></span><br><span class=\"line\">\t\t\t\tpd.getWriteMethod().invoke(obj, val);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>调用通用结果集处理器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Student <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;  </span><br><span class=\"line\">    String sql = <span class=\"string\">\"select * from stu where id = ?\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 传入new BeanHandler&lt;Student&gt;(Student.class)</span></span><br><span class=\"line\">    <span class=\"comment\">// Student.class代表需要封装一个Student类型</span></span><br><span class=\"line\">    <span class=\"comment\">// &lt;Student&gt;代表返回值为Student类型</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span>  CRUDTemplate.executeQuery(sql,<span class=\"keyword\">new</span> BeanHandler&lt;Student&gt;(Student.class) ,id);</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>封装多个对象的通用结果集处理器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// package com.it666.jdbc.handler;</span></span><br><span class=\"line\"><span class=\"comment\">// BeanListHandler 封装多条信息的结果集处理器</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BeanListHandler</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">IResultSetHandler</span>&lt;<span class=\"title\">List</span>&lt;<span class=\"title\">T</span>&gt;&gt; </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Class&lt;T&gt; classType;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BeanListHandler</span><span class=\"params\">(Class&lt;T&gt; classType)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.classType = classType;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;T&gt; <span class=\"title\">handle</span><span class=\"params\">(ResultSet rs)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\tList&lt;T&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (rs.next()) &#123;</span><br><span class=\"line\">\t\t\tT obj = classType.newInstance();</span><br><span class=\"line\">\t\t\tBeanInfo bf = Introspector.getBeanInfo(<span class=\"keyword\">this</span>.classType,Object.class);</span><br><span class=\"line\">\t\t\tPropertyDescriptor [] pds = bf.getPropertyDescriptors();</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (PropertyDescriptor pd : pds) &#123;</span><br><span class=\"line\">\t\t\t\tObject val = rs.getObject(pd.getName());</span><br><span class=\"line\">\t\t\t\tpd.getWriteMethod().invoke(obj, val);</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tlist.add(obj);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> list;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调用通用结果集处理器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Student&gt; <span class=\"title\">getAll</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    String sql = <span class=\"string\">\"select * from stu\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> CRUDTemplate.executeQuery(sql,<span class=\"keyword\">new</span> BeanListHandler&lt;Student&gt;(Student.class));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>工程结构<br><img src=\"/2020/02/04/jdbc-note-4/17.png\" alt=\"内省工程结构\"></p>\n<h2 id=\"整体重构思路\"><a href=\"#整体重构思路\" class=\"headerlink\" title=\"整体重构思路\"></a>整体重构思路</h2><ol>\n<li>写DAO接口，在实现类中现实各种方法save(),delete(),updata(),get(),getAll();<br><img src=\"/2020/02/04/jdbc-note-4/18.png\" alt=\"原始代码\"></li>\n</ol>\n<ul>\n<li>声明静态变量：驱动名称、url、用户名、密码</li>\n<li>静态代码块加载驱动</li>\n<li>JDBCUtil提供获取Connection对象和关闭资源的方法</li>\n<li>预编译语句对象，解决拼接sql语句太麻烦的问题</li>\n</ul>\n<ol start=\"2\">\n<li>用连接池和配置文件改进，创建CRUDTemplate类，DML使用executeUpdate方法，DQL使用executeQuery方法</li>\n</ol>\n<p><img src=\"/2020/02/04/jdbc-note-4/19.png\" alt=\"重构1\"></p>\n<ol start=\"3\">\n<li>结果集处理器改进</li>\n</ol>\n<p>在实现类StudentDaoImpl中添加class StudentResHandleImp implements IResultSetHandler</p>\n<p><img src=\"/2020/02/04/jdbc-note-4/20.png\" alt=\"重构2\"></p>\n<ol start=\"4\">\n<li>用泛型改进结果集处理器<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IResultSetHandler</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">T <span class=\"title\">handle</span> <span class=\"params\">(ResultSet rs)</span> <span class=\"keyword\">throws</span> Exception</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 接口实现类</span></span><br><span class=\"line\"><span class=\"comment\">// package com.it666.jdbc.dao.impl;</span></span><br><span class=\"line\"><span class=\"comment\">// 获取对象List的结果集处理器</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudentResHandleImp</span> <span class=\"keyword\">implements</span> <span class=\"title\">IResultSetHandler</span>&lt;<span class=\"title\">List</span>&lt;<span class=\"title\">Student</span>&gt;&gt;</span>&#123; &#125;</span><br><span class=\"line\"><span class=\"comment\">// 获取一个Integer的结果集处理器</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StuCountResultSetImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">IResultSetHandler</span>&lt;<span class=\"title\">Integer</span>&gt;</span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p><img src=\"/2020/02/04/jdbc-note-4/21.png\" alt=\"重构3\"></p>\n<ol start=\"5\">\n<li>用内省改进<br>针对DQL，对get()和getAll()的改进代码不同<br><img src=\"/2020/02/04/jdbc-note-4/22.png\" alt=\"重构4\"></li>\n</ol>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005977005.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级JDBC连接数据库</a></p>\n"},{"title":"Linux笔记","date":"2020-02-28T08:42:30.000Z","_content":"挖坑待填","source":"_posts/linux-note.md","raw":"---\ntitle: Linux笔记\ncategories: Linux笔记\ndate: 2020-02-28 16:42:30\n---\n挖坑待填","slug":"linux-note","published":1,"updated":"2020-06-13T02:55:34.806Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke3x9g5m0010zgvucreubhbk","content":"<p>挖坑待填</p>\n","site":{"data":{}},"excerpt":"","more":"<p>挖坑待填</p>\n"},{"title":"MyBatis笔记","date":"2020-03-22T09:23:19.000Z","_content":"MyBatis执行流程：\n1. 创建 SqlSessionFactoryBuilder\n2. 通过 SqlSessionFactoryBuilder 读取 SqlMappingConfig.xml 核心配置文件（还需要加载映射文件），创建 SqlSessionFactory\n3. 获取 Session\n4. 执行 Sql语句\n5. 关闭 Session\n\n注意点：\n1. Session线程不安全，不能定义为字段\n2. 映射文件中 resultType 或 parameterType 为domian 值需要写domain的全限定类名(或用 typeAliases 定义别名)\n3. 涉及修改数据库的操作都需要commit\n4. 不同操作在映射文件中写不同标签 select updata delete\n5. 返回添加过后自增的主键的写法\n\n#{} 和 ${} 区别\n1. 都可以${}可以接收简单类型值或pojo属性值\n2. #{}：内部用?作为占位符，执行的时候会给参数两边加单引号，可以防止sql注入，可以实现preparedStatement向占位符中设置值，自动进行Java类型和JDBC类型转换\n3. ${}：表示拼接sql串，将parameterType 传入的内容拼接在sql中且**不进行jdbc类型转换**\n4. parameterType传输单个简单类型值，${}括号中只能为value即：${value}，而#{}括号中**任意**\n<br/>\n\n\n传统方式写DAO\n1. 定义接口\n2. 写接口实现类，在实现类中调用 SqlSession 执行对于语句\n\n使用Mapper动态代理，避免写实现类，需要满足要求\n1. namespace 必须为 Mapper接口全限定类名\n2. id 必须和 Mapper接口方法名一致\n3. parameterType 与接口方法参数类型一致\n4. resultType 与接口方法返回值类型一致\n<br/>\n\n传递多个参数\n1. 在映射文件的sql语句中使用#{arg0} #{arg1} 或 #{param1} #{param2} \n2. 在接口方法参数加注解@Param(\"\")  在#{}中使用定义好的名称**或 #{param1} #{param2}**\n3. 传入 Map<String,Object> put键值对 在#{}中使用定义好的名称\n4. POJO类 在#{}中使用POJO类字段名\n\n输出类型\n1. 简单类型\n2. Map<String,Object> 键值对 resultType=\"map\"\n3. Map<Integer,Customer> 需要在接口方法指定Map的键 @MapKey(\"\") resultType为bean\n4. resultMap：表字段名与POJO类属性名不一致（resultMap中的id标签指定为主键）\n\n\nMyBatis核心配置文件\n- properties\n- settings: mapUnderscoreToCamelCase sql打印\n- typeAliases: 可批量定义，与子包类名冲突，在类上使用注解@Alias(\"别名\")\n- typeHandlers\n- plugins\n- environments\n- databaseIDProvider\n- mappers:指定package时mapper接口名称和mapper映射文件名称需相同，且放在同一个目录\n\n\n多表查询\n- 表设置外键约束\n- bean属性需要引用另一个bean\n- 连接表后需要用 resultMap 封装数据：直接把连接后的所有列写在resultMap里或**写在association标签里**\n\n分步查询：在association标签的select属性写上查询的接口方法\n\n\n\n\n","source":"_posts/mybatis-note-1.md","raw":"---\ntitle: MyBatis笔记\ncategories: MyBatis笔记\ndate: 2020-03-22 17:23:19\n---\nMyBatis执行流程：\n1. 创建 SqlSessionFactoryBuilder\n2. 通过 SqlSessionFactoryBuilder 读取 SqlMappingConfig.xml 核心配置文件（还需要加载映射文件），创建 SqlSessionFactory\n3. 获取 Session\n4. 执行 Sql语句\n5. 关闭 Session\n\n注意点：\n1. Session线程不安全，不能定义为字段\n2. 映射文件中 resultType 或 parameterType 为domian 值需要写domain的全限定类名(或用 typeAliases 定义别名)\n3. 涉及修改数据库的操作都需要commit\n4. 不同操作在映射文件中写不同标签 select updata delete\n5. 返回添加过后自增的主键的写法\n\n#{} 和 ${} 区别\n1. 都可以${}可以接收简单类型值或pojo属性值\n2. #{}：内部用?作为占位符，执行的时候会给参数两边加单引号，可以防止sql注入，可以实现preparedStatement向占位符中设置值，自动进行Java类型和JDBC类型转换\n3. ${}：表示拼接sql串，将parameterType 传入的内容拼接在sql中且**不进行jdbc类型转换**\n4. parameterType传输单个简单类型值，${}括号中只能为value即：${value}，而#{}括号中**任意**\n<br/>\n\n\n传统方式写DAO\n1. 定义接口\n2. 写接口实现类，在实现类中调用 SqlSession 执行对于语句\n\n使用Mapper动态代理，避免写实现类，需要满足要求\n1. namespace 必须为 Mapper接口全限定类名\n2. id 必须和 Mapper接口方法名一致\n3. parameterType 与接口方法参数类型一致\n4. resultType 与接口方法返回值类型一致\n<br/>\n\n传递多个参数\n1. 在映射文件的sql语句中使用#{arg0} #{arg1} 或 #{param1} #{param2} \n2. 在接口方法参数加注解@Param(\"\")  在#{}中使用定义好的名称**或 #{param1} #{param2}**\n3. 传入 Map<String,Object> put键值对 在#{}中使用定义好的名称\n4. POJO类 在#{}中使用POJO类字段名\n\n输出类型\n1. 简单类型\n2. Map<String,Object> 键值对 resultType=\"map\"\n3. Map<Integer,Customer> 需要在接口方法指定Map的键 @MapKey(\"\") resultType为bean\n4. resultMap：表字段名与POJO类属性名不一致（resultMap中的id标签指定为主键）\n\n\nMyBatis核心配置文件\n- properties\n- settings: mapUnderscoreToCamelCase sql打印\n- typeAliases: 可批量定义，与子包类名冲突，在类上使用注解@Alias(\"别名\")\n- typeHandlers\n- plugins\n- environments\n- databaseIDProvider\n- mappers:指定package时mapper接口名称和mapper映射文件名称需相同，且放在同一个目录\n\n\n多表查询\n- 表设置外键约束\n- bean属性需要引用另一个bean\n- 连接表后需要用 resultMap 封装数据：直接把连接后的所有列写在resultMap里或**写在association标签里**\n\n分步查询：在association标签的select属性写上查询的接口方法\n\n\n\n\n","slug":"mybatis-note-1","published":1,"updated":"2020-06-13T02:55:34.807Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke3x9g5s0012zgvu7zhb54kg","content":"<p>MyBatis执行流程：</p>\n<ol>\n<li>创建 SqlSessionFactoryBuilder</li>\n<li>通过 SqlSessionFactoryBuilder 读取 SqlMappingConfig.xml 核心配置文件（还需要加载映射文件），创建 SqlSessionFactory</li>\n<li>获取 Session</li>\n<li>执行 Sql语句</li>\n<li>关闭 Session</li>\n</ol>\n<p>注意点：</p>\n<ol>\n<li>Session线程不安全，不能定义为字段</li>\n<li>映射文件中 resultType 或 parameterType 为domian 值需要写domain的全限定类名(或用 typeAliases 定义别名)</li>\n<li>涉及修改数据库的操作都需要commit</li>\n<li>不同操作在映射文件中写不同标签 select updata delete</li>\n<li>返回添加过后自增的主键的写法</li>\n</ol>\n<p>#{} 和 ${} 区别</p>\n<ol>\n<li>都可以${}可以接收简单类型值或pojo属性值</li>\n<li>#{}：内部用?作为占位符，执行的时候会给参数两边加单引号，可以防止sql注入，可以实现preparedStatement向占位符中设置值，自动进行Java类型和JDBC类型转换</li>\n<li>${}：表示拼接sql串，将parameterType 传入的内容拼接在sql中且<strong>不进行jdbc类型转换</strong></li>\n<li>parameterType传输单个简单类型值，${}括号中只能为value即：${value}，而#{}括号中<strong>任意</strong><br>\n\n\n</li>\n</ol>\n<p>传统方式写DAO</p>\n<ol>\n<li>定义接口</li>\n<li>写接口实现类，在实现类中调用 SqlSession 执行对于语句</li>\n</ol>\n<p>使用Mapper动态代理，避免写实现类，需要满足要求</p>\n<ol>\n<li>namespace 必须为 Mapper接口全限定类名</li>\n<li>id 必须和 Mapper接口方法名一致</li>\n<li>parameterType 与接口方法参数类型一致</li>\n<li>resultType 与接口方法返回值类型一致<br>\n\n</li>\n</ol>\n<p>传递多个参数</p>\n<ol>\n<li>在映射文件的sql语句中使用#{arg0} #{arg1} 或 #{param1} #{param2} </li>\n<li>在接口方法参数加注解@Param(“”)  在#{}中使用定义好的名称<strong>或 #{param1} #{param2}</strong></li>\n<li>传入 Map&lt;String,Object&gt; put键值对 在#{}中使用定义好的名称</li>\n<li>POJO类 在#{}中使用POJO类字段名</li>\n</ol>\n<p>输出类型</p>\n<ol>\n<li>简单类型</li>\n<li>Map&lt;String,Object&gt; 键值对 resultType=”map”</li>\n<li>Map&lt;Integer,Customer&gt; 需要在接口方法指定Map的键 @MapKey(“”) resultType为bean</li>\n<li>resultMap：表字段名与POJO类属性名不一致（resultMap中的id标签指定为主键）</li>\n</ol>\n<p>MyBatis核心配置文件</p>\n<ul>\n<li>properties</li>\n<li>settings: mapUnderscoreToCamelCase sql打印</li>\n<li>typeAliases: 可批量定义，与子包类名冲突，在类上使用注解@Alias(“别名”)</li>\n<li>typeHandlers</li>\n<li>plugins</li>\n<li>environments</li>\n<li>databaseIDProvider</li>\n<li>mappers:指定package时mapper接口名称和mapper映射文件名称需相同，且放在同一个目录</li>\n</ul>\n<p>多表查询</p>\n<ul>\n<li>表设置外键约束</li>\n<li>bean属性需要引用另一个bean</li>\n<li>连接表后需要用 resultMap 封装数据：直接把连接后的所有列写在resultMap里或<strong>写在association标签里</strong></li>\n</ul>\n<p>分步查询：在association标签的select属性写上查询的接口方法</p>\n","site":{"data":{}},"excerpt":"","more":"<p>MyBatis执行流程：</p>\n<ol>\n<li>创建 SqlSessionFactoryBuilder</li>\n<li>通过 SqlSessionFactoryBuilder 读取 SqlMappingConfig.xml 核心配置文件（还需要加载映射文件），创建 SqlSessionFactory</li>\n<li>获取 Session</li>\n<li>执行 Sql语句</li>\n<li>关闭 Session</li>\n</ol>\n<p>注意点：</p>\n<ol>\n<li>Session线程不安全，不能定义为字段</li>\n<li>映射文件中 resultType 或 parameterType 为domian 值需要写domain的全限定类名(或用 typeAliases 定义别名)</li>\n<li>涉及修改数据库的操作都需要commit</li>\n<li>不同操作在映射文件中写不同标签 select updata delete</li>\n<li>返回添加过后自增的主键的写法</li>\n</ol>\n<p>#{} 和 ${} 区别</p>\n<ol>\n<li>都可以${}可以接收简单类型值或pojo属性值</li>\n<li>#{}：内部用?作为占位符，执行的时候会给参数两边加单引号，可以防止sql注入，可以实现preparedStatement向占位符中设置值，自动进行Java类型和JDBC类型转换</li>\n<li>${}：表示拼接sql串，将parameterType 传入的内容拼接在sql中且<strong>不进行jdbc类型转换</strong></li>\n<li>parameterType传输单个简单类型值，${}括号中只能为value即：${value}，而#{}括号中<strong>任意</strong><br>\n\n\n</li>\n</ol>\n<p>传统方式写DAO</p>\n<ol>\n<li>定义接口</li>\n<li>写接口实现类，在实现类中调用 SqlSession 执行对于语句</li>\n</ol>\n<p>使用Mapper动态代理，避免写实现类，需要满足要求</p>\n<ol>\n<li>namespace 必须为 Mapper接口全限定类名</li>\n<li>id 必须和 Mapper接口方法名一致</li>\n<li>parameterType 与接口方法参数类型一致</li>\n<li>resultType 与接口方法返回值类型一致<br>\n\n</li>\n</ol>\n<p>传递多个参数</p>\n<ol>\n<li>在映射文件的sql语句中使用#{arg0} #{arg1} 或 #{param1} #{param2} </li>\n<li>在接口方法参数加注解@Param(“”)  在#{}中使用定义好的名称<strong>或 #{param1} #{param2}</strong></li>\n<li>传入 Map&lt;String,Object&gt; put键值对 在#{}中使用定义好的名称</li>\n<li>POJO类 在#{}中使用POJO类字段名</li>\n</ol>\n<p>输出类型</p>\n<ol>\n<li>简单类型</li>\n<li>Map&lt;String,Object&gt; 键值对 resultType=”map”</li>\n<li>Map&lt;Integer,Customer&gt; 需要在接口方法指定Map的键 @MapKey(“”) resultType为bean</li>\n<li>resultMap：表字段名与POJO类属性名不一致（resultMap中的id标签指定为主键）</li>\n</ol>\n<p>MyBatis核心配置文件</p>\n<ul>\n<li>properties</li>\n<li>settings: mapUnderscoreToCamelCase sql打印</li>\n<li>typeAliases: 可批量定义，与子包类名冲突，在类上使用注解@Alias(“别名”)</li>\n<li>typeHandlers</li>\n<li>plugins</li>\n<li>environments</li>\n<li>databaseIDProvider</li>\n<li>mappers:指定package时mapper接口名称和mapper映射文件名称需相同，且放在同一个目录</li>\n</ul>\n<p>多表查询</p>\n<ul>\n<li>表设置外键约束</li>\n<li>bean属性需要引用另一个bean</li>\n<li>连接表后需要用 resultMap 封装数据：直接把连接后的所有列写在resultMap里或<strong>写在association标签里</strong></li>\n</ul>\n<p>分步查询：在association标签的select属性写上查询的接口方法</p>\n"},{"title":"JDBC笔记-DBUtils","date":"2020-02-04T07:32:02.000Z","_content":"## DBUtils\nApache公司编写的数据库操作实用的工具，小巧，简单，实用\n封装了对JDBC的操作，简化了JDBC操作\n\n#### QueryRunner\n- QueryRunner(DataSource ds) 提供数据源连接池，会自动帮你创建连接\n- Update(String sql,Object...obj) 执行更新数据\n- query(String sql, ResultSetHandler<T> rsh,Object...params) 执行查询\n\n\n#### ResultHandler\n- query(sql, new BeanHandler<Student>(Student.class), params) 把查询的结果封装成一个指定对象\n- query(sql, new BeanListHandler<Student>(Student.class) 把查询结果封装成一个指定对象集合\n- qr.query(sql, new ScalarHandler()) 查询单个值，返回为一个Long类型\n- qr.query(sql, new MapListHandler()) 把查询的结果封装成一个Map集合\n- query(sql, new ColumnListHandler(\"列名\")) 查询指定的列\n\n## 使用DBUtils\n\n1. 导入jar包，build path\n\ncommons-dbutils-1.4.jar\ndruid-1.0.15.jar\nmysql-connector-java-5.1.40-bin.jar\n\n2. 在JDBCUtil中提供一个获取DataSource的方法\n\n```java\n// package com.it666.jdbc.util;\n\npublic class JDBCUtil {\n\t\n\tpublic static DataSource ds = null; \n\tstatic {\n\t\ttry {\n\t\t\tProperties p = new Properties();\n\t\t\tFileInputStream in;\n\t\t\tin = new FileInputStream(\"resource/db.properties\");\n\t\t\tp.load(in);\n\n\t\t\tds = DruidDataSourceFactory.createDataSource(p);// 这样写的ProPerties必须按照条件写\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t}\n\tpublic static DataSource getDataSource() {\n\t\treturn ds;\n\t}\n}\n\n```\n\n3. 在DAO实现类的方法中创建QueryRunner对象，DML使用update方法执行，DQL使用query方法执行\n\n```java\n// package com.it666.jdbc.dao.impl;\n\npublic class StudentDaoImpl implements IStudentDao {\n\n\t@Override\n\tpublic void save(Student stu) {\n\t\tString sql = \"insert into stu(name,age) values (?,?)\";\n\t\tQueryRunner qr = new QueryRunner(JDBCUtil.getDataSource());\n\t\ttry {\n\t\t\tqr.update(sql,stu.getName(),stu.getAge());\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t}\n\n\t@Override\n\tpublic Student get(int id) {\n\t\tQueryRunner qr = new QueryRunner(JDBCUtil.getDataSource());\n\t\tString sql = \"select * from stu where id = ?\";\n\t\ttry {\n\t\t\treturn qr.query(sql, new BeanHandler<Student>(Student.class),id);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn null;\n\t}\n\n\t@Override\n\tpublic List<Student> getAll() {\n\t\t\n\t\tQueryRunner qr = new QueryRunner(JDBCUtil.getDataSource());\n\t\tString sql = \"select * from stu\";\n\t\ttry {\n\t\t\treturn qr.query(sql, new BeanListHandler<Student>(Student.class));\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn null;\n\t\t\n\t}\n\n}\n\n```\n\n\n项目结构\n![DBUtils项目结构](jdbc-note-5/1.png)\n\n## 参考资料\n[Java零基础到高级JDBC连接数据库](https://study.163.com/course/introduction/1005977005.htm)","source":"_posts/jdbc-note-5.md","raw":"---\ntitle: JDBC笔记-DBUtils\ncategories: JDBC笔记\ndate: 2020-02-04 15:32:02\n---\n## DBUtils\nApache公司编写的数据库操作实用的工具，小巧，简单，实用\n封装了对JDBC的操作，简化了JDBC操作\n\n#### QueryRunner\n- QueryRunner(DataSource ds) 提供数据源连接池，会自动帮你创建连接\n- Update(String sql,Object...obj) 执行更新数据\n- query(String sql, ResultSetHandler<T> rsh,Object...params) 执行查询\n\n\n#### ResultHandler\n- query(sql, new BeanHandler<Student>(Student.class), params) 把查询的结果封装成一个指定对象\n- query(sql, new BeanListHandler<Student>(Student.class) 把查询结果封装成一个指定对象集合\n- qr.query(sql, new ScalarHandler()) 查询单个值，返回为一个Long类型\n- qr.query(sql, new MapListHandler()) 把查询的结果封装成一个Map集合\n- query(sql, new ColumnListHandler(\"列名\")) 查询指定的列\n\n## 使用DBUtils\n\n1. 导入jar包，build path\n\ncommons-dbutils-1.4.jar\ndruid-1.0.15.jar\nmysql-connector-java-5.1.40-bin.jar\n\n2. 在JDBCUtil中提供一个获取DataSource的方法\n\n```java\n// package com.it666.jdbc.util;\n\npublic class JDBCUtil {\n\t\n\tpublic static DataSource ds = null; \n\tstatic {\n\t\ttry {\n\t\t\tProperties p = new Properties();\n\t\t\tFileInputStream in;\n\t\t\tin = new FileInputStream(\"resource/db.properties\");\n\t\t\tp.load(in);\n\n\t\t\tds = DruidDataSourceFactory.createDataSource(p);// 这样写的ProPerties必须按照条件写\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t}\n\tpublic static DataSource getDataSource() {\n\t\treturn ds;\n\t}\n}\n\n```\n\n3. 在DAO实现类的方法中创建QueryRunner对象，DML使用update方法执行，DQL使用query方法执行\n\n```java\n// package com.it666.jdbc.dao.impl;\n\npublic class StudentDaoImpl implements IStudentDao {\n\n\t@Override\n\tpublic void save(Student stu) {\n\t\tString sql = \"insert into stu(name,age) values (?,?)\";\n\t\tQueryRunner qr = new QueryRunner(JDBCUtil.getDataSource());\n\t\ttry {\n\t\t\tqr.update(sql,stu.getName(),stu.getAge());\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t}\n\n\t@Override\n\tpublic Student get(int id) {\n\t\tQueryRunner qr = new QueryRunner(JDBCUtil.getDataSource());\n\t\tString sql = \"select * from stu where id = ?\";\n\t\ttry {\n\t\t\treturn qr.query(sql, new BeanHandler<Student>(Student.class),id);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn null;\n\t}\n\n\t@Override\n\tpublic List<Student> getAll() {\n\t\t\n\t\tQueryRunner qr = new QueryRunner(JDBCUtil.getDataSource());\n\t\tString sql = \"select * from stu\";\n\t\ttry {\n\t\t\treturn qr.query(sql, new BeanListHandler<Student>(Student.class));\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn null;\n\t\t\n\t}\n\n}\n\n```\n\n\n项目结构\n![DBUtils项目结构](jdbc-note-5/1.png)\n\n## 参考资料\n[Java零基础到高级JDBC连接数据库](https://study.163.com/course/introduction/1005977005.htm)","slug":"jdbc-note-5","published":1,"updated":"2020-06-13T02:55:34.804Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke3x9g5t0013zgvubazlgmp6","content":"<h2 id=\"DBUtils\"><a href=\"#DBUtils\" class=\"headerlink\" title=\"DBUtils\"></a>DBUtils</h2><p>Apache公司编写的数据库操作实用的工具，小巧，简单，实用<br>封装了对JDBC的操作，简化了JDBC操作</p>\n<h4 id=\"QueryRunner\"><a href=\"#QueryRunner\" class=\"headerlink\" title=\"QueryRunner\"></a>QueryRunner</h4><ul>\n<li>QueryRunner(DataSource ds) 提供数据源连接池，会自动帮你创建连接</li>\n<li>Update(String sql,Object…obj) 执行更新数据</li>\n<li>query(String sql, ResultSetHandler<T> rsh,Object…params) 执行查询</T></li>\n</ul>\n<h4 id=\"ResultHandler\"><a href=\"#ResultHandler\" class=\"headerlink\" title=\"ResultHandler\"></a>ResultHandler</h4><ul>\n<li>query(sql, new BeanHandler<Student>(Student.class), params) 把查询的结果封装成一个指定对象</Student></li>\n<li>query(sql, new BeanListHandler<Student>(Student.class) 把查询结果封装成一个指定对象集合</Student></li>\n<li>qr.query(sql, new ScalarHandler()) 查询单个值，返回为一个Long类型</li>\n<li>qr.query(sql, new MapListHandler()) 把查询的结果封装成一个Map集合</li>\n<li>query(sql, new ColumnListHandler(“列名”)) 查询指定的列</li>\n</ul>\n<h2 id=\"使用DBUtils\"><a href=\"#使用DBUtils\" class=\"headerlink\" title=\"使用DBUtils\"></a>使用DBUtils</h2><ol>\n<li>导入jar包，build path</li>\n</ol>\n<p>commons-dbutils-1.4.jar<br>druid-1.0.15.jar<br>mysql-connector-java-5.1.40-bin.jar</p>\n<ol start=\"2\">\n<li>在JDBCUtil中提供一个获取DataSource的方法</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// package com.it666.jdbc.util;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JDBCUtil</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> DataSource ds = <span class=\"keyword\">null</span>; </span><br><span class=\"line\">\t<span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tProperties p = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">\t\t\tFileInputStream in;</span><br><span class=\"line\">\t\t\tin = <span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"resource/db.properties\"</span>);</span><br><span class=\"line\">\t\t\tp.load(in);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tds = DruidDataSourceFactory.createDataSource(p);<span class=\"comment\">// 这样写的ProPerties必须按照条件写</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> DataSource <span class=\"title\">getDataSource</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ds;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>在DAO实现类的方法中创建QueryRunner对象，DML使用update方法执行，DQL使用query方法执行</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// package com.it666.jdbc.dao.impl;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudentDaoImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">IStudentDao</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">(Student stu)</span> </span>&#123;</span><br><span class=\"line\">\t\tString sql = <span class=\"string\">\"insert into stu(name,age) values (?,?)\"</span>;</span><br><span class=\"line\">\t\tQueryRunner qr = <span class=\"keyword\">new</span> QueryRunner(JDBCUtil.getDataSource());</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tqr.update(sql,stu.getName(),stu.getAge());</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Student <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">\t\tQueryRunner qr = <span class=\"keyword\">new</span> QueryRunner(JDBCUtil.getDataSource());</span><br><span class=\"line\">\t\tString sql = <span class=\"string\">\"select * from stu where id = ?\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> qr.query(sql, <span class=\"keyword\">new</span> BeanHandler&lt;Student&gt;(Student.class),id);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;Student&gt; <span class=\"title\">getAll</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tQueryRunner qr = <span class=\"keyword\">new</span> QueryRunner(JDBCUtil.getDataSource());</span><br><span class=\"line\">\t\tString sql = <span class=\"string\">\"select * from stu\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> qr.query(sql, <span class=\"keyword\">new</span> BeanListHandler&lt;Student&gt;(Student.class));</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>项目结构<br><img src=\"/2020/02/04/jdbc-note-5/1.png\" alt=\"DBUtils项目结构\"></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005977005.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级JDBC连接数据库</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"DBUtils\"><a href=\"#DBUtils\" class=\"headerlink\" title=\"DBUtils\"></a>DBUtils</h2><p>Apache公司编写的数据库操作实用的工具，小巧，简单，实用<br>封装了对JDBC的操作，简化了JDBC操作</p>\n<h4 id=\"QueryRunner\"><a href=\"#QueryRunner\" class=\"headerlink\" title=\"QueryRunner\"></a>QueryRunner</h4><ul>\n<li>QueryRunner(DataSource ds) 提供数据源连接池，会自动帮你创建连接</li>\n<li>Update(String sql,Object…obj) 执行更新数据</li>\n<li>query(String sql, ResultSetHandler<T> rsh,Object…params) 执行查询</T></li>\n</ul>\n<h4 id=\"ResultHandler\"><a href=\"#ResultHandler\" class=\"headerlink\" title=\"ResultHandler\"></a>ResultHandler</h4><ul>\n<li>query(sql, new BeanHandler<Student>(Student.class), params) 把查询的结果封装成一个指定对象</Student></li>\n<li>query(sql, new BeanListHandler<Student>(Student.class) 把查询结果封装成一个指定对象集合</Student></li>\n<li>qr.query(sql, new ScalarHandler()) 查询单个值，返回为一个Long类型</li>\n<li>qr.query(sql, new MapListHandler()) 把查询的结果封装成一个Map集合</li>\n<li>query(sql, new ColumnListHandler(“列名”)) 查询指定的列</li>\n</ul>\n<h2 id=\"使用DBUtils\"><a href=\"#使用DBUtils\" class=\"headerlink\" title=\"使用DBUtils\"></a>使用DBUtils</h2><ol>\n<li>导入jar包，build path</li>\n</ol>\n<p>commons-dbutils-1.4.jar<br>druid-1.0.15.jar<br>mysql-connector-java-5.1.40-bin.jar</p>\n<ol start=\"2\">\n<li>在JDBCUtil中提供一个获取DataSource的方法</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// package com.it666.jdbc.util;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JDBCUtil</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> DataSource ds = <span class=\"keyword\">null</span>; </span><br><span class=\"line\">\t<span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tProperties p = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">\t\t\tFileInputStream in;</span><br><span class=\"line\">\t\t\tin = <span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"resource/db.properties\"</span>);</span><br><span class=\"line\">\t\t\tp.load(in);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tds = DruidDataSourceFactory.createDataSource(p);<span class=\"comment\">// 这样写的ProPerties必须按照条件写</span></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> DataSource <span class=\"title\">getDataSource</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ds;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>在DAO实现类的方法中创建QueryRunner对象，DML使用update方法执行，DQL使用query方法执行</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// package com.it666.jdbc.dao.impl;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StudentDaoImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">IStudentDao</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">(Student stu)</span> </span>&#123;</span><br><span class=\"line\">\t\tString sql = <span class=\"string\">\"insert into stu(name,age) values (?,?)\"</span>;</span><br><span class=\"line\">\t\tQueryRunner qr = <span class=\"keyword\">new</span> QueryRunner(JDBCUtil.getDataSource());</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tqr.update(sql,stu.getName(),stu.getAge());</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Student <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">\t\tQueryRunner qr = <span class=\"keyword\">new</span> QueryRunner(JDBCUtil.getDataSource());</span><br><span class=\"line\">\t\tString sql = <span class=\"string\">\"select * from stu where id = ?\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> qr.query(sql, <span class=\"keyword\">new</span> BeanHandler&lt;Student&gt;(Student.class),id);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;Student&gt; <span class=\"title\">getAll</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tQueryRunner qr = <span class=\"keyword\">new</span> QueryRunner(JDBCUtil.getDataSource());</span><br><span class=\"line\">\t\tString sql = <span class=\"string\">\"select * from stu\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> qr.query(sql, <span class=\"keyword\">new</span> BeanListHandler&lt;Student&gt;(Student.class));</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>项目结构<br><img src=\"/2020/02/04/jdbc-note-5/1.png\" alt=\"DBUtils项目结构\"></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005977005.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级JDBC连接数据库</a></p>\n"},{"title":"MySQL数据库概述","date":"2020-01-12T06:24:38.000Z","_content":"## 数据库概述\n\n#### 数据库系统 Database System DBS\n- 数据库 Database, DB\n- 数据库管理系统 Database Management System, DBMS\n- 应用程序\n- 数据库管理员 Database Administrator, DAB\n\n关系：\n![SQL Server](mysql-note-1/2.png)\n\n数据库管理系统属于系统软件，是一种操纵和管理数据库的大型软件，用于建立、使用和维护数据库，简称DBMS\n它对数据库进行统一的管理和控制，以保证数据库的**安全性**和**完整性**\n用户通过DBMS访问数据库中的数据，数据库管理员也通过DBMS进行数据库的维护工作\n数据库管理系统是数据库系统的**核心**，是管理数据库的软件\n我们一般说的数据库,就是指的DBMS\n\n#### 常见数据库\n- 关系型数据库：Oracle,DB2,MySQL,SQL Server\n- 非关系型数据库NoSQL：MongoDB,Redis,HBase\n\n非关系型数据库NoSQL：(NoSQL = Not Only SQL)，意即“不仅仅是SQL”\n\n\n#### 关系型数据库 RDBMS \n- 表：类似Excel表格，具有固定的列数,和任意的行数\n- 数据库：数据库是一些关联表的集合\n- 列：一个数据项 Field 字段\n- 行：一条记录  row\n- 主键：唯一，不为空，可以使用主键来查询数据\n- 外键：外键用于关联两个表\n- 索引：使用索引可快速访问数据库表中的特定信息，索引是对数据库表中一列或多列的值进行排序的一种结构，类似于书籍的目录\n\t\n## MySQL数据库\nMySQL是开源的，由瑞典MySQL AB公司开发，现在属于Oracle旗下产品。\nMySQL可以运行在不同系统上，并且支持多种语言，包括C、C++、Python、Java、Perl、PHP、Eiffel、Ruby和Tcl等\n\nMySQL有两种数据库：\n系统数据库(4个数据库服务器自带的)\n- information_schema：存储数据库对象信息，如用户表信息、列信息、根除、字符、分区\n- performance_schema：存储数据库服务器性能参数信息\n- mysql：存储数据库用户权限信息\n- sys：通过这个库可以快速的了解系统的元数据信息，这个库是通过视图的形式把information_schema和performance_schema结合起来，查询出更加令人容易理解的数据\n\n用户数据库（用户自己创建的数据库,一个项目用一个数据库）\n\n#### 连接\n1. 使用命令提示符(cmd) 连接（把MySQL的bin配置到环境变量）\n2. 使用Navicat连接MySQL\n\n实际上手\n```sql\n-- 命令行方式连接\n-- 1.连接数据库 -u 表示用户 -p 表示密码\nMySQL -u root -p\n-- 输入密码 进入mysql命令界面\n\n-- 开始写sql语句，有三点要注意\n--    1.每一条sql语句后面都要以分号结尾;\n--    2.sql语句的注释是两个减号：--\n--    3.sql语句的关键字不区分大小写，非关键字像数据库名、表名这些最好都区分一下大小写，避免出错\n\n-- 2.显示所有数据库\tshow databases; (注意最后是有s)\nshow databases;\n-- 3.创建数据一个数据库(并设置字符集为UTF-8) create database 数据库名  character set utf8;\ncreate database my_demo character set utf8;\n-- 4.选择数据库 use 数据库名;\nuse my_demo;\n-- 5.查看这个数据库里所有表 show tables; (注意最后是有s)\nshow tables;\n-- 6.新建表 create table 表名 (列名 数据类型,类名 数据类型...);\ncreate table my_table (name varchar(20),age int);\n-- 7.查看表的字段信息 desc 表名;\ndesc my_table;\n-- 8.删除表 drop table 表名;\ndrop table my_table;\n-- 9.删除数据库 drop database 数据库名；\ndrop database my_demo;\n```\n\n## 参考资料\n[Java零基础到高级MySQL数据库](https://study.163.com/course/introduction/1005932016.htm)\n","source":"_posts/mysql-note-1.md","raw":"---\ntitle: MySQL数据库概述\ncategories: MySQL笔记\ndate: 2020-01-12 14:24:38\n---\n## 数据库概述\n\n#### 数据库系统 Database System DBS\n- 数据库 Database, DB\n- 数据库管理系统 Database Management System, DBMS\n- 应用程序\n- 数据库管理员 Database Administrator, DAB\n\n关系：\n![SQL Server](mysql-note-1/2.png)\n\n数据库管理系统属于系统软件，是一种操纵和管理数据库的大型软件，用于建立、使用和维护数据库，简称DBMS\n它对数据库进行统一的管理和控制，以保证数据库的**安全性**和**完整性**\n用户通过DBMS访问数据库中的数据，数据库管理员也通过DBMS进行数据库的维护工作\n数据库管理系统是数据库系统的**核心**，是管理数据库的软件\n我们一般说的数据库,就是指的DBMS\n\n#### 常见数据库\n- 关系型数据库：Oracle,DB2,MySQL,SQL Server\n- 非关系型数据库NoSQL：MongoDB,Redis,HBase\n\n非关系型数据库NoSQL：(NoSQL = Not Only SQL)，意即“不仅仅是SQL”\n\n\n#### 关系型数据库 RDBMS \n- 表：类似Excel表格，具有固定的列数,和任意的行数\n- 数据库：数据库是一些关联表的集合\n- 列：一个数据项 Field 字段\n- 行：一条记录  row\n- 主键：唯一，不为空，可以使用主键来查询数据\n- 外键：外键用于关联两个表\n- 索引：使用索引可快速访问数据库表中的特定信息，索引是对数据库表中一列或多列的值进行排序的一种结构，类似于书籍的目录\n\t\n## MySQL数据库\nMySQL是开源的，由瑞典MySQL AB公司开发，现在属于Oracle旗下产品。\nMySQL可以运行在不同系统上，并且支持多种语言，包括C、C++、Python、Java、Perl、PHP、Eiffel、Ruby和Tcl等\n\nMySQL有两种数据库：\n系统数据库(4个数据库服务器自带的)\n- information_schema：存储数据库对象信息，如用户表信息、列信息、根除、字符、分区\n- performance_schema：存储数据库服务器性能参数信息\n- mysql：存储数据库用户权限信息\n- sys：通过这个库可以快速的了解系统的元数据信息，这个库是通过视图的形式把information_schema和performance_schema结合起来，查询出更加令人容易理解的数据\n\n用户数据库（用户自己创建的数据库,一个项目用一个数据库）\n\n#### 连接\n1. 使用命令提示符(cmd) 连接（把MySQL的bin配置到环境变量）\n2. 使用Navicat连接MySQL\n\n实际上手\n```sql\n-- 命令行方式连接\n-- 1.连接数据库 -u 表示用户 -p 表示密码\nMySQL -u root -p\n-- 输入密码 进入mysql命令界面\n\n-- 开始写sql语句，有三点要注意\n--    1.每一条sql语句后面都要以分号结尾;\n--    2.sql语句的注释是两个减号：--\n--    3.sql语句的关键字不区分大小写，非关键字像数据库名、表名这些最好都区分一下大小写，避免出错\n\n-- 2.显示所有数据库\tshow databases; (注意最后是有s)\nshow databases;\n-- 3.创建数据一个数据库(并设置字符集为UTF-8) create database 数据库名  character set utf8;\ncreate database my_demo character set utf8;\n-- 4.选择数据库 use 数据库名;\nuse my_demo;\n-- 5.查看这个数据库里所有表 show tables; (注意最后是有s)\nshow tables;\n-- 6.新建表 create table 表名 (列名 数据类型,类名 数据类型...);\ncreate table my_table (name varchar(20),age int);\n-- 7.查看表的字段信息 desc 表名;\ndesc my_table;\n-- 8.删除表 drop table 表名;\ndrop table my_table;\n-- 9.删除数据库 drop database 数据库名；\ndrop database my_demo;\n```\n\n## 参考资料\n[Java零基础到高级MySQL数据库](https://study.163.com/course/introduction/1005932016.htm)\n","slug":"mysql-note-1","published":1,"updated":"2020-06-13T02:55:34.808Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke3x9g5v0016zgvu2tmjag04","content":"<h2 id=\"数据库概述\"><a href=\"#数据库概述\" class=\"headerlink\" title=\"数据库概述\"></a>数据库概述</h2><h4 id=\"数据库系统-Database-System-DBS\"><a href=\"#数据库系统-Database-System-DBS\" class=\"headerlink\" title=\"数据库系统 Database System DBS\"></a>数据库系统 Database System DBS</h4><ul>\n<li>数据库 Database, DB</li>\n<li>数据库管理系统 Database Management System, DBMS</li>\n<li>应用程序</li>\n<li>数据库管理员 Database Administrator, DAB</li>\n</ul>\n<p>关系：<br><img src=\"/2020/01/12/mysql-note-1/2.png\" alt=\"SQL Server\"></p>\n<p>数据库管理系统属于系统软件，是一种操纵和管理数据库的大型软件，用于建立、使用和维护数据库，简称DBMS<br>它对数据库进行统一的管理和控制，以保证数据库的<strong>安全性</strong>和<strong>完整性</strong><br>用户通过DBMS访问数据库中的数据，数据库管理员也通过DBMS进行数据库的维护工作<br>数据库管理系统是数据库系统的<strong>核心</strong>，是管理数据库的软件<br>我们一般说的数据库,就是指的DBMS</p>\n<h4 id=\"常见数据库\"><a href=\"#常见数据库\" class=\"headerlink\" title=\"常见数据库\"></a>常见数据库</h4><ul>\n<li>关系型数据库：Oracle,DB2,MySQL,SQL Server</li>\n<li>非关系型数据库NoSQL：MongoDB,Redis,HBase</li>\n</ul>\n<p>非关系型数据库NoSQL：(NoSQL = Not Only SQL)，意即“不仅仅是SQL”</p>\n<h4 id=\"关系型数据库-RDBMS\"><a href=\"#关系型数据库-RDBMS\" class=\"headerlink\" title=\"关系型数据库 RDBMS\"></a>关系型数据库 RDBMS</h4><ul>\n<li>表：类似Excel表格，具有固定的列数,和任意的行数</li>\n<li>数据库：数据库是一些关联表的集合</li>\n<li>列：一个数据项 Field 字段</li>\n<li>行：一条记录  row</li>\n<li>主键：唯一，不为空，可以使用主键来查询数据</li>\n<li>外键：外键用于关联两个表</li>\n<li>索引：使用索引可快速访问数据库表中的特定信息，索引是对数据库表中一列或多列的值进行排序的一种结构，类似于书籍的目录</li>\n</ul>\n<h2 id=\"MySQL数据库\"><a href=\"#MySQL数据库\" class=\"headerlink\" title=\"MySQL数据库\"></a>MySQL数据库</h2><p>MySQL是开源的，由瑞典MySQL AB公司开发，现在属于Oracle旗下产品。<br>MySQL可以运行在不同系统上，并且支持多种语言，包括C、C++、Python、Java、Perl、PHP、Eiffel、Ruby和Tcl等</p>\n<p>MySQL有两种数据库：<br>系统数据库(4个数据库服务器自带的)</p>\n<ul>\n<li>information_schema：存储数据库对象信息，如用户表信息、列信息、根除、字符、分区</li>\n<li>performance_schema：存储数据库服务器性能参数信息</li>\n<li>mysql：存储数据库用户权限信息</li>\n<li>sys：通过这个库可以快速的了解系统的元数据信息，这个库是通过视图的形式把information_schema和performance_schema结合起来，查询出更加令人容易理解的数据</li>\n</ul>\n<p>用户数据库（用户自己创建的数据库,一个项目用一个数据库）</p>\n<h4 id=\"连接\"><a href=\"#连接\" class=\"headerlink\" title=\"连接\"></a>连接</h4><ol>\n<li>使用命令提示符(cmd) 连接（把MySQL的bin配置到环境变量）</li>\n<li>使用Navicat连接MySQL</li>\n</ol>\n<p>实际上手</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 命令行方式连接</span></span><br><span class=\"line\"><span class=\"comment\">-- 1.连接数据库 -u 表示用户 -p 表示密码</span></span><br><span class=\"line\">MySQL -u root -p</span><br><span class=\"line\"><span class=\"comment\">-- 输入密码 进入mysql命令界面</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 开始写sql语句，有三点要注意</span></span><br><span class=\"line\"><span class=\"comment\">--    1.每一条sql语句后面都要以分号结尾;</span></span><br><span class=\"line\"><span class=\"comment\">--    2.sql语句的注释是两个减号：--</span></span><br><span class=\"line\"><span class=\"comment\">--    3.sql语句的关键字不区分大小写，非关键字像数据库名、表名这些最好都区分一下大小写，避免出错</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 2.显示所有数据库\tshow databases; (注意最后是有s)</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">databases</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 3.创建数据一个数据库(并设置字符集为UTF-8) create database 数据库名  character set utf8;</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">database</span> my_demo <span class=\"built_in\">character</span> <span class=\"keyword\">set</span> utf8;</span><br><span class=\"line\"><span class=\"comment\">-- 4.选择数据库 use 数据库名;</span></span><br><span class=\"line\"><span class=\"keyword\">use</span> my_demo;</span><br><span class=\"line\"><span class=\"comment\">-- 5.查看这个数据库里所有表 show tables; (注意最后是有s)</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">tables</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 6.新建表 create table 表名 (列名 数据类型,类名 数据类型...);</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> my_table (<span class=\"keyword\">name</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">20</span>),age <span class=\"built_in\">int</span>);</span><br><span class=\"line\"><span class=\"comment\">-- 7.查看表的字段信息 desc 表名;</span></span><br><span class=\"line\">desc my_table;</span><br><span class=\"line\"><span class=\"comment\">-- 8.删除表 drop table 表名;</span></span><br><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> my_table;</span><br><span class=\"line\"><span class=\"comment\">-- 9.删除数据库 drop database 数据库名；</span></span><br><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">database</span> my_demo;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005932016.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级MySQL数据库</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"数据库概述\"><a href=\"#数据库概述\" class=\"headerlink\" title=\"数据库概述\"></a>数据库概述</h2><h4 id=\"数据库系统-Database-System-DBS\"><a href=\"#数据库系统-Database-System-DBS\" class=\"headerlink\" title=\"数据库系统 Database System DBS\"></a>数据库系统 Database System DBS</h4><ul>\n<li>数据库 Database, DB</li>\n<li>数据库管理系统 Database Management System, DBMS</li>\n<li>应用程序</li>\n<li>数据库管理员 Database Administrator, DAB</li>\n</ul>\n<p>关系：<br><img src=\"/2020/01/12/mysql-note-1/2.png\" alt=\"SQL Server\"></p>\n<p>数据库管理系统属于系统软件，是一种操纵和管理数据库的大型软件，用于建立、使用和维护数据库，简称DBMS<br>它对数据库进行统一的管理和控制，以保证数据库的<strong>安全性</strong>和<strong>完整性</strong><br>用户通过DBMS访问数据库中的数据，数据库管理员也通过DBMS进行数据库的维护工作<br>数据库管理系统是数据库系统的<strong>核心</strong>，是管理数据库的软件<br>我们一般说的数据库,就是指的DBMS</p>\n<h4 id=\"常见数据库\"><a href=\"#常见数据库\" class=\"headerlink\" title=\"常见数据库\"></a>常见数据库</h4><ul>\n<li>关系型数据库：Oracle,DB2,MySQL,SQL Server</li>\n<li>非关系型数据库NoSQL：MongoDB,Redis,HBase</li>\n</ul>\n<p>非关系型数据库NoSQL：(NoSQL = Not Only SQL)，意即“不仅仅是SQL”</p>\n<h4 id=\"关系型数据库-RDBMS\"><a href=\"#关系型数据库-RDBMS\" class=\"headerlink\" title=\"关系型数据库 RDBMS\"></a>关系型数据库 RDBMS</h4><ul>\n<li>表：类似Excel表格，具有固定的列数,和任意的行数</li>\n<li>数据库：数据库是一些关联表的集合</li>\n<li>列：一个数据项 Field 字段</li>\n<li>行：一条记录  row</li>\n<li>主键：唯一，不为空，可以使用主键来查询数据</li>\n<li>外键：外键用于关联两个表</li>\n<li>索引：使用索引可快速访问数据库表中的特定信息，索引是对数据库表中一列或多列的值进行排序的一种结构，类似于书籍的目录</li>\n</ul>\n<h2 id=\"MySQL数据库\"><a href=\"#MySQL数据库\" class=\"headerlink\" title=\"MySQL数据库\"></a>MySQL数据库</h2><p>MySQL是开源的，由瑞典MySQL AB公司开发，现在属于Oracle旗下产品。<br>MySQL可以运行在不同系统上，并且支持多种语言，包括C、C++、Python、Java、Perl、PHP、Eiffel、Ruby和Tcl等</p>\n<p>MySQL有两种数据库：<br>系统数据库(4个数据库服务器自带的)</p>\n<ul>\n<li>information_schema：存储数据库对象信息，如用户表信息、列信息、根除、字符、分区</li>\n<li>performance_schema：存储数据库服务器性能参数信息</li>\n<li>mysql：存储数据库用户权限信息</li>\n<li>sys：通过这个库可以快速的了解系统的元数据信息，这个库是通过视图的形式把information_schema和performance_schema结合起来，查询出更加令人容易理解的数据</li>\n</ul>\n<p>用户数据库（用户自己创建的数据库,一个项目用一个数据库）</p>\n<h4 id=\"连接\"><a href=\"#连接\" class=\"headerlink\" title=\"连接\"></a>连接</h4><ol>\n<li>使用命令提示符(cmd) 连接（把MySQL的bin配置到环境变量）</li>\n<li>使用Navicat连接MySQL</li>\n</ol>\n<p>实际上手</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 命令行方式连接</span></span><br><span class=\"line\"><span class=\"comment\">-- 1.连接数据库 -u 表示用户 -p 表示密码</span></span><br><span class=\"line\">MySQL -u root -p</span><br><span class=\"line\"><span class=\"comment\">-- 输入密码 进入mysql命令界面</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 开始写sql语句，有三点要注意</span></span><br><span class=\"line\"><span class=\"comment\">--    1.每一条sql语句后面都要以分号结尾;</span></span><br><span class=\"line\"><span class=\"comment\">--    2.sql语句的注释是两个减号：--</span></span><br><span class=\"line\"><span class=\"comment\">--    3.sql语句的关键字不区分大小写，非关键字像数据库名、表名这些最好都区分一下大小写，避免出错</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 2.显示所有数据库\tshow databases; (注意最后是有s)</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">databases</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 3.创建数据一个数据库(并设置字符集为UTF-8) create database 数据库名  character set utf8;</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">database</span> my_demo <span class=\"built_in\">character</span> <span class=\"keyword\">set</span> utf8;</span><br><span class=\"line\"><span class=\"comment\">-- 4.选择数据库 use 数据库名;</span></span><br><span class=\"line\"><span class=\"keyword\">use</span> my_demo;</span><br><span class=\"line\"><span class=\"comment\">-- 5.查看这个数据库里所有表 show tables; (注意最后是有s)</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">tables</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 6.新建表 create table 表名 (列名 数据类型,类名 数据类型...);</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> my_table (<span class=\"keyword\">name</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">20</span>),age <span class=\"built_in\">int</span>);</span><br><span class=\"line\"><span class=\"comment\">-- 7.查看表的字段信息 desc 表名;</span></span><br><span class=\"line\">desc my_table;</span><br><span class=\"line\"><span class=\"comment\">-- 8.删除表 drop table 表名;</span></span><br><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> my_table;</span><br><span class=\"line\"><span class=\"comment\">-- 9.删除数据库 drop database 数据库名；</span></span><br><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">database</span> my_demo;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005932016.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级MySQL数据库</a></p>\n"},{"title":"Linux-SSH","date":"2020-02-25T00:34:24.000Z","_content":"\n昨天在配置Hadoop的时候，使用SSH因为权限配置出现了一点问题\n搜索发现，大家的权限配置都不太一致，所以自己开了两个虚拟机测试一下\n如果对 SSH原理 不了解可以先看下这个 [图解SSH原理](https://www.cnblogs.com/diffx/p/9553587.html)\n\n两台虚拟机A和B\nB的ip：192.168.108.140\n用户都为Hadoop\n\nA 通过SSH 免密登录B\n1. 在 虚拟机A Hadoop家目录下新建.ssh\n2. cd .shh 使用 ssh-keygen -t rsa 生成公私钥 (运行 ssh-keygen -t rsa 后直接敲回车)\n\n```bash\n[hadoop@localhost ~]$ mkdir .ssh\n[hadoop@localhost ~]$ cd .ssh/\n[hadoop@localhost .ssh]$ ssh-keygen -t rsa\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/hadoop/.ssh/id_rsa): \nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in /home/hadoop/.ssh/id_rsa.\nYour public key has been saved in /home/hadoop/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256:SKDjW+zcm6hoGpDC4muNMZB5W8INPpv7KRZMN3SVR4w hadoop@localhost.localdomain\nThe key's randomart image is:\n+---[RSA 2048]----+\n|    .  ..=.      |\n|  ..... E o      |\n| =o+ ..  .       |\n|=oBo=. .         |\n|*=.Oo.. S        |\n|=o*= .           |\n|..*oo .          |\n| *=. o o         |\n|*o.++ o          |\n+----[SHA256]-----+\n\n```\n3. 把公钥 id_rsa.pub 通过 scp 拷贝到 B虚拟机 的 /home/hadoop/  如果已存在会覆盖\n4. 第一次连接会提示，输入 yes ，然后输入 B虚拟机 的Hadoop账户的密码，默认是用本机的用户名登录，需要登录其他用户的格式是：用户名@ip地址 如：root@192.168.108.140\n\n```sh\n[hadoop@localhost .ssh]$ ll\n总用量 8\n-rw-------. 1 hadoop hadoop 1675 2月  25 08:38 id_rsa\n-rw-r--r--. 1 hadoop hadoop  410 2月  25 08:38 id_rsa.pub\n[hadoop@localhost .ssh]$ scp id_rsa.pub 192.168.108.140:/home/hadoop/\nThe authenticity of host '192.168.108.140 (192.168.108.140)' can't be established.\nECDSA key fingerprint is SHA256:tFi+lLLHECXTtozqdB9y5ivkor28HNW6H9j5ooFiaAo.\nECDSA key fingerprint is MD5:3a:c4:5a:fc:fb:e6:e3:b9:f9:63:f3:0c:2e:f1:d9:51.\nAre you sure you want to continue connecting (yes/no)? yes\nWarning: Permanently added '192.168.108.140' (ECDSA) to the list of known hosts.\nhadoop@192.168.108.140's password:\n```\n5. 切换到 B虚拟机 的Hadoop家目录 新建.ssh\n6. 把 A虚拟机 的公钥 追加 .ssh/authorized_keys （不存在这个文件，会自动创建）\n\n```sh\n[hadoop@localhost ~]$ ls\nid_rsa.pub\n[hadoop@localhost ~]$ mkdir .ssh\n[hadoop@localhost ~]$ cat id_rsa.pub >> .ssh/authorized_keys\n```\n这个时候切换到 A虚拟机 SSH登录B虚拟机\n```sh\n[hadoop@localhost .ssh]$ ssh 192.168.108.140\nhadoop@192.168.108.140's password: \n```\n发现还是需要密码，原因就是需要修改 虚拟机B 的权限\n7. 修改 虚拟机B authorized_keys 的权限为644\n```sh\n[hadoop@localhost ~]$ cd .ssh/\n[hadoop@localhost .ssh]$ ll\n总用量 4\n-rw-rw-r--. 1 hadoop hadoop 410 2月  25 08:42 authorized_keys\n[hadoop@localhost .ssh]$ chmod 644 authorized_keys \n[hadoop@localhost .ssh]$ \n[hadoop@localhost .ssh]$ ll -al\n总用量 4\ndrwxrwxr-x. 2 hadoop hadoop  29 2月  25 08:42 .\ndrwx------. 3 hadoop hadoop 113 2月  25 08:42 ..\n-rw-r--r--. 1 hadoop hadoop 410 2月  25 08:42 authorized_keys\n```\n切换回 虚拟机A 使用SSH登录 B虚拟机 发现还是需要输入密码，因为 .ssh 权限也需要更改\n8. 修改 虚拟机B .ssh 的权限为700\n\n```sh\n[hadoop@localhost ~]$ chmod 700 .ssh/\n[hadoop@localhost ~]$ \n[hadoop@localhost ~]$ ll -al\n总用量 20\ndrwx------. 3 hadoop hadoop  113 2月  25 08:42 .\ndrwxr-xr-x. 3 root   root     20 2月  25 00:12 ..\ndrwx------. 2 hadoop hadoop   29 2月  25 08:42 .ssh\n```\n\n切换回 虚拟机A 使用SSH登录 B虚拟机，成功\n```sh\n[hadoop@localhost .ssh]$ ssh 192.168.108.140\nhadoop@192.168.108.140's password: \n\n[hadoop@localhost .ssh]$ ssh 192.168.108.140\nLast login: Tue Feb 25 08:30:57 2020 from 192.168.108.1\n[hadoop@localhost ~]$ exit\n登出\nConnection to 192.168.108.140 closed.\n```\n\n权限为什么要这么配\n>因为sshd为了安全，对属主的目录和文件权限有所要求。如果权限不对，则ssh的免密码登陆不生效。\n用户目录权限为 755 或者 700，就是不能是77x、777，需要保障other用户不能有w权限\n.ssh目录权限一般为755或者700。\nrsa_id.pub 及authorized_keys权限一般为644\nrsa_id权限必须为600\n--[ssh目录权限说明](https://blog.csdn.net/levy_cui/article/details/59524158)\n\n因为一般情况 用户目录,rsa_id.pub,rsa_id 都符合权限要求，所以只要更改 .ssh 和authorized_keys即可\n\n## 总结\n1. 想免密登录谁，就把公钥给谁\n2. 一般情况下，修改 authorized_keys 为 644，.ssh 为 700即可\n3. 可以通过配置单机回环来验证SSH免密码登录是否成功\nA 需要免密登录 B\n可以先在B上生成公私钥，最佳生成的公钥到 authorized_keys ，配置权限\nssh localhost （自己登自己）不需要输入密码说明配置成功，记得通过 exit 退出当前的远程\n然后就可以通过把 A 的公钥加入到 authorized_keys 中，使得 A 可以免密登录 B\n\n\n\n## 参考资料\n[ssh目录权限说明](https://blog.csdn.net/levy_cui/article/details/59524158)\n[ssh密钥文件的权限](https://blog.51cto.com/merrycheng/1340280)\n[图解SSH原理](https://www.cnblogs.com/diffx/p/9553587.html)\n","source":"_posts/linux-ssh.md","raw":"---\ntitle: Linux-SSH\ncategories: Linux笔记\ndate: 2020-02-25 08:34:24\n---\n\n昨天在配置Hadoop的时候，使用SSH因为权限配置出现了一点问题\n搜索发现，大家的权限配置都不太一致，所以自己开了两个虚拟机测试一下\n如果对 SSH原理 不了解可以先看下这个 [图解SSH原理](https://www.cnblogs.com/diffx/p/9553587.html)\n\n两台虚拟机A和B\nB的ip：192.168.108.140\n用户都为Hadoop\n\nA 通过SSH 免密登录B\n1. 在 虚拟机A Hadoop家目录下新建.ssh\n2. cd .shh 使用 ssh-keygen -t rsa 生成公私钥 (运行 ssh-keygen -t rsa 后直接敲回车)\n\n```bash\n[hadoop@localhost ~]$ mkdir .ssh\n[hadoop@localhost ~]$ cd .ssh/\n[hadoop@localhost .ssh]$ ssh-keygen -t rsa\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/hadoop/.ssh/id_rsa): \nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in /home/hadoop/.ssh/id_rsa.\nYour public key has been saved in /home/hadoop/.ssh/id_rsa.pub.\nThe key fingerprint is:\nSHA256:SKDjW+zcm6hoGpDC4muNMZB5W8INPpv7KRZMN3SVR4w hadoop@localhost.localdomain\nThe key's randomart image is:\n+---[RSA 2048]----+\n|    .  ..=.      |\n|  ..... E o      |\n| =o+ ..  .       |\n|=oBo=. .         |\n|*=.Oo.. S        |\n|=o*= .           |\n|..*oo .          |\n| *=. o o         |\n|*o.++ o          |\n+----[SHA256]-----+\n\n```\n3. 把公钥 id_rsa.pub 通过 scp 拷贝到 B虚拟机 的 /home/hadoop/  如果已存在会覆盖\n4. 第一次连接会提示，输入 yes ，然后输入 B虚拟机 的Hadoop账户的密码，默认是用本机的用户名登录，需要登录其他用户的格式是：用户名@ip地址 如：root@192.168.108.140\n\n```sh\n[hadoop@localhost .ssh]$ ll\n总用量 8\n-rw-------. 1 hadoop hadoop 1675 2月  25 08:38 id_rsa\n-rw-r--r--. 1 hadoop hadoop  410 2月  25 08:38 id_rsa.pub\n[hadoop@localhost .ssh]$ scp id_rsa.pub 192.168.108.140:/home/hadoop/\nThe authenticity of host '192.168.108.140 (192.168.108.140)' can't be established.\nECDSA key fingerprint is SHA256:tFi+lLLHECXTtozqdB9y5ivkor28HNW6H9j5ooFiaAo.\nECDSA key fingerprint is MD5:3a:c4:5a:fc:fb:e6:e3:b9:f9:63:f3:0c:2e:f1:d9:51.\nAre you sure you want to continue connecting (yes/no)? yes\nWarning: Permanently added '192.168.108.140' (ECDSA) to the list of known hosts.\nhadoop@192.168.108.140's password:\n```\n5. 切换到 B虚拟机 的Hadoop家目录 新建.ssh\n6. 把 A虚拟机 的公钥 追加 .ssh/authorized_keys （不存在这个文件，会自动创建）\n\n```sh\n[hadoop@localhost ~]$ ls\nid_rsa.pub\n[hadoop@localhost ~]$ mkdir .ssh\n[hadoop@localhost ~]$ cat id_rsa.pub >> .ssh/authorized_keys\n```\n这个时候切换到 A虚拟机 SSH登录B虚拟机\n```sh\n[hadoop@localhost .ssh]$ ssh 192.168.108.140\nhadoop@192.168.108.140's password: \n```\n发现还是需要密码，原因就是需要修改 虚拟机B 的权限\n7. 修改 虚拟机B authorized_keys 的权限为644\n```sh\n[hadoop@localhost ~]$ cd .ssh/\n[hadoop@localhost .ssh]$ ll\n总用量 4\n-rw-rw-r--. 1 hadoop hadoop 410 2月  25 08:42 authorized_keys\n[hadoop@localhost .ssh]$ chmod 644 authorized_keys \n[hadoop@localhost .ssh]$ \n[hadoop@localhost .ssh]$ ll -al\n总用量 4\ndrwxrwxr-x. 2 hadoop hadoop  29 2月  25 08:42 .\ndrwx------. 3 hadoop hadoop 113 2月  25 08:42 ..\n-rw-r--r--. 1 hadoop hadoop 410 2月  25 08:42 authorized_keys\n```\n切换回 虚拟机A 使用SSH登录 B虚拟机 发现还是需要输入密码，因为 .ssh 权限也需要更改\n8. 修改 虚拟机B .ssh 的权限为700\n\n```sh\n[hadoop@localhost ~]$ chmod 700 .ssh/\n[hadoop@localhost ~]$ \n[hadoop@localhost ~]$ ll -al\n总用量 20\ndrwx------. 3 hadoop hadoop  113 2月  25 08:42 .\ndrwxr-xr-x. 3 root   root     20 2月  25 00:12 ..\ndrwx------. 2 hadoop hadoop   29 2月  25 08:42 .ssh\n```\n\n切换回 虚拟机A 使用SSH登录 B虚拟机，成功\n```sh\n[hadoop@localhost .ssh]$ ssh 192.168.108.140\nhadoop@192.168.108.140's password: \n\n[hadoop@localhost .ssh]$ ssh 192.168.108.140\nLast login: Tue Feb 25 08:30:57 2020 from 192.168.108.1\n[hadoop@localhost ~]$ exit\n登出\nConnection to 192.168.108.140 closed.\n```\n\n权限为什么要这么配\n>因为sshd为了安全，对属主的目录和文件权限有所要求。如果权限不对，则ssh的免密码登陆不生效。\n用户目录权限为 755 或者 700，就是不能是77x、777，需要保障other用户不能有w权限\n.ssh目录权限一般为755或者700。\nrsa_id.pub 及authorized_keys权限一般为644\nrsa_id权限必须为600\n--[ssh目录权限说明](https://blog.csdn.net/levy_cui/article/details/59524158)\n\n因为一般情况 用户目录,rsa_id.pub,rsa_id 都符合权限要求，所以只要更改 .ssh 和authorized_keys即可\n\n## 总结\n1. 想免密登录谁，就把公钥给谁\n2. 一般情况下，修改 authorized_keys 为 644，.ssh 为 700即可\n3. 可以通过配置单机回环来验证SSH免密码登录是否成功\nA 需要免密登录 B\n可以先在B上生成公私钥，最佳生成的公钥到 authorized_keys ，配置权限\nssh localhost （自己登自己）不需要输入密码说明配置成功，记得通过 exit 退出当前的远程\n然后就可以通过把 A 的公钥加入到 authorized_keys 中，使得 A 可以免密登录 B\n\n\n\n## 参考资料\n[ssh目录权限说明](https://blog.csdn.net/levy_cui/article/details/59524158)\n[ssh密钥文件的权限](https://blog.51cto.com/merrycheng/1340280)\n[图解SSH原理](https://www.cnblogs.com/diffx/p/9553587.html)\n","slug":"linux-ssh","published":1,"updated":"2020-06-13T02:55:34.806Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke3x9g5w0018zgvu6g1s1w2x","content":"<p>昨天在配置Hadoop的时候，使用SSH因为权限配置出现了一点问题<br>搜索发现，大家的权限配置都不太一致，所以自己开了两个虚拟机测试一下<br>如果对 SSH原理 不了解可以先看下这个 <a href=\"https://www.cnblogs.com/diffx/p/9553587.html\" target=\"_blank\" rel=\"noopener\">图解SSH原理</a></p>\n<p>两台虚拟机A和B<br>B的ip：192.168.108.140<br>用户都为Hadoop</p>\n<p>A 通过SSH 免密登录B</p>\n<ol>\n<li>在 虚拟机A Hadoop家目录下新建.ssh</li>\n<li>cd .shh 使用 ssh-keygen -t rsa 生成公私钥 (运行 ssh-keygen -t rsa 后直接敲回车)</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[hadoop@localhost ~]$ mkdir .ssh</span><br><span class=\"line\">[hadoop@localhost ~]$ <span class=\"built_in\">cd</span> .ssh/</span><br><span class=\"line\">[hadoop@localhost .ssh]$ ssh-keygen -t rsa</span><br><span class=\"line\">Generating public/private rsa key pair.</span><br><span class=\"line\">Enter file <span class=\"keyword\">in</span> <span class=\"built_in\">which</span> to save the key (/home/hadoop/.ssh/id_rsa): </span><br><span class=\"line\">Enter passphrase (empty <span class=\"keyword\">for</span> no passphrase): </span><br><span class=\"line\">Enter same passphrase again: </span><br><span class=\"line\">Your identification has been saved <span class=\"keyword\">in</span> /home/hadoop/.ssh/id_rsa.</span><br><span class=\"line\">Your public key has been saved <span class=\"keyword\">in</span> /home/hadoop/.ssh/id_rsa.pub.</span><br><span class=\"line\">The key fingerprint is:</span><br><span class=\"line\">SHA256:SKDjW+zcm6hoGpDC4muNMZB5W8INPpv7KRZMN3SVR4w hadoop@localhost.localdomain</span><br><span class=\"line\">The key<span class=\"string\">'s randomart image is:</span></span><br><span class=\"line\"><span class=\"string\">+---[RSA 2048]----+</span></span><br><span class=\"line\"><span class=\"string\">|    .  ..=.      |</span></span><br><span class=\"line\"><span class=\"string\">|  ..... E o      |</span></span><br><span class=\"line\"><span class=\"string\">| =o+ ..  .       |</span></span><br><span class=\"line\"><span class=\"string\">|=oBo=. .         |</span></span><br><span class=\"line\"><span class=\"string\">|*=.Oo.. S        |</span></span><br><span class=\"line\"><span class=\"string\">|=o*= .           |</span></span><br><span class=\"line\"><span class=\"string\">|..*oo .          |</span></span><br><span class=\"line\"><span class=\"string\">| *=. o o         |</span></span><br><span class=\"line\"><span class=\"string\">|*o.++ o          |</span></span><br><span class=\"line\"><span class=\"string\">+----[SHA256]-----+</span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>把公钥 id_rsa.pub 通过 scp 拷贝到 B虚拟机 的 /home/hadoop/  如果已存在会覆盖</li>\n<li>第一次连接会提示，输入 yes ，然后输入 B虚拟机 的Hadoop账户的密码，默认是用本机的用户名登录，需要登录其他用户的格式是：用户名@ip地址 如：<a href=\"mailto:root@192.168.108.140\" target=\"_blank\" rel=\"noopener\">root@192.168.108.140</a></li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[hadoop@localhost .ssh]$ ll</span><br><span class=\"line\">总用量 8</span><br><span class=\"line\">-rw-------. 1 hadoop hadoop 1675 2月  25 08:38 id_rsa</span><br><span class=\"line\">-rw-r--r--. 1 hadoop hadoop  410 2月  25 08:38 id_rsa.pub</span><br><span class=\"line\">[hadoop@localhost .ssh]$ scp id_rsa.pub 192.168.108.140:/home/hadoop/</span><br><span class=\"line\">The authenticity of host <span class=\"string\">'192.168.108.140 (192.168.108.140)'</span> can<span class=\"string\">'t be established.</span></span><br><span class=\"line\"><span class=\"string\">ECDSA key fingerprint is SHA256:tFi+lLLHECXTtozqdB9y5ivkor28HNW6H9j5ooFiaAo.</span></span><br><span class=\"line\"><span class=\"string\">ECDSA key fingerprint is MD5:3a:c4:5a:fc:fb:e6:e3:b9:f9:63:f3:0c:2e:f1:d9:51.</span></span><br><span class=\"line\"><span class=\"string\">Are you sure you want to continue connecting (yes/no)? yes</span></span><br><span class=\"line\"><span class=\"string\">Warning: Permanently added '</span>192.168.108.140<span class=\"string\">' (ECDSA) to the list of known hosts.</span></span><br><span class=\"line\"><span class=\"string\">hadoop@192.168.108.140'</span>s password:</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>切换到 B虚拟机 的Hadoop家目录 新建.ssh</li>\n<li>把 A虚拟机 的公钥 追加 .ssh/authorized_keys （不存在这个文件，会自动创建）</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[hadoop@localhost ~]$ ls</span><br><span class=\"line\">id_rsa.pub</span><br><span class=\"line\">[hadoop@localhost ~]$ mkdir .ssh</span><br><span class=\"line\">[hadoop@localhost ~]$ cat id_rsa.pub &gt;&gt; .ssh/authorized_keys</span><br></pre></td></tr></table></figure>\n<p>这个时候切换到 A虚拟机 SSH登录B虚拟机</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[hadoop@localhost .ssh]$ ssh 192.168.108.140</span><br><span class=\"line\">hadoop@192.168.108.140<span class=\"string\">'s password:</span></span><br></pre></td></tr></table></figure>\n<p>发现还是需要密码，原因就是需要修改 虚拟机B 的权限<br>7. 修改 虚拟机B authorized_keys 的权限为644</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[hadoop@localhost ~]$ <span class=\"built_in\">cd</span> .ssh/</span><br><span class=\"line\">[hadoop@localhost .ssh]$ ll</span><br><span class=\"line\">总用量 4</span><br><span class=\"line\">-rw-rw-r--. 1 hadoop hadoop 410 2月  25 08:42 authorized_keys</span><br><span class=\"line\">[hadoop@localhost .ssh]$ chmod 644 authorized_keys </span><br><span class=\"line\">[hadoop@localhost .ssh]$ </span><br><span class=\"line\">[hadoop@localhost .ssh]$ ll -al</span><br><span class=\"line\">总用量 4</span><br><span class=\"line\">drwxrwxr-x. 2 hadoop hadoop  29 2月  25 08:42 .</span><br><span class=\"line\">drwx------. 3 hadoop hadoop 113 2月  25 08:42 ..</span><br><span class=\"line\">-rw-r--r--. 1 hadoop hadoop 410 2月  25 08:42 authorized_keys</span><br></pre></td></tr></table></figure>\n<p>切换回 虚拟机A 使用SSH登录 B虚拟机 发现还是需要输入密码，因为 .ssh 权限也需要更改<br>8. 修改 虚拟机B .ssh 的权限为700</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[hadoop@localhost ~]$ chmod 700 .ssh/</span><br><span class=\"line\">[hadoop@localhost ~]$ </span><br><span class=\"line\">[hadoop@localhost ~]$ ll -al</span><br><span class=\"line\">总用量 20</span><br><span class=\"line\">drwx------. 3 hadoop hadoop  113 2月  25 08:42 .</span><br><span class=\"line\">drwxr-xr-x. 3 root   root     20 2月  25 00:12 ..</span><br><span class=\"line\">drwx------. 2 hadoop hadoop   29 2月  25 08:42 .ssh</span><br></pre></td></tr></table></figure>\n\n<p>切换回 虚拟机A 使用SSH登录 B虚拟机，成功</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[hadoop@localhost .ssh]$ ssh 192.168.108.140</span><br><span class=\"line\">hadoop@192.168.108.140<span class=\"string\">'s password: </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[hadoop@localhost .ssh]$ ssh 192.168.108.140</span></span><br><span class=\"line\"><span class=\"string\">Last login: Tue Feb 25 08:30:57 2020 from 192.168.108.1</span></span><br><span class=\"line\"><span class=\"string\">[hadoop@localhost ~]$ exit</span></span><br><span class=\"line\"><span class=\"string\">登出</span></span><br><span class=\"line\"><span class=\"string\">Connection to 192.168.108.140 closed.</span></span><br></pre></td></tr></table></figure>\n\n<p>权限为什么要这么配</p>\n<blockquote>\n<p>因为sshd为了安全，对属主的目录和文件权限有所要求。如果权限不对，则ssh的免密码登陆不生效。<br>用户目录权限为 755 或者 700，就是不能是77x、777，需要保障other用户不能有w权限<br>.ssh目录权限一般为755或者700。<br>rsa_id.pub 及authorized_keys权限一般为644<br>rsa_id权限必须为600<br>–<a href=\"https://blog.csdn.net/levy_cui/article/details/59524158\" target=\"_blank\" rel=\"noopener\">ssh目录权限说明</a></p>\n</blockquote>\n<p>因为一般情况 用户目录,rsa_id.pub,rsa_id 都符合权限要求，所以只要更改 .ssh 和authorized_keys即可</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ol>\n<li>想免密登录谁，就把公钥给谁</li>\n<li>一般情况下，修改 authorized_keys 为 644，.ssh 为 700即可</li>\n<li>可以通过配置单机回环来验证SSH免密码登录是否成功<br>A 需要免密登录 B<br>可以先在B上生成公私钥，最佳生成的公钥到 authorized_keys ，配置权限<br>ssh localhost （自己登自己）不需要输入密码说明配置成功，记得通过 exit 退出当前的远程<br>然后就可以通过把 A 的公钥加入到 authorized_keys 中，使得 A 可以免密登录 B</li>\n</ol>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://blog.csdn.net/levy_cui/article/details/59524158\" target=\"_blank\" rel=\"noopener\">ssh目录权限说明</a><br><a href=\"https://blog.51cto.com/merrycheng/1340280\" target=\"_blank\" rel=\"noopener\">ssh密钥文件的权限</a><br><a href=\"https://www.cnblogs.com/diffx/p/9553587.html\" target=\"_blank\" rel=\"noopener\">图解SSH原理</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>昨天在配置Hadoop的时候，使用SSH因为权限配置出现了一点问题<br>搜索发现，大家的权限配置都不太一致，所以自己开了两个虚拟机测试一下<br>如果对 SSH原理 不了解可以先看下这个 <a href=\"https://www.cnblogs.com/diffx/p/9553587.html\" target=\"_blank\" rel=\"noopener\">图解SSH原理</a></p>\n<p>两台虚拟机A和B<br>B的ip：192.168.108.140<br>用户都为Hadoop</p>\n<p>A 通过SSH 免密登录B</p>\n<ol>\n<li>在 虚拟机A Hadoop家目录下新建.ssh</li>\n<li>cd .shh 使用 ssh-keygen -t rsa 生成公私钥 (运行 ssh-keygen -t rsa 后直接敲回车)</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[hadoop@localhost ~]$ mkdir .ssh</span><br><span class=\"line\">[hadoop@localhost ~]$ <span class=\"built_in\">cd</span> .ssh/</span><br><span class=\"line\">[hadoop@localhost .ssh]$ ssh-keygen -t rsa</span><br><span class=\"line\">Generating public/private rsa key pair.</span><br><span class=\"line\">Enter file <span class=\"keyword\">in</span> <span class=\"built_in\">which</span> to save the key (/home/hadoop/.ssh/id_rsa): </span><br><span class=\"line\">Enter passphrase (empty <span class=\"keyword\">for</span> no passphrase): </span><br><span class=\"line\">Enter same passphrase again: </span><br><span class=\"line\">Your identification has been saved <span class=\"keyword\">in</span> /home/hadoop/.ssh/id_rsa.</span><br><span class=\"line\">Your public key has been saved <span class=\"keyword\">in</span> /home/hadoop/.ssh/id_rsa.pub.</span><br><span class=\"line\">The key fingerprint is:</span><br><span class=\"line\">SHA256:SKDjW+zcm6hoGpDC4muNMZB5W8INPpv7KRZMN3SVR4w hadoop@localhost.localdomain</span><br><span class=\"line\">The key<span class=\"string\">'s randomart image is:</span></span><br><span class=\"line\"><span class=\"string\">+---[RSA 2048]----+</span></span><br><span class=\"line\"><span class=\"string\">|    .  ..=.      |</span></span><br><span class=\"line\"><span class=\"string\">|  ..... E o      |</span></span><br><span class=\"line\"><span class=\"string\">| =o+ ..  .       |</span></span><br><span class=\"line\"><span class=\"string\">|=oBo=. .         |</span></span><br><span class=\"line\"><span class=\"string\">|*=.Oo.. S        |</span></span><br><span class=\"line\"><span class=\"string\">|=o*= .           |</span></span><br><span class=\"line\"><span class=\"string\">|..*oo .          |</span></span><br><span class=\"line\"><span class=\"string\">| *=. o o         |</span></span><br><span class=\"line\"><span class=\"string\">|*o.++ o          |</span></span><br><span class=\"line\"><span class=\"string\">+----[SHA256]-----+</span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>把公钥 id_rsa.pub 通过 scp 拷贝到 B虚拟机 的 /home/hadoop/  如果已存在会覆盖</li>\n<li>第一次连接会提示，输入 yes ，然后输入 B虚拟机 的Hadoop账户的密码，默认是用本机的用户名登录，需要登录其他用户的格式是：用户名@ip地址 如：<a href=\"mailto:root@192.168.108.140\" target=\"_blank\" rel=\"noopener\">root@192.168.108.140</a></li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[hadoop@localhost .ssh]$ ll</span><br><span class=\"line\">总用量 8</span><br><span class=\"line\">-rw-------. 1 hadoop hadoop 1675 2月  25 08:38 id_rsa</span><br><span class=\"line\">-rw-r--r--. 1 hadoop hadoop  410 2月  25 08:38 id_rsa.pub</span><br><span class=\"line\">[hadoop@localhost .ssh]$ scp id_rsa.pub 192.168.108.140:/home/hadoop/</span><br><span class=\"line\">The authenticity of host <span class=\"string\">'192.168.108.140 (192.168.108.140)'</span> can<span class=\"string\">'t be established.</span></span><br><span class=\"line\"><span class=\"string\">ECDSA key fingerprint is SHA256:tFi+lLLHECXTtozqdB9y5ivkor28HNW6H9j5ooFiaAo.</span></span><br><span class=\"line\"><span class=\"string\">ECDSA key fingerprint is MD5:3a:c4:5a:fc:fb:e6:e3:b9:f9:63:f3:0c:2e:f1:d9:51.</span></span><br><span class=\"line\"><span class=\"string\">Are you sure you want to continue connecting (yes/no)? yes</span></span><br><span class=\"line\"><span class=\"string\">Warning: Permanently added '</span>192.168.108.140<span class=\"string\">' (ECDSA) to the list of known hosts.</span></span><br><span class=\"line\"><span class=\"string\">hadoop@192.168.108.140'</span>s password:</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>切换到 B虚拟机 的Hadoop家目录 新建.ssh</li>\n<li>把 A虚拟机 的公钥 追加 .ssh/authorized_keys （不存在这个文件，会自动创建）</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[hadoop@localhost ~]$ ls</span><br><span class=\"line\">id_rsa.pub</span><br><span class=\"line\">[hadoop@localhost ~]$ mkdir .ssh</span><br><span class=\"line\">[hadoop@localhost ~]$ cat id_rsa.pub &gt;&gt; .ssh/authorized_keys</span><br></pre></td></tr></table></figure>\n<p>这个时候切换到 A虚拟机 SSH登录B虚拟机</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[hadoop@localhost .ssh]$ ssh 192.168.108.140</span><br><span class=\"line\">hadoop@192.168.108.140<span class=\"string\">'s password:</span></span><br></pre></td></tr></table></figure>\n<p>发现还是需要密码，原因就是需要修改 虚拟机B 的权限<br>7. 修改 虚拟机B authorized_keys 的权限为644</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[hadoop@localhost ~]$ <span class=\"built_in\">cd</span> .ssh/</span><br><span class=\"line\">[hadoop@localhost .ssh]$ ll</span><br><span class=\"line\">总用量 4</span><br><span class=\"line\">-rw-rw-r--. 1 hadoop hadoop 410 2月  25 08:42 authorized_keys</span><br><span class=\"line\">[hadoop@localhost .ssh]$ chmod 644 authorized_keys </span><br><span class=\"line\">[hadoop@localhost .ssh]$ </span><br><span class=\"line\">[hadoop@localhost .ssh]$ ll -al</span><br><span class=\"line\">总用量 4</span><br><span class=\"line\">drwxrwxr-x. 2 hadoop hadoop  29 2月  25 08:42 .</span><br><span class=\"line\">drwx------. 3 hadoop hadoop 113 2月  25 08:42 ..</span><br><span class=\"line\">-rw-r--r--. 1 hadoop hadoop 410 2月  25 08:42 authorized_keys</span><br></pre></td></tr></table></figure>\n<p>切换回 虚拟机A 使用SSH登录 B虚拟机 发现还是需要输入密码，因为 .ssh 权限也需要更改<br>8. 修改 虚拟机B .ssh 的权限为700</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[hadoop@localhost ~]$ chmod 700 .ssh/</span><br><span class=\"line\">[hadoop@localhost ~]$ </span><br><span class=\"line\">[hadoop@localhost ~]$ ll -al</span><br><span class=\"line\">总用量 20</span><br><span class=\"line\">drwx------. 3 hadoop hadoop  113 2月  25 08:42 .</span><br><span class=\"line\">drwxr-xr-x. 3 root   root     20 2月  25 00:12 ..</span><br><span class=\"line\">drwx------. 2 hadoop hadoop   29 2月  25 08:42 .ssh</span><br></pre></td></tr></table></figure>\n\n<p>切换回 虚拟机A 使用SSH登录 B虚拟机，成功</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[hadoop@localhost .ssh]$ ssh 192.168.108.140</span><br><span class=\"line\">hadoop@192.168.108.140<span class=\"string\">'s password: </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">[hadoop@localhost .ssh]$ ssh 192.168.108.140</span></span><br><span class=\"line\"><span class=\"string\">Last login: Tue Feb 25 08:30:57 2020 from 192.168.108.1</span></span><br><span class=\"line\"><span class=\"string\">[hadoop@localhost ~]$ exit</span></span><br><span class=\"line\"><span class=\"string\">登出</span></span><br><span class=\"line\"><span class=\"string\">Connection to 192.168.108.140 closed.</span></span><br></pre></td></tr></table></figure>\n\n<p>权限为什么要这么配</p>\n<blockquote>\n<p>因为sshd为了安全，对属主的目录和文件权限有所要求。如果权限不对，则ssh的免密码登陆不生效。<br>用户目录权限为 755 或者 700，就是不能是77x、777，需要保障other用户不能有w权限<br>.ssh目录权限一般为755或者700。<br>rsa_id.pub 及authorized_keys权限一般为644<br>rsa_id权限必须为600<br>–<a href=\"https://blog.csdn.net/levy_cui/article/details/59524158\" target=\"_blank\" rel=\"noopener\">ssh目录权限说明</a></p>\n</blockquote>\n<p>因为一般情况 用户目录,rsa_id.pub,rsa_id 都符合权限要求，所以只要更改 .ssh 和authorized_keys即可</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ol>\n<li>想免密登录谁，就把公钥给谁</li>\n<li>一般情况下，修改 authorized_keys 为 644，.ssh 为 700即可</li>\n<li>可以通过配置单机回环来验证SSH免密码登录是否成功<br>A 需要免密登录 B<br>可以先在B上生成公私钥，最佳生成的公钥到 authorized_keys ，配置权限<br>ssh localhost （自己登自己）不需要输入密码说明配置成功，记得通过 exit 退出当前的远程<br>然后就可以通过把 A 的公钥加入到 authorized_keys 中，使得 A 可以免密登录 B</li>\n</ol>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://blog.csdn.net/levy_cui/article/details/59524158\" target=\"_blank\" rel=\"noopener\">ssh目录权限说明</a><br><a href=\"https://blog.51cto.com/merrycheng/1340280\" target=\"_blank\" rel=\"noopener\">ssh密钥文件的权限</a><br><a href=\"https://www.cnblogs.com/diffx/p/9553587.html\" target=\"_blank\" rel=\"noopener\">图解SSH原理</a></p>\n"},{"title":"CentOS7 VMware安装","date":"2020-08-10T05:51:14.000Z","_content":"## 环境和软件\n宿主机（实体机）：i7 7700HQ（4核8线程 ） 16GB内存 SSD\n虚拟机：VMware Workstaion 15 Pro 15.5.0\nCentOS7镜像：[CentOS-7-x86_64-Minimal-1908.iso](http://mirrors.oit.uci.edu/centos/7.7.1908/isos/x86_64/CentOS-7-x86_64-Minimal-1908.iso) (Minimal为精简版本，无图形界面)\n\n## 配置虚拟机\n1. 点击菜单栏 “文件” - “新建虚拟机” 开始配置虚拟机\n2. 大部分选择默认配置即可，依次配置：配置类型-安装来源-操作系统-虚拟机名称与位置-磁盘容量-自定义配置\n3. 自定义配置：内存可以根据和处理器根据实际配置，打开处理器的虚拟化引擎；在新CD/DVD(IDE) 选择需要安装的镜像的路径\n\n\n注意点：\n1. 可以可以根据宿主机实际情况配置分给虚拟机的资源（计划开多台虚拟机，要注意虚拟机配置总和不要超过宿主机配置）\n2. 进入虚拟机后，鼠标会被困在虚拟机内，同时按下 Ctrl和Alt 释放鼠标\n3. 更详细的可以参考这两个教程：[VMware安装Centos7超详细过程（图文）](https://blog.csdn.net/babyxue/article/details/80970526) [Centos7.7安装及配置教程](https://juejin.im/post/6844904101583519752)\n\n![配置虚拟机](linux-centos7/01.gif)\n\n## 安装CentOS\n1. 大部分配置默认即可，需要特别注意的就是：选择安装磁盘、打开网络连接、配置root账户密码（生产环境或者云主机一定不要使用弱密码）、新建普通用户\n\n![安装CentOS](linux-centos7/02.gif)\n\n2. 配置结束后，等待安装完成，然后按照提示重启即可进入系统\n\n## 安装之后\n1. 安装后可以先保存一份快照，左下角的 “正在保存状态” 消失了快照才保存完成\n\n![保存快照](linux-centos7/03.gif)\n\n2. 网络设置\n通过 ip addr 先查看ip地址，框出来的为本机ip\n![查看ip](linux-centos7/04.png)\n\n3. 安装 Xshell 和Xftp\nXshell可以通过网络连接虚拟机，Xftp可以通过网络传输文件到虚拟机，[非商业用途可免费获取这两款软件](https://www.netsarang.com/zh/free-for-home-school/)\n\n4. 使用Xshell连接虚拟机\n在“主机” 输入的是刚才虚拟机的ip，然后输入用户名和密码\n![使用Xshell连接虚拟机](linux-centos7/05.gif)\n\n5. 记录账户信息\n账户密码久了容易忘记，可以写在 “描述” （要先关闭虚拟机，注意信息安全）\n![记录账户信息](linux-centos7/06.png)\n","source":"_posts/linux-centos7.md","raw":"---\ntitle: CentOS7 VMware安装\ncategories: Linux笔记\ndate: 2020-08-10 13:51:14\n---\n## 环境和软件\n宿主机（实体机）：i7 7700HQ（4核8线程 ） 16GB内存 SSD\n虚拟机：VMware Workstaion 15 Pro 15.5.0\nCentOS7镜像：[CentOS-7-x86_64-Minimal-1908.iso](http://mirrors.oit.uci.edu/centos/7.7.1908/isos/x86_64/CentOS-7-x86_64-Minimal-1908.iso) (Minimal为精简版本，无图形界面)\n\n## 配置虚拟机\n1. 点击菜单栏 “文件” - “新建虚拟机” 开始配置虚拟机\n2. 大部分选择默认配置即可，依次配置：配置类型-安装来源-操作系统-虚拟机名称与位置-磁盘容量-自定义配置\n3. 自定义配置：内存可以根据和处理器根据实际配置，打开处理器的虚拟化引擎；在新CD/DVD(IDE) 选择需要安装的镜像的路径\n\n\n注意点：\n1. 可以可以根据宿主机实际情况配置分给虚拟机的资源（计划开多台虚拟机，要注意虚拟机配置总和不要超过宿主机配置）\n2. 进入虚拟机后，鼠标会被困在虚拟机内，同时按下 Ctrl和Alt 释放鼠标\n3. 更详细的可以参考这两个教程：[VMware安装Centos7超详细过程（图文）](https://blog.csdn.net/babyxue/article/details/80970526) [Centos7.7安装及配置教程](https://juejin.im/post/6844904101583519752)\n\n![配置虚拟机](linux-centos7/01.gif)\n\n## 安装CentOS\n1. 大部分配置默认即可，需要特别注意的就是：选择安装磁盘、打开网络连接、配置root账户密码（生产环境或者云主机一定不要使用弱密码）、新建普通用户\n\n![安装CentOS](linux-centos7/02.gif)\n\n2. 配置结束后，等待安装完成，然后按照提示重启即可进入系统\n\n## 安装之后\n1. 安装后可以先保存一份快照，左下角的 “正在保存状态” 消失了快照才保存完成\n\n![保存快照](linux-centos7/03.gif)\n\n2. 网络设置\n通过 ip addr 先查看ip地址，框出来的为本机ip\n![查看ip](linux-centos7/04.png)\n\n3. 安装 Xshell 和Xftp\nXshell可以通过网络连接虚拟机，Xftp可以通过网络传输文件到虚拟机，[非商业用途可免费获取这两款软件](https://www.netsarang.com/zh/free-for-home-school/)\n\n4. 使用Xshell连接虚拟机\n在“主机” 输入的是刚才虚拟机的ip，然后输入用户名和密码\n![使用Xshell连接虚拟机](linux-centos7/05.gif)\n\n5. 记录账户信息\n账户密码久了容易忘记，可以写在 “描述” （要先关闭虚拟机，注意信息安全）\n![记录账户信息](linux-centos7/06.png)\n","slug":"linux-centos7","published":1,"updated":"2020-08-10T08:06:31.685Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke3x9g5y001bzgvu9q949ysv","content":"<h2 id=\"环境和软件\"><a href=\"#环境和软件\" class=\"headerlink\" title=\"环境和软件\"></a>环境和软件</h2><p>宿主机（实体机）：i7 7700HQ（4核8线程 ） 16GB内存 SSD<br>虚拟机：VMware Workstaion 15 Pro 15.5.0<br>CentOS7镜像：<a href=\"http://mirrors.oit.uci.edu/centos/7.7.1908/isos/x86_64/CentOS-7-x86_64-Minimal-1908.iso\" target=\"_blank\" rel=\"noopener\">CentOS-7-x86_64-Minimal-1908.iso</a> (Minimal为精简版本，无图形界面)</p>\n<h2 id=\"配置虚拟机\"><a href=\"#配置虚拟机\" class=\"headerlink\" title=\"配置虚拟机\"></a>配置虚拟机</h2><ol>\n<li>点击菜单栏 “文件” - “新建虚拟机” 开始配置虚拟机</li>\n<li>大部分选择默认配置即可，依次配置：配置类型-安装来源-操作系统-虚拟机名称与位置-磁盘容量-自定义配置</li>\n<li>自定义配置：内存可以根据和处理器根据实际配置，打开处理器的虚拟化引擎；在新CD/DVD(IDE) 选择需要安装的镜像的路径</li>\n</ol>\n<p>注意点：</p>\n<ol>\n<li>可以可以根据宿主机实际情况配置分给虚拟机的资源（计划开多台虚拟机，要注意虚拟机配置总和不要超过宿主机配置）</li>\n<li>进入虚拟机后，鼠标会被困在虚拟机内，同时按下 Ctrl和Alt 释放鼠标</li>\n<li>更详细的可以参考这两个教程：<a href=\"https://blog.csdn.net/babyxue/article/details/80970526\" target=\"_blank\" rel=\"noopener\">VMware安装Centos7超详细过程（图文）</a> <a href=\"https://juejin.im/post/6844904101583519752\" target=\"_blank\" rel=\"noopener\">Centos7.7安装及配置教程</a></li>\n</ol>\n<p><img src=\"/2020/08/10/linux-centos7/01.gif\" alt=\"配置虚拟机\"></p>\n<h2 id=\"安装CentOS\"><a href=\"#安装CentOS\" class=\"headerlink\" title=\"安装CentOS\"></a>安装CentOS</h2><ol>\n<li>大部分配置默认即可，需要特别注意的就是：选择安装磁盘、打开网络连接、配置root账户密码（生产环境或者云主机一定不要使用弱密码）、新建普通用户</li>\n</ol>\n<p><img src=\"/2020/08/10/linux-centos7/02.gif\" alt=\"安装CentOS\"></p>\n<ol start=\"2\">\n<li>配置结束后，等待安装完成，然后按照提示重启即可进入系统</li>\n</ol>\n<h2 id=\"安装之后\"><a href=\"#安装之后\" class=\"headerlink\" title=\"安装之后\"></a>安装之后</h2><ol>\n<li>安装后可以先保存一份快照，左下角的 “正在保存状态” 消失了快照才保存完成</li>\n</ol>\n<p><img src=\"/2020/08/10/linux-centos7/03.gif\" alt=\"保存快照\"></p>\n<ol start=\"2\">\n<li><p>网络设置<br>通过 ip addr 先查看ip地址，框出来的为本机ip<br><img src=\"/2020/08/10/linux-centos7/04.png\" alt=\"查看ip\"></p>\n</li>\n<li><p>安装 Xshell 和Xftp<br>Xshell可以通过网络连接虚拟机，Xftp可以通过网络传输文件到虚拟机，<a href=\"https://www.netsarang.com/zh/free-for-home-school/\" target=\"_blank\" rel=\"noopener\">非商业用途可免费获取这两款软件</a></p>\n</li>\n<li><p>使用Xshell连接虚拟机<br>在“主机” 输入的是刚才虚拟机的ip，然后输入用户名和密码<br><img src=\"/2020/08/10/linux-centos7/05.gif\" alt=\"使用Xshell连接虚拟机\"></p>\n</li>\n<li><p>记录账户信息<br>账户密码久了容易忘记，可以写在 “描述” （要先关闭虚拟机，注意信息安全）<br><img src=\"/2020/08/10/linux-centos7/06.png\" alt=\"记录账户信息\"></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"环境和软件\"><a href=\"#环境和软件\" class=\"headerlink\" title=\"环境和软件\"></a>环境和软件</h2><p>宿主机（实体机）：i7 7700HQ（4核8线程 ） 16GB内存 SSD<br>虚拟机：VMware Workstaion 15 Pro 15.5.0<br>CentOS7镜像：<a href=\"http://mirrors.oit.uci.edu/centos/7.7.1908/isos/x86_64/CentOS-7-x86_64-Minimal-1908.iso\" target=\"_blank\" rel=\"noopener\">CentOS-7-x86_64-Minimal-1908.iso</a> (Minimal为精简版本，无图形界面)</p>\n<h2 id=\"配置虚拟机\"><a href=\"#配置虚拟机\" class=\"headerlink\" title=\"配置虚拟机\"></a>配置虚拟机</h2><ol>\n<li>点击菜单栏 “文件” - “新建虚拟机” 开始配置虚拟机</li>\n<li>大部分选择默认配置即可，依次配置：配置类型-安装来源-操作系统-虚拟机名称与位置-磁盘容量-自定义配置</li>\n<li>自定义配置：内存可以根据和处理器根据实际配置，打开处理器的虚拟化引擎；在新CD/DVD(IDE) 选择需要安装的镜像的路径</li>\n</ol>\n<p>注意点：</p>\n<ol>\n<li>可以可以根据宿主机实际情况配置分给虚拟机的资源（计划开多台虚拟机，要注意虚拟机配置总和不要超过宿主机配置）</li>\n<li>进入虚拟机后，鼠标会被困在虚拟机内，同时按下 Ctrl和Alt 释放鼠标</li>\n<li>更详细的可以参考这两个教程：<a href=\"https://blog.csdn.net/babyxue/article/details/80970526\" target=\"_blank\" rel=\"noopener\">VMware安装Centos7超详细过程（图文）</a> <a href=\"https://juejin.im/post/6844904101583519752\" target=\"_blank\" rel=\"noopener\">Centos7.7安装及配置教程</a></li>\n</ol>\n<p><img src=\"/2020/08/10/linux-centos7/01.gif\" alt=\"配置虚拟机\"></p>\n<h2 id=\"安装CentOS\"><a href=\"#安装CentOS\" class=\"headerlink\" title=\"安装CentOS\"></a>安装CentOS</h2><ol>\n<li>大部分配置默认即可，需要特别注意的就是：选择安装磁盘、打开网络连接、配置root账户密码（生产环境或者云主机一定不要使用弱密码）、新建普通用户</li>\n</ol>\n<p><img src=\"/2020/08/10/linux-centos7/02.gif\" alt=\"安装CentOS\"></p>\n<ol start=\"2\">\n<li>配置结束后，等待安装完成，然后按照提示重启即可进入系统</li>\n</ol>\n<h2 id=\"安装之后\"><a href=\"#安装之后\" class=\"headerlink\" title=\"安装之后\"></a>安装之后</h2><ol>\n<li>安装后可以先保存一份快照，左下角的 “正在保存状态” 消失了快照才保存完成</li>\n</ol>\n<p><img src=\"/2020/08/10/linux-centos7/03.gif\" alt=\"保存快照\"></p>\n<ol start=\"2\">\n<li><p>网络设置<br>通过 ip addr 先查看ip地址，框出来的为本机ip<br><img src=\"/2020/08/10/linux-centos7/04.png\" alt=\"查看ip\"></p>\n</li>\n<li><p>安装 Xshell 和Xftp<br>Xshell可以通过网络连接虚拟机，Xftp可以通过网络传输文件到虚拟机，<a href=\"https://www.netsarang.com/zh/free-for-home-school/\" target=\"_blank\" rel=\"noopener\">非商业用途可免费获取这两款软件</a></p>\n</li>\n<li><p>使用Xshell连接虚拟机<br>在“主机” 输入的是刚才虚拟机的ip，然后输入用户名和密码<br><img src=\"/2020/08/10/linux-centos7/05.gif\" alt=\"使用Xshell连接虚拟机\"></p>\n</li>\n<li><p>记录账户信息<br>账户密码久了容易忘记，可以写在 “描述” （要先关闭虚拟机，注意信息安全）<br><img src=\"/2020/08/10/linux-centos7/06.png\" alt=\"记录账户信息\"></p>\n</li>\n</ol>\n"},{"title":"MySQL数据库进阶1","date":"2020-01-23T13:28:31.000Z","_content":"## 函数\n- 字符串函数\n- 数值函数\n- 日期和时间函数\n- 其他常用函数\n## 事务\n不可分割的操作，假设该操作有ABCD四个步骤组成\n若ABCD四个步骤都成功完成,则认为事务成功，若ABCD中任意一个步骤操作失败，则认为事务失败\n每条sql语句都是一个事务，事务只对DML语句有效，**对于DQL无效**\n#### 事务的ACID\n- 原子性（Atomicity）：原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚\n- 一致性（Consistency）：一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态\n- 隔离性（Isolation）隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离\n- 持久性（Durability）持久性是指一个事务一旦被提交了，就不能再回滚了，已经把数据保存到数据库当中了\n\n```sql\n-- 需要手动开启事务\nstart transaction\n-- 执行update后查询score没有被改变\n-- 事务对于DQL无效\nupdate score set score = 10;\n-- 执行了commit后，数据才会改变\ncommit;\n-- 如果想撤销之前的sql语句使用回滚\nrollback;\n```\n#### 事务的并发问题\n- 脏读:读取到了别的事务回滚前的脏数据\n- 不可重复读：一个事务两次相同的查询却返回了不同数据（两次查询中被其他事务修改了数据）\n- 幻读：开启事务查询，另一个事务插入或删除数据并提交，再次查询发现与原来数据不同，像是出现了幻觉\n\n不可重复读的重点是**修改**，同样的条件，你读取过的数据，再次读取出来发现值不一样；（主要在于update和delete）\n幻读的重点在于**新增或者删除**，同样的条件，第 1 次和第 2 次读出来的记录数不一样。（主要在于insert）\n\n|         事务隔离级别         | 脏读  | 不可重复读 | 幻读  |\n| :--------------------------: | :---: | :--------: | :---: |\n| 读未提交（read-uncommitted） |  是   |     是     |  是   |\n| 不可重复读（read-committed） |       |     是     |  是   |\n| 可重复读（repeatable-read）  |       |            |  是   |\n|    串行化（serializable）    |       |            |       |\n\nRead uncommitted：读未提交，一个事务可以读取另一个未提交事务的数据\nRead committed：读提交，一个事务要等另一个事务提交后才能读取数据\nRepeatable read：重复读，在开始读取数据（事务开启）时，不再允许删除或修改操作 (MySQL默认这个级别)\nSerializable：事务串行化顺序执行，可以避免脏读、不可重复读与幻读，这种事务隔离级别效率低下，比较耗数据库性能，一般不使用\n\n```sql\n-- 查看隔离级别\nselect @@global.tx_isolation,@@tx_isolation;\n-- 修改当前会话隔离级别\nset session transaction isolation level 隔离级别;\n-- 修改全局会话隔离级别（需要重开会话）\nset global transaction isolation level read committed; \n\n```\n\n## 权限\n限制一个用户能够做什么事情，在MySQL中，可以设置全局权限，指定数据库权限，指定表权限，指定字段权限\n\n权限分类\nCREATE 创建数据库、表或索引权限\nDROP 除数据库或表权限\nALTER 更改表，比如添加字段、索引等\nDELETE 删除数据权限\nINDEX 索引权限\nINSERT 插入权限\nSELECT 查询权限\nUPDATE 更新权限\nCREATE VIEW 创建视图权限\nEXECUTE 执行存储过程权限\n\n```sql\n-- 创建用户 ，新建的用户只能看到information_schema数据库 ，下面不加单引号也可\ncreate user '用户名'@'localhost';\n-- 分配权限 (把mytest数据库里所有表的select权限分配给用户dev)\n-- with grant option 表示这个被授予权限的用户可以把权限传递给其他用户\n-- flush privileges; 刷新权限\ngrant select on my_test.* to dev@localhost  with grant option;\nflush privileges;\n\n-- 创建对所有数据库的所有权限\ngrant all privileges on *.* to dev@localhost  with grant option;\nflush privileges;\n\n-- 分配一个用户只能对stu表进行CRUD操作的权限\ngrant insert,update,select,delete on my_test.stu to privuser@localhost ;\nflush privileges;\n\n-- 查看权限\nshow grants\n-- 查看指定用户的权限\nshow grants for root@localhost\n\n-- 删除权限\nrevoke 权限 on 数据库对象 from 用户名@localhost；\nflush privileges;\n\n-- 删除用户\ndrop user 用户名@localhost;\n```\n\n## 视图\n视图是一个虚拟表，其内容由查询定义\n\n视图是对若干张基本表的引用，一张虚表，查询语句执行的结果\n不存储具体的数据（基本表数据发生了改变，视图也会跟着改变）\n可以跟基本表一样，进行增删改查操作(增删改操作有条件限制)\n\t\n优点：安全性 提高查询性能 提高数据独立性\n\n```sql\n-- 创建视图\ncreate view emp_salary_view\nas(select * from emp \nwhere salary >2000\n);\n\n-- 查询视图\nselect * from emp_salary_view;\n\n-- 修改视图  \n-- create or replace view\ncreate or replace view emp_salary_view\nas(select * from emp \nwhere salary >2999\n);\n\n-- 删除视图\ndrop view emp_salary_view;\n```\n\n\n\nALGORITHM参数\n- MERGE：替换式，可以通过修改视图数据更新真实表中的数据\n- TEMPTABLE：具化式，由于数据存储在临时表中，所以不可以进行更新操作\n- UNDEFINED：没有定义ALGORITHM参数，MySQL更倾向于选择MERGE替换方式，因为它更加有效\n\t\n替换式与具化式区别\n- MERGE替换式，将视图公式替换后，当成一个整体sql进行处理了\n- TEMPTABLE具化式，先处理视图结果，该结果形成一个中间结果暂时存在内存中，后处理外面的查询需求\n\n```sql\n-- MERGE替换式（MySQL默认方式）\nselect * from (select * from emp where salary>2000) t;\n-- TEMPTABLE具化式\n-- (select * from emp where salary>2000) as temptable; 不可执行用于理解\n-- select * from temptable1;\n```\n\nWITH CHECK OPTION\n- 更新数据时不能插入或更新不符合视图限制条件的记录\n\nLOCAL和CASCADED\n- WITH [CASCADED|LOCAL] CHECK OPTION\n- 为可选参数，决定了检查测试的范围，MySQL默认值为CASCADED\n\n```sql\n-- with check option\n-- 通过视图修改salary的值就不能小等于2500\ncreate view emp_s_v\nas ( select * from emp where salary>2500 \n) with check option;\n\n```\n\n\n视图不可更新部分：只要视图当中的数据不是来自于基表，就不能够直接修改\n- 聚合函数\n- DISTINCT 关键字\n- GROUP BY子句\n- HAVING 子句\n- UNION 运算符\n- FROM 子句中包含多个表\n- SELECT 语句中引用了不可更新视图\n\n\n\n## 参考资料\n[Java零基础到高级MySQL数据库](https://study.163.com/course/introduction/1005932016.htm)\n[数据库事务、事务隔离级别以及锁机制详解](https://www.cnblogs.com/jieerma666/p/10805578.html)","source":"_posts/mysql-note-4.md","raw":"---\ntitle: MySQL数据库进阶1\ncategories: MySQL笔记\ndate: 2020-01-23 21:28:31\n---\n## 函数\n- 字符串函数\n- 数值函数\n- 日期和时间函数\n- 其他常用函数\n## 事务\n不可分割的操作，假设该操作有ABCD四个步骤组成\n若ABCD四个步骤都成功完成,则认为事务成功，若ABCD中任意一个步骤操作失败，则认为事务失败\n每条sql语句都是一个事务，事务只对DML语句有效，**对于DQL无效**\n#### 事务的ACID\n- 原子性（Atomicity）：原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚\n- 一致性（Consistency）：一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态\n- 隔离性（Isolation）隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离\n- 持久性（Durability）持久性是指一个事务一旦被提交了，就不能再回滚了，已经把数据保存到数据库当中了\n\n```sql\n-- 需要手动开启事务\nstart transaction\n-- 执行update后查询score没有被改变\n-- 事务对于DQL无效\nupdate score set score = 10;\n-- 执行了commit后，数据才会改变\ncommit;\n-- 如果想撤销之前的sql语句使用回滚\nrollback;\n```\n#### 事务的并发问题\n- 脏读:读取到了别的事务回滚前的脏数据\n- 不可重复读：一个事务两次相同的查询却返回了不同数据（两次查询中被其他事务修改了数据）\n- 幻读：开启事务查询，另一个事务插入或删除数据并提交，再次查询发现与原来数据不同，像是出现了幻觉\n\n不可重复读的重点是**修改**，同样的条件，你读取过的数据，再次读取出来发现值不一样；（主要在于update和delete）\n幻读的重点在于**新增或者删除**，同样的条件，第 1 次和第 2 次读出来的记录数不一样。（主要在于insert）\n\n|         事务隔离级别         | 脏读  | 不可重复读 | 幻读  |\n| :--------------------------: | :---: | :--------: | :---: |\n| 读未提交（read-uncommitted） |  是   |     是     |  是   |\n| 不可重复读（read-committed） |       |     是     |  是   |\n| 可重复读（repeatable-read）  |       |            |  是   |\n|    串行化（serializable）    |       |            |       |\n\nRead uncommitted：读未提交，一个事务可以读取另一个未提交事务的数据\nRead committed：读提交，一个事务要等另一个事务提交后才能读取数据\nRepeatable read：重复读，在开始读取数据（事务开启）时，不再允许删除或修改操作 (MySQL默认这个级别)\nSerializable：事务串行化顺序执行，可以避免脏读、不可重复读与幻读，这种事务隔离级别效率低下，比较耗数据库性能，一般不使用\n\n```sql\n-- 查看隔离级别\nselect @@global.tx_isolation,@@tx_isolation;\n-- 修改当前会话隔离级别\nset session transaction isolation level 隔离级别;\n-- 修改全局会话隔离级别（需要重开会话）\nset global transaction isolation level read committed; \n\n```\n\n## 权限\n限制一个用户能够做什么事情，在MySQL中，可以设置全局权限，指定数据库权限，指定表权限，指定字段权限\n\n权限分类\nCREATE 创建数据库、表或索引权限\nDROP 除数据库或表权限\nALTER 更改表，比如添加字段、索引等\nDELETE 删除数据权限\nINDEX 索引权限\nINSERT 插入权限\nSELECT 查询权限\nUPDATE 更新权限\nCREATE VIEW 创建视图权限\nEXECUTE 执行存储过程权限\n\n```sql\n-- 创建用户 ，新建的用户只能看到information_schema数据库 ，下面不加单引号也可\ncreate user '用户名'@'localhost';\n-- 分配权限 (把mytest数据库里所有表的select权限分配给用户dev)\n-- with grant option 表示这个被授予权限的用户可以把权限传递给其他用户\n-- flush privileges; 刷新权限\ngrant select on my_test.* to dev@localhost  with grant option;\nflush privileges;\n\n-- 创建对所有数据库的所有权限\ngrant all privileges on *.* to dev@localhost  with grant option;\nflush privileges;\n\n-- 分配一个用户只能对stu表进行CRUD操作的权限\ngrant insert,update,select,delete on my_test.stu to privuser@localhost ;\nflush privileges;\n\n-- 查看权限\nshow grants\n-- 查看指定用户的权限\nshow grants for root@localhost\n\n-- 删除权限\nrevoke 权限 on 数据库对象 from 用户名@localhost；\nflush privileges;\n\n-- 删除用户\ndrop user 用户名@localhost;\n```\n\n## 视图\n视图是一个虚拟表，其内容由查询定义\n\n视图是对若干张基本表的引用，一张虚表，查询语句执行的结果\n不存储具体的数据（基本表数据发生了改变，视图也会跟着改变）\n可以跟基本表一样，进行增删改查操作(增删改操作有条件限制)\n\t\n优点：安全性 提高查询性能 提高数据独立性\n\n```sql\n-- 创建视图\ncreate view emp_salary_view\nas(select * from emp \nwhere salary >2000\n);\n\n-- 查询视图\nselect * from emp_salary_view;\n\n-- 修改视图  \n-- create or replace view\ncreate or replace view emp_salary_view\nas(select * from emp \nwhere salary >2999\n);\n\n-- 删除视图\ndrop view emp_salary_view;\n```\n\n\n\nALGORITHM参数\n- MERGE：替换式，可以通过修改视图数据更新真实表中的数据\n- TEMPTABLE：具化式，由于数据存储在临时表中，所以不可以进行更新操作\n- UNDEFINED：没有定义ALGORITHM参数，MySQL更倾向于选择MERGE替换方式，因为它更加有效\n\t\n替换式与具化式区别\n- MERGE替换式，将视图公式替换后，当成一个整体sql进行处理了\n- TEMPTABLE具化式，先处理视图结果，该结果形成一个中间结果暂时存在内存中，后处理外面的查询需求\n\n```sql\n-- MERGE替换式（MySQL默认方式）\nselect * from (select * from emp where salary>2000) t;\n-- TEMPTABLE具化式\n-- (select * from emp where salary>2000) as temptable; 不可执行用于理解\n-- select * from temptable1;\n```\n\nWITH CHECK OPTION\n- 更新数据时不能插入或更新不符合视图限制条件的记录\n\nLOCAL和CASCADED\n- WITH [CASCADED|LOCAL] CHECK OPTION\n- 为可选参数，决定了检查测试的范围，MySQL默认值为CASCADED\n\n```sql\n-- with check option\n-- 通过视图修改salary的值就不能小等于2500\ncreate view emp_s_v\nas ( select * from emp where salary>2500 \n) with check option;\n\n```\n\n\n视图不可更新部分：只要视图当中的数据不是来自于基表，就不能够直接修改\n- 聚合函数\n- DISTINCT 关键字\n- GROUP BY子句\n- HAVING 子句\n- UNION 运算符\n- FROM 子句中包含多个表\n- SELECT 语句中引用了不可更新视图\n\n\n\n## 参考资料\n[Java零基础到高级MySQL数据库](https://study.163.com/course/introduction/1005932016.htm)\n[数据库事务、事务隔离级别以及锁机制详解](https://www.cnblogs.com/jieerma666/p/10805578.html)","slug":"mysql-note-4","published":1,"updated":"2020-06-13T02:55:34.814Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke3x9g5z001czgvudcg6bhfq","content":"<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><ul>\n<li>字符串函数</li>\n<li>数值函数</li>\n<li>日期和时间函数</li>\n<li>其他常用函数<h2 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h2>不可分割的操作，假设该操作有ABCD四个步骤组成<br>若ABCD四个步骤都成功完成,则认为事务成功，若ABCD中任意一个步骤操作失败，则认为事务失败<br>每条sql语句都是一个事务，事务只对DML语句有效，<strong>对于DQL无效</strong><h4 id=\"事务的ACID\"><a href=\"#事务的ACID\" class=\"headerlink\" title=\"事务的ACID\"></a>事务的ACID</h4></li>\n<li>原子性（Atomicity）：原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚</li>\n<li>一致性（Consistency）：一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态</li>\n<li>隔离性（Isolation）隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离</li>\n<li>持久性（Durability）持久性是指一个事务一旦被提交了，就不能再回滚了，已经把数据保存到数据库当中了</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 需要手动开启事务</span></span><br><span class=\"line\"><span class=\"keyword\">start</span> <span class=\"keyword\">transaction</span></span><br><span class=\"line\"><span class=\"comment\">-- 执行update后查询score没有被改变</span></span><br><span class=\"line\"><span class=\"comment\">-- 事务对于DQL无效</span></span><br><span class=\"line\"><span class=\"keyword\">update</span> score <span class=\"keyword\">set</span> score = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 执行了commit后，数据才会改变</span></span><br><span class=\"line\"><span class=\"keyword\">commit</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 如果想撤销之前的sql语句使用回滚</span></span><br><span class=\"line\"><span class=\"keyword\">rollback</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"事务的并发问题\"><a href=\"#事务的并发问题\" class=\"headerlink\" title=\"事务的并发问题\"></a>事务的并发问题</h4><ul>\n<li>脏读:读取到了别的事务回滚前的脏数据</li>\n<li>不可重复读：一个事务两次相同的查询却返回了不同数据（两次查询中被其他事务修改了数据）</li>\n<li>幻读：开启事务查询，另一个事务插入或删除数据并提交，再次查询发现与原来数据不同，像是出现了幻觉</li>\n</ul>\n<p>不可重复读的重点是<strong>修改</strong>，同样的条件，你读取过的数据，再次读取出来发现值不一样；（主要在于update和delete）<br>幻读的重点在于<strong>新增或者删除</strong>，同样的条件，第 1 次和第 2 次读出来的记录数不一样。（主要在于insert）</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">事务隔离级别</th>\n<th align=\"center\">脏读</th>\n<th align=\"center\">不可重复读</th>\n<th align=\"center\">幻读</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">读未提交（read-uncommitted）</td>\n<td align=\"center\">是</td>\n<td align=\"center\">是</td>\n<td align=\"center\">是</td>\n</tr>\n<tr>\n<td align=\"center\">不可重复读（read-committed）</td>\n<td align=\"center\"></td>\n<td align=\"center\">是</td>\n<td align=\"center\">是</td>\n</tr>\n<tr>\n<td align=\"center\">可重复读（repeatable-read）</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">是</td>\n</tr>\n<tr>\n<td align=\"center\">串行化（serializable）</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<p>Read uncommitted：读未提交，一个事务可以读取另一个未提交事务的数据<br>Read committed：读提交，一个事务要等另一个事务提交后才能读取数据<br>Repeatable read：重复读，在开始读取数据（事务开启）时，不再允许删除或修改操作 (MySQL默认这个级别)<br>Serializable：事务串行化顺序执行，可以避免脏读、不可重复读与幻读，这种事务隔离级别效率低下，比较耗数据库性能，一般不使用</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 查看隔离级别</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> @@global.tx_isolation,@@tx_isolation;</span><br><span class=\"line\"><span class=\"comment\">-- 修改当前会话隔离级别</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">session</span> <span class=\"keyword\">transaction</span> <span class=\"keyword\">isolation</span> <span class=\"keyword\">level</span> 隔离级别;</span><br><span class=\"line\"><span class=\"comment\">-- 修改全局会话隔离级别（需要重开会话）</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">global</span> <span class=\"keyword\">transaction</span> <span class=\"keyword\">isolation</span> <span class=\"keyword\">level</span> <span class=\"keyword\">read</span> committed;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"权限\"><a href=\"#权限\" class=\"headerlink\" title=\"权限\"></a>权限</h2><p>限制一个用户能够做什么事情，在MySQL中，可以设置全局权限，指定数据库权限，指定表权限，指定字段权限</p>\n<p>权限分类<br>CREATE 创建数据库、表或索引权限<br>DROP 除数据库或表权限<br>ALTER 更改表，比如添加字段、索引等<br>DELETE 删除数据权限<br>INDEX 索引权限<br>INSERT 插入权限<br>SELECT 查询权限<br>UPDATE 更新权限<br>CREATE VIEW 创建视图权限<br>EXECUTE 执行存储过程权限</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建用户 ，新建的用户只能看到information_schema数据库 ，下面不加单引号也可</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">user</span> <span class=\"string\">'用户名'</span>@<span class=\"string\">'localhost'</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 分配权限 (把mytest数据库里所有表的select权限分配给用户dev)</span></span><br><span class=\"line\"><span class=\"comment\">-- with grant option 表示这个被授予权限的用户可以把权限传递给其他用户</span></span><br><span class=\"line\"><span class=\"comment\">-- flush privileges; 刷新权限</span></span><br><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">select</span> <span class=\"keyword\">on</span> my_test.* <span class=\"keyword\">to</span> dev@localhost  <span class=\"keyword\">with</span> <span class=\"keyword\">grant</span> <span class=\"keyword\">option</span>;</span><br><span class=\"line\"><span class=\"keyword\">flush</span> <span class=\"keyword\">privileges</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 创建对所有数据库的所有权限</span></span><br><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">all</span> <span class=\"keyword\">privileges</span> <span class=\"keyword\">on</span> *.* <span class=\"keyword\">to</span> dev@localhost  <span class=\"keyword\">with</span> <span class=\"keyword\">grant</span> <span class=\"keyword\">option</span>;</span><br><span class=\"line\"><span class=\"keyword\">flush</span> <span class=\"keyword\">privileges</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 分配一个用户只能对stu表进行CRUD操作的权限</span></span><br><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">insert</span>,<span class=\"keyword\">update</span>,<span class=\"keyword\">select</span>,<span class=\"keyword\">delete</span> <span class=\"keyword\">on</span> my_test.stu <span class=\"keyword\">to</span> privuser@localhost ;</span><br><span class=\"line\"><span class=\"keyword\">flush</span> <span class=\"keyword\">privileges</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查看权限</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">grants</span></span><br><span class=\"line\"><span class=\"comment\">-- 查看指定用户的权限</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">grants</span> <span class=\"keyword\">for</span> root@localhost</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 删除权限</span></span><br><span class=\"line\"><span class=\"keyword\">revoke</span> 权限 <span class=\"keyword\">on</span> 数据库对象 <span class=\"keyword\">from</span> 用户名@localhost；</span><br><span class=\"line\"><span class=\"keyword\">flush</span> <span class=\"keyword\">privileges</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 删除用户</span></span><br><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">user</span> 用户名@localhost;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"视图\"><a href=\"#视图\" class=\"headerlink\" title=\"视图\"></a>视图</h2><p>视图是一个虚拟表，其内容由查询定义</p>\n<p>视图是对若干张基本表的引用，一张虚表，查询语句执行的结果<br>不存储具体的数据（基本表数据发生了改变，视图也会跟着改变）<br>可以跟基本表一样，进行增删改查操作(增删改操作有条件限制)</p>\n<p>优点：安全性 提高查询性能 提高数据独立性</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建视图</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">view</span> emp_salary_view</span><br><span class=\"line\"><span class=\"keyword\">as</span>(<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> emp </span><br><span class=\"line\"><span class=\"keyword\">where</span> salary &gt;<span class=\"number\">2000</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查询视图</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> emp_salary_view;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 修改视图  </span></span><br><span class=\"line\"><span class=\"comment\">-- create or replace view</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">or</span> <span class=\"keyword\">replace</span> <span class=\"keyword\">view</span> emp_salary_view</span><br><span class=\"line\"><span class=\"keyword\">as</span>(<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> emp </span><br><span class=\"line\"><span class=\"keyword\">where</span> salary &gt;<span class=\"number\">2999</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 删除视图</span></span><br><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">view</span> emp_salary_view;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>ALGORITHM参数</p>\n<ul>\n<li>MERGE：替换式，可以通过修改视图数据更新真实表中的数据</li>\n<li>TEMPTABLE：具化式，由于数据存储在临时表中，所以不可以进行更新操作</li>\n<li>UNDEFINED：没有定义ALGORITHM参数，MySQL更倾向于选择MERGE替换方式，因为它更加有效</li>\n</ul>\n<p>替换式与具化式区别</p>\n<ul>\n<li>MERGE替换式，将视图公式替换后，当成一个整体sql进行处理了</li>\n<li>TEMPTABLE具化式，先处理视图结果，该结果形成一个中间结果暂时存在内存中，后处理外面的查询需求</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- MERGE替换式（MySQL默认方式）</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> (<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> emp <span class=\"keyword\">where</span> salary&gt;<span class=\"number\">2000</span>) t;</span><br><span class=\"line\"><span class=\"comment\">-- TEMPTABLE具化式</span></span><br><span class=\"line\"><span class=\"comment\">-- (select * from emp where salary&gt;2000) as temptable; 不可执行用于理解</span></span><br><span class=\"line\"><span class=\"comment\">-- select * from temptable1;</span></span><br></pre></td></tr></table></figure>\n\n<p>WITH CHECK OPTION</p>\n<ul>\n<li>更新数据时不能插入或更新不符合视图限制条件的记录</li>\n</ul>\n<p>LOCAL和CASCADED</p>\n<ul>\n<li>WITH [CASCADED|LOCAL] CHECK OPTION</li>\n<li>为可选参数，决定了检查测试的范围，MySQL默认值为CASCADED</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- with check option</span></span><br><span class=\"line\"><span class=\"comment\">-- 通过视图修改salary的值就不能小等于2500</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">view</span> emp_s_v</span><br><span class=\"line\"><span class=\"keyword\">as</span> ( <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> emp <span class=\"keyword\">where</span> salary&gt;<span class=\"number\">2500</span> </span><br><span class=\"line\">) <span class=\"keyword\">with</span> <span class=\"keyword\">check</span> <span class=\"keyword\">option</span>;</span><br></pre></td></tr></table></figure>\n\n\n<p>视图不可更新部分：只要视图当中的数据不是来自于基表，就不能够直接修改</p>\n<ul>\n<li>聚合函数</li>\n<li>DISTINCT 关键字</li>\n<li>GROUP BY子句</li>\n<li>HAVING 子句</li>\n<li>UNION 运算符</li>\n<li>FROM 子句中包含多个表</li>\n<li>SELECT 语句中引用了不可更新视图</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005932016.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级MySQL数据库</a><br><a href=\"https://www.cnblogs.com/jieerma666/p/10805578.html\" target=\"_blank\" rel=\"noopener\">数据库事务、事务隔离级别以及锁机制详解</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><ul>\n<li>字符串函数</li>\n<li>数值函数</li>\n<li>日期和时间函数</li>\n<li>其他常用函数<h2 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h2>不可分割的操作，假设该操作有ABCD四个步骤组成<br>若ABCD四个步骤都成功完成,则认为事务成功，若ABCD中任意一个步骤操作失败，则认为事务失败<br>每条sql语句都是一个事务，事务只对DML语句有效，<strong>对于DQL无效</strong><h4 id=\"事务的ACID\"><a href=\"#事务的ACID\" class=\"headerlink\" title=\"事务的ACID\"></a>事务的ACID</h4></li>\n<li>原子性（Atomicity）：原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚</li>\n<li>一致性（Consistency）：一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态</li>\n<li>隔离性（Isolation）隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离</li>\n<li>持久性（Durability）持久性是指一个事务一旦被提交了，就不能再回滚了，已经把数据保存到数据库当中了</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 需要手动开启事务</span></span><br><span class=\"line\"><span class=\"keyword\">start</span> <span class=\"keyword\">transaction</span></span><br><span class=\"line\"><span class=\"comment\">-- 执行update后查询score没有被改变</span></span><br><span class=\"line\"><span class=\"comment\">-- 事务对于DQL无效</span></span><br><span class=\"line\"><span class=\"keyword\">update</span> score <span class=\"keyword\">set</span> score = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 执行了commit后，数据才会改变</span></span><br><span class=\"line\"><span class=\"keyword\">commit</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 如果想撤销之前的sql语句使用回滚</span></span><br><span class=\"line\"><span class=\"keyword\">rollback</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"事务的并发问题\"><a href=\"#事务的并发问题\" class=\"headerlink\" title=\"事务的并发问题\"></a>事务的并发问题</h4><ul>\n<li>脏读:读取到了别的事务回滚前的脏数据</li>\n<li>不可重复读：一个事务两次相同的查询却返回了不同数据（两次查询中被其他事务修改了数据）</li>\n<li>幻读：开启事务查询，另一个事务插入或删除数据并提交，再次查询发现与原来数据不同，像是出现了幻觉</li>\n</ul>\n<p>不可重复读的重点是<strong>修改</strong>，同样的条件，你读取过的数据，再次读取出来发现值不一样；（主要在于update和delete）<br>幻读的重点在于<strong>新增或者删除</strong>，同样的条件，第 1 次和第 2 次读出来的记录数不一样。（主要在于insert）</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">事务隔离级别</th>\n<th align=\"center\">脏读</th>\n<th align=\"center\">不可重复读</th>\n<th align=\"center\">幻读</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">读未提交（read-uncommitted）</td>\n<td align=\"center\">是</td>\n<td align=\"center\">是</td>\n<td align=\"center\">是</td>\n</tr>\n<tr>\n<td align=\"center\">不可重复读（read-committed）</td>\n<td align=\"center\"></td>\n<td align=\"center\">是</td>\n<td align=\"center\">是</td>\n</tr>\n<tr>\n<td align=\"center\">可重复读（repeatable-read）</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\">是</td>\n</tr>\n<tr>\n<td align=\"center\">串行化（serializable）</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<p>Read uncommitted：读未提交，一个事务可以读取另一个未提交事务的数据<br>Read committed：读提交，一个事务要等另一个事务提交后才能读取数据<br>Repeatable read：重复读，在开始读取数据（事务开启）时，不再允许删除或修改操作 (MySQL默认这个级别)<br>Serializable：事务串行化顺序执行，可以避免脏读、不可重复读与幻读，这种事务隔离级别效率低下，比较耗数据库性能，一般不使用</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 查看隔离级别</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> @@global.tx_isolation,@@tx_isolation;</span><br><span class=\"line\"><span class=\"comment\">-- 修改当前会话隔离级别</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">session</span> <span class=\"keyword\">transaction</span> <span class=\"keyword\">isolation</span> <span class=\"keyword\">level</span> 隔离级别;</span><br><span class=\"line\"><span class=\"comment\">-- 修改全局会话隔离级别（需要重开会话）</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">global</span> <span class=\"keyword\">transaction</span> <span class=\"keyword\">isolation</span> <span class=\"keyword\">level</span> <span class=\"keyword\">read</span> committed;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"权限\"><a href=\"#权限\" class=\"headerlink\" title=\"权限\"></a>权限</h2><p>限制一个用户能够做什么事情，在MySQL中，可以设置全局权限，指定数据库权限，指定表权限，指定字段权限</p>\n<p>权限分类<br>CREATE 创建数据库、表或索引权限<br>DROP 除数据库或表权限<br>ALTER 更改表，比如添加字段、索引等<br>DELETE 删除数据权限<br>INDEX 索引权限<br>INSERT 插入权限<br>SELECT 查询权限<br>UPDATE 更新权限<br>CREATE VIEW 创建视图权限<br>EXECUTE 执行存储过程权限</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建用户 ，新建的用户只能看到information_schema数据库 ，下面不加单引号也可</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">user</span> <span class=\"string\">'用户名'</span>@<span class=\"string\">'localhost'</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 分配权限 (把mytest数据库里所有表的select权限分配给用户dev)</span></span><br><span class=\"line\"><span class=\"comment\">-- with grant option 表示这个被授予权限的用户可以把权限传递给其他用户</span></span><br><span class=\"line\"><span class=\"comment\">-- flush privileges; 刷新权限</span></span><br><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">select</span> <span class=\"keyword\">on</span> my_test.* <span class=\"keyword\">to</span> dev@localhost  <span class=\"keyword\">with</span> <span class=\"keyword\">grant</span> <span class=\"keyword\">option</span>;</span><br><span class=\"line\"><span class=\"keyword\">flush</span> <span class=\"keyword\">privileges</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 创建对所有数据库的所有权限</span></span><br><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">all</span> <span class=\"keyword\">privileges</span> <span class=\"keyword\">on</span> *.* <span class=\"keyword\">to</span> dev@localhost  <span class=\"keyword\">with</span> <span class=\"keyword\">grant</span> <span class=\"keyword\">option</span>;</span><br><span class=\"line\"><span class=\"keyword\">flush</span> <span class=\"keyword\">privileges</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 分配一个用户只能对stu表进行CRUD操作的权限</span></span><br><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">insert</span>,<span class=\"keyword\">update</span>,<span class=\"keyword\">select</span>,<span class=\"keyword\">delete</span> <span class=\"keyword\">on</span> my_test.stu <span class=\"keyword\">to</span> privuser@localhost ;</span><br><span class=\"line\"><span class=\"keyword\">flush</span> <span class=\"keyword\">privileges</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查看权限</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">grants</span></span><br><span class=\"line\"><span class=\"comment\">-- 查看指定用户的权限</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">grants</span> <span class=\"keyword\">for</span> root@localhost</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 删除权限</span></span><br><span class=\"line\"><span class=\"keyword\">revoke</span> 权限 <span class=\"keyword\">on</span> 数据库对象 <span class=\"keyword\">from</span> 用户名@localhost；</span><br><span class=\"line\"><span class=\"keyword\">flush</span> <span class=\"keyword\">privileges</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 删除用户</span></span><br><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">user</span> 用户名@localhost;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"视图\"><a href=\"#视图\" class=\"headerlink\" title=\"视图\"></a>视图</h2><p>视图是一个虚拟表，其内容由查询定义</p>\n<p>视图是对若干张基本表的引用，一张虚表，查询语句执行的结果<br>不存储具体的数据（基本表数据发生了改变，视图也会跟着改变）<br>可以跟基本表一样，进行增删改查操作(增删改操作有条件限制)</p>\n<p>优点：安全性 提高查询性能 提高数据独立性</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建视图</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">view</span> emp_salary_view</span><br><span class=\"line\"><span class=\"keyword\">as</span>(<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> emp </span><br><span class=\"line\"><span class=\"keyword\">where</span> salary &gt;<span class=\"number\">2000</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查询视图</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> emp_salary_view;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 修改视图  </span></span><br><span class=\"line\"><span class=\"comment\">-- create or replace view</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">or</span> <span class=\"keyword\">replace</span> <span class=\"keyword\">view</span> emp_salary_view</span><br><span class=\"line\"><span class=\"keyword\">as</span>(<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> emp </span><br><span class=\"line\"><span class=\"keyword\">where</span> salary &gt;<span class=\"number\">2999</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 删除视图</span></span><br><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">view</span> emp_salary_view;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>ALGORITHM参数</p>\n<ul>\n<li>MERGE：替换式，可以通过修改视图数据更新真实表中的数据</li>\n<li>TEMPTABLE：具化式，由于数据存储在临时表中，所以不可以进行更新操作</li>\n<li>UNDEFINED：没有定义ALGORITHM参数，MySQL更倾向于选择MERGE替换方式，因为它更加有效</li>\n</ul>\n<p>替换式与具化式区别</p>\n<ul>\n<li>MERGE替换式，将视图公式替换后，当成一个整体sql进行处理了</li>\n<li>TEMPTABLE具化式，先处理视图结果，该结果形成一个中间结果暂时存在内存中，后处理外面的查询需求</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- MERGE替换式（MySQL默认方式）</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> (<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> emp <span class=\"keyword\">where</span> salary&gt;<span class=\"number\">2000</span>) t;</span><br><span class=\"line\"><span class=\"comment\">-- TEMPTABLE具化式</span></span><br><span class=\"line\"><span class=\"comment\">-- (select * from emp where salary&gt;2000) as temptable; 不可执行用于理解</span></span><br><span class=\"line\"><span class=\"comment\">-- select * from temptable1;</span></span><br></pre></td></tr></table></figure>\n\n<p>WITH CHECK OPTION</p>\n<ul>\n<li>更新数据时不能插入或更新不符合视图限制条件的记录</li>\n</ul>\n<p>LOCAL和CASCADED</p>\n<ul>\n<li>WITH [CASCADED|LOCAL] CHECK OPTION</li>\n<li>为可选参数，决定了检查测试的范围，MySQL默认值为CASCADED</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- with check option</span></span><br><span class=\"line\"><span class=\"comment\">-- 通过视图修改salary的值就不能小等于2500</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">view</span> emp_s_v</span><br><span class=\"line\"><span class=\"keyword\">as</span> ( <span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> emp <span class=\"keyword\">where</span> salary&gt;<span class=\"number\">2500</span> </span><br><span class=\"line\">) <span class=\"keyword\">with</span> <span class=\"keyword\">check</span> <span class=\"keyword\">option</span>;</span><br></pre></td></tr></table></figure>\n\n\n<p>视图不可更新部分：只要视图当中的数据不是来自于基表，就不能够直接修改</p>\n<ul>\n<li>聚合函数</li>\n<li>DISTINCT 关键字</li>\n<li>GROUP BY子句</li>\n<li>HAVING 子句</li>\n<li>UNION 运算符</li>\n<li>FROM 子句中包含多个表</li>\n<li>SELECT 语句中引用了不可更新视图</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005932016.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级MySQL数据库</a><br><a href=\"https://www.cnblogs.com/jieerma666/p/10805578.html\" target=\"_blank\" rel=\"noopener\">数据库事务、事务隔离级别以及锁机制详解</a></p>\n"},{"title":"MySQL数据库进阶2","date":"2020-01-27T11:29:26.000Z","_content":"## 存储过程\n一组可编程的函数，是为了完成特定功能的SQL语句集\n经编译创建并保存在数据库字典中，用户可通过指定存储过程的名字并给定参数(需要时)来调用执行\n\n为什么要用存储过程\n- 将重复性很高的一些操作，封装到一个存储过程中，简化了对这些SQL的调用\n- 批量处理\n- 统一接口，确保数据的安全\n- 相对于Oracle数据库来说，MySQL的存储过程相对功能较弱，使用较少\n\n\n```sql\n-- 创建存储过程\ndelimiter $$\nCREATE PROCEDURE 存储过程名称()\nBEGIN\n语句\nEND $$\ndelimiter ;\n\n-- 调用存储过程\ncall  存储过程名称();\n\n-- 查询指定数据库中的存储过程\nshow procedure status where db='数据库名称';\n\n-- 查询存储过程详情\nshow create procedure 存储过程名称;\n\n\n--删除存储过程\ndrop procedure  存储过程名称;\n```\n\n#### DELIMITER\n修改标准分隔符，这个命令与存储过程语法无关\n作用是告诉MySQL解释器，该段命令是否已经结束了\n默认情况下，DELIMITER是分号; ，在命令行客户端中，如果有一行命令以分号结束，那么回车后MySQL将立即执行该语句\n\n在为可能输入较多的语句，且语句中包含有分号,DELIMITER $$ 把标准分隔符; 修改为$$，这样只有当$$出现之后，MySQL解释器才会执行这段语句\n\n```sql\n-- 创建存储过程\ndelimiter $$\ncreate procedure show_emp()\nbegin\nselect * from emp;\nend$$\ndelimiter ;\n\n-- 执行存储过程\ncall show_emp();\n```\n\n#### 声明变量\n\n```sql\ndelimiter $$\ncreate procedure test()\nbegin\n-- 声明变量\n-- DECLARE 变量名 数据类型(大小) DEFAULT 默认值;\ndeclare res varchar(20) default '';\n-- 声明多个变量\ndeclare x,y int default 0;\n\n-- 通过into 赋值\ndeclare avgRes double default 0;\nselect avg(salary) into avgRes from emp;\n\n-- 输出变量\nselect avgRes;\n\nend$$\ndelimiter ;\n```\n\n#### 存储过程参数\n- IN 传入值\n- OUT 传出值\n- INOUT IN和OUT参数的组合\n\n```sql\ncreate produce name(参数类型 参数名称 数据类型(大小) )\n\n-- IN 传入值\ndelimiter $$\ncreate procedure getName (in name varchar(255))\nbegin \nselect * from emp where ename = name;\n\nend$$\ndelimiter ;\n-- 传入参数\ncall getName('李白');\n\n\n-- OUT 传出值\ndelimiter $$\ncreate procedure getSalary(in n varchar(255), out eSalary int)\nbegin\nselect salary into eSalary from emp where ename = n;\nend$$\ndelimiter ;\n-- 传入参数\ncall getSalary('李白',@s);\nselect @s;\n\n-- INOUT IN和OUT参数的组合\ndelimiter $$\ncreate procedure getNum(inout num int,in x int )\nbegin\nset num = num + x;\n\nend$$\ndelimiter ;\n\n-- 设置变量 传入参数\nset @num1 = 20;\ncall getNum(@num1,10);\nselect @num1;\n\n```\n\n#### 存储过程语句\nIF语句\n```sql\nIF expression THEN \nstatements;\nEND IF;\n\nIF expression THEN\nstatements;\nELSE\nelse-statements;\nEND IF;\n```\n\nCASE语句\n```sql\nCASE  case_expression\nWHEN when_expression_1 THEN commands\nWHEN when_expression_2 THEN commands\n...\nELSE commands\nEND CASE;\n\n```\n\n循环语句\n```sql\n-- while循环\nWHILE expression DO\nstatements\nEND WHILE\n\n-- repeat循环\nREPEAT\nstatements;\nUNTIL expression\nEND REPEAT\n```\n\n\n\n## 自定义函数\n```sql\n-- 随机生成字符串\n\ndelimiter $$\n-- 注意return加s\ncreate function rand_str(n int) returns varchar(255)\nbegin \n\n-- 声明一个str 52个字母\ndeclare str varchar(100) default 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n-- 记录当前是第几个字符\ndeclare i int default 0;\n\ndeclare res_str varchar(255) default '';\n\nwhile i < n do\n-- 生成1-52 ：floor(1+RAND()*52)  floor()去掉小数\n-- substr(str,floor(1+RAND()*52),1); -- 最后一个代表截取一位\nset res_str = concat(res_str,substr(str,floor(1+RAND()*52),1));\n\nset i = i + 1;\nend while;\n\nreturn res_str;\n\nend $$\ndelimiter ;\n\n-- 调用自定义函数\nselect rand_str(4);\n```\n\n#### 创建千万条数据\n\n```sql\n-- create table emp (id int,name varchar(50),age int);\n-- 插入\ndelimiter $$\ncreate procedure insert_emp(in startNum int,in max_num int)\nbegin\n\ndeclare i int default 0;\n-- 默认自动提交sql，这样比较慢，设置为不自动提交sql\nset autocommit = 0;\n\nrepeat\nset i = i + 1;\n\ninsert into emp values (startNum+i,rand_str(5),floor(10+rand()*30));\n\nuntil i = max_num\nend repeat;\n\ncommit; -- 整体提交所有sql，提高效率 \nend$$\ndelimiter ;\n\n-- 调用存储过程\ncall insert_emp(100,10000000);\n```\n\n## 索引\n帮助MySQL高效获取数据的数据结构\n\n优势\n- 索引类似大学图书馆建立的书目索引，提高数据检索的效率，降低数据库的IO成本\n- 通过索引对数据项进行排序，降低数据排序成本，降低了CPU的消耗\n\n劣势\n- 实际上索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录，所以索引列也是要占空间的\n- 虽然索引大大提高了查询速度，同时确会降低更新表的速度，如对表进行INSERT、UPDATE、DELETE\n\n索引分类\n- 单值索引：即一个索引只包含单个列，一个表可以有多个单列索引\n- 唯一索引：索引列的值必须唯一，但允许有空值\n- 复合索引：一个索引包含多个列 INDEX MultiIdx(id,name,age)\n- 全文索引：只能在MyISAM引擎上才能使用，只能在CHAR,VARCHAR,TEXT类型字段上使用全文索引\n- 空间索引：只能在MyISAM引擎上才能使用，对空间数据类型的字段建立索引\n\n索引操作\n自动创建索引\n- 在表上定义了主键时， 会自动创建一个对应的唯一索引\n- 在表上定义了一个外键时，会自动创建一个普通索引\n\nexplain\n用来查看索引是否正在被使用，并且输出其使用的索引的信息\n- key：实际选用的索引\n- key_len：显示了MySQL使用索引的长度(也就是使用的索引个数)，当 key 字段的值为 null时，索引的长度就是 null。注意，key_len的值可以告诉你在联合索引中mysql会真正使用了哪些索引。这里就使用了1个索引，所以为1，\n\n```sql\n-- 创建索引\n-- CREATE INDEX 索引名称 ON table (column[, column]...);\n-- 默认是NORMAL类型索引\ncreate INDEX salary_index ON emp(salary);\n\n-- 删除索引\nDROP INDEX 索引名称 ON 表名\n\n-- 查看索引\nshow index from 表名;\n\n```\n\n索引方法：innoDB不支持Hash，只能Btree\nBtree索引：B+树\nHash索引：哈希算法\n\n\n哪些情况需要创建索引\n- 主键自动建立唯一索引\n- 频繁作为查询条件的字段应该创建索引\n- 查询中与其他表关联的字段，外键关系建立索引\n- 频繁更新的字段不适合建立索引，因为每次更新不单单是更新了记录还会更新索引\n- WHERE条件里用不到的字段不创建索引\n- 查询中排序的字段，排序的字段若通过索引去访问将大大提高排序速度\n- 查询中统计或者分组字段\n\n哪些情况不需要创建索引\n- 表记录太少\n- 经常增删改的表\n- 如果某个数据列包含许多重复的内容，为它建立索引就没有太大的实际效果\n\n## 参考资料\n[Java零基础到高级MySQL数据库](https://study.163.com/course/introduction/1005932016.htm)","source":"_posts/mysql-note-5.md","raw":"---\ntitle: MySQL数据库进阶2\ncategories: MySQL笔记\ndate: 2020-01-27 19:29:26\n---\n## 存储过程\n一组可编程的函数，是为了完成特定功能的SQL语句集\n经编译创建并保存在数据库字典中，用户可通过指定存储过程的名字并给定参数(需要时)来调用执行\n\n为什么要用存储过程\n- 将重复性很高的一些操作，封装到一个存储过程中，简化了对这些SQL的调用\n- 批量处理\n- 统一接口，确保数据的安全\n- 相对于Oracle数据库来说，MySQL的存储过程相对功能较弱，使用较少\n\n\n```sql\n-- 创建存储过程\ndelimiter $$\nCREATE PROCEDURE 存储过程名称()\nBEGIN\n语句\nEND $$\ndelimiter ;\n\n-- 调用存储过程\ncall  存储过程名称();\n\n-- 查询指定数据库中的存储过程\nshow procedure status where db='数据库名称';\n\n-- 查询存储过程详情\nshow create procedure 存储过程名称;\n\n\n--删除存储过程\ndrop procedure  存储过程名称;\n```\n\n#### DELIMITER\n修改标准分隔符，这个命令与存储过程语法无关\n作用是告诉MySQL解释器，该段命令是否已经结束了\n默认情况下，DELIMITER是分号; ，在命令行客户端中，如果有一行命令以分号结束，那么回车后MySQL将立即执行该语句\n\n在为可能输入较多的语句，且语句中包含有分号,DELIMITER $$ 把标准分隔符; 修改为$$，这样只有当$$出现之后，MySQL解释器才会执行这段语句\n\n```sql\n-- 创建存储过程\ndelimiter $$\ncreate procedure show_emp()\nbegin\nselect * from emp;\nend$$\ndelimiter ;\n\n-- 执行存储过程\ncall show_emp();\n```\n\n#### 声明变量\n\n```sql\ndelimiter $$\ncreate procedure test()\nbegin\n-- 声明变量\n-- DECLARE 变量名 数据类型(大小) DEFAULT 默认值;\ndeclare res varchar(20) default '';\n-- 声明多个变量\ndeclare x,y int default 0;\n\n-- 通过into 赋值\ndeclare avgRes double default 0;\nselect avg(salary) into avgRes from emp;\n\n-- 输出变量\nselect avgRes;\n\nend$$\ndelimiter ;\n```\n\n#### 存储过程参数\n- IN 传入值\n- OUT 传出值\n- INOUT IN和OUT参数的组合\n\n```sql\ncreate produce name(参数类型 参数名称 数据类型(大小) )\n\n-- IN 传入值\ndelimiter $$\ncreate procedure getName (in name varchar(255))\nbegin \nselect * from emp where ename = name;\n\nend$$\ndelimiter ;\n-- 传入参数\ncall getName('李白');\n\n\n-- OUT 传出值\ndelimiter $$\ncreate procedure getSalary(in n varchar(255), out eSalary int)\nbegin\nselect salary into eSalary from emp where ename = n;\nend$$\ndelimiter ;\n-- 传入参数\ncall getSalary('李白',@s);\nselect @s;\n\n-- INOUT IN和OUT参数的组合\ndelimiter $$\ncreate procedure getNum(inout num int,in x int )\nbegin\nset num = num + x;\n\nend$$\ndelimiter ;\n\n-- 设置变量 传入参数\nset @num1 = 20;\ncall getNum(@num1,10);\nselect @num1;\n\n```\n\n#### 存储过程语句\nIF语句\n```sql\nIF expression THEN \nstatements;\nEND IF;\n\nIF expression THEN\nstatements;\nELSE\nelse-statements;\nEND IF;\n```\n\nCASE语句\n```sql\nCASE  case_expression\nWHEN when_expression_1 THEN commands\nWHEN when_expression_2 THEN commands\n...\nELSE commands\nEND CASE;\n\n```\n\n循环语句\n```sql\n-- while循环\nWHILE expression DO\nstatements\nEND WHILE\n\n-- repeat循环\nREPEAT\nstatements;\nUNTIL expression\nEND REPEAT\n```\n\n\n\n## 自定义函数\n```sql\n-- 随机生成字符串\n\ndelimiter $$\n-- 注意return加s\ncreate function rand_str(n int) returns varchar(255)\nbegin \n\n-- 声明一个str 52个字母\ndeclare str varchar(100) default 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n-- 记录当前是第几个字符\ndeclare i int default 0;\n\ndeclare res_str varchar(255) default '';\n\nwhile i < n do\n-- 生成1-52 ：floor(1+RAND()*52)  floor()去掉小数\n-- substr(str,floor(1+RAND()*52),1); -- 最后一个代表截取一位\nset res_str = concat(res_str,substr(str,floor(1+RAND()*52),1));\n\nset i = i + 1;\nend while;\n\nreturn res_str;\n\nend $$\ndelimiter ;\n\n-- 调用自定义函数\nselect rand_str(4);\n```\n\n#### 创建千万条数据\n\n```sql\n-- create table emp (id int,name varchar(50),age int);\n-- 插入\ndelimiter $$\ncreate procedure insert_emp(in startNum int,in max_num int)\nbegin\n\ndeclare i int default 0;\n-- 默认自动提交sql，这样比较慢，设置为不自动提交sql\nset autocommit = 0;\n\nrepeat\nset i = i + 1;\n\ninsert into emp values (startNum+i,rand_str(5),floor(10+rand()*30));\n\nuntil i = max_num\nend repeat;\n\ncommit; -- 整体提交所有sql，提高效率 \nend$$\ndelimiter ;\n\n-- 调用存储过程\ncall insert_emp(100,10000000);\n```\n\n## 索引\n帮助MySQL高效获取数据的数据结构\n\n优势\n- 索引类似大学图书馆建立的书目索引，提高数据检索的效率，降低数据库的IO成本\n- 通过索引对数据项进行排序，降低数据排序成本，降低了CPU的消耗\n\n劣势\n- 实际上索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录，所以索引列也是要占空间的\n- 虽然索引大大提高了查询速度，同时确会降低更新表的速度，如对表进行INSERT、UPDATE、DELETE\n\n索引分类\n- 单值索引：即一个索引只包含单个列，一个表可以有多个单列索引\n- 唯一索引：索引列的值必须唯一，但允许有空值\n- 复合索引：一个索引包含多个列 INDEX MultiIdx(id,name,age)\n- 全文索引：只能在MyISAM引擎上才能使用，只能在CHAR,VARCHAR,TEXT类型字段上使用全文索引\n- 空间索引：只能在MyISAM引擎上才能使用，对空间数据类型的字段建立索引\n\n索引操作\n自动创建索引\n- 在表上定义了主键时， 会自动创建一个对应的唯一索引\n- 在表上定义了一个外键时，会自动创建一个普通索引\n\nexplain\n用来查看索引是否正在被使用，并且输出其使用的索引的信息\n- key：实际选用的索引\n- key_len：显示了MySQL使用索引的长度(也就是使用的索引个数)，当 key 字段的值为 null时，索引的长度就是 null。注意，key_len的值可以告诉你在联合索引中mysql会真正使用了哪些索引。这里就使用了1个索引，所以为1，\n\n```sql\n-- 创建索引\n-- CREATE INDEX 索引名称 ON table (column[, column]...);\n-- 默认是NORMAL类型索引\ncreate INDEX salary_index ON emp(salary);\n\n-- 删除索引\nDROP INDEX 索引名称 ON 表名\n\n-- 查看索引\nshow index from 表名;\n\n```\n\n索引方法：innoDB不支持Hash，只能Btree\nBtree索引：B+树\nHash索引：哈希算法\n\n\n哪些情况需要创建索引\n- 主键自动建立唯一索引\n- 频繁作为查询条件的字段应该创建索引\n- 查询中与其他表关联的字段，外键关系建立索引\n- 频繁更新的字段不适合建立索引，因为每次更新不单单是更新了记录还会更新索引\n- WHERE条件里用不到的字段不创建索引\n- 查询中排序的字段，排序的字段若通过索引去访问将大大提高排序速度\n- 查询中统计或者分组字段\n\n哪些情况不需要创建索引\n- 表记录太少\n- 经常增删改的表\n- 如果某个数据列包含许多重复的内容，为它建立索引就没有太大的实际效果\n\n## 参考资料\n[Java零基础到高级MySQL数据库](https://study.163.com/course/introduction/1005932016.htm)","slug":"mysql-note-5","published":1,"updated":"2020-06-13T02:55:34.815Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke3x9g61001fzgvu89bg6t9y","content":"<h2 id=\"存储过程\"><a href=\"#存储过程\" class=\"headerlink\" title=\"存储过程\"></a>存储过程</h2><p>一组可编程的函数，是为了完成特定功能的SQL语句集<br>经编译创建并保存在数据库字典中，用户可通过指定存储过程的名字并给定参数(需要时)来调用执行</p>\n<p>为什么要用存储过程</p>\n<ul>\n<li>将重复性很高的一些操作，封装到一个存储过程中，简化了对这些SQL的调用</li>\n<li>批量处理</li>\n<li>统一接口，确保数据的安全</li>\n<li>相对于Oracle数据库来说，MySQL的存储过程相对功能较弱，使用较少</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建存储过程</span></span><br><span class=\"line\">delimiter $$</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> 存储过程名称()</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">语句</span><br><span class=\"line\"><span class=\"keyword\">END</span> $$</span><br><span class=\"line\">delimiter ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 调用存储过程</span></span><br><span class=\"line\"><span class=\"keyword\">call</span>  存储过程名称();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查询指定数据库中的存储过程</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">procedure</span> <span class=\"keyword\">status</span> <span class=\"keyword\">where</span> db=<span class=\"string\">'数据库名称'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查询存储过程详情</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">create</span> <span class=\"keyword\">procedure</span> 存储过程名称;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--删除存储过程</span></span><br><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">procedure</span>  存储过程名称;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"DELIMITER\"><a href=\"#DELIMITER\" class=\"headerlink\" title=\"DELIMITER\"></a>DELIMITER</h4><p>修改标准分隔符，这个命令与存储过程语法无关<br>作用是告诉MySQL解释器，该段命令是否已经结束了<br>默认情况下，DELIMITER是分号; ，在命令行客户端中，如果有一行命令以分号结束，那么回车后MySQL将立即执行该语句</p>\n<p>在为可能输入较多的语句，且语句中包含有分号,DELIMITER $$ 把标准分隔符; 修改为$$，这样只有当$$出现之后，MySQL解释器才会执行这段语句</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建存储过程</span></span><br><span class=\"line\">delimiter $$</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">procedure</span> show_emp()</span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> emp;</span><br><span class=\"line\"><span class=\"keyword\">end</span>$$</span><br><span class=\"line\">delimiter ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 执行存储过程</span></span><br><span class=\"line\"><span class=\"keyword\">call</span> show_emp();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"声明变量\"><a href=\"#声明变量\" class=\"headerlink\" title=\"声明变量\"></a>声明变量</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">delimiter $$</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">procedure</span> <span class=\"keyword\">test</span>()</span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\"><span class=\"comment\">-- 声明变量</span></span><br><span class=\"line\"><span class=\"comment\">-- DECLARE 变量名 数据类型(大小) DEFAULT 默认值;</span></span><br><span class=\"line\"><span class=\"keyword\">declare</span> res <span class=\"built_in\">varchar</span>(<span class=\"number\">20</span>) <span class=\"keyword\">default</span> <span class=\"string\">''</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 声明多个变量</span></span><br><span class=\"line\"><span class=\"keyword\">declare</span> x,y <span class=\"built_in\">int</span> <span class=\"keyword\">default</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 通过into 赋值</span></span><br><span class=\"line\"><span class=\"keyword\">declare</span> avgRes <span class=\"keyword\">double</span> <span class=\"keyword\">default</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">avg</span>(salary) <span class=\"keyword\">into</span> avgRes <span class=\"keyword\">from</span> emp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 输出变量</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> avgRes;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">end</span>$$</span><br><span class=\"line\">delimiter ;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"存储过程参数\"><a href=\"#存储过程参数\" class=\"headerlink\" title=\"存储过程参数\"></a>存储过程参数</h4><ul>\n<li>IN 传入值</li>\n<li>OUT 传出值</li>\n<li>INOUT IN和OUT参数的组合</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> produce <span class=\"keyword\">name</span>(参数类型 参数名称 数据类型(大小) )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- IN 传入值</span></span><br><span class=\"line\">delimiter $$</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">procedure</span> getName (<span class=\"keyword\">in</span> <span class=\"keyword\">name</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">255</span>))</span><br><span class=\"line\"><span class=\"keyword\">begin</span> </span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> emp <span class=\"keyword\">where</span> ename = <span class=\"keyword\">name</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">end</span>$$</span><br><span class=\"line\">delimiter ;</span><br><span class=\"line\"><span class=\"comment\">-- 传入参数</span></span><br><span class=\"line\"><span class=\"keyword\">call</span> getName(<span class=\"string\">'李白'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- OUT 传出值</span></span><br><span class=\"line\">delimiter $$</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">procedure</span> getSalary(<span class=\"keyword\">in</span> n <span class=\"built_in\">varchar</span>(<span class=\"number\">255</span>), <span class=\"keyword\">out</span> eSalary <span class=\"built_in\">int</span>)</span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> salary <span class=\"keyword\">into</span> eSalary <span class=\"keyword\">from</span> emp <span class=\"keyword\">where</span> ename = n;</span><br><span class=\"line\"><span class=\"keyword\">end</span>$$</span><br><span class=\"line\">delimiter ;</span><br><span class=\"line\"><span class=\"comment\">-- 传入参数</span></span><br><span class=\"line\"><span class=\"keyword\">call</span> getSalary(<span class=\"string\">'李白'</span>,@s);</span><br><span class=\"line\"><span class=\"keyword\">select</span> @s;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- INOUT IN和OUT参数的组合</span></span><br><span class=\"line\">delimiter $$</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">procedure</span> getNum(inout <span class=\"keyword\">num</span> <span class=\"built_in\">int</span>,<span class=\"keyword\">in</span> x <span class=\"built_in\">int</span> )</span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">num</span> = <span class=\"keyword\">num</span> + x;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">end</span>$$</span><br><span class=\"line\">delimiter ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 设置变量 传入参数</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> @num1 = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">call</span> getNum(@num1,<span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"keyword\">select</span> @num1;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"存储过程语句\"><a href=\"#存储过程语句\" class=\"headerlink\" title=\"存储过程语句\"></a>存储过程语句</h4><p>IF语句</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IF expression THEN </span><br><span class=\"line\">statements;</span><br><span class=\"line\"><span class=\"keyword\">END</span> <span class=\"keyword\">IF</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">IF expression THEN</span><br><span class=\"line\">statements;</span><br><span class=\"line\">ELSE</span><br><span class=\"line\">else-statements;</span><br><span class=\"line\"><span class=\"keyword\">END</span> <span class=\"keyword\">IF</span>;</span><br></pre></td></tr></table></figure>\n\n<p>CASE语句</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CASE  case_expression</span><br><span class=\"line\">WHEN when_expression_1 THEN commands</span><br><span class=\"line\">WHEN when_expression_2 THEN commands</span><br><span class=\"line\">...</span><br><span class=\"line\">ELSE commands</span><br><span class=\"line\"><span class=\"keyword\">END</span> <span class=\"keyword\">CASE</span>;</span><br></pre></td></tr></table></figure>\n\n<p>循环语句</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- while循环</span></span><br><span class=\"line\">WHILE expression <span class=\"keyword\">DO</span></span><br><span class=\"line\">statements</span><br><span class=\"line\"><span class=\"keyword\">END</span> <span class=\"keyword\">WHILE</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- repeat循环</span></span><br><span class=\"line\"><span class=\"keyword\">REPEAT</span></span><br><span class=\"line\">statements;</span><br><span class=\"line\">UNTIL expression</span><br><span class=\"line\"><span class=\"keyword\">END</span> <span class=\"keyword\">REPEAT</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"自定义函数\"><a href=\"#自定义函数\" class=\"headerlink\" title=\"自定义函数\"></a>自定义函数</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 随机生成字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\">delimiter $$</span><br><span class=\"line\"><span class=\"comment\">-- 注意return加s</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">function</span> rand_str(n <span class=\"built_in\">int</span>) <span class=\"keyword\">returns</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">255</span>)</span><br><span class=\"line\"><span class=\"keyword\">begin</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 声明一个str 52个字母</span></span><br><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"keyword\">str</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">100</span>) <span class=\"keyword\">default</span> <span class=\"string\">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 记录当前是第几个字符</span></span><br><span class=\"line\"><span class=\"keyword\">declare</span> i <span class=\"built_in\">int</span> <span class=\"keyword\">default</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">declare</span> res_str <span class=\"built_in\">varchar</span>(<span class=\"number\">255</span>) <span class=\"keyword\">default</span> <span class=\"string\">''</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">while i &lt; n do</span><br><span class=\"line\"><span class=\"comment\">-- 生成1-52 ：floor(1+RAND()*52)  floor()去掉小数</span></span><br><span class=\"line\"><span class=\"comment\">-- substr(str,floor(1+RAND()*52),1); -- 最后一个代表截取一位</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> res_str = <span class=\"keyword\">concat</span>(res_str,<span class=\"keyword\">substr</span>(<span class=\"keyword\">str</span>,<span class=\"keyword\">floor</span>(<span class=\"number\">1</span>+<span class=\"keyword\">RAND</span>()*<span class=\"number\">52</span>),<span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">set</span> i = i + <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">end</span> <span class=\"keyword\">while</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">return res_str;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">end</span> $$</span><br><span class=\"line\">delimiter ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 调用自定义函数</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> rand_str(<span class=\"number\">4</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建千万条数据\"><a href=\"#创建千万条数据\" class=\"headerlink\" title=\"创建千万条数据\"></a>创建千万条数据</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- create table emp (id int,name varchar(50),age int);</span></span><br><span class=\"line\"><span class=\"comment\">-- 插入</span></span><br><span class=\"line\">delimiter $$</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">procedure</span> insert_emp(<span class=\"keyword\">in</span> startNum <span class=\"built_in\">int</span>,<span class=\"keyword\">in</span> max_num <span class=\"built_in\">int</span>)</span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">declare</span> i <span class=\"built_in\">int</span> <span class=\"keyword\">default</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 默认自动提交sql，这样比较慢，设置为不自动提交sql</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> autocommit = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">repeat</span><br><span class=\"line\"><span class=\"keyword\">set</span> i = i + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> emp <span class=\"keyword\">values</span> (startNum+i,rand_str(<span class=\"number\">5</span>),<span class=\"keyword\">floor</span>(<span class=\"number\">10</span>+<span class=\"keyword\">rand</span>()*<span class=\"number\">30</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">until i = max_num</span><br><span class=\"line\"><span class=\"keyword\">end</span> <span class=\"keyword\">repeat</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">commit</span>; <span class=\"comment\">-- 整体提交所有sql，提高效率 </span></span><br><span class=\"line\"><span class=\"keyword\">end</span>$$</span><br><span class=\"line\">delimiter ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 调用存储过程</span></span><br><span class=\"line\"><span class=\"keyword\">call</span> insert_emp(<span class=\"number\">100</span>,<span class=\"number\">10000000</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><p>帮助MySQL高效获取数据的数据结构</p>\n<p>优势</p>\n<ul>\n<li>索引类似大学图书馆建立的书目索引，提高数据检索的效率，降低数据库的IO成本</li>\n<li>通过索引对数据项进行排序，降低数据排序成本，降低了CPU的消耗</li>\n</ul>\n<p>劣势</p>\n<ul>\n<li>实际上索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录，所以索引列也是要占空间的</li>\n<li>虽然索引大大提高了查询速度，同时确会降低更新表的速度，如对表进行INSERT、UPDATE、DELETE</li>\n</ul>\n<p>索引分类</p>\n<ul>\n<li>单值索引：即一个索引只包含单个列，一个表可以有多个单列索引</li>\n<li>唯一索引：索引列的值必须唯一，但允许有空值</li>\n<li>复合索引：一个索引包含多个列 INDEX MultiIdx(id,name,age)</li>\n<li>全文索引：只能在MyISAM引擎上才能使用，只能在CHAR,VARCHAR,TEXT类型字段上使用全文索引</li>\n<li>空间索引：只能在MyISAM引擎上才能使用，对空间数据类型的字段建立索引</li>\n</ul>\n<p>索引操作<br>自动创建索引</p>\n<ul>\n<li>在表上定义了主键时， 会自动创建一个对应的唯一索引</li>\n<li>在表上定义了一个外键时，会自动创建一个普通索引</li>\n</ul>\n<p>explain<br>用来查看索引是否正在被使用，并且输出其使用的索引的信息</p>\n<ul>\n<li>key：实际选用的索引</li>\n<li>key_len：显示了MySQL使用索引的长度(也就是使用的索引个数)，当 key 字段的值为 null时，索引的长度就是 null。注意，key_len的值可以告诉你在联合索引中mysql会真正使用了哪些索引。这里就使用了1个索引，所以为1，</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建索引</span></span><br><span class=\"line\"><span class=\"comment\">-- CREATE INDEX 索引名称 ON table (column[, column]...);</span></span><br><span class=\"line\"><span class=\"comment\">-- 默认是NORMAL类型索引</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">INDEX</span> salary_index <span class=\"keyword\">ON</span> emp(salary);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 删除索引</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">INDEX</span> 索引名称 <span class=\"keyword\">ON</span> 表名</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查看索引</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">index</span> <span class=\"keyword\">from</span> 表名;</span><br></pre></td></tr></table></figure>\n\n<p>索引方法：innoDB不支持Hash，只能Btree<br>Btree索引：B+树<br>Hash索引：哈希算法</p>\n<p>哪些情况需要创建索引</p>\n<ul>\n<li>主键自动建立唯一索引</li>\n<li>频繁作为查询条件的字段应该创建索引</li>\n<li>查询中与其他表关联的字段，外键关系建立索引</li>\n<li>频繁更新的字段不适合建立索引，因为每次更新不单单是更新了记录还会更新索引</li>\n<li>WHERE条件里用不到的字段不创建索引</li>\n<li>查询中排序的字段，排序的字段若通过索引去访问将大大提高排序速度</li>\n<li>查询中统计或者分组字段</li>\n</ul>\n<p>哪些情况不需要创建索引</p>\n<ul>\n<li>表记录太少</li>\n<li>经常增删改的表</li>\n<li>如果某个数据列包含许多重复的内容，为它建立索引就没有太大的实际效果</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005932016.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级MySQL数据库</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"存储过程\"><a href=\"#存储过程\" class=\"headerlink\" title=\"存储过程\"></a>存储过程</h2><p>一组可编程的函数，是为了完成特定功能的SQL语句集<br>经编译创建并保存在数据库字典中，用户可通过指定存储过程的名字并给定参数(需要时)来调用执行</p>\n<p>为什么要用存储过程</p>\n<ul>\n<li>将重复性很高的一些操作，封装到一个存储过程中，简化了对这些SQL的调用</li>\n<li>批量处理</li>\n<li>统一接口，确保数据的安全</li>\n<li>相对于Oracle数据库来说，MySQL的存储过程相对功能较弱，使用较少</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建存储过程</span></span><br><span class=\"line\">delimiter $$</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">PROCEDURE</span> 存储过程名称()</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">语句</span><br><span class=\"line\"><span class=\"keyword\">END</span> $$</span><br><span class=\"line\">delimiter ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 调用存储过程</span></span><br><span class=\"line\"><span class=\"keyword\">call</span>  存储过程名称();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查询指定数据库中的存储过程</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">procedure</span> <span class=\"keyword\">status</span> <span class=\"keyword\">where</span> db=<span class=\"string\">'数据库名称'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查询存储过程详情</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">create</span> <span class=\"keyword\">procedure</span> 存储过程名称;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">--删除存储过程</span></span><br><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">procedure</span>  存储过程名称;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"DELIMITER\"><a href=\"#DELIMITER\" class=\"headerlink\" title=\"DELIMITER\"></a>DELIMITER</h4><p>修改标准分隔符，这个命令与存储过程语法无关<br>作用是告诉MySQL解释器，该段命令是否已经结束了<br>默认情况下，DELIMITER是分号; ，在命令行客户端中，如果有一行命令以分号结束，那么回车后MySQL将立即执行该语句</p>\n<p>在为可能输入较多的语句，且语句中包含有分号,DELIMITER $$ 把标准分隔符; 修改为$$，这样只有当$$出现之后，MySQL解释器才会执行这段语句</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建存储过程</span></span><br><span class=\"line\">delimiter $$</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">procedure</span> show_emp()</span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> emp;</span><br><span class=\"line\"><span class=\"keyword\">end</span>$$</span><br><span class=\"line\">delimiter ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 执行存储过程</span></span><br><span class=\"line\"><span class=\"keyword\">call</span> show_emp();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"声明变量\"><a href=\"#声明变量\" class=\"headerlink\" title=\"声明变量\"></a>声明变量</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">delimiter $$</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">procedure</span> <span class=\"keyword\">test</span>()</span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\"><span class=\"comment\">-- 声明变量</span></span><br><span class=\"line\"><span class=\"comment\">-- DECLARE 变量名 数据类型(大小) DEFAULT 默认值;</span></span><br><span class=\"line\"><span class=\"keyword\">declare</span> res <span class=\"built_in\">varchar</span>(<span class=\"number\">20</span>) <span class=\"keyword\">default</span> <span class=\"string\">''</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 声明多个变量</span></span><br><span class=\"line\"><span class=\"keyword\">declare</span> x,y <span class=\"built_in\">int</span> <span class=\"keyword\">default</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 通过into 赋值</span></span><br><span class=\"line\"><span class=\"keyword\">declare</span> avgRes <span class=\"keyword\">double</span> <span class=\"keyword\">default</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">avg</span>(salary) <span class=\"keyword\">into</span> avgRes <span class=\"keyword\">from</span> emp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 输出变量</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> avgRes;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">end</span>$$</span><br><span class=\"line\">delimiter ;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"存储过程参数\"><a href=\"#存储过程参数\" class=\"headerlink\" title=\"存储过程参数\"></a>存储过程参数</h4><ul>\n<li>IN 传入值</li>\n<li>OUT 传出值</li>\n<li>INOUT IN和OUT参数的组合</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> produce <span class=\"keyword\">name</span>(参数类型 参数名称 数据类型(大小) )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- IN 传入值</span></span><br><span class=\"line\">delimiter $$</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">procedure</span> getName (<span class=\"keyword\">in</span> <span class=\"keyword\">name</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">255</span>))</span><br><span class=\"line\"><span class=\"keyword\">begin</span> </span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> emp <span class=\"keyword\">where</span> ename = <span class=\"keyword\">name</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">end</span>$$</span><br><span class=\"line\">delimiter ;</span><br><span class=\"line\"><span class=\"comment\">-- 传入参数</span></span><br><span class=\"line\"><span class=\"keyword\">call</span> getName(<span class=\"string\">'李白'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- OUT 传出值</span></span><br><span class=\"line\">delimiter $$</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">procedure</span> getSalary(<span class=\"keyword\">in</span> n <span class=\"built_in\">varchar</span>(<span class=\"number\">255</span>), <span class=\"keyword\">out</span> eSalary <span class=\"built_in\">int</span>)</span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> salary <span class=\"keyword\">into</span> eSalary <span class=\"keyword\">from</span> emp <span class=\"keyword\">where</span> ename = n;</span><br><span class=\"line\"><span class=\"keyword\">end</span>$$</span><br><span class=\"line\">delimiter ;</span><br><span class=\"line\"><span class=\"comment\">-- 传入参数</span></span><br><span class=\"line\"><span class=\"keyword\">call</span> getSalary(<span class=\"string\">'李白'</span>,@s);</span><br><span class=\"line\"><span class=\"keyword\">select</span> @s;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- INOUT IN和OUT参数的组合</span></span><br><span class=\"line\">delimiter $$</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">procedure</span> getNum(inout <span class=\"keyword\">num</span> <span class=\"built_in\">int</span>,<span class=\"keyword\">in</span> x <span class=\"built_in\">int</span> )</span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">num</span> = <span class=\"keyword\">num</span> + x;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">end</span>$$</span><br><span class=\"line\">delimiter ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 设置变量 传入参数</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> @num1 = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">call</span> getNum(@num1,<span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"keyword\">select</span> @num1;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"存储过程语句\"><a href=\"#存储过程语句\" class=\"headerlink\" title=\"存储过程语句\"></a>存储过程语句</h4><p>IF语句</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IF expression THEN </span><br><span class=\"line\">statements;</span><br><span class=\"line\"><span class=\"keyword\">END</span> <span class=\"keyword\">IF</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">IF expression THEN</span><br><span class=\"line\">statements;</span><br><span class=\"line\">ELSE</span><br><span class=\"line\">else-statements;</span><br><span class=\"line\"><span class=\"keyword\">END</span> <span class=\"keyword\">IF</span>;</span><br></pre></td></tr></table></figure>\n\n<p>CASE语句</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CASE  case_expression</span><br><span class=\"line\">WHEN when_expression_1 THEN commands</span><br><span class=\"line\">WHEN when_expression_2 THEN commands</span><br><span class=\"line\">...</span><br><span class=\"line\">ELSE commands</span><br><span class=\"line\"><span class=\"keyword\">END</span> <span class=\"keyword\">CASE</span>;</span><br></pre></td></tr></table></figure>\n\n<p>循环语句</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- while循环</span></span><br><span class=\"line\">WHILE expression <span class=\"keyword\">DO</span></span><br><span class=\"line\">statements</span><br><span class=\"line\"><span class=\"keyword\">END</span> <span class=\"keyword\">WHILE</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- repeat循环</span></span><br><span class=\"line\"><span class=\"keyword\">REPEAT</span></span><br><span class=\"line\">statements;</span><br><span class=\"line\">UNTIL expression</span><br><span class=\"line\"><span class=\"keyword\">END</span> <span class=\"keyword\">REPEAT</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"自定义函数\"><a href=\"#自定义函数\" class=\"headerlink\" title=\"自定义函数\"></a>自定义函数</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 随机生成字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\">delimiter $$</span><br><span class=\"line\"><span class=\"comment\">-- 注意return加s</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">function</span> rand_str(n <span class=\"built_in\">int</span>) <span class=\"keyword\">returns</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">255</span>)</span><br><span class=\"line\"><span class=\"keyword\">begin</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 声明一个str 52个字母</span></span><br><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"keyword\">str</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">100</span>) <span class=\"keyword\">default</span> <span class=\"string\">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 记录当前是第几个字符</span></span><br><span class=\"line\"><span class=\"keyword\">declare</span> i <span class=\"built_in\">int</span> <span class=\"keyword\">default</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">declare</span> res_str <span class=\"built_in\">varchar</span>(<span class=\"number\">255</span>) <span class=\"keyword\">default</span> <span class=\"string\">''</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">while i &lt; n do</span><br><span class=\"line\"><span class=\"comment\">-- 生成1-52 ：floor(1+RAND()*52)  floor()去掉小数</span></span><br><span class=\"line\"><span class=\"comment\">-- substr(str,floor(1+RAND()*52),1); -- 最后一个代表截取一位</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> res_str = <span class=\"keyword\">concat</span>(res_str,<span class=\"keyword\">substr</span>(<span class=\"keyword\">str</span>,<span class=\"keyword\">floor</span>(<span class=\"number\">1</span>+<span class=\"keyword\">RAND</span>()*<span class=\"number\">52</span>),<span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">set</span> i = i + <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">end</span> <span class=\"keyword\">while</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">return res_str;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">end</span> $$</span><br><span class=\"line\">delimiter ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 调用自定义函数</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> rand_str(<span class=\"number\">4</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"创建千万条数据\"><a href=\"#创建千万条数据\" class=\"headerlink\" title=\"创建千万条数据\"></a>创建千万条数据</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- create table emp (id int,name varchar(50),age int);</span></span><br><span class=\"line\"><span class=\"comment\">-- 插入</span></span><br><span class=\"line\">delimiter $$</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">procedure</span> insert_emp(<span class=\"keyword\">in</span> startNum <span class=\"built_in\">int</span>,<span class=\"keyword\">in</span> max_num <span class=\"built_in\">int</span>)</span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">declare</span> i <span class=\"built_in\">int</span> <span class=\"keyword\">default</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 默认自动提交sql，这样比较慢，设置为不自动提交sql</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> autocommit = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">repeat</span><br><span class=\"line\"><span class=\"keyword\">set</span> i = i + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> emp <span class=\"keyword\">values</span> (startNum+i,rand_str(<span class=\"number\">5</span>),<span class=\"keyword\">floor</span>(<span class=\"number\">10</span>+<span class=\"keyword\">rand</span>()*<span class=\"number\">30</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">until i = max_num</span><br><span class=\"line\"><span class=\"keyword\">end</span> <span class=\"keyword\">repeat</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">commit</span>; <span class=\"comment\">-- 整体提交所有sql，提高效率 </span></span><br><span class=\"line\"><span class=\"keyword\">end</span>$$</span><br><span class=\"line\">delimiter ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 调用存储过程</span></span><br><span class=\"line\"><span class=\"keyword\">call</span> insert_emp(<span class=\"number\">100</span>,<span class=\"number\">10000000</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"索引\"><a href=\"#索引\" class=\"headerlink\" title=\"索引\"></a>索引</h2><p>帮助MySQL高效获取数据的数据结构</p>\n<p>优势</p>\n<ul>\n<li>索引类似大学图书馆建立的书目索引，提高数据检索的效率，降低数据库的IO成本</li>\n<li>通过索引对数据项进行排序，降低数据排序成本，降低了CPU的消耗</li>\n</ul>\n<p>劣势</p>\n<ul>\n<li>实际上索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录，所以索引列也是要占空间的</li>\n<li>虽然索引大大提高了查询速度，同时确会降低更新表的速度，如对表进行INSERT、UPDATE、DELETE</li>\n</ul>\n<p>索引分类</p>\n<ul>\n<li>单值索引：即一个索引只包含单个列，一个表可以有多个单列索引</li>\n<li>唯一索引：索引列的值必须唯一，但允许有空值</li>\n<li>复合索引：一个索引包含多个列 INDEX MultiIdx(id,name,age)</li>\n<li>全文索引：只能在MyISAM引擎上才能使用，只能在CHAR,VARCHAR,TEXT类型字段上使用全文索引</li>\n<li>空间索引：只能在MyISAM引擎上才能使用，对空间数据类型的字段建立索引</li>\n</ul>\n<p>索引操作<br>自动创建索引</p>\n<ul>\n<li>在表上定义了主键时， 会自动创建一个对应的唯一索引</li>\n<li>在表上定义了一个外键时，会自动创建一个普通索引</li>\n</ul>\n<p>explain<br>用来查看索引是否正在被使用，并且输出其使用的索引的信息</p>\n<ul>\n<li>key：实际选用的索引</li>\n<li>key_len：显示了MySQL使用索引的长度(也就是使用的索引个数)，当 key 字段的值为 null时，索引的长度就是 null。注意，key_len的值可以告诉你在联合索引中mysql会真正使用了哪些索引。这里就使用了1个索引，所以为1，</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 创建索引</span></span><br><span class=\"line\"><span class=\"comment\">-- CREATE INDEX 索引名称 ON table (column[, column]...);</span></span><br><span class=\"line\"><span class=\"comment\">-- 默认是NORMAL类型索引</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">INDEX</span> salary_index <span class=\"keyword\">ON</span> emp(salary);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 删除索引</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">INDEX</span> 索引名称 <span class=\"keyword\">ON</span> 表名</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查看索引</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">index</span> <span class=\"keyword\">from</span> 表名;</span><br></pre></td></tr></table></figure>\n\n<p>索引方法：innoDB不支持Hash，只能Btree<br>Btree索引：B+树<br>Hash索引：哈希算法</p>\n<p>哪些情况需要创建索引</p>\n<ul>\n<li>主键自动建立唯一索引</li>\n<li>频繁作为查询条件的字段应该创建索引</li>\n<li>查询中与其他表关联的字段，外键关系建立索引</li>\n<li>频繁更新的字段不适合建立索引，因为每次更新不单单是更新了记录还会更新索引</li>\n<li>WHERE条件里用不到的字段不创建索引</li>\n<li>查询中排序的字段，排序的字段若通过索引去访问将大大提高排序速度</li>\n<li>查询中统计或者分组字段</li>\n</ul>\n<p>哪些情况不需要创建索引</p>\n<ul>\n<li>表记录太少</li>\n<li>经常增删改的表</li>\n<li>如果某个数据列包含许多重复的内容，为它建立索引就没有太大的实际效果</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005932016.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级MySQL数据库</a></p>\n"},{"title":"MySQL数据库基础","date":"2020-01-16T13:28:31.000Z","_content":"\n## SQL语句概述\nStructured Query Language (结构化查询语言)\nSQL是专为数据库而建立的操作命令集，是一种功能齐全的数据库语言\n\n#### SQL语句分类\n- DDL DataDefinationLanguage 数据定义语言：用来定义数据库对象：创建库，表，列等\n- DML DataManipulationLanguage 数据操作语言：用来操作数据库表中的记录\n- DQL DataQueryLanguage 数据查询语言：用来查询数据\n- DCL DataControlLanguage 数据控制语言：用来定义访问权限和安全级别\n\n#### SQL数据类型\nSQMySQL支持所有标准SQL数值数据类型\n\n常用数据类型\n- int：整数\n- double：浮点型，例如double(5,2)表示最多5位，其中- 须有2位小数，即最大值为999.99\n- char：固定长度字符串类型 char(10)  'abc       ' （abc后面有7个空格）\n- varchar：可变长度字符串类型；varchar(10) 'abc'\n- text：字符串类型\n- blob：二进制类型\n- date：日期类型，格式为：yyyy-MM-dd\n- time：时间类型，格式为：hh:mm:ss （HH是24小时制，hh是12小时制）\n- datetime:日期时间类型 yyyy-MM-dd hh:mm:ss\n\n## DDL (对表结构的操作)\n```sql\n-- 数据库操作\n-- 1.创建数据库 create database 数据库名  character set utf8;\ncreate database my_database character set utf8;\n\n-- 2.修改数据库字符集 alter database 数据库名 charactor set gbk;\nalter database my_database character set gbk;\n\n\n-- 选择数据库 use 数据库名;\nuse my_database;\n\n\n-- 表操作\n-- 1.新建表 create table 表名 (列名 数据类型,类名 数据类型...);\ncreate table my_table (name varchar(20),age int);\n\n-- 2.查看表的创建细节 show create table 表名;\nshow create table my_table;\n\n-- 3.查看表的字段信息 desc 表名;\ndesc my_table;\n\n-- 4.添加一列(字段) alter table 表名 add 列名 数据类型;\nalter table my_table add id bigint;\n\n-- 5.修改一个表的字段类型 alter table 表名 modify 字段名 数据类型;\nalter table my_table modify id int;\n\n-- 6.修改表的列名 alter table 表名 change 原始列名 新列名 数据类型;\nalter table my_table change age id bigint;\n\n-- 7.删除一列 alter table 表名 drop 字段名;\nalter table my_table drop id;\n\n-- 8.修改表名 rename table 原始表名 to 要修改的表名;\nrename table my_table to my_t;\n\n-- 9.删除表 drop table 表名;\ndrop table my_t;\n\n-- 10.删除数据库 drop database 数据库名;\ndrop database my_database;\n```\n注意点：\n- 字符集UTF-8要写作utf8\n- modify只能修改数据类型，change可以修改字段名和数据类型，修改的数据类型都在最后指定\n- 修改表名比较特殊：rename table 原始表名 to 要修改的表名;\n\n## DML（对表的数据增、删、改）\n\n#### 插入操作\n```sql\n-- 建表：create table my_table (name varchar(20),age int);\n-- insert into 表名（列名1，列名2 ...）value (列值1，列值2...);\ninsert into my_table (name,age) value ('zs',28);\n\n-- 插入多条\ninsert into my_table (name,age) values \n    ('ls',30)，\n    ('ww',29);\n\n-- 查询是否插入成功 select * from 表名;\nselect * from my_table;\n```\n注意事项\n- 列名与列值的类型、个数、顺序要一一对应\n- 值不要超出列定义的长度\n- 插入的日期和字符一样，都使用引号括起来\n- 插入多条，多条数据之间用逗号隔开\n- 插入一条或者多条时，用value或者values都可\n\n#### 更新操作\n\n```sql\n-- updata 表名 set 列名1=列值1,列名2=列值2...  where 列名=值\n-- 修改表中所有列的age为10\nupdate my_table set age=10; \n\n-- 修改name为'zs'的列的age为20\nupdate my_table set age=20 where name='zs'; \n```\n\n#### 删除操作\n```sql\n-- delete from 表名 where 列名=值;\ndelete from my_table where name='zs';\n\n-- truncate table 表名;\ntruncate table my_table;\n```\ndelete与truncate的区别\n- delete 删除表中的数据，表结构还在;删除后的数据可以找回\n- truncate 删除是把表直接drop掉，然后再创建一个同样的新表，删除的数据不能找回，执行速度比delete快\n\n## DQL（查询表数据）\n\n#### 条件查询和运算符\n= != <>(不等于) < <= > >=\nBETWEEN...AND...\nIN\nIS NULL, IS NOT NULL\nAND OR NOT \n\n#### 模糊查询\n通配符：\n1. _：任意一个字符\n2. %：任意0-n个字符\n写在WHERE关键词后\n\n```sql\n-- 查询姓名中包含“s”字母的学生记录\nSELECT * FROM stu WHERE name LIKE '%s%';\n```\n\n#### 字段控制查询\n1. DISTINCT 去重\n2. 查询结果进行运算，必须都是数据型（值可能为NULL的需要转换为0，任何值与NULL相加还是NULL）\n\n```sql\nSELECT *,age+IFNULL(score,0) FROM students;\n```\n\n3. 对查询结果起别名 AS 可省略AS\n\n```sql\nSELECT *, yw+IFNULL(sx,0) AS total FROM score;\n```\n\n#### 排序\nORDER BY\n默认ASC 升序，DESC降序\n\n#### 聚合行数\nCOUNT()\nMAX()\nMIN()\nSUM()\nAVG()\n\n#### 分组查询\n将查询结果按照1个或多个字段进行分组，字段值相同的为一组\n当group by单独使用时，只显示出每组的第一条记录\n在使用分组时，select后面直接跟的字段一般都出现在group by 后\n- group_concat(字段名)：显示分组后每一组的某字段的值的集合\n- 聚合函数：显示分组后每一组的聚合函数值\n- having：筛选分组之后的结果\n\n#### LIMIT\n\n```sql\n-- SELECT * FROM 表名 LIMIT 从哪一行开始查询,需要查询的行数;\nSELECT * FROM stu LIMIT 0,3;\n```\n#### 顺序\n书写顺序\n![](./mysql-note-3/1.png)\n\n执行顺序\n![](./mysql-note-3/2.png)\n\n## 数据完整性\n\n保证用户输入的数据保存到数据库中是正确的\n1. 实体完整性：一行（一条记录）数据代表一个实体 （标识每一行数据不重复，行级约束）\n   - 主键\n   - 唯一\n   - 自动增长列\n2. 域完整性：限制此单元格的数据正确\n   - 数据类型\n   - 非空约束 (NOT NULL)\n   - 默认值约束 (DEFAULT)\n3. 参照完整性：指表与表之间的一种对应关系\n通常情况下可以通过设置两表之间的主键、外键关系，或者编写两表的触发器来实现   \n对两张表的要求：\n   - 数据库的主键和外键类型一定要一致\n   - 两个表必须得要是InnoDB类型\n\n```sql\n-- 实体完整性\n-- 三个完整性约束都可以在建表时，在数据类型后指定\n-- CREATE TABLE 表名(字段名 数据类型 PRIMARY KEY | UNIQUE | AUTO_INCREMENT);\nCREATE TABLE 表名(字段名1 数据类型 PRIMARY KEY,字段2 数据类型);\nCREATE TABLE 表名(字段名1 数据类型, 字段2 数据类型 UNIQUE);\nCREATE TABLE 表名(字段名1 数据类型 PRIMARY KEY AUTO_INCREMENT ，字段2 数据类型 UNIQUE);\n-- PRIMARY KEY 和 UNIQUE 可以在参数最后指定\nCREATE TABLE 表名(字段1 数据类型, 字段2 数据类型,PRIMARY KEY | UNIQUE (要设置的字段));\n\n-- 联合主键：两个字段数据同时相同时，才违反联合主键约束\nCREATE TABLE 表名(字段1 数据类型, 字段2 数据类型,PRIMARY KEY(主键1，主键2));\n-- 建表后设置主键\nALTER TABLE student  ADD CONSTRAINT  PRIMARY KEY (要设置的字段);\n\n\n-- 域完整性\n-- 非空约束 NOT NULL\nCREATE TABLE 表名(字段名1 数据类型 PRIMARY KEY AUTO_INCREMENT ，字段2 数据类型 UNIQUE NOT NULL);\n-- 默认值约束DEFAULT\nCREATE TABLE 表名(字段名1 数据类型 PRIMARY KEY AUTO_INCREMENT ，字段2 数据类型 NOT NULL DEFAULT '男');\n\n-- 参照完整性\n-- 创建student表\nCREATE TABLE student(sid int PRIMARY key,name varchar(50) not null,sex varchar(10) default '男');\n\n-- 创建score表，设置外键\nCREATE TABLE score(\nsid INT,\nscore DOUBLE,\nCONSTRAINT fk_stu_score_sid FOREIGN KEY(sid) REFERENCES student(sid));\n-- CONSTRAINT：约束，fk_stu_score_sid是约束名，FOREIGN KEY代表外键，REFERENCES：参考\n```\n#### 实体完整性\n主键约束\n- 每个表中要有一个主键（或者联合主键）\n- 每个数据唯一，非空\n\n唯一约束\n- 指定列的数据不能重复\n- 可以为空值\n\n自动增长列\n- 指定列的数据自动增长\n- 即使数据删除，还是从删除的序号继续往下\n- 设置自动增长的列必须时主键\n\n#### 域完整性\n三种：数据类型、非空约束、默认值约束\n\n#### 参照完整性\n设置参照完整性后 ，外键当中的内值，必须得是主键当中的内容\n  \n\t\n## 表之间的关系\n一对一\n一对多\n多对多\n- 学生选课:一个学生可以选修多门课程，每门课程可供多个学生选择\n- 需要创建中间的关系表\n- 拆分表：避免大量冗余数据的出现\n![冗余数据](mysql-note-3/3.png)\n## 多表查询\n#### 合并结果集\n合并结果集就是把两个select语句的查询结果合并到一起\t\t\n- UNION：合并时去除重复记录\n- UNION ALL：合并时不去除重复记录\n- 注意事项:被合并的两个结果列数、列类型必须相同\n\n```sql\nSELECT * FROM 表1   UNION | UNION ALL   SELECT * FROM 表2；\n```\n#### 连接查询\n也可以叫跨表查询，需要关联多个表进行查询\n\n```sql\n-- 同时查询两个表，出现的就是笛卡尔集结果\nSELECT * FROM student,score;\n\t\n-- 在查询时要把主键和外键保持一致,逐行判断，相等的留下，不相等的全不要\nSELECT * FROM student st,score sc WHERE st.id = sc.sid;\t\t\t\n\n```\n#### 多表连接\n内连接\n- 等值连接\n- 非等值连接\n- 自连接\n\n外连接\n- 左外连接（左连接）\n- 右外连接（右连接）\n两种连接方式同理，只是顺序不同\n\n自然连接\n- 根据主外键等式，自动去除无用的笛卡尔集\n- 两张连接的表中列名称和类型完全一致\n\n\n```sql\n-- 等值连接 (INNER可省略) 与多表联查约束主外键是一样，只是写法改变了\nSELECT * FROM student st INNER JOIN score sc ON st.id = sc.sid;\n\n-- 多表连接\n-- 99连接法（在WHERE中用AND并列条件）\nselect * from stu st,score sc,course c where st.id=sc.sid and sc.cid =c.cid;\n-- 内连接\nselect * from stu st \njoin score sc on st.id = sc.sid\njoin course c on c.cid=sc.cid;\n\n-- 非等值连接\n-- 查询所有员工的姓名，工资，所在部门的名称以及工资的等级\nselect e.ename,s.grade from emp e\njoin dept d on e.deptno = d.deptno\njoin salgrade s on e.salary BETWEEN s.lowSalary and s.highSalary;\n\n-- 自连接 （给同一个表起不同别名）\n-- 求7369员工编号、姓名、经理编号和经理姓名\nselect e1.ename,e1.empno,e2.ename from \nemp e1 join emp e2 on e1.mgr=e2.empno\nwhere e1.empno = 7369;\n\n\n-- 左外连接\n-- 左边表当中的数据全部查出，右边表当中，只查出满足条件的内容（右表中不存在的会用NULL填充）\n-- 查询所有学生的成绩信息（所有学生都会被查询到，没有成绩的同学成绩会显示NULL）\n-- 可以省略outer\nselect * from stu st left outer join score sc on st.id=sc.sid; \n\n-- 自然连接\nselect * from stu natural join score;\n```\n\n\n#### 子查询\n一个select语句中包含另一个完整的select（子查询语句需要用括号括起来）\n\n子查询出现的位置\n- where后，把select查询出的结果当作另一个select的条件值\n- from后，把查询出的结果当作一个新表\n\n\n```sql\n-- where后：先查出项羽所在的部门编号\nselect * from emp \nwhere deptno=\n    (select deptno from emp\n    where ename='项羽') ;\n\n-- from后：查询30号部门薪资大于2000\nselect * from \n(select * from emp where deptno=30) s\nwhere s.salary>2000;\n-- 注意要对表起别名\n```\n\n\n## 参考资料\n[Java零基础到高级MySQL数据库](https://study.163.com/course/introduction/1005932016.htm)","source":"_posts/mysql-note-2.md","raw":"---\ntitle: MySQL数据库基础\ncategories: MySQL笔记\ndate: 2020-01-16 21:28:31\n---\n\n## SQL语句概述\nStructured Query Language (结构化查询语言)\nSQL是专为数据库而建立的操作命令集，是一种功能齐全的数据库语言\n\n#### SQL语句分类\n- DDL DataDefinationLanguage 数据定义语言：用来定义数据库对象：创建库，表，列等\n- DML DataManipulationLanguage 数据操作语言：用来操作数据库表中的记录\n- DQL DataQueryLanguage 数据查询语言：用来查询数据\n- DCL DataControlLanguage 数据控制语言：用来定义访问权限和安全级别\n\n#### SQL数据类型\nSQMySQL支持所有标准SQL数值数据类型\n\n常用数据类型\n- int：整数\n- double：浮点型，例如double(5,2)表示最多5位，其中- 须有2位小数，即最大值为999.99\n- char：固定长度字符串类型 char(10)  'abc       ' （abc后面有7个空格）\n- varchar：可变长度字符串类型；varchar(10) 'abc'\n- text：字符串类型\n- blob：二进制类型\n- date：日期类型，格式为：yyyy-MM-dd\n- time：时间类型，格式为：hh:mm:ss （HH是24小时制，hh是12小时制）\n- datetime:日期时间类型 yyyy-MM-dd hh:mm:ss\n\n## DDL (对表结构的操作)\n```sql\n-- 数据库操作\n-- 1.创建数据库 create database 数据库名  character set utf8;\ncreate database my_database character set utf8;\n\n-- 2.修改数据库字符集 alter database 数据库名 charactor set gbk;\nalter database my_database character set gbk;\n\n\n-- 选择数据库 use 数据库名;\nuse my_database;\n\n\n-- 表操作\n-- 1.新建表 create table 表名 (列名 数据类型,类名 数据类型...);\ncreate table my_table (name varchar(20),age int);\n\n-- 2.查看表的创建细节 show create table 表名;\nshow create table my_table;\n\n-- 3.查看表的字段信息 desc 表名;\ndesc my_table;\n\n-- 4.添加一列(字段) alter table 表名 add 列名 数据类型;\nalter table my_table add id bigint;\n\n-- 5.修改一个表的字段类型 alter table 表名 modify 字段名 数据类型;\nalter table my_table modify id int;\n\n-- 6.修改表的列名 alter table 表名 change 原始列名 新列名 数据类型;\nalter table my_table change age id bigint;\n\n-- 7.删除一列 alter table 表名 drop 字段名;\nalter table my_table drop id;\n\n-- 8.修改表名 rename table 原始表名 to 要修改的表名;\nrename table my_table to my_t;\n\n-- 9.删除表 drop table 表名;\ndrop table my_t;\n\n-- 10.删除数据库 drop database 数据库名;\ndrop database my_database;\n```\n注意点：\n- 字符集UTF-8要写作utf8\n- modify只能修改数据类型，change可以修改字段名和数据类型，修改的数据类型都在最后指定\n- 修改表名比较特殊：rename table 原始表名 to 要修改的表名;\n\n## DML（对表的数据增、删、改）\n\n#### 插入操作\n```sql\n-- 建表：create table my_table (name varchar(20),age int);\n-- insert into 表名（列名1，列名2 ...）value (列值1，列值2...);\ninsert into my_table (name,age) value ('zs',28);\n\n-- 插入多条\ninsert into my_table (name,age) values \n    ('ls',30)，\n    ('ww',29);\n\n-- 查询是否插入成功 select * from 表名;\nselect * from my_table;\n```\n注意事项\n- 列名与列值的类型、个数、顺序要一一对应\n- 值不要超出列定义的长度\n- 插入的日期和字符一样，都使用引号括起来\n- 插入多条，多条数据之间用逗号隔开\n- 插入一条或者多条时，用value或者values都可\n\n#### 更新操作\n\n```sql\n-- updata 表名 set 列名1=列值1,列名2=列值2...  where 列名=值\n-- 修改表中所有列的age为10\nupdate my_table set age=10; \n\n-- 修改name为'zs'的列的age为20\nupdate my_table set age=20 where name='zs'; \n```\n\n#### 删除操作\n```sql\n-- delete from 表名 where 列名=值;\ndelete from my_table where name='zs';\n\n-- truncate table 表名;\ntruncate table my_table;\n```\ndelete与truncate的区别\n- delete 删除表中的数据，表结构还在;删除后的数据可以找回\n- truncate 删除是把表直接drop掉，然后再创建一个同样的新表，删除的数据不能找回，执行速度比delete快\n\n## DQL（查询表数据）\n\n#### 条件查询和运算符\n= != <>(不等于) < <= > >=\nBETWEEN...AND...\nIN\nIS NULL, IS NOT NULL\nAND OR NOT \n\n#### 模糊查询\n通配符：\n1. _：任意一个字符\n2. %：任意0-n个字符\n写在WHERE关键词后\n\n```sql\n-- 查询姓名中包含“s”字母的学生记录\nSELECT * FROM stu WHERE name LIKE '%s%';\n```\n\n#### 字段控制查询\n1. DISTINCT 去重\n2. 查询结果进行运算，必须都是数据型（值可能为NULL的需要转换为0，任何值与NULL相加还是NULL）\n\n```sql\nSELECT *,age+IFNULL(score,0) FROM students;\n```\n\n3. 对查询结果起别名 AS 可省略AS\n\n```sql\nSELECT *, yw+IFNULL(sx,0) AS total FROM score;\n```\n\n#### 排序\nORDER BY\n默认ASC 升序，DESC降序\n\n#### 聚合行数\nCOUNT()\nMAX()\nMIN()\nSUM()\nAVG()\n\n#### 分组查询\n将查询结果按照1个或多个字段进行分组，字段值相同的为一组\n当group by单独使用时，只显示出每组的第一条记录\n在使用分组时，select后面直接跟的字段一般都出现在group by 后\n- group_concat(字段名)：显示分组后每一组的某字段的值的集合\n- 聚合函数：显示分组后每一组的聚合函数值\n- having：筛选分组之后的结果\n\n#### LIMIT\n\n```sql\n-- SELECT * FROM 表名 LIMIT 从哪一行开始查询,需要查询的行数;\nSELECT * FROM stu LIMIT 0,3;\n```\n#### 顺序\n书写顺序\n![](./mysql-note-3/1.png)\n\n执行顺序\n![](./mysql-note-3/2.png)\n\n## 数据完整性\n\n保证用户输入的数据保存到数据库中是正确的\n1. 实体完整性：一行（一条记录）数据代表一个实体 （标识每一行数据不重复，行级约束）\n   - 主键\n   - 唯一\n   - 自动增长列\n2. 域完整性：限制此单元格的数据正确\n   - 数据类型\n   - 非空约束 (NOT NULL)\n   - 默认值约束 (DEFAULT)\n3. 参照完整性：指表与表之间的一种对应关系\n通常情况下可以通过设置两表之间的主键、外键关系，或者编写两表的触发器来实现   \n对两张表的要求：\n   - 数据库的主键和外键类型一定要一致\n   - 两个表必须得要是InnoDB类型\n\n```sql\n-- 实体完整性\n-- 三个完整性约束都可以在建表时，在数据类型后指定\n-- CREATE TABLE 表名(字段名 数据类型 PRIMARY KEY | UNIQUE | AUTO_INCREMENT);\nCREATE TABLE 表名(字段名1 数据类型 PRIMARY KEY,字段2 数据类型);\nCREATE TABLE 表名(字段名1 数据类型, 字段2 数据类型 UNIQUE);\nCREATE TABLE 表名(字段名1 数据类型 PRIMARY KEY AUTO_INCREMENT ，字段2 数据类型 UNIQUE);\n-- PRIMARY KEY 和 UNIQUE 可以在参数最后指定\nCREATE TABLE 表名(字段1 数据类型, 字段2 数据类型,PRIMARY KEY | UNIQUE (要设置的字段));\n\n-- 联合主键：两个字段数据同时相同时，才违反联合主键约束\nCREATE TABLE 表名(字段1 数据类型, 字段2 数据类型,PRIMARY KEY(主键1，主键2));\n-- 建表后设置主键\nALTER TABLE student  ADD CONSTRAINT  PRIMARY KEY (要设置的字段);\n\n\n-- 域完整性\n-- 非空约束 NOT NULL\nCREATE TABLE 表名(字段名1 数据类型 PRIMARY KEY AUTO_INCREMENT ，字段2 数据类型 UNIQUE NOT NULL);\n-- 默认值约束DEFAULT\nCREATE TABLE 表名(字段名1 数据类型 PRIMARY KEY AUTO_INCREMENT ，字段2 数据类型 NOT NULL DEFAULT '男');\n\n-- 参照完整性\n-- 创建student表\nCREATE TABLE student(sid int PRIMARY key,name varchar(50) not null,sex varchar(10) default '男');\n\n-- 创建score表，设置外键\nCREATE TABLE score(\nsid INT,\nscore DOUBLE,\nCONSTRAINT fk_stu_score_sid FOREIGN KEY(sid) REFERENCES student(sid));\n-- CONSTRAINT：约束，fk_stu_score_sid是约束名，FOREIGN KEY代表外键，REFERENCES：参考\n```\n#### 实体完整性\n主键约束\n- 每个表中要有一个主键（或者联合主键）\n- 每个数据唯一，非空\n\n唯一约束\n- 指定列的数据不能重复\n- 可以为空值\n\n自动增长列\n- 指定列的数据自动增长\n- 即使数据删除，还是从删除的序号继续往下\n- 设置自动增长的列必须时主键\n\n#### 域完整性\n三种：数据类型、非空约束、默认值约束\n\n#### 参照完整性\n设置参照完整性后 ，外键当中的内值，必须得是主键当中的内容\n  \n\t\n## 表之间的关系\n一对一\n一对多\n多对多\n- 学生选课:一个学生可以选修多门课程，每门课程可供多个学生选择\n- 需要创建中间的关系表\n- 拆分表：避免大量冗余数据的出现\n![冗余数据](mysql-note-3/3.png)\n## 多表查询\n#### 合并结果集\n合并结果集就是把两个select语句的查询结果合并到一起\t\t\n- UNION：合并时去除重复记录\n- UNION ALL：合并时不去除重复记录\n- 注意事项:被合并的两个结果列数、列类型必须相同\n\n```sql\nSELECT * FROM 表1   UNION | UNION ALL   SELECT * FROM 表2；\n```\n#### 连接查询\n也可以叫跨表查询，需要关联多个表进行查询\n\n```sql\n-- 同时查询两个表，出现的就是笛卡尔集结果\nSELECT * FROM student,score;\n\t\n-- 在查询时要把主键和外键保持一致,逐行判断，相等的留下，不相等的全不要\nSELECT * FROM student st,score sc WHERE st.id = sc.sid;\t\t\t\n\n```\n#### 多表连接\n内连接\n- 等值连接\n- 非等值连接\n- 自连接\n\n外连接\n- 左外连接（左连接）\n- 右外连接（右连接）\n两种连接方式同理，只是顺序不同\n\n自然连接\n- 根据主外键等式，自动去除无用的笛卡尔集\n- 两张连接的表中列名称和类型完全一致\n\n\n```sql\n-- 等值连接 (INNER可省略) 与多表联查约束主外键是一样，只是写法改变了\nSELECT * FROM student st INNER JOIN score sc ON st.id = sc.sid;\n\n-- 多表连接\n-- 99连接法（在WHERE中用AND并列条件）\nselect * from stu st,score sc,course c where st.id=sc.sid and sc.cid =c.cid;\n-- 内连接\nselect * from stu st \njoin score sc on st.id = sc.sid\njoin course c on c.cid=sc.cid;\n\n-- 非等值连接\n-- 查询所有员工的姓名，工资，所在部门的名称以及工资的等级\nselect e.ename,s.grade from emp e\njoin dept d on e.deptno = d.deptno\njoin salgrade s on e.salary BETWEEN s.lowSalary and s.highSalary;\n\n-- 自连接 （给同一个表起不同别名）\n-- 求7369员工编号、姓名、经理编号和经理姓名\nselect e1.ename,e1.empno,e2.ename from \nemp e1 join emp e2 on e1.mgr=e2.empno\nwhere e1.empno = 7369;\n\n\n-- 左外连接\n-- 左边表当中的数据全部查出，右边表当中，只查出满足条件的内容（右表中不存在的会用NULL填充）\n-- 查询所有学生的成绩信息（所有学生都会被查询到，没有成绩的同学成绩会显示NULL）\n-- 可以省略outer\nselect * from stu st left outer join score sc on st.id=sc.sid; \n\n-- 自然连接\nselect * from stu natural join score;\n```\n\n\n#### 子查询\n一个select语句中包含另一个完整的select（子查询语句需要用括号括起来）\n\n子查询出现的位置\n- where后，把select查询出的结果当作另一个select的条件值\n- from后，把查询出的结果当作一个新表\n\n\n```sql\n-- where后：先查出项羽所在的部门编号\nselect * from emp \nwhere deptno=\n    (select deptno from emp\n    where ename='项羽') ;\n\n-- from后：查询30号部门薪资大于2000\nselect * from \n(select * from emp where deptno=30) s\nwhere s.salary>2000;\n-- 注意要对表起别名\n```\n\n\n## 参考资料\n[Java零基础到高级MySQL数据库](https://study.163.com/course/introduction/1005932016.htm)","slug":"mysql-note-2","published":1,"updated":"2020-06-13T02:55:34.810Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke3x9g63001hzgvu0vsr3hzl","content":"<h2 id=\"SQL语句概述\"><a href=\"#SQL语句概述\" class=\"headerlink\" title=\"SQL语句概述\"></a>SQL语句概述</h2><p>Structured Query Language (结构化查询语言)<br>SQL是专为数据库而建立的操作命令集，是一种功能齐全的数据库语言</p>\n<h4 id=\"SQL语句分类\"><a href=\"#SQL语句分类\" class=\"headerlink\" title=\"SQL语句分类\"></a>SQL语句分类</h4><ul>\n<li>DDL DataDefinationLanguage 数据定义语言：用来定义数据库对象：创建库，表，列等</li>\n<li>DML DataManipulationLanguage 数据操作语言：用来操作数据库表中的记录</li>\n<li>DQL DataQueryLanguage 数据查询语言：用来查询数据</li>\n<li>DCL DataControlLanguage 数据控制语言：用来定义访问权限和安全级别</li>\n</ul>\n<h4 id=\"SQL数据类型\"><a href=\"#SQL数据类型\" class=\"headerlink\" title=\"SQL数据类型\"></a>SQL数据类型</h4><p>SQMySQL支持所有标准SQL数值数据类型</p>\n<p>常用数据类型</p>\n<ul>\n<li>int：整数</li>\n<li>double：浮点型，例如double(5,2)表示最多5位，其中- 须有2位小数，即最大值为999.99</li>\n<li>char：固定长度字符串类型 char(10)  ‘abc       ‘ （abc后面有7个空格）</li>\n<li>varchar：可变长度字符串类型；varchar(10) ‘abc’</li>\n<li>text：字符串类型</li>\n<li>blob：二进制类型</li>\n<li>date：日期类型，格式为：yyyy-MM-dd</li>\n<li>time：时间类型，格式为：hh:mm:ss （HH是24小时制，hh是12小时制）</li>\n<li>datetime:日期时间类型 yyyy-MM-dd hh:mm:ss</li>\n</ul>\n<h2 id=\"DDL-对表结构的操作\"><a href=\"#DDL-对表结构的操作\" class=\"headerlink\" title=\"DDL (对表结构的操作)\"></a>DDL (对表结构的操作)</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 数据库操作</span></span><br><span class=\"line\"><span class=\"comment\">-- 1.创建数据库 create database 数据库名  character set utf8;</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">database</span> my_database <span class=\"built_in\">character</span> <span class=\"keyword\">set</span> utf8;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 2.修改数据库字符集 alter database 数据库名 charactor set gbk;</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">database</span> my_database <span class=\"built_in\">character</span> <span class=\"keyword\">set</span> gbk;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 选择数据库 use 数据库名;</span></span><br><span class=\"line\"><span class=\"keyword\">use</span> my_database;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 表操作</span></span><br><span class=\"line\"><span class=\"comment\">-- 1.新建表 create table 表名 (列名 数据类型,类名 数据类型...);</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> my_table (<span class=\"keyword\">name</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">20</span>),age <span class=\"built_in\">int</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 2.查看表的创建细节 show create table 表名;</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">create</span> <span class=\"keyword\">table</span> my_table;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 3.查看表的字段信息 desc 表名;</span></span><br><span class=\"line\">desc my_table;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 4.添加一列(字段) alter table 表名 add 列名 数据类型;</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> my_table <span class=\"keyword\">add</span> <span class=\"keyword\">id</span> <span class=\"built_in\">bigint</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 5.修改一个表的字段类型 alter table 表名 modify 字段名 数据类型;</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> my_table <span class=\"keyword\">modify</span> <span class=\"keyword\">id</span> <span class=\"built_in\">int</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 6.修改表的列名 alter table 表名 change 原始列名 新列名 数据类型;</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> my_table <span class=\"keyword\">change</span> age <span class=\"keyword\">id</span> <span class=\"built_in\">bigint</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 7.删除一列 alter table 表名 drop 字段名;</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> my_table <span class=\"keyword\">drop</span> <span class=\"keyword\">id</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 8.修改表名 rename table 原始表名 to 要修改的表名;</span></span><br><span class=\"line\"><span class=\"keyword\">rename</span> <span class=\"keyword\">table</span> my_table <span class=\"keyword\">to</span> my_t;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 9.删除表 drop table 表名;</span></span><br><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> my_t;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 10.删除数据库 drop database 数据库名;</span></span><br><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">database</span> my_database;</span><br></pre></td></tr></table></figure>\n<p>注意点：</p>\n<ul>\n<li>字符集UTF-8要写作utf8</li>\n<li>modify只能修改数据类型，change可以修改字段名和数据类型，修改的数据类型都在最后指定</li>\n<li>修改表名比较特殊：rename table 原始表名 to 要修改的表名;</li>\n</ul>\n<h2 id=\"DML（对表的数据增、删、改）\"><a href=\"#DML（对表的数据增、删、改）\" class=\"headerlink\" title=\"DML（对表的数据增、删、改）\"></a>DML（对表的数据增、删、改）</h2><h4 id=\"插入操作\"><a href=\"#插入操作\" class=\"headerlink\" title=\"插入操作\"></a>插入操作</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 建表：create table my_table (name varchar(20),age int);</span></span><br><span class=\"line\"><span class=\"comment\">-- insert into 表名（列名1，列名2 ...）value (列值1，列值2...);</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> my_table (<span class=\"keyword\">name</span>,age) <span class=\"keyword\">value</span> (<span class=\"string\">'zs'</span>,<span class=\"number\">28</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 插入多条</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> my_table (<span class=\"keyword\">name</span>,age) <span class=\"keyword\">values</span> </span><br><span class=\"line\">    (<span class=\"string\">'ls'</span>,<span class=\"number\">30</span>)，</span><br><span class=\"line\">    (<span class=\"string\">'ww'</span>,<span class=\"number\">29</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查询是否插入成功 select * from 表名;</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> my_table;</span><br></pre></td></tr></table></figure>\n<p>注意事项</p>\n<ul>\n<li>列名与列值的类型、个数、顺序要一一对应</li>\n<li>值不要超出列定义的长度</li>\n<li>插入的日期和字符一样，都使用引号括起来</li>\n<li>插入多条，多条数据之间用逗号隔开</li>\n<li>插入一条或者多条时，用value或者values都可</li>\n</ul>\n<h4 id=\"更新操作\"><a href=\"#更新操作\" class=\"headerlink\" title=\"更新操作\"></a>更新操作</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- updata 表名 set 列名1=列值1,列名2=列值2...  where 列名=值</span></span><br><span class=\"line\"><span class=\"comment\">-- 修改表中所有列的age为10</span></span><br><span class=\"line\"><span class=\"keyword\">update</span> my_table <span class=\"keyword\">set</span> age=<span class=\"number\">10</span>; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 修改name为'zs'的列的age为20</span></span><br><span class=\"line\"><span class=\"keyword\">update</span> my_table <span class=\"keyword\">set</span> age=<span class=\"number\">20</span> <span class=\"keyword\">where</span> <span class=\"keyword\">name</span>=<span class=\"string\">'zs'</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"删除操作\"><a href=\"#删除操作\" class=\"headerlink\" title=\"删除操作\"></a>删除操作</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- delete from 表名 where 列名=值;</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> <span class=\"keyword\">from</span> my_table <span class=\"keyword\">where</span> <span class=\"keyword\">name</span>=<span class=\"string\">'zs'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- truncate table 表名;</span></span><br><span class=\"line\"><span class=\"keyword\">truncate</span> <span class=\"keyword\">table</span> my_table;</span><br></pre></td></tr></table></figure>\n<p>delete与truncate的区别</p>\n<ul>\n<li>delete 删除表中的数据，表结构还在;删除后的数据可以找回</li>\n<li>truncate 删除是把表直接drop掉，然后再创建一个同样的新表，删除的数据不能找回，执行速度比delete快</li>\n</ul>\n<h2 id=\"DQL（查询表数据）\"><a href=\"#DQL（查询表数据）\" class=\"headerlink\" title=\"DQL（查询表数据）\"></a>DQL（查询表数据）</h2><h4 id=\"条件查询和运算符\"><a href=\"#条件查询和运算符\" class=\"headerlink\" title=\"条件查询和运算符\"></a>条件查询和运算符</h4><p>= != &lt;&gt;(不等于) &lt; &lt;= &gt; &gt;=<br>BETWEEN…AND…<br>IN<br>IS NULL, IS NOT NULL<br>AND OR NOT </p>\n<h4 id=\"模糊查询\"><a href=\"#模糊查询\" class=\"headerlink\" title=\"模糊查询\"></a>模糊查询</h4><p>通配符：</p>\n<ol>\n<li>_：任意一个字符</li>\n<li>%：任意0-n个字符<br>写在WHERE关键词后</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 查询姓名中包含“s”字母的学生记录</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> stu <span class=\"keyword\">WHERE</span> <span class=\"keyword\">name</span> <span class=\"keyword\">LIKE</span> <span class=\"string\">'%s%'</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"字段控制查询\"><a href=\"#字段控制查询\" class=\"headerlink\" title=\"字段控制查询\"></a>字段控制查询</h4><ol>\n<li>DISTINCT 去重</li>\n<li>查询结果进行运算，必须都是数据型（值可能为NULL的需要转换为0，任何值与NULL相加还是NULL）</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> *,age+<span class=\"keyword\">IFNULL</span>(score,<span class=\"number\">0</span>) <span class=\"keyword\">FROM</span> students;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>对查询结果起别名 AS 可省略AS</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> *, yw+<span class=\"keyword\">IFNULL</span>(sx,<span class=\"number\">0</span>) <span class=\"keyword\">AS</span> total <span class=\"keyword\">FROM</span> score;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h4><p>ORDER BY<br>默认ASC 升序，DESC降序</p>\n<h4 id=\"聚合行数\"><a href=\"#聚合行数\" class=\"headerlink\" title=\"聚合行数\"></a>聚合行数</h4><p>COUNT()<br>MAX()<br>MIN()<br>SUM()<br>AVG()</p>\n<h4 id=\"分组查询\"><a href=\"#分组查询\" class=\"headerlink\" title=\"分组查询\"></a>分组查询</h4><p>将查询结果按照1个或多个字段进行分组，字段值相同的为一组<br>当group by单独使用时，只显示出每组的第一条记录<br>在使用分组时，select后面直接跟的字段一般都出现在group by 后</p>\n<ul>\n<li>group_concat(字段名)：显示分组后每一组的某字段的值的集合</li>\n<li>聚合函数：显示分组后每一组的聚合函数值</li>\n<li>having：筛选分组之后的结果</li>\n</ul>\n<h4 id=\"LIMIT\"><a href=\"#LIMIT\" class=\"headerlink\" title=\"LIMIT\"></a>LIMIT</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- SELECT * FROM 表名 LIMIT 从哪一行开始查询,需要查询的行数;</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> stu <span class=\"keyword\">LIMIT</span> <span class=\"number\">0</span>,<span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"顺序\"><a href=\"#顺序\" class=\"headerlink\" title=\"顺序\"></a>顺序</h4><p>书写顺序<br><img src=\"/2020/01/16/mysql-note-2/1.png\" alt></p>\n<p>执行顺序<br><img src=\"/2020/01/16/mysql-note-2/2.png\" alt></p>\n<h2 id=\"数据完整性\"><a href=\"#数据完整性\" class=\"headerlink\" title=\"数据完整性\"></a>数据完整性</h2><p>保证用户输入的数据保存到数据库中是正确的</p>\n<ol>\n<li>实体完整性：一行（一条记录）数据代表一个实体 （标识每一行数据不重复，行级约束）<ul>\n<li>主键</li>\n<li>唯一</li>\n<li>自动增长列</li>\n</ul>\n</li>\n<li>域完整性：限制此单元格的数据正确<ul>\n<li>数据类型</li>\n<li>非空约束 (NOT NULL)</li>\n<li>默认值约束 (DEFAULT)</li>\n</ul>\n</li>\n<li>参照完整性：指表与表之间的一种对应关系<br>通常情况下可以通过设置两表之间的主键、外键关系，或者编写两表的触发器来实现<br>对两张表的要求：<ul>\n<li>数据库的主键和外键类型一定要一致</li>\n<li>两个表必须得要是InnoDB类型</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 实体完整性</span></span><br><span class=\"line\"><span class=\"comment\">-- 三个完整性约束都可以在建表时，在数据类型后指定</span></span><br><span class=\"line\"><span class=\"comment\">-- CREATE TABLE 表名(字段名 数据类型 PRIMARY KEY | UNIQUE | AUTO_INCREMENT);</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> 表名(字段名<span class=\"number\">1</span> 数据类型 PRIMARY <span class=\"keyword\">KEY</span>,字段<span class=\"number\">2</span> 数据类型);</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> 表名(字段名<span class=\"number\">1</span> 数据类型, 字段<span class=\"number\">2</span> 数据类型 <span class=\"keyword\">UNIQUE</span>);</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> 表名(字段名<span class=\"number\">1</span> 数据类型 PRIMARY <span class=\"keyword\">KEY</span> AUTO_INCREMENT ，字段<span class=\"number\">2</span> 数据类型 <span class=\"keyword\">UNIQUE</span>);</span><br><span class=\"line\"><span class=\"comment\">-- PRIMARY KEY 和 UNIQUE 可以在参数最后指定</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> 表名(字段<span class=\"number\">1</span> 数据类型, 字段<span class=\"number\">2</span> 数据类型,PRIMARY <span class=\"keyword\">KEY</span> | <span class=\"keyword\">UNIQUE</span> (要设置的字段));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 联合主键：两个字段数据同时相同时，才违反联合主键约束</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> 表名(字段<span class=\"number\">1</span> 数据类型, 字段<span class=\"number\">2</span> 数据类型,PRIMARY <span class=\"keyword\">KEY</span>(主键<span class=\"number\">1</span>，主键<span class=\"number\">2</span>));</span><br><span class=\"line\"><span class=\"comment\">-- 建表后设置主键</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> student  <span class=\"keyword\">ADD</span> <span class=\"keyword\">CONSTRAINT</span>  PRIMARY <span class=\"keyword\">KEY</span> (要设置的字段);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 域完整性</span></span><br><span class=\"line\"><span class=\"comment\">-- 非空约束 NOT NULL</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> 表名(字段名<span class=\"number\">1</span> 数据类型 PRIMARY <span class=\"keyword\">KEY</span> AUTO_INCREMENT ，字段<span class=\"number\">2</span> 数据类型 <span class=\"keyword\">UNIQUE</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"><span class=\"comment\">-- 默认值约束DEFAULT</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> 表名(字段名<span class=\"number\">1</span> 数据类型 PRIMARY <span class=\"keyword\">KEY</span> AUTO_INCREMENT ，字段<span class=\"number\">2</span> 数据类型 <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'男'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 参照完整性</span></span><br><span class=\"line\"><span class=\"comment\">-- 创建student表</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> student(<span class=\"keyword\">sid</span> <span class=\"built_in\">int</span> PRIMARY <span class=\"keyword\">key</span>,<span class=\"keyword\">name</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">50</span>) <span class=\"keyword\">not</span> <span class=\"literal\">null</span>,sex <span class=\"built_in\">varchar</span>(<span class=\"number\">10</span>) <span class=\"keyword\">default</span> <span class=\"string\">'男'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 创建score表，设置外键</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> score(</span><br><span class=\"line\"><span class=\"keyword\">sid</span> <span class=\"built_in\">INT</span>,</span><br><span class=\"line\">score <span class=\"keyword\">DOUBLE</span>,</span><br><span class=\"line\"><span class=\"keyword\">CONSTRAINT</span> fk_stu_score_sid <span class=\"keyword\">FOREIGN</span> <span class=\"keyword\">KEY</span>(<span class=\"keyword\">sid</span>) <span class=\"keyword\">REFERENCES</span> student(<span class=\"keyword\">sid</span>));</span><br><span class=\"line\"><span class=\"comment\">-- CONSTRAINT：约束，fk_stu_score_sid是约束名，FOREIGN KEY代表外键，REFERENCES：参考</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"实体完整性\"><a href=\"#实体完整性\" class=\"headerlink\" title=\"实体完整性\"></a>实体完整性</h4><p>主键约束</p>\n<ul>\n<li>每个表中要有一个主键（或者联合主键）</li>\n<li>每个数据唯一，非空</li>\n</ul>\n<p>唯一约束</p>\n<ul>\n<li>指定列的数据不能重复</li>\n<li>可以为空值</li>\n</ul>\n<p>自动增长列</p>\n<ul>\n<li>指定列的数据自动增长</li>\n<li>即使数据删除，还是从删除的序号继续往下</li>\n<li>设置自动增长的列必须时主键</li>\n</ul>\n<h4 id=\"域完整性\"><a href=\"#域完整性\" class=\"headerlink\" title=\"域完整性\"></a>域完整性</h4><p>三种：数据类型、非空约束、默认值约束</p>\n<h4 id=\"参照完整性\"><a href=\"#参照完整性\" class=\"headerlink\" title=\"参照完整性\"></a>参照完整性</h4><p>设置参照完整性后 ，外键当中的内值，必须得是主键当中的内容</p>\n<h2 id=\"表之间的关系\"><a href=\"#表之间的关系\" class=\"headerlink\" title=\"表之间的关系\"></a>表之间的关系</h2><p>一对一<br>一对多<br>多对多</p>\n<ul>\n<li>学生选课:一个学生可以选修多门课程，每门课程可供多个学生选择</li>\n<li>需要创建中间的关系表</li>\n<li>拆分表：避免大量冗余数据的出现<br><img src=\"/2020/01/16/mysql-note-2/3.png\" alt=\"冗余数据\"><h2 id=\"多表查询\"><a href=\"#多表查询\" class=\"headerlink\" title=\"多表查询\"></a>多表查询</h2><h4 id=\"合并结果集\"><a href=\"#合并结果集\" class=\"headerlink\" title=\"合并结果集\"></a>合并结果集</h4>合并结果集就是把两个select语句的查询结果合并到一起        </li>\n<li>UNION：合并时去除重复记录</li>\n<li>UNION ALL：合并时不去除重复记录</li>\n<li>注意事项:被合并的两个结果列数、列类型必须相同</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> 表<span class=\"number\">1</span>   <span class=\"keyword\">UNION</span> | <span class=\"keyword\">UNION</span> <span class=\"keyword\">ALL</span>   <span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> 表<span class=\"number\">2</span>；</span><br></pre></td></tr></table></figure>\n<h4 id=\"连接查询\"><a href=\"#连接查询\" class=\"headerlink\" title=\"连接查询\"></a>连接查询</h4><p>也可以叫跨表查询，需要关联多个表进行查询</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 同时查询两个表，出现的就是笛卡尔集结果</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> student,score;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\">-- 在查询时要把主键和外键保持一致,逐行判断，相等的留下，不相等的全不要</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> student st,score sc <span class=\"keyword\">WHERE</span> st.id = sc.sid;</span><br></pre></td></tr></table></figure>\n<h4 id=\"多表连接\"><a href=\"#多表连接\" class=\"headerlink\" title=\"多表连接\"></a>多表连接</h4><p>内连接</p>\n<ul>\n<li>等值连接</li>\n<li>非等值连接</li>\n<li>自连接</li>\n</ul>\n<p>外连接</p>\n<ul>\n<li>左外连接（左连接）</li>\n<li>右外连接（右连接）<br>两种连接方式同理，只是顺序不同</li>\n</ul>\n<p>自然连接</p>\n<ul>\n<li>根据主外键等式，自动去除无用的笛卡尔集</li>\n<li>两张连接的表中列名称和类型完全一致</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 等值连接 (INNER可省略) 与多表联查约束主外键是一样，只是写法改变了</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> student st <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> score sc <span class=\"keyword\">ON</span> st.id = sc.sid;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 多表连接</span></span><br><span class=\"line\"><span class=\"comment\">-- 99连接法（在WHERE中用AND并列条件）</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> stu st,score sc,course c <span class=\"keyword\">where</span> st.id=sc.sid <span class=\"keyword\">and</span> sc.cid =c.cid;</span><br><span class=\"line\"><span class=\"comment\">-- 内连接</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> stu st </span><br><span class=\"line\"><span class=\"keyword\">join</span> score sc <span class=\"keyword\">on</span> st.id = sc.sid</span><br><span class=\"line\"><span class=\"keyword\">join</span> course c <span class=\"keyword\">on</span> c.cid=sc.cid;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 非等值连接</span></span><br><span class=\"line\"><span class=\"comment\">-- 查询所有员工的姓名，工资，所在部门的名称以及工资的等级</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> e.ename,s.grade <span class=\"keyword\">from</span> emp e</span><br><span class=\"line\"><span class=\"keyword\">join</span> dept d <span class=\"keyword\">on</span> e.deptno = d.deptno</span><br><span class=\"line\"><span class=\"keyword\">join</span> salgrade s <span class=\"keyword\">on</span> e.salary <span class=\"keyword\">BETWEEN</span> s.lowSalary <span class=\"keyword\">and</span> s.highSalary;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 自连接 （给同一个表起不同别名）</span></span><br><span class=\"line\"><span class=\"comment\">-- 求7369员工编号、姓名、经理编号和经理姓名</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> e1.ename,e1.empno,e2.ename <span class=\"keyword\">from</span> </span><br><span class=\"line\">emp e1 <span class=\"keyword\">join</span> emp e2 <span class=\"keyword\">on</span> e1.mgr=e2.empno</span><br><span class=\"line\"><span class=\"keyword\">where</span> e1.empno = <span class=\"number\">7369</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 左外连接</span></span><br><span class=\"line\"><span class=\"comment\">-- 左边表当中的数据全部查出，右边表当中，只查出满足条件的内容（右表中不存在的会用NULL填充）</span></span><br><span class=\"line\"><span class=\"comment\">-- 查询所有学生的成绩信息（所有学生都会被查询到，没有成绩的同学成绩会显示NULL）</span></span><br><span class=\"line\"><span class=\"comment\">-- 可以省略outer</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> stu st <span class=\"keyword\">left</span> <span class=\"keyword\">outer</span> <span class=\"keyword\">join</span> score sc <span class=\"keyword\">on</span> st.id=sc.sid; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 自然连接</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> stu <span class=\"keyword\">natural</span> <span class=\"keyword\">join</span> score;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"子查询\"><a href=\"#子查询\" class=\"headerlink\" title=\"子查询\"></a>子查询</h4><p>一个select语句中包含另一个完整的select（子查询语句需要用括号括起来）</p>\n<p>子查询出现的位置</p>\n<ul>\n<li>where后，把select查询出的结果当作另一个select的条件值</li>\n<li>from后，把查询出的结果当作一个新表</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- where后：先查出项羽所在的部门编号</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> emp </span><br><span class=\"line\"><span class=\"keyword\">where</span> deptno=</span><br><span class=\"line\">    (<span class=\"keyword\">select</span> deptno <span class=\"keyword\">from</span> emp</span><br><span class=\"line\">    <span class=\"keyword\">where</span> ename=<span class=\"string\">'项羽'</span>) ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- from后：查询30号部门薪资大于2000</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> </span><br><span class=\"line\">(<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> emp <span class=\"keyword\">where</span> deptno=<span class=\"number\">30</span>) s</span><br><span class=\"line\"><span class=\"keyword\">where</span> s.salary&gt;<span class=\"number\">2000</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 注意要对表起别名</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005932016.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级MySQL数据库</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"SQL语句概述\"><a href=\"#SQL语句概述\" class=\"headerlink\" title=\"SQL语句概述\"></a>SQL语句概述</h2><p>Structured Query Language (结构化查询语言)<br>SQL是专为数据库而建立的操作命令集，是一种功能齐全的数据库语言</p>\n<h4 id=\"SQL语句分类\"><a href=\"#SQL语句分类\" class=\"headerlink\" title=\"SQL语句分类\"></a>SQL语句分类</h4><ul>\n<li>DDL DataDefinationLanguage 数据定义语言：用来定义数据库对象：创建库，表，列等</li>\n<li>DML DataManipulationLanguage 数据操作语言：用来操作数据库表中的记录</li>\n<li>DQL DataQueryLanguage 数据查询语言：用来查询数据</li>\n<li>DCL DataControlLanguage 数据控制语言：用来定义访问权限和安全级别</li>\n</ul>\n<h4 id=\"SQL数据类型\"><a href=\"#SQL数据类型\" class=\"headerlink\" title=\"SQL数据类型\"></a>SQL数据类型</h4><p>SQMySQL支持所有标准SQL数值数据类型</p>\n<p>常用数据类型</p>\n<ul>\n<li>int：整数</li>\n<li>double：浮点型，例如double(5,2)表示最多5位，其中- 须有2位小数，即最大值为999.99</li>\n<li>char：固定长度字符串类型 char(10)  ‘abc       ‘ （abc后面有7个空格）</li>\n<li>varchar：可变长度字符串类型；varchar(10) ‘abc’</li>\n<li>text：字符串类型</li>\n<li>blob：二进制类型</li>\n<li>date：日期类型，格式为：yyyy-MM-dd</li>\n<li>time：时间类型，格式为：hh:mm:ss （HH是24小时制，hh是12小时制）</li>\n<li>datetime:日期时间类型 yyyy-MM-dd hh:mm:ss</li>\n</ul>\n<h2 id=\"DDL-对表结构的操作\"><a href=\"#DDL-对表结构的操作\" class=\"headerlink\" title=\"DDL (对表结构的操作)\"></a>DDL (对表结构的操作)</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 数据库操作</span></span><br><span class=\"line\"><span class=\"comment\">-- 1.创建数据库 create database 数据库名  character set utf8;</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">database</span> my_database <span class=\"built_in\">character</span> <span class=\"keyword\">set</span> utf8;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 2.修改数据库字符集 alter database 数据库名 charactor set gbk;</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">database</span> my_database <span class=\"built_in\">character</span> <span class=\"keyword\">set</span> gbk;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 选择数据库 use 数据库名;</span></span><br><span class=\"line\"><span class=\"keyword\">use</span> my_database;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 表操作</span></span><br><span class=\"line\"><span class=\"comment\">-- 1.新建表 create table 表名 (列名 数据类型,类名 数据类型...);</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> my_table (<span class=\"keyword\">name</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">20</span>),age <span class=\"built_in\">int</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 2.查看表的创建细节 show create table 表名;</span></span><br><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">create</span> <span class=\"keyword\">table</span> my_table;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 3.查看表的字段信息 desc 表名;</span></span><br><span class=\"line\">desc my_table;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 4.添加一列(字段) alter table 表名 add 列名 数据类型;</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> my_table <span class=\"keyword\">add</span> <span class=\"keyword\">id</span> <span class=\"built_in\">bigint</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 5.修改一个表的字段类型 alter table 表名 modify 字段名 数据类型;</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> my_table <span class=\"keyword\">modify</span> <span class=\"keyword\">id</span> <span class=\"built_in\">int</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 6.修改表的列名 alter table 表名 change 原始列名 新列名 数据类型;</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> my_table <span class=\"keyword\">change</span> age <span class=\"keyword\">id</span> <span class=\"built_in\">bigint</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 7.删除一列 alter table 表名 drop 字段名;</span></span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> my_table <span class=\"keyword\">drop</span> <span class=\"keyword\">id</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 8.修改表名 rename table 原始表名 to 要修改的表名;</span></span><br><span class=\"line\"><span class=\"keyword\">rename</span> <span class=\"keyword\">table</span> my_table <span class=\"keyword\">to</span> my_t;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 9.删除表 drop table 表名;</span></span><br><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">table</span> my_t;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 10.删除数据库 drop database 数据库名;</span></span><br><span class=\"line\"><span class=\"keyword\">drop</span> <span class=\"keyword\">database</span> my_database;</span><br></pre></td></tr></table></figure>\n<p>注意点：</p>\n<ul>\n<li>字符集UTF-8要写作utf8</li>\n<li>modify只能修改数据类型，change可以修改字段名和数据类型，修改的数据类型都在最后指定</li>\n<li>修改表名比较特殊：rename table 原始表名 to 要修改的表名;</li>\n</ul>\n<h2 id=\"DML（对表的数据增、删、改）\"><a href=\"#DML（对表的数据增、删、改）\" class=\"headerlink\" title=\"DML（对表的数据增、删、改）\"></a>DML（对表的数据增、删、改）</h2><h4 id=\"插入操作\"><a href=\"#插入操作\" class=\"headerlink\" title=\"插入操作\"></a>插入操作</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 建表：create table my_table (name varchar(20),age int);</span></span><br><span class=\"line\"><span class=\"comment\">-- insert into 表名（列名1，列名2 ...）value (列值1，列值2...);</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> my_table (<span class=\"keyword\">name</span>,age) <span class=\"keyword\">value</span> (<span class=\"string\">'zs'</span>,<span class=\"number\">28</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 插入多条</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> my_table (<span class=\"keyword\">name</span>,age) <span class=\"keyword\">values</span> </span><br><span class=\"line\">    (<span class=\"string\">'ls'</span>,<span class=\"number\">30</span>)，</span><br><span class=\"line\">    (<span class=\"string\">'ww'</span>,<span class=\"number\">29</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 查询是否插入成功 select * from 表名;</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> my_table;</span><br></pre></td></tr></table></figure>\n<p>注意事项</p>\n<ul>\n<li>列名与列值的类型、个数、顺序要一一对应</li>\n<li>值不要超出列定义的长度</li>\n<li>插入的日期和字符一样，都使用引号括起来</li>\n<li>插入多条，多条数据之间用逗号隔开</li>\n<li>插入一条或者多条时，用value或者values都可</li>\n</ul>\n<h4 id=\"更新操作\"><a href=\"#更新操作\" class=\"headerlink\" title=\"更新操作\"></a>更新操作</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- updata 表名 set 列名1=列值1,列名2=列值2...  where 列名=值</span></span><br><span class=\"line\"><span class=\"comment\">-- 修改表中所有列的age为10</span></span><br><span class=\"line\"><span class=\"keyword\">update</span> my_table <span class=\"keyword\">set</span> age=<span class=\"number\">10</span>; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 修改name为'zs'的列的age为20</span></span><br><span class=\"line\"><span class=\"keyword\">update</span> my_table <span class=\"keyword\">set</span> age=<span class=\"number\">20</span> <span class=\"keyword\">where</span> <span class=\"keyword\">name</span>=<span class=\"string\">'zs'</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"删除操作\"><a href=\"#删除操作\" class=\"headerlink\" title=\"删除操作\"></a>删除操作</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- delete from 表名 where 列名=值;</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> <span class=\"keyword\">from</span> my_table <span class=\"keyword\">where</span> <span class=\"keyword\">name</span>=<span class=\"string\">'zs'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- truncate table 表名;</span></span><br><span class=\"line\"><span class=\"keyword\">truncate</span> <span class=\"keyword\">table</span> my_table;</span><br></pre></td></tr></table></figure>\n<p>delete与truncate的区别</p>\n<ul>\n<li>delete 删除表中的数据，表结构还在;删除后的数据可以找回</li>\n<li>truncate 删除是把表直接drop掉，然后再创建一个同样的新表，删除的数据不能找回，执行速度比delete快</li>\n</ul>\n<h2 id=\"DQL（查询表数据）\"><a href=\"#DQL（查询表数据）\" class=\"headerlink\" title=\"DQL（查询表数据）\"></a>DQL（查询表数据）</h2><h4 id=\"条件查询和运算符\"><a href=\"#条件查询和运算符\" class=\"headerlink\" title=\"条件查询和运算符\"></a>条件查询和运算符</h4><p>= != &lt;&gt;(不等于) &lt; &lt;= &gt; &gt;=<br>BETWEEN…AND…<br>IN<br>IS NULL, IS NOT NULL<br>AND OR NOT </p>\n<h4 id=\"模糊查询\"><a href=\"#模糊查询\" class=\"headerlink\" title=\"模糊查询\"></a>模糊查询</h4><p>通配符：</p>\n<ol>\n<li>_：任意一个字符</li>\n<li>%：任意0-n个字符<br>写在WHERE关键词后</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 查询姓名中包含“s”字母的学生记录</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> stu <span class=\"keyword\">WHERE</span> <span class=\"keyword\">name</span> <span class=\"keyword\">LIKE</span> <span class=\"string\">'%s%'</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"字段控制查询\"><a href=\"#字段控制查询\" class=\"headerlink\" title=\"字段控制查询\"></a>字段控制查询</h4><ol>\n<li>DISTINCT 去重</li>\n<li>查询结果进行运算，必须都是数据型（值可能为NULL的需要转换为0，任何值与NULL相加还是NULL）</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> *,age+<span class=\"keyword\">IFNULL</span>(score,<span class=\"number\">0</span>) <span class=\"keyword\">FROM</span> students;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>对查询结果起别名 AS 可省略AS</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> *, yw+<span class=\"keyword\">IFNULL</span>(sx,<span class=\"number\">0</span>) <span class=\"keyword\">AS</span> total <span class=\"keyword\">FROM</span> score;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h4><p>ORDER BY<br>默认ASC 升序，DESC降序</p>\n<h4 id=\"聚合行数\"><a href=\"#聚合行数\" class=\"headerlink\" title=\"聚合行数\"></a>聚合行数</h4><p>COUNT()<br>MAX()<br>MIN()<br>SUM()<br>AVG()</p>\n<h4 id=\"分组查询\"><a href=\"#分组查询\" class=\"headerlink\" title=\"分组查询\"></a>分组查询</h4><p>将查询结果按照1个或多个字段进行分组，字段值相同的为一组<br>当group by单独使用时，只显示出每组的第一条记录<br>在使用分组时，select后面直接跟的字段一般都出现在group by 后</p>\n<ul>\n<li>group_concat(字段名)：显示分组后每一组的某字段的值的集合</li>\n<li>聚合函数：显示分组后每一组的聚合函数值</li>\n<li>having：筛选分组之后的结果</li>\n</ul>\n<h4 id=\"LIMIT\"><a href=\"#LIMIT\" class=\"headerlink\" title=\"LIMIT\"></a>LIMIT</h4><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- SELECT * FROM 表名 LIMIT 从哪一行开始查询,需要查询的行数;</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> stu <span class=\"keyword\">LIMIT</span> <span class=\"number\">0</span>,<span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"顺序\"><a href=\"#顺序\" class=\"headerlink\" title=\"顺序\"></a>顺序</h4><p>书写顺序<br><img src=\"/2020/01/16/mysql-note-2/1.png\" alt></p>\n<p>执行顺序<br><img src=\"/2020/01/16/mysql-note-2/2.png\" alt></p>\n<h2 id=\"数据完整性\"><a href=\"#数据完整性\" class=\"headerlink\" title=\"数据完整性\"></a>数据完整性</h2><p>保证用户输入的数据保存到数据库中是正确的</p>\n<ol>\n<li>实体完整性：一行（一条记录）数据代表一个实体 （标识每一行数据不重复，行级约束）<ul>\n<li>主键</li>\n<li>唯一</li>\n<li>自动增长列</li>\n</ul>\n</li>\n<li>域完整性：限制此单元格的数据正确<ul>\n<li>数据类型</li>\n<li>非空约束 (NOT NULL)</li>\n<li>默认值约束 (DEFAULT)</li>\n</ul>\n</li>\n<li>参照完整性：指表与表之间的一种对应关系<br>通常情况下可以通过设置两表之间的主键、外键关系，或者编写两表的触发器来实现<br>对两张表的要求：<ul>\n<li>数据库的主键和外键类型一定要一致</li>\n<li>两个表必须得要是InnoDB类型</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 实体完整性</span></span><br><span class=\"line\"><span class=\"comment\">-- 三个完整性约束都可以在建表时，在数据类型后指定</span></span><br><span class=\"line\"><span class=\"comment\">-- CREATE TABLE 表名(字段名 数据类型 PRIMARY KEY | UNIQUE | AUTO_INCREMENT);</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> 表名(字段名<span class=\"number\">1</span> 数据类型 PRIMARY <span class=\"keyword\">KEY</span>,字段<span class=\"number\">2</span> 数据类型);</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> 表名(字段名<span class=\"number\">1</span> 数据类型, 字段<span class=\"number\">2</span> 数据类型 <span class=\"keyword\">UNIQUE</span>);</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> 表名(字段名<span class=\"number\">1</span> 数据类型 PRIMARY <span class=\"keyword\">KEY</span> AUTO_INCREMENT ，字段<span class=\"number\">2</span> 数据类型 <span class=\"keyword\">UNIQUE</span>);</span><br><span class=\"line\"><span class=\"comment\">-- PRIMARY KEY 和 UNIQUE 可以在参数最后指定</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> 表名(字段<span class=\"number\">1</span> 数据类型, 字段<span class=\"number\">2</span> 数据类型,PRIMARY <span class=\"keyword\">KEY</span> | <span class=\"keyword\">UNIQUE</span> (要设置的字段));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 联合主键：两个字段数据同时相同时，才违反联合主键约束</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> 表名(字段<span class=\"number\">1</span> 数据类型, 字段<span class=\"number\">2</span> 数据类型,PRIMARY <span class=\"keyword\">KEY</span>(主键<span class=\"number\">1</span>，主键<span class=\"number\">2</span>));</span><br><span class=\"line\"><span class=\"comment\">-- 建表后设置主键</span></span><br><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> student  <span class=\"keyword\">ADD</span> <span class=\"keyword\">CONSTRAINT</span>  PRIMARY <span class=\"keyword\">KEY</span> (要设置的字段);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 域完整性</span></span><br><span class=\"line\"><span class=\"comment\">-- 非空约束 NOT NULL</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> 表名(字段名<span class=\"number\">1</span> 数据类型 PRIMARY <span class=\"keyword\">KEY</span> AUTO_INCREMENT ，字段<span class=\"number\">2</span> 数据类型 <span class=\"keyword\">UNIQUE</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"><span class=\"comment\">-- 默认值约束DEFAULT</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> 表名(字段名<span class=\"number\">1</span> 数据类型 PRIMARY <span class=\"keyword\">KEY</span> AUTO_INCREMENT ，字段<span class=\"number\">2</span> 数据类型 <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'男'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 参照完整性</span></span><br><span class=\"line\"><span class=\"comment\">-- 创建student表</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> student(<span class=\"keyword\">sid</span> <span class=\"built_in\">int</span> PRIMARY <span class=\"keyword\">key</span>,<span class=\"keyword\">name</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">50</span>) <span class=\"keyword\">not</span> <span class=\"literal\">null</span>,sex <span class=\"built_in\">varchar</span>(<span class=\"number\">10</span>) <span class=\"keyword\">default</span> <span class=\"string\">'男'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 创建score表，设置外键</span></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> score(</span><br><span class=\"line\"><span class=\"keyword\">sid</span> <span class=\"built_in\">INT</span>,</span><br><span class=\"line\">score <span class=\"keyword\">DOUBLE</span>,</span><br><span class=\"line\"><span class=\"keyword\">CONSTRAINT</span> fk_stu_score_sid <span class=\"keyword\">FOREIGN</span> <span class=\"keyword\">KEY</span>(<span class=\"keyword\">sid</span>) <span class=\"keyword\">REFERENCES</span> student(<span class=\"keyword\">sid</span>));</span><br><span class=\"line\"><span class=\"comment\">-- CONSTRAINT：约束，fk_stu_score_sid是约束名，FOREIGN KEY代表外键，REFERENCES：参考</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"实体完整性\"><a href=\"#实体完整性\" class=\"headerlink\" title=\"实体完整性\"></a>实体完整性</h4><p>主键约束</p>\n<ul>\n<li>每个表中要有一个主键（或者联合主键）</li>\n<li>每个数据唯一，非空</li>\n</ul>\n<p>唯一约束</p>\n<ul>\n<li>指定列的数据不能重复</li>\n<li>可以为空值</li>\n</ul>\n<p>自动增长列</p>\n<ul>\n<li>指定列的数据自动增长</li>\n<li>即使数据删除，还是从删除的序号继续往下</li>\n<li>设置自动增长的列必须时主键</li>\n</ul>\n<h4 id=\"域完整性\"><a href=\"#域完整性\" class=\"headerlink\" title=\"域完整性\"></a>域完整性</h4><p>三种：数据类型、非空约束、默认值约束</p>\n<h4 id=\"参照完整性\"><a href=\"#参照完整性\" class=\"headerlink\" title=\"参照完整性\"></a>参照完整性</h4><p>设置参照完整性后 ，外键当中的内值，必须得是主键当中的内容</p>\n<h2 id=\"表之间的关系\"><a href=\"#表之间的关系\" class=\"headerlink\" title=\"表之间的关系\"></a>表之间的关系</h2><p>一对一<br>一对多<br>多对多</p>\n<ul>\n<li>学生选课:一个学生可以选修多门课程，每门课程可供多个学生选择</li>\n<li>需要创建中间的关系表</li>\n<li>拆分表：避免大量冗余数据的出现<br><img src=\"/2020/01/16/mysql-note-2/3.png\" alt=\"冗余数据\"><h2 id=\"多表查询\"><a href=\"#多表查询\" class=\"headerlink\" title=\"多表查询\"></a>多表查询</h2><h4 id=\"合并结果集\"><a href=\"#合并结果集\" class=\"headerlink\" title=\"合并结果集\"></a>合并结果集</h4>合并结果集就是把两个select语句的查询结果合并到一起        </li>\n<li>UNION：合并时去除重复记录</li>\n<li>UNION ALL：合并时不去除重复记录</li>\n<li>注意事项:被合并的两个结果列数、列类型必须相同</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> 表<span class=\"number\">1</span>   <span class=\"keyword\">UNION</span> | <span class=\"keyword\">UNION</span> <span class=\"keyword\">ALL</span>   <span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> 表<span class=\"number\">2</span>；</span><br></pre></td></tr></table></figure>\n<h4 id=\"连接查询\"><a href=\"#连接查询\" class=\"headerlink\" title=\"连接查询\"></a>连接查询</h4><p>也可以叫跨表查询，需要关联多个表进行查询</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 同时查询两个表，出现的就是笛卡尔集结果</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> student,score;</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\">-- 在查询时要把主键和外键保持一致,逐行判断，相等的留下，不相等的全不要</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> student st,score sc <span class=\"keyword\">WHERE</span> st.id = sc.sid;</span><br></pre></td></tr></table></figure>\n<h4 id=\"多表连接\"><a href=\"#多表连接\" class=\"headerlink\" title=\"多表连接\"></a>多表连接</h4><p>内连接</p>\n<ul>\n<li>等值连接</li>\n<li>非等值连接</li>\n<li>自连接</li>\n</ul>\n<p>外连接</p>\n<ul>\n<li>左外连接（左连接）</li>\n<li>右外连接（右连接）<br>两种连接方式同理，只是顺序不同</li>\n</ul>\n<p>自然连接</p>\n<ul>\n<li>根据主外键等式，自动去除无用的笛卡尔集</li>\n<li>两张连接的表中列名称和类型完全一致</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 等值连接 (INNER可省略) 与多表联查约束主外键是一样，只是写法改变了</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> * <span class=\"keyword\">FROM</span> student st <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> score sc <span class=\"keyword\">ON</span> st.id = sc.sid;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 多表连接</span></span><br><span class=\"line\"><span class=\"comment\">-- 99连接法（在WHERE中用AND并列条件）</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> stu st,score sc,course c <span class=\"keyword\">where</span> st.id=sc.sid <span class=\"keyword\">and</span> sc.cid =c.cid;</span><br><span class=\"line\"><span class=\"comment\">-- 内连接</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> stu st </span><br><span class=\"line\"><span class=\"keyword\">join</span> score sc <span class=\"keyword\">on</span> st.id = sc.sid</span><br><span class=\"line\"><span class=\"keyword\">join</span> course c <span class=\"keyword\">on</span> c.cid=sc.cid;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 非等值连接</span></span><br><span class=\"line\"><span class=\"comment\">-- 查询所有员工的姓名，工资，所在部门的名称以及工资的等级</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> e.ename,s.grade <span class=\"keyword\">from</span> emp e</span><br><span class=\"line\"><span class=\"keyword\">join</span> dept d <span class=\"keyword\">on</span> e.deptno = d.deptno</span><br><span class=\"line\"><span class=\"keyword\">join</span> salgrade s <span class=\"keyword\">on</span> e.salary <span class=\"keyword\">BETWEEN</span> s.lowSalary <span class=\"keyword\">and</span> s.highSalary;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 自连接 （给同一个表起不同别名）</span></span><br><span class=\"line\"><span class=\"comment\">-- 求7369员工编号、姓名、经理编号和经理姓名</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> e1.ename,e1.empno,e2.ename <span class=\"keyword\">from</span> </span><br><span class=\"line\">emp e1 <span class=\"keyword\">join</span> emp e2 <span class=\"keyword\">on</span> e1.mgr=e2.empno</span><br><span class=\"line\"><span class=\"keyword\">where</span> e1.empno = <span class=\"number\">7369</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 左外连接</span></span><br><span class=\"line\"><span class=\"comment\">-- 左边表当中的数据全部查出，右边表当中，只查出满足条件的内容（右表中不存在的会用NULL填充）</span></span><br><span class=\"line\"><span class=\"comment\">-- 查询所有学生的成绩信息（所有学生都会被查询到，没有成绩的同学成绩会显示NULL）</span></span><br><span class=\"line\"><span class=\"comment\">-- 可以省略outer</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> stu st <span class=\"keyword\">left</span> <span class=\"keyword\">outer</span> <span class=\"keyword\">join</span> score sc <span class=\"keyword\">on</span> st.id=sc.sid; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 自然连接</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> stu <span class=\"keyword\">natural</span> <span class=\"keyword\">join</span> score;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"子查询\"><a href=\"#子查询\" class=\"headerlink\" title=\"子查询\"></a>子查询</h4><p>一个select语句中包含另一个完整的select（子查询语句需要用括号括起来）</p>\n<p>子查询出现的位置</p>\n<ul>\n<li>where后，把select查询出的结果当作另一个select的条件值</li>\n<li>from后，把查询出的结果当作一个新表</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- where后：先查出项羽所在的部门编号</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> emp </span><br><span class=\"line\"><span class=\"keyword\">where</span> deptno=</span><br><span class=\"line\">    (<span class=\"keyword\">select</span> deptno <span class=\"keyword\">from</span> emp</span><br><span class=\"line\">    <span class=\"keyword\">where</span> ename=<span class=\"string\">'项羽'</span>) ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- from后：查询30号部门薪资大于2000</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> </span><br><span class=\"line\">(<span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> emp <span class=\"keyword\">where</span> deptno=<span class=\"number\">30</span>) s</span><br><span class=\"line\"><span class=\"keyword\">where</span> s.salary&gt;<span class=\"number\">2000</span>;</span><br><span class=\"line\"><span class=\"comment\">-- 注意要对表起别名</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005932016.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级MySQL数据库</a></p>\n"},{"title":"Semantic-UI 上手","date":"2020-08-21T07:38:16.000Z","_content":"Semanti UI官方文档：https://semantic-ui.com/\n## 导入依赖\n1. 导入JQuery和Semantic UI\n\n``` html\n<script src=\"https://cdn.jsdelivr.net/npm/jquery@3.2/dist/jquery.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.js\"></script>\n```\n\n2. 在head中导入CSS样式\n\n```html\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.css\">\n```\n\n3. 优化移动端\n\n```html\n<meta name=\"viewport\" content=\"width=device-width ,initial-scale=1.0\">\n```\n\n最后是这样\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width ,initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.css\">\n    <title>首页</title>\n</head>\n<body>\n\n<script src=\"https://cdn.jsdelivr.net/npm/jquery@3.2/dist/jquery.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.js\"></script>\n</body>\n</html>\n```\n## 在body中设计页面\n先写大体框架，然后填充每个部分\n\n```html\n    <!--导航-->\n    <nav>\n\n    </nav>\n\n    <!--内容-->\n    <div>\n\n    </div>\n    \n    <!--尾巴-->\n    <footer>\n        \n    </footer>\n```\n\n### 导航\n效果：![导航](semantic-ui/01.png)\n\n```html\n <!--segment 代表是一的长条块，默认占满宽度 -->\n    <!--inverted 反转颜色使其为黑色-->\n    <nav class=\"ui inverted segment \">\n        <div class=\"ui container\">\n            <!--secondary menu 横向排列菜单按钮-->\n            <div class=\"ui inverted secondary menu\">\n                <!--teal 青色-->\n                <h2 class=\"ui teal item header \">Blog </h2>\n                <!--home icon 家图标-->\n                <a href=\"#\" class=\"ui item\"><i class=\"home icon\"></i>首页</a>\n                <a href=\"#\" class=\"ui item\"><i class=\"idea icon\"></i>分类</a>\n                <a href=\"#\" class=\"ui item\"><i class=\"target icon\"></i>标签</a>\n                <a href=\"#\" class=\"ui item\"><i class=\"info icon\"></i>关于我</a>\n\n                <!--right 排列在右侧-->\n                <div class=\"right item\">\n                    <!--ui input 美化输入框-->\n                    <!--transparent 使搜索框内透明-->\n                    <!--inverted 反转文字和图标颜色否则和背景同为黑色-->\n                    <div class=\"ui icon inverted transparent input\">\n                        <input type=\"text\" placeholder=\"Search...\">\n                        <i class=\"search link icon\"></i>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </nav>\n```\n导航布局可以通过在 secondary menu 中嵌套 header item 和 item 实现\n\n## 尾部\n效果图：![尾部](semantic-ui/02.png)\n\n添加me.css自定义样式\n\n```css\n/*------opacity------*/\n.m-opacity-mini {\n    opacity: 0.8 !important;\n}\n\n.m-inline-block {\n    display: inline-block;\n}\n\n.m-padded-tb-big {\n    padding-top: 3em !important;\n    padding-bottom: 3em !important;\n}\n\n.m-container {\n    max-width: 72em !important;\n    margin: auto !important;\n}\n```\n\n在head中引入\n\n```html\n<link rel=\"stylesheet\" href=\"../static/css/me.css\">\n```\n\n```html\n    <!--尾巴-->\n    <footer>\n        <!--vertical 隐藏segment上下的线-->\n        <div class=\"ui inverted vertical segment\">\n            <!--使得每个column中的元素 左右居中-->\n            <div class=\"ui center aligned container\">\n                <!--divided grid 分块 共16块-->\n                <div class=\"ui divided grid\">\n                    <div class=\"three wide column\">\n                        <div class=\"ui list\">\n                            <div class=\"item\">\n                                <!--ui rounded image 圆角图片-->\n                                <img src=\"../static/images/avatar.jpg\"  class=\"ui rounded image\" alt=\"\" style=\"width: 110px\">\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"three wide column\">\n                        <h4 class=\"ui inverted header\">最新博客</h4>\n                        <!--link 显示灰色-->\n                        <div class=\"ui inverted link list\">\n                            <div class=\"item\">用户故事</div>\n                            <div class=\"item\">用户故事</div>\n                            <div class=\"item\">用户故事</div>\n                        </div>\n                    </div>\n\n                    <div class=\"three wide column\">\n                        <h4 class=\"ui inverted header\">联系我</h4>\n                        <div class=\"ui inverted link list\">\n                            <div class=\"item\">用户故事</div>\n                            <div class=\"item\">用户故事</div>\n                            <div class=\"item\">用户故事</div>\n                        </div>\n                    </div>\n\n                    <div class=\"seven wide column\">\n                        <h4 class=\"ui inverted header\">Blog</h4>\n                        <p class=\"m-opacity-mini\">这是一个博客，这是一个博客，这是一个博客，这是一个博客</p>\n\n                    </div>\n\n\n                </div>\n                <!--divider 分割线-->\n                <div class=\"ui inverted section divider\"></div>\n\n                <!--版权声明-->\n                <p class=\"m-opacity-mini\">Copyright © 2020-2021 Aaron All Rights Reserved</p>\n            </div>\n        </div>\n    </footer>\n```\n水平布局可以通过 divided grid ,将水平空间分割开来，竖直显示文字可以通过 list 内部嵌套item\n\n\n## 博客主体\n![博客主体](semantic-ui/03.png)\n\n```html\n    <!--内容-->\n    <div>\n        <div class=\"ui container\">\n\n            <div class=\"ui grid\">\n                <!--分割成11和5-->\n\n                <!--左侧-->\n                <div class=\"eleven wide column\">\n                    <!--top 头部-->\n                    <!--attached 可拼接-->\n                    <div class=\"ui top attached segment\">\n                        <div class=\"ui middle aligned two column grid\">\n                            <div class=\"column\">\n                                <div class=\"ui teal header\">博客</div>\n                            </div>\n                            <div class=\"right aligned column\">\n                                共<h3 class=\"orange header m-inline-block\">14</h3>篇\n                            </div>\n                        </div>\n                    </div>\n\n                    <!--博客内容-->\n                    <div class=\"ui attached segment\">\n                        博客内容\n                    </div>\n\n                    <div class=\"ui bottom attached segment\">\n                        <div class=\"ui two column grid\">\n                            <div class=\"column\">\n                                <a href=\"#\" class=\"ui teal basic mini button\">上一页</a>\n                            </div>\n\n                            <div class=\"right aligned column\">\n                                <a href=\"#\" class=\"ui teal basic mini button\">下一页</a>\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n\n                <!--右侧-->\n                <div class=\"five wide column\">\n                    右侧列表\n                </div>\n            </div>\n        </div>\n    </div>\n```\n\n使用grid实现左右分栏的布局，左侧每一块都是一个segment，用attached连接\n\n博客简介![博客简介](semantic-ui/04.png)\n\n```html\n                <!--博客内容-->\n                <div class=\"ui attached segment\">\n                    <!--padded 增加内边距-->\n                    <!--vertical 去除segment四周的边框线-->\n                    <div class=\"ui padded vertical segment\">\n                        <div class=\"ui grid\">\n                            <!--11 5 分割-->\n                            <div class=\"eleven wide column\">\n                                <h3 class=\"ui header\">文章标题</h3>\n                                <p class=\"\">文章内容 文章内容 文章内容 文章内容 文章内容 文章内容 </p>\n                                <!--horizontal 使内部元素竖直居中-->\n                                <!--list 使得文字与头像同行-->\n                                <div class=\"ui grid\">\n                                    <div class=\"eleven wide column\">\n                                        <!--horizontal 水平摆放内部元素-->\n                                        <div class=\"ui  link horizontal list\">\n                                            <div class=\"item\">\n                                                <!--ui avatar image 小圆头像-->\n                                                <img src=\"http://lorempixel.com/100/100/\" alt=\"\"\n                                                     class=\"ui avatar image\">\n                                                <!--content 使得文字不会换行 能与图片同行-->\n                                                <div class=\"content\"><a href=\"#\" class=\"header\">Aaron</a></div>\n                                            </div>\n                                            <div class=\"item\">\n                                                <i class=\"calendar icon\"></i>2020.8.22\n                                            </div>\n                                            <div class=\"item\">\n                                                <i class=\"eye icon\"></i>2022\n                                            </div>\n\n                                        </div>\n                                    </div>\n                                    <div class=\"five wide column\">\n                                        <div class=\"right aligned column\">\n                                            <a href=\"#\" target=\"_blank\">\n                                                <div class=\"ui basic teal mini label\">认知升级</div>\n                                            </a>\n\n                                        </div>\n                                    </div>\n\n                                </div>\n\n                            </div>\n                            <div class=\"five wide column\">\n                                <a href=\"#\" target=\"_blank\">\n                                    <img src=\"http://lorempixel.com/800/400/\" alt=\"\" class=\"ui rounded image\">\n                                </a>\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n```\n先通过grid划分左右分栏比例11:5，左侧再分11:5\n水平摆放可以使用horizontal list 内部嵌套item\n\n\n右侧菜单：![右侧菜单](semantic-ui/05.png)\n\n```html\n<!--内容-->\n<div class=\"m-container m-padded-tb-big \">\n    <div class=\"ui container\">\n\n        <div class=\"ui grid\">\n            <!--分割成11和5-->\n\n            <!--左侧-->\n            <div class=\"eleven wide column\">\n                <!--top 头部-->\n                <!--attached 可拼接-->\n                <div class=\"ui top attached segment\">\n                    <div class=\"ui middle aligned two column grid\">\n                        <div class=\"column\">\n                            <div class=\"ui teal header\">博客</div>\n                        </div>\n                        <div class=\"right aligned column\">\n                            共<h3 class=\"orange header m-inline-block\">14</h3>篇\n                        </div>\n                    </div>\n                </div>\n\n                <!--博客内容-->\n                <div class=\"ui attached segment\">\n                    <!--padded 增加内边距-->\n                    <!--vertical 去除segment四周的边框线-->\n                    <div class=\"ui padded vertical segment\">\n                        <div class=\"ui grid\">\n                            <!--11 5 分割-->\n                            <div class=\"eleven wide column\">\n                                <h3 class=\"ui header\">文章标题</h3>\n                                <p class=\"\">文章内容 文章内容 文章内容 文章内容 文章内容 文章内容 </p>\n                                <!--horizontal 使内部元素竖直居中-->\n                                <!--list 使得文字与头像同行-->\n                                <div class=\"ui grid\">\n                                    <div class=\"eleven wide column\">\n                                        <!--horizontal 水平摆放内部元素-->\n                                        <div class=\"ui  horizontal link list\">\n                                            <div class=\"item\">\n                                                <!--ui avatar image 小圆头像-->\n                                                <img src=\"http://lorempixel.com/100/100/\" alt=\"\"\n                                                     class=\"ui avatar image\">\n                                                <!--content 使得文字不会换行 能与图片同行-->\n                                                <div class=\"content\"><a href=\"#\" class=\"header\">Aaron</a></div>\n                                            </div>\n                                            <div class=\"item\">\n                                                <i class=\"calendar icon\"></i>2020.8.22\n                                            </div>\n                                            <div class=\"item\">\n                                                <i class=\"eye icon\"></i>2022\n                                            </div>\n\n                                        </div>\n                                    </div>\n                                    <div class=\"five wide column\">\n                                        <div class=\"right aligned column\">\n                                            <a href=\"#\" target=\"_blank\">\n                                                <div class=\"ui basic teal mini label\">认知升级</div>\n                                            </a>\n\n                                        </div>\n                                    </div>\n\n                                </div>\n\n                            </div>\n                            <div class=\"five wide column\">\n                                <a href=\"#\" target=\"_blank\">\n                                    <img src=\"http://lorempixel.com/800/400/\" alt=\"\" class=\"ui rounded image\">\n                                </a>\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n\n                <div class=\"ui bottom attached segment\">\n                    <div class=\"ui two column grid\">\n                        <div class=\"column\">\n                            <a href=\"#\" class=\"ui teal basic mini button\">上一页</a>\n                        </div>\n\n                        <div class=\"right aligned column\">\n                            <a href=\"#\" class=\"ui teal basic mini button\">下一页</a>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n\n            <!--右侧-->\n            <div class=\"five wide column\">\n                <div class=\"ui segments\">\n                    <!--secondary segment 是浅灰色背景-->\n                    <div class=\"ui secondary segment\">\n                        <div class=\"ui two column grid\">\n                            <div class=\"column\">\n                                <i class=\"idea icon\"></i>分类\n                            </div>\n                            <div class=\"right aligned column\">\n                                <a href=\"#\" target=\"_blank\">more <i class=\"angle double right icon\"></i></a>\n                            </div>\n                        </div>\n                    </div>\n                    <!--teal 间隔线青色-->\n                    <div class=\"ui teal segment\">\n                        <!--vertical 合并两个单元 fluid填充满宽度-->\n                        <div class=\"ui vertical fluid menu\">\n                            <a href=\"#\" class=\"item\">\n                                学习笔记\n                                <div class=\"ui teal basic left pointing label\">13</div>\n                            </a>\n                            <a href=\"#\" class=\"item\">\n                                学习笔记\n                                <div class=\"ui teal basic left pointing label\">13</div>\n                            </a>\n                            <a href=\"#\" class=\"item\">\n                                学习笔记\n                                <div class=\"ui teal basic left pointing label\">13</div>\n                            </a>\n                        </div>\n\n\n                    </div>\n                </div>\n\n                <div class=\"ui segments\">\n                    <div class=\"ui secondary segment\">\n                        <div class=\"ui two column grid\">\n                            <div class=\"column\">\n                                <i class=\"tags icon\"></i>标签\n                            </div>\n                            <div class=\"right aligned column\">\n                                <a href=\"#\" target=\"_blank\">more <i class=\"angle double right icon\"></i></a>\n                            </div>\n                        </div>\n                        <div class=\"ui teal segment\">\n                            <a href=\"#\" target=\"_blank\" class=\"ui teal basic left pointing label\">\n                                方法论 <div class=\"detail\">2</div>\n                            </a>\n                            <a href=\"#\" target=\"_blank\" class=\"ui teal basic left pointing label\">\n                                方法论 <div class=\"detail\">2</div>\n                            </a>\n                            <a href=\"#\" target=\"_blank\" class=\"ui teal basic left pointing label\">\n                                方法论 <div class=\"detail\">2</div>\n                            </a>\n                            <a href=\"#\" target=\"_blank\" class=\"ui teal basic left pointing label\">\n                                方法论 <div class=\"detail\">2</div>\n                            </a>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"ui segments\">\n                    <div class=\"ui secondary segment\">\n                        <i class=\"bookmark icon\"></i>最新推荐\n                    </div>\n\n                    <div class=\"ui segment\">\n                        <a href=\"#\" target=\"_blank\" >用户故事</a>\n                    </div>\n                    <div class=\"ui segment\">\n                        <a href=\"#\" target=\"_blank\" >用户故事</a>\n                    </div>\n                    <div class=\"ui segment\">\n                        <a href=\"#\" target=\"_blank\" >用户故事</a>\n                    </div>\n                </div>\n\n                <!--二维码-->\n                <!--horizontal divider 左右线中间字-->\n                <h4 class=\"ui horizontal divider header\">\n                    扫码关注我\n                </h4>\n\n                <div class=\"ui centered card\" style=\"width: 11em\">\n                    <img src=\"../static/images/avatar.jpg\" alt=\"\" class=\"ui rounded image\">\n                </div>\n\n            </div>\n\n        </div>\n\n\n    </div>\n\n\n</div>\n\n```\n同列左右布局可以采用：two column grid 内嵌column和right aligned column的方式\n一个segments内可以嵌套多个segment","source":"_posts/semantic-ui.md","raw":"---\ntitle: Semantic-UI 上手\ncategories: 前端笔记\ndate: 2020-08-21 15:38:16\n---\nSemanti UI官方文档：https://semantic-ui.com/\n## 导入依赖\n1. 导入JQuery和Semantic UI\n\n``` html\n<script src=\"https://cdn.jsdelivr.net/npm/jquery@3.2/dist/jquery.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.js\"></script>\n```\n\n2. 在head中导入CSS样式\n\n```html\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.css\">\n```\n\n3. 优化移动端\n\n```html\n<meta name=\"viewport\" content=\"width=device-width ,initial-scale=1.0\">\n```\n\n最后是这样\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width ,initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.css\">\n    <title>首页</title>\n</head>\n<body>\n\n<script src=\"https://cdn.jsdelivr.net/npm/jquery@3.2/dist/jquery.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.js\"></script>\n</body>\n</html>\n```\n## 在body中设计页面\n先写大体框架，然后填充每个部分\n\n```html\n    <!--导航-->\n    <nav>\n\n    </nav>\n\n    <!--内容-->\n    <div>\n\n    </div>\n    \n    <!--尾巴-->\n    <footer>\n        \n    </footer>\n```\n\n### 导航\n效果：![导航](semantic-ui/01.png)\n\n```html\n <!--segment 代表是一的长条块，默认占满宽度 -->\n    <!--inverted 反转颜色使其为黑色-->\n    <nav class=\"ui inverted segment \">\n        <div class=\"ui container\">\n            <!--secondary menu 横向排列菜单按钮-->\n            <div class=\"ui inverted secondary menu\">\n                <!--teal 青色-->\n                <h2 class=\"ui teal item header \">Blog </h2>\n                <!--home icon 家图标-->\n                <a href=\"#\" class=\"ui item\"><i class=\"home icon\"></i>首页</a>\n                <a href=\"#\" class=\"ui item\"><i class=\"idea icon\"></i>分类</a>\n                <a href=\"#\" class=\"ui item\"><i class=\"target icon\"></i>标签</a>\n                <a href=\"#\" class=\"ui item\"><i class=\"info icon\"></i>关于我</a>\n\n                <!--right 排列在右侧-->\n                <div class=\"right item\">\n                    <!--ui input 美化输入框-->\n                    <!--transparent 使搜索框内透明-->\n                    <!--inverted 反转文字和图标颜色否则和背景同为黑色-->\n                    <div class=\"ui icon inverted transparent input\">\n                        <input type=\"text\" placeholder=\"Search...\">\n                        <i class=\"search link icon\"></i>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </nav>\n```\n导航布局可以通过在 secondary menu 中嵌套 header item 和 item 实现\n\n## 尾部\n效果图：![尾部](semantic-ui/02.png)\n\n添加me.css自定义样式\n\n```css\n/*------opacity------*/\n.m-opacity-mini {\n    opacity: 0.8 !important;\n}\n\n.m-inline-block {\n    display: inline-block;\n}\n\n.m-padded-tb-big {\n    padding-top: 3em !important;\n    padding-bottom: 3em !important;\n}\n\n.m-container {\n    max-width: 72em !important;\n    margin: auto !important;\n}\n```\n\n在head中引入\n\n```html\n<link rel=\"stylesheet\" href=\"../static/css/me.css\">\n```\n\n```html\n    <!--尾巴-->\n    <footer>\n        <!--vertical 隐藏segment上下的线-->\n        <div class=\"ui inverted vertical segment\">\n            <!--使得每个column中的元素 左右居中-->\n            <div class=\"ui center aligned container\">\n                <!--divided grid 分块 共16块-->\n                <div class=\"ui divided grid\">\n                    <div class=\"three wide column\">\n                        <div class=\"ui list\">\n                            <div class=\"item\">\n                                <!--ui rounded image 圆角图片-->\n                                <img src=\"../static/images/avatar.jpg\"  class=\"ui rounded image\" alt=\"\" style=\"width: 110px\">\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"three wide column\">\n                        <h4 class=\"ui inverted header\">最新博客</h4>\n                        <!--link 显示灰色-->\n                        <div class=\"ui inverted link list\">\n                            <div class=\"item\">用户故事</div>\n                            <div class=\"item\">用户故事</div>\n                            <div class=\"item\">用户故事</div>\n                        </div>\n                    </div>\n\n                    <div class=\"three wide column\">\n                        <h4 class=\"ui inverted header\">联系我</h4>\n                        <div class=\"ui inverted link list\">\n                            <div class=\"item\">用户故事</div>\n                            <div class=\"item\">用户故事</div>\n                            <div class=\"item\">用户故事</div>\n                        </div>\n                    </div>\n\n                    <div class=\"seven wide column\">\n                        <h4 class=\"ui inverted header\">Blog</h4>\n                        <p class=\"m-opacity-mini\">这是一个博客，这是一个博客，这是一个博客，这是一个博客</p>\n\n                    </div>\n\n\n                </div>\n                <!--divider 分割线-->\n                <div class=\"ui inverted section divider\"></div>\n\n                <!--版权声明-->\n                <p class=\"m-opacity-mini\">Copyright © 2020-2021 Aaron All Rights Reserved</p>\n            </div>\n        </div>\n    </footer>\n```\n水平布局可以通过 divided grid ,将水平空间分割开来，竖直显示文字可以通过 list 内部嵌套item\n\n\n## 博客主体\n![博客主体](semantic-ui/03.png)\n\n```html\n    <!--内容-->\n    <div>\n        <div class=\"ui container\">\n\n            <div class=\"ui grid\">\n                <!--分割成11和5-->\n\n                <!--左侧-->\n                <div class=\"eleven wide column\">\n                    <!--top 头部-->\n                    <!--attached 可拼接-->\n                    <div class=\"ui top attached segment\">\n                        <div class=\"ui middle aligned two column grid\">\n                            <div class=\"column\">\n                                <div class=\"ui teal header\">博客</div>\n                            </div>\n                            <div class=\"right aligned column\">\n                                共<h3 class=\"orange header m-inline-block\">14</h3>篇\n                            </div>\n                        </div>\n                    </div>\n\n                    <!--博客内容-->\n                    <div class=\"ui attached segment\">\n                        博客内容\n                    </div>\n\n                    <div class=\"ui bottom attached segment\">\n                        <div class=\"ui two column grid\">\n                            <div class=\"column\">\n                                <a href=\"#\" class=\"ui teal basic mini button\">上一页</a>\n                            </div>\n\n                            <div class=\"right aligned column\">\n                                <a href=\"#\" class=\"ui teal basic mini button\">下一页</a>\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n\n                <!--右侧-->\n                <div class=\"five wide column\">\n                    右侧列表\n                </div>\n            </div>\n        </div>\n    </div>\n```\n\n使用grid实现左右分栏的布局，左侧每一块都是一个segment，用attached连接\n\n博客简介![博客简介](semantic-ui/04.png)\n\n```html\n                <!--博客内容-->\n                <div class=\"ui attached segment\">\n                    <!--padded 增加内边距-->\n                    <!--vertical 去除segment四周的边框线-->\n                    <div class=\"ui padded vertical segment\">\n                        <div class=\"ui grid\">\n                            <!--11 5 分割-->\n                            <div class=\"eleven wide column\">\n                                <h3 class=\"ui header\">文章标题</h3>\n                                <p class=\"\">文章内容 文章内容 文章内容 文章内容 文章内容 文章内容 </p>\n                                <!--horizontal 使内部元素竖直居中-->\n                                <!--list 使得文字与头像同行-->\n                                <div class=\"ui grid\">\n                                    <div class=\"eleven wide column\">\n                                        <!--horizontal 水平摆放内部元素-->\n                                        <div class=\"ui  link horizontal list\">\n                                            <div class=\"item\">\n                                                <!--ui avatar image 小圆头像-->\n                                                <img src=\"http://lorempixel.com/100/100/\" alt=\"\"\n                                                     class=\"ui avatar image\">\n                                                <!--content 使得文字不会换行 能与图片同行-->\n                                                <div class=\"content\"><a href=\"#\" class=\"header\">Aaron</a></div>\n                                            </div>\n                                            <div class=\"item\">\n                                                <i class=\"calendar icon\"></i>2020.8.22\n                                            </div>\n                                            <div class=\"item\">\n                                                <i class=\"eye icon\"></i>2022\n                                            </div>\n\n                                        </div>\n                                    </div>\n                                    <div class=\"five wide column\">\n                                        <div class=\"right aligned column\">\n                                            <a href=\"#\" target=\"_blank\">\n                                                <div class=\"ui basic teal mini label\">认知升级</div>\n                                            </a>\n\n                                        </div>\n                                    </div>\n\n                                </div>\n\n                            </div>\n                            <div class=\"five wide column\">\n                                <a href=\"#\" target=\"_blank\">\n                                    <img src=\"http://lorempixel.com/800/400/\" alt=\"\" class=\"ui rounded image\">\n                                </a>\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n```\n先通过grid划分左右分栏比例11:5，左侧再分11:5\n水平摆放可以使用horizontal list 内部嵌套item\n\n\n右侧菜单：![右侧菜单](semantic-ui/05.png)\n\n```html\n<!--内容-->\n<div class=\"m-container m-padded-tb-big \">\n    <div class=\"ui container\">\n\n        <div class=\"ui grid\">\n            <!--分割成11和5-->\n\n            <!--左侧-->\n            <div class=\"eleven wide column\">\n                <!--top 头部-->\n                <!--attached 可拼接-->\n                <div class=\"ui top attached segment\">\n                    <div class=\"ui middle aligned two column grid\">\n                        <div class=\"column\">\n                            <div class=\"ui teal header\">博客</div>\n                        </div>\n                        <div class=\"right aligned column\">\n                            共<h3 class=\"orange header m-inline-block\">14</h3>篇\n                        </div>\n                    </div>\n                </div>\n\n                <!--博客内容-->\n                <div class=\"ui attached segment\">\n                    <!--padded 增加内边距-->\n                    <!--vertical 去除segment四周的边框线-->\n                    <div class=\"ui padded vertical segment\">\n                        <div class=\"ui grid\">\n                            <!--11 5 分割-->\n                            <div class=\"eleven wide column\">\n                                <h3 class=\"ui header\">文章标题</h3>\n                                <p class=\"\">文章内容 文章内容 文章内容 文章内容 文章内容 文章内容 </p>\n                                <!--horizontal 使内部元素竖直居中-->\n                                <!--list 使得文字与头像同行-->\n                                <div class=\"ui grid\">\n                                    <div class=\"eleven wide column\">\n                                        <!--horizontal 水平摆放内部元素-->\n                                        <div class=\"ui  horizontal link list\">\n                                            <div class=\"item\">\n                                                <!--ui avatar image 小圆头像-->\n                                                <img src=\"http://lorempixel.com/100/100/\" alt=\"\"\n                                                     class=\"ui avatar image\">\n                                                <!--content 使得文字不会换行 能与图片同行-->\n                                                <div class=\"content\"><a href=\"#\" class=\"header\">Aaron</a></div>\n                                            </div>\n                                            <div class=\"item\">\n                                                <i class=\"calendar icon\"></i>2020.8.22\n                                            </div>\n                                            <div class=\"item\">\n                                                <i class=\"eye icon\"></i>2022\n                                            </div>\n\n                                        </div>\n                                    </div>\n                                    <div class=\"five wide column\">\n                                        <div class=\"right aligned column\">\n                                            <a href=\"#\" target=\"_blank\">\n                                                <div class=\"ui basic teal mini label\">认知升级</div>\n                                            </a>\n\n                                        </div>\n                                    </div>\n\n                                </div>\n\n                            </div>\n                            <div class=\"five wide column\">\n                                <a href=\"#\" target=\"_blank\">\n                                    <img src=\"http://lorempixel.com/800/400/\" alt=\"\" class=\"ui rounded image\">\n                                </a>\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n\n                <div class=\"ui bottom attached segment\">\n                    <div class=\"ui two column grid\">\n                        <div class=\"column\">\n                            <a href=\"#\" class=\"ui teal basic mini button\">上一页</a>\n                        </div>\n\n                        <div class=\"right aligned column\">\n                            <a href=\"#\" class=\"ui teal basic mini button\">下一页</a>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n\n            <!--右侧-->\n            <div class=\"five wide column\">\n                <div class=\"ui segments\">\n                    <!--secondary segment 是浅灰色背景-->\n                    <div class=\"ui secondary segment\">\n                        <div class=\"ui two column grid\">\n                            <div class=\"column\">\n                                <i class=\"idea icon\"></i>分类\n                            </div>\n                            <div class=\"right aligned column\">\n                                <a href=\"#\" target=\"_blank\">more <i class=\"angle double right icon\"></i></a>\n                            </div>\n                        </div>\n                    </div>\n                    <!--teal 间隔线青色-->\n                    <div class=\"ui teal segment\">\n                        <!--vertical 合并两个单元 fluid填充满宽度-->\n                        <div class=\"ui vertical fluid menu\">\n                            <a href=\"#\" class=\"item\">\n                                学习笔记\n                                <div class=\"ui teal basic left pointing label\">13</div>\n                            </a>\n                            <a href=\"#\" class=\"item\">\n                                学习笔记\n                                <div class=\"ui teal basic left pointing label\">13</div>\n                            </a>\n                            <a href=\"#\" class=\"item\">\n                                学习笔记\n                                <div class=\"ui teal basic left pointing label\">13</div>\n                            </a>\n                        </div>\n\n\n                    </div>\n                </div>\n\n                <div class=\"ui segments\">\n                    <div class=\"ui secondary segment\">\n                        <div class=\"ui two column grid\">\n                            <div class=\"column\">\n                                <i class=\"tags icon\"></i>标签\n                            </div>\n                            <div class=\"right aligned column\">\n                                <a href=\"#\" target=\"_blank\">more <i class=\"angle double right icon\"></i></a>\n                            </div>\n                        </div>\n                        <div class=\"ui teal segment\">\n                            <a href=\"#\" target=\"_blank\" class=\"ui teal basic left pointing label\">\n                                方法论 <div class=\"detail\">2</div>\n                            </a>\n                            <a href=\"#\" target=\"_blank\" class=\"ui teal basic left pointing label\">\n                                方法论 <div class=\"detail\">2</div>\n                            </a>\n                            <a href=\"#\" target=\"_blank\" class=\"ui teal basic left pointing label\">\n                                方法论 <div class=\"detail\">2</div>\n                            </a>\n                            <a href=\"#\" target=\"_blank\" class=\"ui teal basic left pointing label\">\n                                方法论 <div class=\"detail\">2</div>\n                            </a>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"ui segments\">\n                    <div class=\"ui secondary segment\">\n                        <i class=\"bookmark icon\"></i>最新推荐\n                    </div>\n\n                    <div class=\"ui segment\">\n                        <a href=\"#\" target=\"_blank\" >用户故事</a>\n                    </div>\n                    <div class=\"ui segment\">\n                        <a href=\"#\" target=\"_blank\" >用户故事</a>\n                    </div>\n                    <div class=\"ui segment\">\n                        <a href=\"#\" target=\"_blank\" >用户故事</a>\n                    </div>\n                </div>\n\n                <!--二维码-->\n                <!--horizontal divider 左右线中间字-->\n                <h4 class=\"ui horizontal divider header\">\n                    扫码关注我\n                </h4>\n\n                <div class=\"ui centered card\" style=\"width: 11em\">\n                    <img src=\"../static/images/avatar.jpg\" alt=\"\" class=\"ui rounded image\">\n                </div>\n\n            </div>\n\n        </div>\n\n\n    </div>\n\n\n</div>\n\n```\n同列左右布局可以采用：two column grid 内嵌column和right aligned column的方式\n一个segments内可以嵌套多个segment","slug":"semantic-ui","published":1,"updated":"2020-08-22T01:46:00.367Z","_id":"cke3x9g67001kzgvu7n6o08o4","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Semanti UI官方文档：<a href=\"https://semantic-ui.com/\" target=\"_blank\" rel=\"noopener\">https://semantic-ui.com/</a></p>\n<h2 id=\"导入依赖\"><a href=\"#导入依赖\" class=\"headerlink\" title=\"导入依赖\"></a>导入依赖</h2><ol>\n<li>导入JQuery和Semantic UI</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.jsdelivr.net/npm/jquery@3.2/dist/jquery.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>在head中导入CSS样式</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.css\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>优化移动端</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width ,initial-scale=1.0\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>最后是这样</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width ,initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.css\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>首页<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.jsdelivr.net/npm/jquery@3.2/dist/jquery.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"在body中设计页面\"><a href=\"#在body中设计页面\" class=\"headerlink\" title=\"在body中设计页面\"></a>在body中设计页面</h2><p>先写大体框架，然后填充每个部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--导航--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--内容--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--尾巴--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"导航\"><a href=\"#导航\" class=\"headerlink\" title=\"导航\"></a>导航</h3><p>效果：<img src=\"/2020/08/21/semantic-ui/01.png\" alt=\"导航\"></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--segment 代表是一的长条块，默认占满宽度 --&gt;</span></span><br><span class=\"line\">   <span class=\"comment\">&lt;!--inverted 反转颜色使其为黑色--&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">nav</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui inverted segment \"</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui container\"</span>&gt;</span></span><br><span class=\"line\">           <span class=\"comment\">&lt;!--secondary menu 横向排列菜单按钮--&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui inverted secondary menu\"</span>&gt;</span></span><br><span class=\"line\">               <span class=\"comment\">&lt;!--teal 青色--&gt;</span></span><br><span class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui teal item header \"</span>&gt;</span>Blog <span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">               <span class=\"comment\">&lt;!--home icon 家图标--&gt;</span></span><br><span class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui item\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"home icon\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>首页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui item\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"idea icon\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>分类<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui item\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"target icon\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>标签<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui item\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"info icon\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>关于我<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"comment\">&lt;!--right 排列在右侧--&gt;</span></span><br><span class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right item\"</span>&gt;</span></span><br><span class=\"line\">                   <span class=\"comment\">&lt;!--ui input 美化输入框--&gt;</span></span><br><span class=\"line\">                   <span class=\"comment\">&lt;!--transparent 使搜索框内透明--&gt;</span></span><br><span class=\"line\">                   <span class=\"comment\">&lt;!--inverted 反转文字和图标颜色否则和背景同为黑色--&gt;</span></span><br><span class=\"line\">                   <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui icon inverted transparent input\"</span>&gt;</span></span><br><span class=\"line\">                       <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Search...\"</span>&gt;</span></span><br><span class=\"line\">                       <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"search link icon\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\">                   <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">               <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>导航布局可以通过在 secondary menu 中嵌套 header item 和 item 实现</p>\n<h2 id=\"尾部\"><a href=\"#尾部\" class=\"headerlink\" title=\"尾部\"></a>尾部</h2><p>效果图：<img src=\"/2020/08/21/semantic-ui/02.png\" alt=\"尾部\"></p>\n<p>添加me.css自定义样式</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*------opacity------*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.m-opacity-mini</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">opacity</span>: <span class=\"number\">0.8</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.m-inline-block</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.m-padded-tb-big</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding-top</span>: <span class=\"number\">3em</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding-bottom</span>: <span class=\"number\">3em</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.m-container</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">max-width</span>: <span class=\"number\">72em</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: auto <span class=\"meta\">!important</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在head中引入</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"../static/css/me.css\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--尾巴--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--vertical 隐藏segment上下的线--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui inverted vertical segment\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--使得每个column中的元素 左右居中--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui center aligned container\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--divided grid 分块 共16块--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui divided grid\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"three wide column\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui list\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"comment\">&lt;!--ui rounded image 圆角图片--&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../static/images/avatar.jpg\"</span>  <span class=\"attr\">class</span>=<span class=\"string\">\"ui rounded image\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 110px\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"three wide column\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">h4</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui inverted header\"</span>&gt;</span>最新博客<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"comment\">&lt;!--link 显示灰色--&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui inverted link list\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span>用户故事<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span>用户故事<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span>用户故事<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"three wide column\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">h4</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui inverted header\"</span>&gt;</span>联系我<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui inverted link list\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span>用户故事<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span>用户故事<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span>用户故事<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"seven wide column\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">h4</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui inverted header\"</span>&gt;</span>Blog<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"m-opacity-mini\"</span>&gt;</span>这是一个博客，这是一个博客，这是一个博客，这是一个博客<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--divider 分割线--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui inverted section divider\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--版权声明--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"m-opacity-mini\"</span>&gt;</span>Copyright © 2020-2021 Aaron All Rights Reserved<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>水平布局可以通过 divided grid ,将水平空间分割开来，竖直显示文字可以通过 list 内部嵌套item</p>\n<h2 id=\"博客主体\"><a href=\"#博客主体\" class=\"headerlink\" title=\"博客主体\"></a>博客主体</h2><p><img src=\"/2020/08/21/semantic-ui/03.png\" alt=\"博客主体\"></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--内容--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui container\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui grid\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--分割成11和5--&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--左侧--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"eleven wide column\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--top 头部--&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--attached 可拼接--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui top attached segment\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui middle aligned two column grid\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"column\"</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui teal header\"</span>&gt;</span>博客<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right aligned column\"</span>&gt;</span></span><br><span class=\"line\">                            共<span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">class</span>=<span class=\"string\">\"orange header m-inline-block\"</span>&gt;</span>14<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span>篇</span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--博客内容--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui attached segment\"</span>&gt;</span></span><br><span class=\"line\">                    博客内容</span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui bottom attached segment\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui two column grid\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"column\"</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui teal basic mini button\"</span>&gt;</span>上一页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right aligned column\"</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui teal basic mini button\"</span>&gt;</span>下一页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--右侧--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"five wide column\"</span>&gt;</span></span><br><span class=\"line\">                右侧列表</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>使用grid实现左右分栏的布局，左侧每一块都是一个segment，用attached连接</p>\n<p>博客简介<img src=\"/2020/08/21/semantic-ui/04.png\" alt=\"博客简介\"></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--博客内容--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui attached segment\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--padded 增加内边距--&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--vertical 去除segment四周的边框线--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui padded vertical segment\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui grid\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--11 5 分割--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"eleven wide column\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui header\"</span>&gt;</span>文章标题<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"\"</span>&gt;</span>文章内容 文章内容 文章内容 文章内容 文章内容 文章内容 <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--horizontal 使内部元素竖直居中--&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--list 使得文字与头像同行--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui grid\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"eleven wide column\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"comment\">&lt;!--horizontal 水平摆放内部元素--&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui  link horizontal list\"</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span></span><br><span class=\"line\">                                <span class=\"comment\">&lt;!--ui avatar image 小圆头像--&gt;</span></span><br><span class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://lorempixel.com/100/100/\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                                     <span class=\"attr\">class</span>=<span class=\"string\">\"ui avatar image\"</span>&gt;</span></span><br><span class=\"line\">                                <span class=\"comment\">&lt;!--content 使得文字不会换行 能与图片同行--&gt;</span></span><br><span class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span>&gt;</span>Aaron<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span></span><br><span class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"calendar icon\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>2020.8.22</span><br><span class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span></span><br><span class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"eye icon\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>2022</span><br><span class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"five wide column\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right aligned column\"</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span>&gt;</span></span><br><span class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui basic teal mini label\"</span>&gt;</span>认知升级<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"five wide column\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://lorempixel.com/800/400/\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui rounded image\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>先通过grid划分左右分栏比例11:5，左侧再分11:5<br>水平摆放可以使用horizontal list 内部嵌套item</p>\n<p>右侧菜单：<img src=\"/2020/08/21/semantic-ui/05.png\" alt=\"右侧菜单\"></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--内容--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"m-container m-padded-tb-big \"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui container\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui grid\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--分割成11和5--&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--左侧--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"eleven wide column\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--top 头部--&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--attached 可拼接--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui top attached segment\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui middle aligned two column grid\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"column\"</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui teal header\"</span>&gt;</span>博客<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right aligned column\"</span>&gt;</span></span><br><span class=\"line\">                            共<span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">class</span>=<span class=\"string\">\"orange header m-inline-block\"</span>&gt;</span>14<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span>篇</span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--博客内容--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui attached segment\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"comment\">&lt;!--padded 增加内边距--&gt;</span></span><br><span class=\"line\">                    <span class=\"comment\">&lt;!--vertical 去除segment四周的边框线--&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui padded vertical segment\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui grid\"</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"comment\">&lt;!--11 5 分割--&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"eleven wide column\"</span>&gt;</span></span><br><span class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui header\"</span>&gt;</span>文章标题<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"\"</span>&gt;</span>文章内容 文章内容 文章内容 文章内容 文章内容 文章内容 <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">                                <span class=\"comment\">&lt;!--horizontal 使内部元素竖直居中--&gt;</span></span><br><span class=\"line\">                                <span class=\"comment\">&lt;!--list 使得文字与头像同行--&gt;</span></span><br><span class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui grid\"</span>&gt;</span></span><br><span class=\"line\">                                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"eleven wide column\"</span>&gt;</span></span><br><span class=\"line\">                                        <span class=\"comment\">&lt;!--horizontal 水平摆放内部元素--&gt;</span></span><br><span class=\"line\">                                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui  horizontal link list\"</span>&gt;</span></span><br><span class=\"line\">                                            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span></span><br><span class=\"line\">                                                <span class=\"comment\">&lt;!--ui avatar image 小圆头像--&gt;</span></span><br><span class=\"line\">                                                <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://lorempixel.com/100/100/\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                                                     <span class=\"attr\">class</span>=<span class=\"string\">\"ui avatar image\"</span>&gt;</span></span><br><span class=\"line\">                                                <span class=\"comment\">&lt;!--content 使得文字不会换行 能与图片同行--&gt;</span></span><br><span class=\"line\">                                                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span>&gt;</span>Aaron<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                                            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                                            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span></span><br><span class=\"line\">                                                <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"calendar icon\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>2020.8.22</span><br><span class=\"line\">                                            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                                            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span></span><br><span class=\"line\">                                                <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"eye icon\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>2022</span><br><span class=\"line\">                                            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"five wide column\"</span>&gt;</span></span><br><span class=\"line\">                                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right aligned column\"</span>&gt;</span></span><br><span class=\"line\">                                            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span>&gt;</span></span><br><span class=\"line\">                                                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui basic teal mini label\"</span>&gt;</span>认知升级<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                                            <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"five wide column\"</span>&gt;</span></span><br><span class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span>&gt;</span></span><br><span class=\"line\">                                    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://lorempixel.com/800/400/\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui rounded image\"</span>&gt;</span></span><br><span class=\"line\">                                <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui bottom attached segment\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui two column grid\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"column\"</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui teal basic mini button\"</span>&gt;</span>上一页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right aligned column\"</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui teal basic mini button\"</span>&gt;</span>下一页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--右侧--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"five wide column\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui segments\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"comment\">&lt;!--secondary segment 是浅灰色背景--&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui secondary segment\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui two column grid\"</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"column\"</span>&gt;</span></span><br><span class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"idea icon\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>分类</span><br><span class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right aligned column\"</span>&gt;</span></span><br><span class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span>&gt;</span>more <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"angle double right icon\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"comment\">&lt;!--teal 间隔线青色--&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui teal segment\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"comment\">&lt;!--vertical 合并两个单元 fluid填充满宽度--&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui vertical fluid menu\"</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span></span><br><span class=\"line\">                                学习笔记</span><br><span class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui teal basic left pointing label\"</span>&gt;</span>13<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span></span><br><span class=\"line\">                                学习笔记</span><br><span class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui teal basic left pointing label\"</span>&gt;</span>13<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span></span><br><span class=\"line\">                                学习笔记</span><br><span class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui teal basic left pointing label\"</span>&gt;</span>13<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui segments\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui secondary segment\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui two column grid\"</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"column\"</span>&gt;</span></span><br><span class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"tags icon\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>标签</span><br><span class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right aligned column\"</span>&gt;</span></span><br><span class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span>&gt;</span>more <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"angle double right icon\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui teal segment\"</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui teal basic left pointing label\"</span>&gt;</span></span><br><span class=\"line\">                                方法论 <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"detail\"</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui teal basic left pointing label\"</span>&gt;</span></span><br><span class=\"line\">                                方法论 <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"detail\"</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui teal basic left pointing label\"</span>&gt;</span></span><br><span class=\"line\">                                方法论 <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"detail\"</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui teal basic left pointing label\"</span>&gt;</span></span><br><span class=\"line\">                                方法论 <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"detail\"</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui segments\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui secondary segment\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bookmark icon\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>最新推荐</span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui segment\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span> &gt;</span>用户故事<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui segment\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span> &gt;</span>用户故事<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui segment\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span> &gt;</span>用户故事<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--二维码--&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--horizontal divider 左右线中间字--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">h4</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui horizontal divider header\"</span>&gt;</span></span><br><span class=\"line\">                    扫码关注我</span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui centered card\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 11em\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../static/images/avatar.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui rounded image\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>同列左右布局可以采用：two column grid 内嵌column和right aligned column的方式<br>一个segments内可以嵌套多个segment</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Semanti UI官方文档：<a href=\"https://semantic-ui.com/\" target=\"_blank\" rel=\"noopener\">https://semantic-ui.com/</a></p>\n<h2 id=\"导入依赖\"><a href=\"#导入依赖\" class=\"headerlink\" title=\"导入依赖\"></a>导入依赖</h2><ol>\n<li>导入JQuery和Semantic UI</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.jsdelivr.net/npm/jquery@3.2/dist/jquery.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>在head中导入CSS样式</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.css\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>优化移动端</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width ,initial-scale=1.0\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>最后是这样</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width ,initial-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"https://cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.css\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>首页<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.jsdelivr.net/npm/jquery@3.2/dist/jquery.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.jsdelivr.net/npm/semantic-ui@2.4.2/dist/semantic.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"在body中设计页面\"><a href=\"#在body中设计页面\" class=\"headerlink\" title=\"在body中设计页面\"></a>在body中设计页面</h2><p>先写大体框架，然后填充每个部分</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--导航--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--内容--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--尾巴--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"导航\"><a href=\"#导航\" class=\"headerlink\" title=\"导航\"></a>导航</h3><p>效果：<img src=\"/2020/08/21/semantic-ui/01.png\" alt=\"导航\"></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--segment 代表是一的长条块，默认占满宽度 --&gt;</span></span><br><span class=\"line\">   <span class=\"comment\">&lt;!--inverted 反转颜色使其为黑色--&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">nav</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui inverted segment \"</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui container\"</span>&gt;</span></span><br><span class=\"line\">           <span class=\"comment\">&lt;!--secondary menu 横向排列菜单按钮--&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui inverted secondary menu\"</span>&gt;</span></span><br><span class=\"line\">               <span class=\"comment\">&lt;!--teal 青色--&gt;</span></span><br><span class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">h2</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui teal item header \"</span>&gt;</span>Blog <span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">               <span class=\"comment\">&lt;!--home icon 家图标--&gt;</span></span><br><span class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui item\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"home icon\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>首页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui item\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"idea icon\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>分类<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui item\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"target icon\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>标签<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui item\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"info icon\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>关于我<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">               <span class=\"comment\">&lt;!--right 排列在右侧--&gt;</span></span><br><span class=\"line\">               <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right item\"</span>&gt;</span></span><br><span class=\"line\">                   <span class=\"comment\">&lt;!--ui input 美化输入框--&gt;</span></span><br><span class=\"line\">                   <span class=\"comment\">&lt;!--transparent 使搜索框内透明--&gt;</span></span><br><span class=\"line\">                   <span class=\"comment\">&lt;!--inverted 反转文字和图标颜色否则和背景同为黑色--&gt;</span></span><br><span class=\"line\">                   <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui icon inverted transparent input\"</span>&gt;</span></span><br><span class=\"line\">                       <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Search...\"</span>&gt;</span></span><br><span class=\"line\">                       <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"search link icon\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\">                   <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">               <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>导航布局可以通过在 secondary menu 中嵌套 header item 和 item 实现</p>\n<h2 id=\"尾部\"><a href=\"#尾部\" class=\"headerlink\" title=\"尾部\"></a>尾部</h2><p>效果图：<img src=\"/2020/08/21/semantic-ui/02.png\" alt=\"尾部\"></p>\n<p>添加me.css自定义样式</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*------opacity------*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.m-opacity-mini</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">opacity</span>: <span class=\"number\">0.8</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.m-inline-block</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.m-padded-tb-big</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding-top</span>: <span class=\"number\">3em</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding-bottom</span>: <span class=\"number\">3em</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.m-container</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">max-width</span>: <span class=\"number\">72em</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: auto <span class=\"meta\">!important</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在head中引入</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"../static/css/me.css\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--尾巴--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--vertical 隐藏segment上下的线--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui inverted vertical segment\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--使得每个column中的元素 左右居中--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui center aligned container\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--divided grid 分块 共16块--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui divided grid\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"three wide column\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui list\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"comment\">&lt;!--ui rounded image 圆角图片--&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../static/images/avatar.jpg\"</span>  <span class=\"attr\">class</span>=<span class=\"string\">\"ui rounded image\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 110px\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"three wide column\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">h4</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui inverted header\"</span>&gt;</span>最新博客<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"comment\">&lt;!--link 显示灰色--&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui inverted link list\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span>用户故事<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span>用户故事<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span>用户故事<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"three wide column\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">h4</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui inverted header\"</span>&gt;</span>联系我<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui inverted link list\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span>用户故事<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span>用户故事<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span>用户故事<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"seven wide column\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">h4</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui inverted header\"</span>&gt;</span>Blog<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"m-opacity-mini\"</span>&gt;</span>这是一个博客，这是一个博客，这是一个博客，这是一个博客<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--divider 分割线--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui inverted section divider\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--版权声明--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"m-opacity-mini\"</span>&gt;</span>Copyright © 2020-2021 Aaron All Rights Reserved<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>水平布局可以通过 divided grid ,将水平空间分割开来，竖直显示文字可以通过 list 内部嵌套item</p>\n<h2 id=\"博客主体\"><a href=\"#博客主体\" class=\"headerlink\" title=\"博客主体\"></a>博客主体</h2><p><img src=\"/2020/08/21/semantic-ui/03.png\" alt=\"博客主体\"></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--内容--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui container\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui grid\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--分割成11和5--&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--左侧--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"eleven wide column\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--top 头部--&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--attached 可拼接--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui top attached segment\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui middle aligned two column grid\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"column\"</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui teal header\"</span>&gt;</span>博客<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right aligned column\"</span>&gt;</span></span><br><span class=\"line\">                            共<span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">class</span>=<span class=\"string\">\"orange header m-inline-block\"</span>&gt;</span>14<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span>篇</span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--博客内容--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui attached segment\"</span>&gt;</span></span><br><span class=\"line\">                    博客内容</span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui bottom attached segment\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui two column grid\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"column\"</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui teal basic mini button\"</span>&gt;</span>上一页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right aligned column\"</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui teal basic mini button\"</span>&gt;</span>下一页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--右侧--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"five wide column\"</span>&gt;</span></span><br><span class=\"line\">                右侧列表</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>使用grid实现左右分栏的布局，左侧每一块都是一个segment，用attached连接</p>\n<p>博客简介<img src=\"/2020/08/21/semantic-ui/04.png\" alt=\"博客简介\"></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--博客内容--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui attached segment\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--padded 增加内边距--&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--vertical 去除segment四周的边框线--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui padded vertical segment\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui grid\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--11 5 分割--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"eleven wide column\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui header\"</span>&gt;</span>文章标题<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"\"</span>&gt;</span>文章内容 文章内容 文章内容 文章内容 文章内容 文章内容 <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--horizontal 使内部元素竖直居中--&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--list 使得文字与头像同行--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui grid\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"eleven wide column\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"comment\">&lt;!--horizontal 水平摆放内部元素--&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui  link horizontal list\"</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span></span><br><span class=\"line\">                                <span class=\"comment\">&lt;!--ui avatar image 小圆头像--&gt;</span></span><br><span class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://lorempixel.com/100/100/\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                                     <span class=\"attr\">class</span>=<span class=\"string\">\"ui avatar image\"</span>&gt;</span></span><br><span class=\"line\">                                <span class=\"comment\">&lt;!--content 使得文字不会换行 能与图片同行--&gt;</span></span><br><span class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span>&gt;</span>Aaron<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span></span><br><span class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"calendar icon\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>2020.8.22</span><br><span class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span></span><br><span class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"eye icon\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>2022</span><br><span class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"five wide column\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right aligned column\"</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span>&gt;</span></span><br><span class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui basic teal mini label\"</span>&gt;</span>认知升级<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"five wide column\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://lorempixel.com/800/400/\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui rounded image\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>先通过grid划分左右分栏比例11:5，左侧再分11:5<br>水平摆放可以使用horizontal list 内部嵌套item</p>\n<p>右侧菜单：<img src=\"/2020/08/21/semantic-ui/05.png\" alt=\"右侧菜单\"></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--内容--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"m-container m-padded-tb-big \"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui container\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui grid\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--分割成11和5--&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--左侧--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"eleven wide column\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--top 头部--&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--attached 可拼接--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui top attached segment\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui middle aligned two column grid\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"column\"</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui teal header\"</span>&gt;</span>博客<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right aligned column\"</span>&gt;</span></span><br><span class=\"line\">                            共<span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">class</span>=<span class=\"string\">\"orange header m-inline-block\"</span>&gt;</span>14<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span>篇</span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--博客内容--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui attached segment\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"comment\">&lt;!--padded 增加内边距--&gt;</span></span><br><span class=\"line\">                    <span class=\"comment\">&lt;!--vertical 去除segment四周的边框线--&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui padded vertical segment\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui grid\"</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"comment\">&lt;!--11 5 分割--&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"eleven wide column\"</span>&gt;</span></span><br><span class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui header\"</span>&gt;</span>文章标题<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"\"</span>&gt;</span>文章内容 文章内容 文章内容 文章内容 文章内容 文章内容 <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">                                <span class=\"comment\">&lt;!--horizontal 使内部元素竖直居中--&gt;</span></span><br><span class=\"line\">                                <span class=\"comment\">&lt;!--list 使得文字与头像同行--&gt;</span></span><br><span class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui grid\"</span>&gt;</span></span><br><span class=\"line\">                                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"eleven wide column\"</span>&gt;</span></span><br><span class=\"line\">                                        <span class=\"comment\">&lt;!--horizontal 水平摆放内部元素--&gt;</span></span><br><span class=\"line\">                                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui  horizontal link list\"</span>&gt;</span></span><br><span class=\"line\">                                            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span></span><br><span class=\"line\">                                                <span class=\"comment\">&lt;!--ui avatar image 小圆头像--&gt;</span></span><br><span class=\"line\">                                                <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://lorempixel.com/100/100/\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                                                     <span class=\"attr\">class</span>=<span class=\"string\">\"ui avatar image\"</span>&gt;</span></span><br><span class=\"line\">                                                <span class=\"comment\">&lt;!--content 使得文字不会换行 能与图片同行--&gt;</span></span><br><span class=\"line\">                                                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header\"</span>&gt;</span>Aaron<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                                            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                                            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span></span><br><span class=\"line\">                                                <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"calendar icon\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>2020.8.22</span><br><span class=\"line\">                                            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                                            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span></span><br><span class=\"line\">                                                <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"eye icon\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>2022</span><br><span class=\"line\">                                            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"five wide column\"</span>&gt;</span></span><br><span class=\"line\">                                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right aligned column\"</span>&gt;</span></span><br><span class=\"line\">                                            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span>&gt;</span></span><br><span class=\"line\">                                                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui basic teal mini label\"</span>&gt;</span>认知升级<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                                            <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"five wide column\"</span>&gt;</span></span><br><span class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span>&gt;</span></span><br><span class=\"line\">                                    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://lorempixel.com/800/400/\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui rounded image\"</span>&gt;</span></span><br><span class=\"line\">                                <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui bottom attached segment\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui two column grid\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"column\"</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui teal basic mini button\"</span>&gt;</span>上一页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right aligned column\"</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui teal basic mini button\"</span>&gt;</span>下一页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--右侧--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"five wide column\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui segments\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"comment\">&lt;!--secondary segment 是浅灰色背景--&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui secondary segment\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui two column grid\"</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"column\"</span>&gt;</span></span><br><span class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"idea icon\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>分类</span><br><span class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right aligned column\"</span>&gt;</span></span><br><span class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span>&gt;</span>more <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"angle double right icon\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"comment\">&lt;!--teal 间隔线青色--&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui teal segment\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"comment\">&lt;!--vertical 合并两个单元 fluid填充满宽度--&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui vertical fluid menu\"</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span></span><br><span class=\"line\">                                学习笔记</span><br><span class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui teal basic left pointing label\"</span>&gt;</span>13<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span></span><br><span class=\"line\">                                学习笔记</span><br><span class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui teal basic left pointing label\"</span>&gt;</span>13<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span>&gt;</span></span><br><span class=\"line\">                                学习笔记</span><br><span class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui teal basic left pointing label\"</span>&gt;</span>13<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui segments\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui secondary segment\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui two column grid\"</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"column\"</span>&gt;</span></span><br><span class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"tags icon\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>标签</span><br><span class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right aligned column\"</span>&gt;</span></span><br><span class=\"line\">                                <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span>&gt;</span>more <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"angle double right icon\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui teal segment\"</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui teal basic left pointing label\"</span>&gt;</span></span><br><span class=\"line\">                                方法论 <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"detail\"</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui teal basic left pointing label\"</span>&gt;</span></span><br><span class=\"line\">                                方法论 <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"detail\"</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui teal basic left pointing label\"</span>&gt;</span></span><br><span class=\"line\">                                方法论 <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"detail\"</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui teal basic left pointing label\"</span>&gt;</span></span><br><span class=\"line\">                                方法论 <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"detail\"</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui segments\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui secondary segment\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"bookmark icon\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span>最新推荐</span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui segment\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span> &gt;</span>用户故事<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui segment\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span> &gt;</span>用户故事<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui segment\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">target</span>=<span class=\"string\">\"_blank\"</span> &gt;</span>用户故事<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--二维码--&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--horizontal divider 左右线中间字--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">h4</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui horizontal divider header\"</span>&gt;</span></span><br><span class=\"line\">                    扫码关注我</span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui centered card\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 11em\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../static/images/avatar.jpg\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ui rounded image\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>同列左右布局可以采用：two column grid 内嵌column和right aligned column的方式<br>一个segments内可以嵌套多个segment</p>\n"},{"title":"爬虫是咋回事","date":"2019-10-31T08:46:19.000Z","_content":"## 背景\n之前零零碎碎接触过几次爬虫，有的是公开课，有的是实体课。老师都是偏实践，对于理论的部分都是一笔带过，所以对于那些库都是一知半解。自己也想写一些东西，尽可能在吸收那些大佬的总结的同时，加入一些自己的理解。把大佬一越而过，而我们要挣扎很久的坑铺平。\n\n\n这样学的知识更像是一盘散沙，我会简单地使用这些函数去实现一些功能，但却不清楚它们之间的关系，遇到一些复杂的问题就很难去处理。系统地学习虽然比较耗时，但是会对整个体系有个了解，而这在你遇到一些问题的时候会发挥重要作用。\n\n网上教程的质量参差不齐，而且代码案例爬取的网站的结构也可能随着时间的推移而改变，对于初学者来说是个不小的挑战。\n\n我看的是嵩天老师的[Python网络爬虫与信息提取](https://www.icourse163.org/learn/BIT-1001870001)，嵩天老师讲的比较通俗易懂，不需要有特别扎实的Python基础也能听懂。\n## 遇到的问题\n- 爬取网页，程序没有反应：可能是网络连接问题，可以用通用代码架构来提高爬虫的可靠性\n- F12开发者工具-Network选项卡里可以看的文本但是爬取的文本却没有：网站防爬机制，可以定义Headers,Cookie等解决\n\n\n##  爬虫原理\n\n对于非异步加载的网站，一般都可以通过requests库和BeautifulSoup库爬取信息\n1. 获取网页的源代码：通过Requests库，来获取网页的HTML代码\n2. 解析网页代码获得期望的数据：通过BeautifulSoup库解析网页源代码，把我们需要的信息按照一定规则提取出来\n## requests库\nrequests库有7个主要方法，后6个方法都是对request方法的封装（使用更方便）\n\n![嵩天](pythonWebSpider/1.png)\n\n6个方法对应的就是HTTP协议对资源的操作\n\n![嵩天](pythonWebSpider/2.png)\n\nHTTP请求状态：status_code 200表示成功，返回其他值说明连接出现问题\n``` python\nr = requests.get(url) #url传入爬取的网址\nprint(r.status_code)  #200表示连接成功\n```\n爬虫通用框架：网络连接可能出现各种异常，所以我们可以用try-except处理异常，增强代码可靠性\n``` python\nimport requests  # 导入requests库，用于获得网页源代码\n\ndef getHTMLText(url):\n    try:\n        r = requests.get(url, timeout=30) # 设置超时时间为30毫秒\n        r.raise_for_status() # 这个方法就是判断status_code是否为200，否的话引发HTTPError异常\n        r.encoding = r.apparent_encoding\n        return r.text # 返回爬取到的文本\n    except:\n        return \"产生异常\"\n```\n\n编码：如果header没有chartset指定编码，默认就是ISO-8859-1，这个编码不能解析中文，可能会出现乱码，而apparent_encoding会根据内容猜测编码，所以我们一般把编码设置为apparent_encoding\n``` python\nr.encoding = r.apparent_encoding\n```\n## BeautifulSoup库\nBeautifulSoup使用pip安装要注意，如果没有加末尾的4，实际安装的是BeautifulSoup3 \n``` bash\npip insatll beautifulsoup4\n```\n在import的时候也要注意，从bs4库(beautifulsoup4)中引入BeautifulSoup这个类\n``` python\nfrom bs4 import BeautifulSoup\n#注意B和S是大写\n```\n创建一个BeautifulSoup对象，传入的一个参数是需要解析的HTML或者XML文档，第二个参数是使用的解析器，这里需要lxml，需要安装一下\n``` bash\npip install lxml\n```\n\n``` python\nsoup = BeautifulSoup(html, 'lxml')\n```\n\nBeautifulSoup类的基本元素：\n* Tag：标签，HTML中由<>和</>构成的那些标签\n* Name：就是标签的名字，a标签、p标签\n* Attributes：标签的属性\n* NavigableString：标签的<>和</>之间的文字\n* Comment：HTML中的注释 \n\n爬取数据需要先找到数据对应Tag标签，而Name,Attributes,NavigableString,Comment就是围绕着Tag标签，Comment相对来说用的少\n\nHTML标签树遍历：\n* 下行遍历：.contents  .children  .descendants\n* 上行遍历：.parent  .parents\n* 平行遍历：.next_sibling  .next_siblings  .previous_sibling  .previous_sibling\n\n有复数含义的属性返回的都是列表，而像.parent .next_sibling  .previous_sibling 这些都是返回一个Tag标签节点 <class 'bs4.element.Tag'> 或者是一个字符串节点（有可能是\\n）,在遍历这些列表的时候如果没有判断类型，使用的时候可能会报错\n\n>TypeError: 'NavigableString' object is not callable\n\nfind_all( )方法：\n* 可检索标签名、标签属性、标签内的字符串，返回一个列表\n* 还有find( ),find_parent( ),find_parents( )等方法\n* 因为dind_all比较常用，所以对象是Tag或者是soup都可以省略find_all,<tag>find_all(...)等价于<tag>(...),soup.find_all(..)等价于soup(...)\n## 爬取大学排名实例\n爬取最好大学网的大学排名数据，将排名、学校名称、地区输出到屏幕\n\n![爬取大学排名效果](pythonWebSpider/3.png)\n\n### 遇到的问题\n* 遍历每个tr获取每个大学信息，出现object is not callable\n* 输出到屏幕排版问题\n\n### 分析网页结构\nChrome浏览器打开[最好大学网的网页](http://zuihaodaxue.com/zuihaodaxuepaiming2019.html)，按F12打开开发者工具\n\n![Chrome开发者工具](pythonWebSpider/4.png)\n\n需要刷新一下网页才会显示，双击这个document文件\n\n![Document文件](pythonWebSpider/5.png)\n\n选择Response选项卡就可以看到HTML代码，全选复制到编辑器里\n\n![VScode](pythonWebSpider/6.png)\n\n排名的信息在tbody标签里，每一个tr标签里面都是一所大学的信息，每一个td标签就是每所大学具体的信息。我们可以遍历tbody里面的每个tr标签，然后把每所大学的信息都保存在list里。\n\n``` python\nsoup = BeautifulSoup(html, 'html.parser')\n    for tr in soup.find('tbody').children:\n        if isinstance(tr, bs4.element.Tag):\n            # import bs4 才能使用对应的标签定义\n            tds = tr('td')  # 查询tr 中的td标签\n            ulist.append([tds[0].string, tds[1].string, tds[2].string])\n```\n\n在遍历的时候报错,会遇到一个问题：\n\n>发生异常: TypeError'NavigableString' object is not callable\n\n![comment](pythonWebSpider/7.png)\n\n原因是：HTML代码tbody标签中最后有一段Comment,而Comment对象和NavigableString对象不能像Tag对象一样被调用，所以我们在遍历时需要对类型进行判断，判断是否为：bs4.element.Tag\n### 排版问题\n在输出时候中文排版会出现一些小问题\n![排版错误](pythonWebSpider/8.png)\n\n``` python\ndef printUnivList(ulist, num):\n    print(\"{:^10}\\t{:^6}\\t{:^10}\".format(\"排名\", \"学校名称\", \"总分\"))\n\n    for i in range(num):\n        u = ulist[i]\n        print(\"{:^10}\\t{:^6}\\t{:^10}\".format(u[0], u[1], u[2]))\n```\n\n原因就是我们在使用format方法在我们定义好的布局里填充大学信息的时候，排版默认使用西文的空格，这样会导致排版错误。\n\n``` python\ndef printUnivList(ulist, num):\n    tplt = \"{0:^10}\\t{1:{3}^10}\\t{2:^10}\"\n    print(tplt.format(\"排名\", \"学校名称\", \"总分\", chr(12288)))\n    # 使用中文空格填充\n\n    for i in range(num):\n        u = ulist[i]\n        # print(u)\n        print(tplt.format(u[0], u[1], u[2], chr(12288)))\n```\n\n我们可以使用中文空格来进行填充，这样可以解决排版问题，chr(12288)就是中文空格\n\n``` python\ntplt = \"{0:^10}\\t{1:{3}^10}\\t{2:^10}\"\nprint(tplt.format(u[0], u[1], u[2], chr(12288)))\n\n# 这个tplt就是我们定义每行的模板，{}里面就是要填充的内容\n# 冒号前面是填充内容的索引号，^10 ^的表居中对齐10代表宽度为10\n# \\t 表示一个制表符，在冒号后面是填充字符，不指定默认使用西文空格\n# 这里我们指定{3},就是使用索引为3的 chr(12288) 来填充\n\n\n```\n\n\n### 具体代码\n\n先把大体的框架写完\n``` python\nimport requests\nfrom bs4 import BeautifulSoup\n\n\ndef getHTMLText(url):\n    pass\n\n\ndef fillUnivList(ulist, html):\n    pass\n\n\ndef printUnivList(ulist, num):\n    pass\n\n\ndef main():\n    uinfo = []\n    url = 'http://zuihaodaxue.com/zuihaodaxuepaiming2019.html'\n    html = getHTMLText(url)\n    fillUnivList(uinfo, html)\n    printUnivList(uinfo, 20)  # 爬取前20名\n\n\nmain()\n```\n\n再填充每个具体的方法\n\n``` python\nimport requests\nfrom bs4 import BeautifulSoup\nimport bs4\n\n\ndef getHTMLText(url):\n    try:\n        r = requests.get(url, timeout=30)\n        r.raise_for_status()\n        r.encoding = r.apparent_encoding\n        return r.text\n    except:\n        return \"\"\n\n\ndef fillUnivList(ulist, html):\n    soup = BeautifulSoup(html, 'html.parser')\n    for tr in soup.find('tbody').children:\n        if isinstance(tr, bs4.element.Tag):\n            # import bs4 才能使用对应的标签定义\n            tds = tr('td')  # 查询tr 中的td标签\n            ulist.append([tds[0].string, tds[1].string, tds[2].string])\n\n\n# def printUnivList(ulist, num):\n#     print(\"{:^10}\\t{:^6}\\t{:^10}\".format(\"排名\", \"学校名称\", \"总分\"))\n\n#     for i in range(num):\n#         u = ulist[i]\n#         print(\"{:^10}\\t{:^6}\\t{:^10}\".format(u[0], u[1], u[2]))\n\n\ndef printUnivList(ulist, num):\n    tplt = \"{0:^10}\\t{1:{3}^10}\\t{2:^10}\"\n    print(tplt.format(\"排名\", \"学校名称\", \"总分\", chr(12288)))\n    # 使用中文空格填充\n\n    for i in range(num):\n        u = ulist[i]\n        # print(u)\n        print(tplt.format(u[0], u[1], u[2], chr(12288)))\n\n\ndef main():\n    uinfo = []\n    url = 'http://zuihaodaxue.com/zuihaodaxuepaiming2019.html'\n    html = getHTMLText(url)\n    fillUnivList(uinfo, html)\n    printUnivList(uinfo, 20) \n\n\nmain()\n```","source":"_posts/python-web-spider.md","raw":"---\ntitle: 爬虫是咋回事\ndate: 2019-10-31 16:46:19\ncategories: Python笔记\n---\n## 背景\n之前零零碎碎接触过几次爬虫，有的是公开课，有的是实体课。老师都是偏实践，对于理论的部分都是一笔带过，所以对于那些库都是一知半解。自己也想写一些东西，尽可能在吸收那些大佬的总结的同时，加入一些自己的理解。把大佬一越而过，而我们要挣扎很久的坑铺平。\n\n\n这样学的知识更像是一盘散沙，我会简单地使用这些函数去实现一些功能，但却不清楚它们之间的关系，遇到一些复杂的问题就很难去处理。系统地学习虽然比较耗时，但是会对整个体系有个了解，而这在你遇到一些问题的时候会发挥重要作用。\n\n网上教程的质量参差不齐，而且代码案例爬取的网站的结构也可能随着时间的推移而改变，对于初学者来说是个不小的挑战。\n\n我看的是嵩天老师的[Python网络爬虫与信息提取](https://www.icourse163.org/learn/BIT-1001870001)，嵩天老师讲的比较通俗易懂，不需要有特别扎实的Python基础也能听懂。\n## 遇到的问题\n- 爬取网页，程序没有反应：可能是网络连接问题，可以用通用代码架构来提高爬虫的可靠性\n- F12开发者工具-Network选项卡里可以看的文本但是爬取的文本却没有：网站防爬机制，可以定义Headers,Cookie等解决\n\n\n##  爬虫原理\n\n对于非异步加载的网站，一般都可以通过requests库和BeautifulSoup库爬取信息\n1. 获取网页的源代码：通过Requests库，来获取网页的HTML代码\n2. 解析网页代码获得期望的数据：通过BeautifulSoup库解析网页源代码，把我们需要的信息按照一定规则提取出来\n## requests库\nrequests库有7个主要方法，后6个方法都是对request方法的封装（使用更方便）\n\n![嵩天](pythonWebSpider/1.png)\n\n6个方法对应的就是HTTP协议对资源的操作\n\n![嵩天](pythonWebSpider/2.png)\n\nHTTP请求状态：status_code 200表示成功，返回其他值说明连接出现问题\n``` python\nr = requests.get(url) #url传入爬取的网址\nprint(r.status_code)  #200表示连接成功\n```\n爬虫通用框架：网络连接可能出现各种异常，所以我们可以用try-except处理异常，增强代码可靠性\n``` python\nimport requests  # 导入requests库，用于获得网页源代码\n\ndef getHTMLText(url):\n    try:\n        r = requests.get(url, timeout=30) # 设置超时时间为30毫秒\n        r.raise_for_status() # 这个方法就是判断status_code是否为200，否的话引发HTTPError异常\n        r.encoding = r.apparent_encoding\n        return r.text # 返回爬取到的文本\n    except:\n        return \"产生异常\"\n```\n\n编码：如果header没有chartset指定编码，默认就是ISO-8859-1，这个编码不能解析中文，可能会出现乱码，而apparent_encoding会根据内容猜测编码，所以我们一般把编码设置为apparent_encoding\n``` python\nr.encoding = r.apparent_encoding\n```\n## BeautifulSoup库\nBeautifulSoup使用pip安装要注意，如果没有加末尾的4，实际安装的是BeautifulSoup3 \n``` bash\npip insatll beautifulsoup4\n```\n在import的时候也要注意，从bs4库(beautifulsoup4)中引入BeautifulSoup这个类\n``` python\nfrom bs4 import BeautifulSoup\n#注意B和S是大写\n```\n创建一个BeautifulSoup对象，传入的一个参数是需要解析的HTML或者XML文档，第二个参数是使用的解析器，这里需要lxml，需要安装一下\n``` bash\npip install lxml\n```\n\n``` python\nsoup = BeautifulSoup(html, 'lxml')\n```\n\nBeautifulSoup类的基本元素：\n* Tag：标签，HTML中由<>和</>构成的那些标签\n* Name：就是标签的名字，a标签、p标签\n* Attributes：标签的属性\n* NavigableString：标签的<>和</>之间的文字\n* Comment：HTML中的注释 \n\n爬取数据需要先找到数据对应Tag标签，而Name,Attributes,NavigableString,Comment就是围绕着Tag标签，Comment相对来说用的少\n\nHTML标签树遍历：\n* 下行遍历：.contents  .children  .descendants\n* 上行遍历：.parent  .parents\n* 平行遍历：.next_sibling  .next_siblings  .previous_sibling  .previous_sibling\n\n有复数含义的属性返回的都是列表，而像.parent .next_sibling  .previous_sibling 这些都是返回一个Tag标签节点 <class 'bs4.element.Tag'> 或者是一个字符串节点（有可能是\\n）,在遍历这些列表的时候如果没有判断类型，使用的时候可能会报错\n\n>TypeError: 'NavigableString' object is not callable\n\nfind_all( )方法：\n* 可检索标签名、标签属性、标签内的字符串，返回一个列表\n* 还有find( ),find_parent( ),find_parents( )等方法\n* 因为dind_all比较常用，所以对象是Tag或者是soup都可以省略find_all,<tag>find_all(...)等价于<tag>(...),soup.find_all(..)等价于soup(...)\n## 爬取大学排名实例\n爬取最好大学网的大学排名数据，将排名、学校名称、地区输出到屏幕\n\n![爬取大学排名效果](pythonWebSpider/3.png)\n\n### 遇到的问题\n* 遍历每个tr获取每个大学信息，出现object is not callable\n* 输出到屏幕排版问题\n\n### 分析网页结构\nChrome浏览器打开[最好大学网的网页](http://zuihaodaxue.com/zuihaodaxuepaiming2019.html)，按F12打开开发者工具\n\n![Chrome开发者工具](pythonWebSpider/4.png)\n\n需要刷新一下网页才会显示，双击这个document文件\n\n![Document文件](pythonWebSpider/5.png)\n\n选择Response选项卡就可以看到HTML代码，全选复制到编辑器里\n\n![VScode](pythonWebSpider/6.png)\n\n排名的信息在tbody标签里，每一个tr标签里面都是一所大学的信息，每一个td标签就是每所大学具体的信息。我们可以遍历tbody里面的每个tr标签，然后把每所大学的信息都保存在list里。\n\n``` python\nsoup = BeautifulSoup(html, 'html.parser')\n    for tr in soup.find('tbody').children:\n        if isinstance(tr, bs4.element.Tag):\n            # import bs4 才能使用对应的标签定义\n            tds = tr('td')  # 查询tr 中的td标签\n            ulist.append([tds[0].string, tds[1].string, tds[2].string])\n```\n\n在遍历的时候报错,会遇到一个问题：\n\n>发生异常: TypeError'NavigableString' object is not callable\n\n![comment](pythonWebSpider/7.png)\n\n原因是：HTML代码tbody标签中最后有一段Comment,而Comment对象和NavigableString对象不能像Tag对象一样被调用，所以我们在遍历时需要对类型进行判断，判断是否为：bs4.element.Tag\n### 排版问题\n在输出时候中文排版会出现一些小问题\n![排版错误](pythonWebSpider/8.png)\n\n``` python\ndef printUnivList(ulist, num):\n    print(\"{:^10}\\t{:^6}\\t{:^10}\".format(\"排名\", \"学校名称\", \"总分\"))\n\n    for i in range(num):\n        u = ulist[i]\n        print(\"{:^10}\\t{:^6}\\t{:^10}\".format(u[0], u[1], u[2]))\n```\n\n原因就是我们在使用format方法在我们定义好的布局里填充大学信息的时候，排版默认使用西文的空格，这样会导致排版错误。\n\n``` python\ndef printUnivList(ulist, num):\n    tplt = \"{0:^10}\\t{1:{3}^10}\\t{2:^10}\"\n    print(tplt.format(\"排名\", \"学校名称\", \"总分\", chr(12288)))\n    # 使用中文空格填充\n\n    for i in range(num):\n        u = ulist[i]\n        # print(u)\n        print(tplt.format(u[0], u[1], u[2], chr(12288)))\n```\n\n我们可以使用中文空格来进行填充，这样可以解决排版问题，chr(12288)就是中文空格\n\n``` python\ntplt = \"{0:^10}\\t{1:{3}^10}\\t{2:^10}\"\nprint(tplt.format(u[0], u[1], u[2], chr(12288)))\n\n# 这个tplt就是我们定义每行的模板，{}里面就是要填充的内容\n# 冒号前面是填充内容的索引号，^10 ^的表居中对齐10代表宽度为10\n# \\t 表示一个制表符，在冒号后面是填充字符，不指定默认使用西文空格\n# 这里我们指定{3},就是使用索引为3的 chr(12288) 来填充\n\n\n```\n\n\n### 具体代码\n\n先把大体的框架写完\n``` python\nimport requests\nfrom bs4 import BeautifulSoup\n\n\ndef getHTMLText(url):\n    pass\n\n\ndef fillUnivList(ulist, html):\n    pass\n\n\ndef printUnivList(ulist, num):\n    pass\n\n\ndef main():\n    uinfo = []\n    url = 'http://zuihaodaxue.com/zuihaodaxuepaiming2019.html'\n    html = getHTMLText(url)\n    fillUnivList(uinfo, html)\n    printUnivList(uinfo, 20)  # 爬取前20名\n\n\nmain()\n```\n\n再填充每个具体的方法\n\n``` python\nimport requests\nfrom bs4 import BeautifulSoup\nimport bs4\n\n\ndef getHTMLText(url):\n    try:\n        r = requests.get(url, timeout=30)\n        r.raise_for_status()\n        r.encoding = r.apparent_encoding\n        return r.text\n    except:\n        return \"\"\n\n\ndef fillUnivList(ulist, html):\n    soup = BeautifulSoup(html, 'html.parser')\n    for tr in soup.find('tbody').children:\n        if isinstance(tr, bs4.element.Tag):\n            # import bs4 才能使用对应的标签定义\n            tds = tr('td')  # 查询tr 中的td标签\n            ulist.append([tds[0].string, tds[1].string, tds[2].string])\n\n\n# def printUnivList(ulist, num):\n#     print(\"{:^10}\\t{:^6}\\t{:^10}\".format(\"排名\", \"学校名称\", \"总分\"))\n\n#     for i in range(num):\n#         u = ulist[i]\n#         print(\"{:^10}\\t{:^6}\\t{:^10}\".format(u[0], u[1], u[2]))\n\n\ndef printUnivList(ulist, num):\n    tplt = \"{0:^10}\\t{1:{3}^10}\\t{2:^10}\"\n    print(tplt.format(\"排名\", \"学校名称\", \"总分\", chr(12288)))\n    # 使用中文空格填充\n\n    for i in range(num):\n        u = ulist[i]\n        # print(u)\n        print(tplt.format(u[0], u[1], u[2], chr(12288)))\n\n\ndef main():\n    uinfo = []\n    url = 'http://zuihaodaxue.com/zuihaodaxuepaiming2019.html'\n    html = getHTMLText(url)\n    fillUnivList(uinfo, html)\n    printUnivList(uinfo, 20) \n\n\nmain()\n```","slug":"python-web-spider","published":1,"updated":"2020-06-13T02:55:34.816Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke3x9g68001mzgvue1nm44ed","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>之前零零碎碎接触过几次爬虫，有的是公开课，有的是实体课。老师都是偏实践，对于理论的部分都是一笔带过，所以对于那些库都是一知半解。自己也想写一些东西，尽可能在吸收那些大佬的总结的同时，加入一些自己的理解。把大佬一越而过，而我们要挣扎很久的坑铺平。</p>\n<p>这样学的知识更像是一盘散沙，我会简单地使用这些函数去实现一些功能，但却不清楚它们之间的关系，遇到一些复杂的问题就很难去处理。系统地学习虽然比较耗时，但是会对整个体系有个了解，而这在你遇到一些问题的时候会发挥重要作用。</p>\n<p>网上教程的质量参差不齐，而且代码案例爬取的网站的结构也可能随着时间的推移而改变，对于初学者来说是个不小的挑战。</p>\n<p>我看的是嵩天老师的<a href=\"https://www.icourse163.org/learn/BIT-1001870001\" target=\"_blank\" rel=\"noopener\">Python网络爬虫与信息提取</a>，嵩天老师讲的比较通俗易懂，不需要有特别扎实的Python基础也能听懂。</p>\n<h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><ul>\n<li>爬取网页，程序没有反应：可能是网络连接问题，可以用通用代码架构来提高爬虫的可靠性</li>\n<li>F12开发者工具-Network选项卡里可以看的文本但是爬取的文本却没有：网站防爬机制，可以定义Headers,Cookie等解决</li>\n</ul>\n<h2 id=\"爬虫原理\"><a href=\"#爬虫原理\" class=\"headerlink\" title=\"爬虫原理\"></a>爬虫原理</h2><p>对于非异步加载的网站，一般都可以通过requests库和BeautifulSoup库爬取信息</p>\n<ol>\n<li>获取网页的源代码：通过Requests库，来获取网页的HTML代码</li>\n<li>解析网页代码获得期望的数据：通过BeautifulSoup库解析网页源代码，把我们需要的信息按照一定规则提取出来<h2 id=\"requests库\"><a href=\"#requests库\" class=\"headerlink\" title=\"requests库\"></a>requests库</h2>requests库有7个主要方法，后6个方法都是对request方法的封装（使用更方便）</li>\n</ol>\n<p><img src=\"/2019/10/31/python-web-spider/1.png\" alt=\"嵩天\"></p>\n<p>6个方法对应的就是HTTP协议对资源的操作</p>\n<p><img src=\"/2019/10/31/python-web-spider/2.png\" alt=\"嵩天\"></p>\n<p>HTTP请求状态：status_code 200表示成功，返回其他值说明连接出现问题</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r = requests.get(url) <span class=\"comment\">#url传入爬取的网址</span></span><br><span class=\"line\">print(r.status_code)  <span class=\"comment\">#200表示连接成功</span></span><br></pre></td></tr></table></figure>\n<p>爬虫通用框架：网络连接可能出现各种异常，所以我们可以用try-except处理异常，增强代码可靠性</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests  <span class=\"comment\"># 导入requests库，用于获得网页源代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getHTMLText</span><span class=\"params\">(url)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        r = requests.get(url, timeout=<span class=\"number\">30</span>) <span class=\"comment\"># 设置超时时间为30毫秒</span></span><br><span class=\"line\">        r.raise_for_status() <span class=\"comment\"># 这个方法就是判断status_code是否为200，否的话引发HTTPError异常</span></span><br><span class=\"line\">        r.encoding = r.apparent_encoding</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r.text <span class=\"comment\"># 返回爬取到的文本</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"产生异常\"</span></span><br></pre></td></tr></table></figure>\n\n<p>编码：如果header没有chartset指定编码，默认就是ISO-8859-1，这个编码不能解析中文，可能会出现乱码，而apparent_encoding会根据内容猜测编码，所以我们一般把编码设置为apparent_encoding</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r.encoding = r.apparent_encoding</span><br></pre></td></tr></table></figure>\n<h2 id=\"BeautifulSoup库\"><a href=\"#BeautifulSoup库\" class=\"headerlink\" title=\"BeautifulSoup库\"></a>BeautifulSoup库</h2><p>BeautifulSoup使用pip安装要注意，如果没有加末尾的4，实际安装的是BeautifulSoup3 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip insatll beautifulsoup4</span><br></pre></td></tr></table></figure>\n<p>在import的时候也要注意，从bs4库(beautifulsoup4)中引入BeautifulSoup这个类</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"><span class=\"comment\">#注意B和S是大写</span></span><br></pre></td></tr></table></figure>\n<p>创建一个BeautifulSoup对象，传入的一个参数是需要解析的HTML或者XML文档，第二个参数是使用的解析器，这里需要lxml，需要安装一下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install lxml</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">soup = BeautifulSoup(html, <span class=\"string\">'lxml'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>BeautifulSoup类的基本元素：</p>\n<ul>\n<li>Tag：标签，HTML中由&lt;&gt;和&lt;/&gt;构成的那些标签</li>\n<li>Name：就是标签的名字，a标签、p标签</li>\n<li>Attributes：标签的属性</li>\n<li>NavigableString：标签的&lt;&gt;和&lt;/&gt;之间的文字</li>\n<li>Comment：HTML中的注释 </li>\n</ul>\n<p>爬取数据需要先找到数据对应Tag标签，而Name,Attributes,NavigableString,Comment就是围绕着Tag标签，Comment相对来说用的少</p>\n<p>HTML标签树遍历：</p>\n<ul>\n<li>下行遍历：.contents  .children  .descendants</li>\n<li>上行遍历：.parent  .parents</li>\n<li>平行遍历：.next_sibling  .next_siblings  .previous_sibling  .previous_sibling</li>\n</ul>\n<p>有复数含义的属性返回的都是列表，而像.parent .next_sibling  .previous_sibling 这些都是返回一个Tag标签节点 &lt;class ‘bs4.element.Tag’&gt; 或者是一个字符串节点（有可能是\\n）,在遍历这些列表的时候如果没有判断类型，使用的时候可能会报错</p>\n<blockquote>\n<p>TypeError: ‘NavigableString’ object is not callable</p>\n</blockquote>\n<p>find_all( )方法：</p>\n<ul>\n<li>可检索标签名、标签属性、标签内的字符串，返回一个列表</li>\n<li>还有find( ),find_parent( ),find_parents( )等方法</li>\n<li>因为dind_all比较常用，所以对象是Tag或者是soup都可以省略find_all,<tag>find_all(…)等价于<tag>(…),soup.find_all(..)等价于soup(…)<h2 id=\"爬取大学排名实例\"><a href=\"#爬取大学排名实例\" class=\"headerlink\" title=\"爬取大学排名实例\"></a>爬取大学排名实例</h2>爬取最好大学网的大学排名数据，将排名、学校名称、地区输出到屏幕</tag></tag></li>\n</ul>\n<p><img src=\"/2019/10/31/python-web-spider/3.png\" alt=\"爬取大学排名效果\"></p>\n<h3 id=\"遇到的问题-1\"><a href=\"#遇到的问题-1\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h3><ul>\n<li>遍历每个tr获取每个大学信息，出现object is not callable</li>\n<li>输出到屏幕排版问题</li>\n</ul>\n<h3 id=\"分析网页结构\"><a href=\"#分析网页结构\" class=\"headerlink\" title=\"分析网页结构\"></a>分析网页结构</h3><p>Chrome浏览器打开<a href=\"http://zuihaodaxue.com/zuihaodaxuepaiming2019.html\" target=\"_blank\" rel=\"noopener\">最好大学网的网页</a>，按F12打开开发者工具</p>\n<p><img src=\"/2019/10/31/python-web-spider/4.png\" alt=\"Chrome开发者工具\"></p>\n<p>需要刷新一下网页才会显示，双击这个document文件</p>\n<p><img src=\"/2019/10/31/python-web-spider/5.png\" alt=\"Document文件\"></p>\n<p>选择Response选项卡就可以看到HTML代码，全选复制到编辑器里</p>\n<p><img src=\"/2019/10/31/python-web-spider/6.png\" alt=\"VScode\"></p>\n<p>排名的信息在tbody标签里，每一个tr标签里面都是一所大学的信息，每一个td标签就是每所大学具体的信息。我们可以遍历tbody里面的每个tr标签，然后把每所大学的信息都保存在list里。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">soup = BeautifulSoup(html, <span class=\"string\">'html.parser'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> tr <span class=\"keyword\">in</span> soup.find(<span class=\"string\">'tbody'</span>).children:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> isinstance(tr, bs4.element.Tag):</span><br><span class=\"line\">            <span class=\"comment\"># import bs4 才能使用对应的标签定义</span></span><br><span class=\"line\">            tds = tr(<span class=\"string\">'td'</span>)  <span class=\"comment\"># 查询tr 中的td标签</span></span><br><span class=\"line\">            ulist.append([tds[<span class=\"number\">0</span>].string, tds[<span class=\"number\">1</span>].string, tds[<span class=\"number\">2</span>].string])</span><br></pre></td></tr></table></figure>\n\n<p>在遍历的时候报错,会遇到一个问题：</p>\n<blockquote>\n<p>发生异常: TypeError’NavigableString’ object is not callable</p>\n</blockquote>\n<p><img src=\"/2019/10/31/python-web-spider/7.png\" alt=\"comment\"></p>\n<p>原因是：HTML代码tbody标签中最后有一段Comment,而Comment对象和NavigableString对象不能像Tag对象一样被调用，所以我们在遍历时需要对类型进行判断，判断是否为：bs4.element.Tag</p>\n<h3 id=\"排版问题\"><a href=\"#排版问题\" class=\"headerlink\" title=\"排版问题\"></a>排版问题</h3><p>在输出时候中文排版会出现一些小问题<br><img src=\"/2019/10/31/python-web-spider/8.png\" alt=\"排版错误\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printUnivList</span><span class=\"params\">(ulist, num)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"&#123;:^10&#125;\\t&#123;:^6&#125;\\t&#123;:^10&#125;\"</span>.format(<span class=\"string\">\"排名\"</span>, <span class=\"string\">\"学校名称\"</span>, <span class=\"string\">\"总分\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(num):</span><br><span class=\"line\">        u = ulist[i]</span><br><span class=\"line\">        print(<span class=\"string\">\"&#123;:^10&#125;\\t&#123;:^6&#125;\\t&#123;:^10&#125;\"</span>.format(u[<span class=\"number\">0</span>], u[<span class=\"number\">1</span>], u[<span class=\"number\">2</span>]))</span><br></pre></td></tr></table></figure>\n\n<p>原因就是我们在使用format方法在我们定义好的布局里填充大学信息的时候，排版默认使用西文的空格，这样会导致排版错误。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printUnivList</span><span class=\"params\">(ulist, num)</span>:</span></span><br><span class=\"line\">    tplt = <span class=\"string\">\"&#123;0:^10&#125;\\t&#123;1:&#123;3&#125;^10&#125;\\t&#123;2:^10&#125;\"</span></span><br><span class=\"line\">    print(tplt.format(<span class=\"string\">\"排名\"</span>, <span class=\"string\">\"学校名称\"</span>, <span class=\"string\">\"总分\"</span>, chr(<span class=\"number\">12288</span>)))</span><br><span class=\"line\">    <span class=\"comment\"># 使用中文空格填充</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(num):</span><br><span class=\"line\">        u = ulist[i]</span><br><span class=\"line\">        <span class=\"comment\"># print(u)</span></span><br><span class=\"line\">        print(tplt.format(u[<span class=\"number\">0</span>], u[<span class=\"number\">1</span>], u[<span class=\"number\">2</span>], chr(<span class=\"number\">12288</span>)))</span><br></pre></td></tr></table></figure>\n\n<p>我们可以使用中文空格来进行填充，这样可以解决排版问题，chr(12288)就是中文空格</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tplt = <span class=\"string\">\"&#123;0:^10&#125;\\t&#123;1:&#123;3&#125;^10&#125;\\t&#123;2:^10&#125;\"</span></span><br><span class=\"line\">print(tplt.format(u[<span class=\"number\">0</span>], u[<span class=\"number\">1</span>], u[<span class=\"number\">2</span>], chr(<span class=\"number\">12288</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 这个tplt就是我们定义每行的模板，&#123;&#125;里面就是要填充的内容</span></span><br><span class=\"line\"><span class=\"comment\"># 冒号前面是填充内容的索引号，^10 ^的表居中对齐10代表宽度为10</span></span><br><span class=\"line\"><span class=\"comment\"># \\t 表示一个制表符，在冒号后面是填充字符，不指定默认使用西文空格</span></span><br><span class=\"line\"><span class=\"comment\"># 这里我们指定&#123;3&#125;,就是使用索引为3的 chr(12288) 来填充</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"具体代码\"><a href=\"#具体代码\" class=\"headerlink\" title=\"具体代码\"></a>具体代码</h3><p>先把大体的框架写完</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getHTMLText</span><span class=\"params\">(url)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fillUnivList</span><span class=\"params\">(ulist, html)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printUnivList</span><span class=\"params\">(ulist, num)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    uinfo = []</span><br><span class=\"line\">    url = <span class=\"string\">'http://zuihaodaxue.com/zuihaodaxuepaiming2019.html'</span></span><br><span class=\"line\">    html = getHTMLText(url)</span><br><span class=\"line\">    fillUnivList(uinfo, html)</span><br><span class=\"line\">    printUnivList(uinfo, <span class=\"number\">20</span>)  <span class=\"comment\"># 爬取前20名</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n<p>再填充每个具体的方法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"><span class=\"keyword\">import</span> bs4</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getHTMLText</span><span class=\"params\">(url)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        r = requests.get(url, timeout=<span class=\"number\">30</span>)</span><br><span class=\"line\">        r.raise_for_status()</span><br><span class=\"line\">        r.encoding = r.apparent_encoding</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r.text</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fillUnivList</span><span class=\"params\">(ulist, html)</span>:</span></span><br><span class=\"line\">    soup = BeautifulSoup(html, <span class=\"string\">'html.parser'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> tr <span class=\"keyword\">in</span> soup.find(<span class=\"string\">'tbody'</span>).children:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> isinstance(tr, bs4.element.Tag):</span><br><span class=\"line\">            <span class=\"comment\"># import bs4 才能使用对应的标签定义</span></span><br><span class=\"line\">            tds = tr(<span class=\"string\">'td'</span>)  <span class=\"comment\"># 查询tr 中的td标签</span></span><br><span class=\"line\">            ulist.append([tds[<span class=\"number\">0</span>].string, tds[<span class=\"number\">1</span>].string, tds[<span class=\"number\">2</span>].string])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># def printUnivList(ulist, num):</span></span><br><span class=\"line\"><span class=\"comment\">#     print(\"&#123;:^10&#125;\\t&#123;:^6&#125;\\t&#123;:^10&#125;\".format(\"排名\", \"学校名称\", \"总分\"))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#     for i in range(num):</span></span><br><span class=\"line\"><span class=\"comment\">#         u = ulist[i]</span></span><br><span class=\"line\"><span class=\"comment\">#         print(\"&#123;:^10&#125;\\t&#123;:^6&#125;\\t&#123;:^10&#125;\".format(u[0], u[1], u[2]))</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printUnivList</span><span class=\"params\">(ulist, num)</span>:</span></span><br><span class=\"line\">    tplt = <span class=\"string\">\"&#123;0:^10&#125;\\t&#123;1:&#123;3&#125;^10&#125;\\t&#123;2:^10&#125;\"</span></span><br><span class=\"line\">    print(tplt.format(<span class=\"string\">\"排名\"</span>, <span class=\"string\">\"学校名称\"</span>, <span class=\"string\">\"总分\"</span>, chr(<span class=\"number\">12288</span>)))</span><br><span class=\"line\">    <span class=\"comment\"># 使用中文空格填充</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(num):</span><br><span class=\"line\">        u = ulist[i]</span><br><span class=\"line\">        <span class=\"comment\"># print(u)</span></span><br><span class=\"line\">        print(tplt.format(u[<span class=\"number\">0</span>], u[<span class=\"number\">1</span>], u[<span class=\"number\">2</span>], chr(<span class=\"number\">12288</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    uinfo = []</span><br><span class=\"line\">    url = <span class=\"string\">'http://zuihaodaxue.com/zuihaodaxuepaiming2019.html'</span></span><br><span class=\"line\">    html = getHTMLText(url)</span><br><span class=\"line\">    fillUnivList(uinfo, html)</span><br><span class=\"line\">    printUnivList(uinfo, <span class=\"number\">20</span>) </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>之前零零碎碎接触过几次爬虫，有的是公开课，有的是实体课。老师都是偏实践，对于理论的部分都是一笔带过，所以对于那些库都是一知半解。自己也想写一些东西，尽可能在吸收那些大佬的总结的同时，加入一些自己的理解。把大佬一越而过，而我们要挣扎很久的坑铺平。</p>\n<p>这样学的知识更像是一盘散沙，我会简单地使用这些函数去实现一些功能，但却不清楚它们之间的关系，遇到一些复杂的问题就很难去处理。系统地学习虽然比较耗时，但是会对整个体系有个了解，而这在你遇到一些问题的时候会发挥重要作用。</p>\n<p>网上教程的质量参差不齐，而且代码案例爬取的网站的结构也可能随着时间的推移而改变，对于初学者来说是个不小的挑战。</p>\n<p>我看的是嵩天老师的<a href=\"https://www.icourse163.org/learn/BIT-1001870001\" target=\"_blank\" rel=\"noopener\">Python网络爬虫与信息提取</a>，嵩天老师讲的比较通俗易懂，不需要有特别扎实的Python基础也能听懂。</p>\n<h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><ul>\n<li>爬取网页，程序没有反应：可能是网络连接问题，可以用通用代码架构来提高爬虫的可靠性</li>\n<li>F12开发者工具-Network选项卡里可以看的文本但是爬取的文本却没有：网站防爬机制，可以定义Headers,Cookie等解决</li>\n</ul>\n<h2 id=\"爬虫原理\"><a href=\"#爬虫原理\" class=\"headerlink\" title=\"爬虫原理\"></a>爬虫原理</h2><p>对于非异步加载的网站，一般都可以通过requests库和BeautifulSoup库爬取信息</p>\n<ol>\n<li>获取网页的源代码：通过Requests库，来获取网页的HTML代码</li>\n<li>解析网页代码获得期望的数据：通过BeautifulSoup库解析网页源代码，把我们需要的信息按照一定规则提取出来<h2 id=\"requests库\"><a href=\"#requests库\" class=\"headerlink\" title=\"requests库\"></a>requests库</h2>requests库有7个主要方法，后6个方法都是对request方法的封装（使用更方便）</li>\n</ol>\n<p><img src=\"/2019/10/31/python-web-spider/1.png\" alt=\"嵩天\"></p>\n<p>6个方法对应的就是HTTP协议对资源的操作</p>\n<p><img src=\"/2019/10/31/python-web-spider/2.png\" alt=\"嵩天\"></p>\n<p>HTTP请求状态：status_code 200表示成功，返回其他值说明连接出现问题</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r = requests.get(url) <span class=\"comment\">#url传入爬取的网址</span></span><br><span class=\"line\">print(r.status_code)  <span class=\"comment\">#200表示连接成功</span></span><br></pre></td></tr></table></figure>\n<p>爬虫通用框架：网络连接可能出现各种异常，所以我们可以用try-except处理异常，增强代码可靠性</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests  <span class=\"comment\"># 导入requests库，用于获得网页源代码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getHTMLText</span><span class=\"params\">(url)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        r = requests.get(url, timeout=<span class=\"number\">30</span>) <span class=\"comment\"># 设置超时时间为30毫秒</span></span><br><span class=\"line\">        r.raise_for_status() <span class=\"comment\"># 这个方法就是判断status_code是否为200，否的话引发HTTPError异常</span></span><br><span class=\"line\">        r.encoding = r.apparent_encoding</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r.text <span class=\"comment\"># 返回爬取到的文本</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"产生异常\"</span></span><br></pre></td></tr></table></figure>\n\n<p>编码：如果header没有chartset指定编码，默认就是ISO-8859-1，这个编码不能解析中文，可能会出现乱码，而apparent_encoding会根据内容猜测编码，所以我们一般把编码设置为apparent_encoding</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r.encoding = r.apparent_encoding</span><br></pre></td></tr></table></figure>\n<h2 id=\"BeautifulSoup库\"><a href=\"#BeautifulSoup库\" class=\"headerlink\" title=\"BeautifulSoup库\"></a>BeautifulSoup库</h2><p>BeautifulSoup使用pip安装要注意，如果没有加末尾的4，实际安装的是BeautifulSoup3 </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip insatll beautifulsoup4</span><br></pre></td></tr></table></figure>\n<p>在import的时候也要注意，从bs4库(beautifulsoup4)中引入BeautifulSoup这个类</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"><span class=\"comment\">#注意B和S是大写</span></span><br></pre></td></tr></table></figure>\n<p>创建一个BeautifulSoup对象，传入的一个参数是需要解析的HTML或者XML文档，第二个参数是使用的解析器，这里需要lxml，需要安装一下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install lxml</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">soup = BeautifulSoup(html, <span class=\"string\">'lxml'</span>)</span><br></pre></td></tr></table></figure>\n\n<p>BeautifulSoup类的基本元素：</p>\n<ul>\n<li>Tag：标签，HTML中由&lt;&gt;和&lt;/&gt;构成的那些标签</li>\n<li>Name：就是标签的名字，a标签、p标签</li>\n<li>Attributes：标签的属性</li>\n<li>NavigableString：标签的&lt;&gt;和&lt;/&gt;之间的文字</li>\n<li>Comment：HTML中的注释 </li>\n</ul>\n<p>爬取数据需要先找到数据对应Tag标签，而Name,Attributes,NavigableString,Comment就是围绕着Tag标签，Comment相对来说用的少</p>\n<p>HTML标签树遍历：</p>\n<ul>\n<li>下行遍历：.contents  .children  .descendants</li>\n<li>上行遍历：.parent  .parents</li>\n<li>平行遍历：.next_sibling  .next_siblings  .previous_sibling  .previous_sibling</li>\n</ul>\n<p>有复数含义的属性返回的都是列表，而像.parent .next_sibling  .previous_sibling 这些都是返回一个Tag标签节点 &lt;class ‘bs4.element.Tag’&gt; 或者是一个字符串节点（有可能是\\n）,在遍历这些列表的时候如果没有判断类型，使用的时候可能会报错</p>\n<blockquote>\n<p>TypeError: ‘NavigableString’ object is not callable</p>\n</blockquote>\n<p>find_all( )方法：</p>\n<ul>\n<li>可检索标签名、标签属性、标签内的字符串，返回一个列表</li>\n<li>还有find( ),find_parent( ),find_parents( )等方法</li>\n<li>因为dind_all比较常用，所以对象是Tag或者是soup都可以省略find_all,<tag>find_all(…)等价于<tag>(…),soup.find_all(..)等价于soup(…)<h2 id=\"爬取大学排名实例\"><a href=\"#爬取大学排名实例\" class=\"headerlink\" title=\"爬取大学排名实例\"></a>爬取大学排名实例</h2>爬取最好大学网的大学排名数据，将排名、学校名称、地区输出到屏幕</tag></tag></li>\n</ul>\n<p><img src=\"/2019/10/31/python-web-spider/3.png\" alt=\"爬取大学排名效果\"></p>\n<h3 id=\"遇到的问题-1\"><a href=\"#遇到的问题-1\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h3><ul>\n<li>遍历每个tr获取每个大学信息，出现object is not callable</li>\n<li>输出到屏幕排版问题</li>\n</ul>\n<h3 id=\"分析网页结构\"><a href=\"#分析网页结构\" class=\"headerlink\" title=\"分析网页结构\"></a>分析网页结构</h3><p>Chrome浏览器打开<a href=\"http://zuihaodaxue.com/zuihaodaxuepaiming2019.html\" target=\"_blank\" rel=\"noopener\">最好大学网的网页</a>，按F12打开开发者工具</p>\n<p><img src=\"/2019/10/31/python-web-spider/4.png\" alt=\"Chrome开发者工具\"></p>\n<p>需要刷新一下网页才会显示，双击这个document文件</p>\n<p><img src=\"/2019/10/31/python-web-spider/5.png\" alt=\"Document文件\"></p>\n<p>选择Response选项卡就可以看到HTML代码，全选复制到编辑器里</p>\n<p><img src=\"/2019/10/31/python-web-spider/6.png\" alt=\"VScode\"></p>\n<p>排名的信息在tbody标签里，每一个tr标签里面都是一所大学的信息，每一个td标签就是每所大学具体的信息。我们可以遍历tbody里面的每个tr标签，然后把每所大学的信息都保存在list里。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">soup = BeautifulSoup(html, <span class=\"string\">'html.parser'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> tr <span class=\"keyword\">in</span> soup.find(<span class=\"string\">'tbody'</span>).children:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> isinstance(tr, bs4.element.Tag):</span><br><span class=\"line\">            <span class=\"comment\"># import bs4 才能使用对应的标签定义</span></span><br><span class=\"line\">            tds = tr(<span class=\"string\">'td'</span>)  <span class=\"comment\"># 查询tr 中的td标签</span></span><br><span class=\"line\">            ulist.append([tds[<span class=\"number\">0</span>].string, tds[<span class=\"number\">1</span>].string, tds[<span class=\"number\">2</span>].string])</span><br></pre></td></tr></table></figure>\n\n<p>在遍历的时候报错,会遇到一个问题：</p>\n<blockquote>\n<p>发生异常: TypeError’NavigableString’ object is not callable</p>\n</blockquote>\n<p><img src=\"/2019/10/31/python-web-spider/7.png\" alt=\"comment\"></p>\n<p>原因是：HTML代码tbody标签中最后有一段Comment,而Comment对象和NavigableString对象不能像Tag对象一样被调用，所以我们在遍历时需要对类型进行判断，判断是否为：bs4.element.Tag</p>\n<h3 id=\"排版问题\"><a href=\"#排版问题\" class=\"headerlink\" title=\"排版问题\"></a>排版问题</h3><p>在输出时候中文排版会出现一些小问题<br><img src=\"/2019/10/31/python-web-spider/8.png\" alt=\"排版错误\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printUnivList</span><span class=\"params\">(ulist, num)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"&#123;:^10&#125;\\t&#123;:^6&#125;\\t&#123;:^10&#125;\"</span>.format(<span class=\"string\">\"排名\"</span>, <span class=\"string\">\"学校名称\"</span>, <span class=\"string\">\"总分\"</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(num):</span><br><span class=\"line\">        u = ulist[i]</span><br><span class=\"line\">        print(<span class=\"string\">\"&#123;:^10&#125;\\t&#123;:^6&#125;\\t&#123;:^10&#125;\"</span>.format(u[<span class=\"number\">0</span>], u[<span class=\"number\">1</span>], u[<span class=\"number\">2</span>]))</span><br></pre></td></tr></table></figure>\n\n<p>原因就是我们在使用format方法在我们定义好的布局里填充大学信息的时候，排版默认使用西文的空格，这样会导致排版错误。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printUnivList</span><span class=\"params\">(ulist, num)</span>:</span></span><br><span class=\"line\">    tplt = <span class=\"string\">\"&#123;0:^10&#125;\\t&#123;1:&#123;3&#125;^10&#125;\\t&#123;2:^10&#125;\"</span></span><br><span class=\"line\">    print(tplt.format(<span class=\"string\">\"排名\"</span>, <span class=\"string\">\"学校名称\"</span>, <span class=\"string\">\"总分\"</span>, chr(<span class=\"number\">12288</span>)))</span><br><span class=\"line\">    <span class=\"comment\"># 使用中文空格填充</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(num):</span><br><span class=\"line\">        u = ulist[i]</span><br><span class=\"line\">        <span class=\"comment\"># print(u)</span></span><br><span class=\"line\">        print(tplt.format(u[<span class=\"number\">0</span>], u[<span class=\"number\">1</span>], u[<span class=\"number\">2</span>], chr(<span class=\"number\">12288</span>)))</span><br></pre></td></tr></table></figure>\n\n<p>我们可以使用中文空格来进行填充，这样可以解决排版问题，chr(12288)就是中文空格</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tplt = <span class=\"string\">\"&#123;0:^10&#125;\\t&#123;1:&#123;3&#125;^10&#125;\\t&#123;2:^10&#125;\"</span></span><br><span class=\"line\">print(tplt.format(u[<span class=\"number\">0</span>], u[<span class=\"number\">1</span>], u[<span class=\"number\">2</span>], chr(<span class=\"number\">12288</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 这个tplt就是我们定义每行的模板，&#123;&#125;里面就是要填充的内容</span></span><br><span class=\"line\"><span class=\"comment\"># 冒号前面是填充内容的索引号，^10 ^的表居中对齐10代表宽度为10</span></span><br><span class=\"line\"><span class=\"comment\"># \\t 表示一个制表符，在冒号后面是填充字符，不指定默认使用西文空格</span></span><br><span class=\"line\"><span class=\"comment\"># 这里我们指定&#123;3&#125;,就是使用索引为3的 chr(12288) 来填充</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"具体代码\"><a href=\"#具体代码\" class=\"headerlink\" title=\"具体代码\"></a>具体代码</h3><p>先把大体的框架写完</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getHTMLText</span><span class=\"params\">(url)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fillUnivList</span><span class=\"params\">(ulist, html)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printUnivList</span><span class=\"params\">(ulist, num)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    uinfo = []</span><br><span class=\"line\">    url = <span class=\"string\">'http://zuihaodaxue.com/zuihaodaxuepaiming2019.html'</span></span><br><span class=\"line\">    html = getHTMLText(url)</span><br><span class=\"line\">    fillUnivList(uinfo, html)</span><br><span class=\"line\">    printUnivList(uinfo, <span class=\"number\">20</span>)  <span class=\"comment\"># 爬取前20名</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n\n<p>再填充每个具体的方法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"><span class=\"keyword\">import</span> bs4</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getHTMLText</span><span class=\"params\">(url)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        r = requests.get(url, timeout=<span class=\"number\">30</span>)</span><br><span class=\"line\">        r.raise_for_status()</span><br><span class=\"line\">        r.encoding = r.apparent_encoding</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r.text</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fillUnivList</span><span class=\"params\">(ulist, html)</span>:</span></span><br><span class=\"line\">    soup = BeautifulSoup(html, <span class=\"string\">'html.parser'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> tr <span class=\"keyword\">in</span> soup.find(<span class=\"string\">'tbody'</span>).children:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> isinstance(tr, bs4.element.Tag):</span><br><span class=\"line\">            <span class=\"comment\"># import bs4 才能使用对应的标签定义</span></span><br><span class=\"line\">            tds = tr(<span class=\"string\">'td'</span>)  <span class=\"comment\"># 查询tr 中的td标签</span></span><br><span class=\"line\">            ulist.append([tds[<span class=\"number\">0</span>].string, tds[<span class=\"number\">1</span>].string, tds[<span class=\"number\">2</span>].string])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># def printUnivList(ulist, num):</span></span><br><span class=\"line\"><span class=\"comment\">#     print(\"&#123;:^10&#125;\\t&#123;:^6&#125;\\t&#123;:^10&#125;\".format(\"排名\", \"学校名称\", \"总分\"))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#     for i in range(num):</span></span><br><span class=\"line\"><span class=\"comment\">#         u = ulist[i]</span></span><br><span class=\"line\"><span class=\"comment\">#         print(\"&#123;:^10&#125;\\t&#123;:^6&#125;\\t&#123;:^10&#125;\".format(u[0], u[1], u[2]))</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printUnivList</span><span class=\"params\">(ulist, num)</span>:</span></span><br><span class=\"line\">    tplt = <span class=\"string\">\"&#123;0:^10&#125;\\t&#123;1:&#123;3&#125;^10&#125;\\t&#123;2:^10&#125;\"</span></span><br><span class=\"line\">    print(tplt.format(<span class=\"string\">\"排名\"</span>, <span class=\"string\">\"学校名称\"</span>, <span class=\"string\">\"总分\"</span>, chr(<span class=\"number\">12288</span>)))</span><br><span class=\"line\">    <span class=\"comment\"># 使用中文空格填充</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(num):</span><br><span class=\"line\">        u = ulist[i]</span><br><span class=\"line\">        <span class=\"comment\"># print(u)</span></span><br><span class=\"line\">        print(tplt.format(u[<span class=\"number\">0</span>], u[<span class=\"number\">1</span>], u[<span class=\"number\">2</span>], chr(<span class=\"number\">12288</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    uinfo = []</span><br><span class=\"line\">    url = <span class=\"string\">'http://zuihaodaxue.com/zuihaodaxuepaiming2019.html'</span></span><br><span class=\"line\">    html = getHTMLText(url)</span><br><span class=\"line\">    fillUnivList(uinfo, html)</span><br><span class=\"line\">    printUnivList(uinfo, <span class=\"number\">20</span>) </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>"},{"title":"SpringMVC笔记","date":"2020-03-01T08:40:23.000Z","_content":"## 上手实践\n1. WEB-INF/lib/ 添加Spring相关JAR包 \n2. src或resources下配置springmvc.xml (注意：1.要开启对包的注解扫描 2.可配置在返回地址上添加前缀和后缀(视图解析器InternalResourceViewResolver) 3.配置静态资源访问）\n3. web.xml 配置DispatcherServlet前端控制器(注意：1.配置springmvc.xml位置2.load-on-startup标签 Tomcat启动时加载DispatcherServlet 3.SpringMVC的拦截路径 4.配置编码过滤器解决post提交表单乱码)\n4. 创建类 @Controller @RequestMapping\n\n## 注意点\n1. 需要传递参数返回ModelAndView 不传递参数可以返回String\n2. 重定向：返回字符串前加redirect:\n3. @RequestMapping匹配请求.action可省略；浏览器、重定向：redirect 发送请求不可省略\n4. 配置 mvc:view-controller 可设置跳转的页面 (需要添加mvc:annotation-driven 否则不会加载RequestMappingHandlerAdapter 会导致@RequestMapping失效)\n\n\nweb.xml中SpringMVC的url-patten取值\n- / :拦截所有,不包括jsp，**包含.js .png .css** (推荐) \n- /* :拦截所有:jsp .js .png .css  \n- *.action *.do: 拦截以do action 结尾的请求\n\t\n## 数据绑定\n1. 通过传入 HttpServletRequest request 可获取网页传递数据 getParameter\n2. 请求参数名称与处理器形参名称一致时会将请求参数与形参进行绑定（表单也可以）\n3. 使用@RequestParam(value = \"\") 指定请求参数，其他参数：required,defaultValue \n4. 传递Bean要求表单和属性一致\n5. 表单name属性相同封装数组\n6. 包装类绑定数据需要使用：类名.属性名，包装类List使用：类名[n].属性名 (n>=0)\n\n自定义Date参数绑定\n1. 网页传输的参数都是String类型，由转换器转换为对应类型，转换失败404(Date默认格式yyyy/MM/dd)\n2. 实现 Converter<String,Date> 类，实现convert方法\n3. springmvc.xml 注入转换器，添加注解驱动\n\nRequestMapping参数\n1. value 设置多个路径共同访问对应方法\n2. method 限制请求方式\n3. params 限制请求参数和请求值\n4. headers 限制请求头\n\n@RequestHeader\n@CookieValue\n\n\nAnt URL风格\n1. 一个?匹配一个字符\n2. *匹配任意字符\n3. **匹配多重路径\n\nREST 资源定位及资源操作风格\n1. URL定位资源，HTTP描述操作(POST,GET,PUT,DELETE 分别对应 CRUD)\n2. RequestMapping方法参数使用 @PathVariable 接收路径参数 \n3. 默认情况下Form表单是不支持PUT请求和DELETE请求的（POST请求转换为PUT或DELETE请求：1.配置过滤器 2.表单添加_method字段）\n4. Tomcat 8 开始 JSPs 只允许GET,POST,HEAD 需要重定向，否则404\n\n\nmvc:annotation-driven\n会自动注册三个Bean\n- RequestMappingHandlerMapping\n- RequestMappingHandlerAdapter\n- ExceptionHandlerExceptionResolver\n\n\nSpringMVC form\n- input\n- radiobutton\n- checkboxes\n- select\n- error (配合Hibernate Validator)\n\n## JSON\n前端使用Ajax发送请求时，服务器以JSON的数据格式响应给浏览器\n1. 方法加 @ResponseBody 注解返回JSON对象\n2. 可以返回对象、Map、List\n3. 表单序列化 方法参数使用@RequestBody 注解接收浏览器发送的JSON\n4. 默认情况发送接收都是简单Key-Value形式（无法发送复杂类型如Array），要指定发送JSON\n5. 需要解决 JSON.stringify() 不会自动解析，识别单个值为字符串，而不是数组的问题\n\n记：如果没有在接收JSON的RequestMapping方法前没有加 @ResponseBody 注解\n服务器可以接收到JSON，方法返回字符串，对应的xhr响应 404\n```java\n    @RequestMapping(\"/testJson\")\n    @ResponseBody\n    public String testJson(@RequestBody User user){\n        System.out.println(user);\n        return \"success\";\n    }\n```\n服务器可以接收到JSON，如果方法返回对象，对应的xhr响应 500\n```java\n    @RequestMapping(\"/testJson2\")\n    @ResponseBody\n    public User testJson2(@RequestBody User user) {\n        System.out.println(user);\n        return user;\n    }\n```\n\n## 值传递\nRequest域：一次请求过程中传递处理的数据\n1. RequestMapping方法参数传入 ModeAndView,Model,Map,Bean 数据都是写入Request域\n2. 键值对、domian(也是放在键值对里，键：类名小写，值：对象)、HashMap、List（元素包装类型小写为key）\n3. mergeAttributes：Map键相同不会覆盖 \n4. containsAttribute：是否包含属性\n\nHttpSession：多个请求之间可以共享这个属性\n类上添加@SessionAttributes 指定需要存放到Session域中的key值或者类型\n方法参数也可用用这个注解@SessionAttributes\n\nRequestMapping方法参数内使用@ModelAttribute 可以给修改存入Request域的键值\n@ModelAttribute注解注释的方法会在此controller每个方法执行前被执行\n\n方法参数内使用@ModelAttribute修饰的Bean 会覆盖掉已存在的属性值（表单没有传递这个属性，那么还继续用ModelAttribute中定义的属性值）\n\nModelAttribute写的内容会真覆盖Session内容\n\n\n## 其他\n下载\n文件名中文编码问题\n上传\n\n异常处理\n1. 先按继承关系最近的 带@ExceptionHandler注解的方法\n2. 没找到再找带 @ControllerAdvice 的类\n\n国际化\n\n拦截器\n\n如果发生异常\n    处理器方法执行之前调用 preHandle\n    / by zero\n    请求处理完成之后 afterCompletion\n\n多个拦截器执行顺序\n- preHandle 按照 springmvc.xml 配置的顺序执行\n- postHandle,afterCompletion 都是倒叙执行\n## SpringMVC执行过程\n1. 用户发送请求至 前端控制器DispatcherServlet\n2. DispatcherServlet 收到请求调用 HandlerMapping处理器映射器\n3. 处理器映射器 根据请求url找到具体的处理器，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet\n4. DispatcherServlet 通过 HandlerAdapter处理器适配器 调用处理器\n5. 执行处理器(Controller，也叫后端控制器)\n6. Controller 执行完成返回 ModelAndView\n7. HandlerAdapter 将 Controller执行结果 ModelAndView返回给 DispatcherServlet\n8. DispatcherServlet 将 ModelAndView 传给 ViewReslover视图解析器\n9. ViewReslover 解析后返回具体View\n10. DispatcherServlet 对View进行渲染视图（即将模型数据填充至视图中）\n11. DispatcherServlet 响应用户\n\n自定义部分：前端控制器DispatcherServlet、处理器Handler、视图View\n\nHandlerMapping：映射@RequestMapping注解，映射成功返回HandlerMethod\nHandlerAdapter：对@RequestMapping方法进行适配，解析对应方法\nViewReslover：在springmvc.xml中配置视图解析器，给返回地址添加前缀和后缀\n\n\n## 参考资料\n[SpringMvc接受json参数报404问题解决](https://blog.csdn.net/little_pig_lxl/article/details/88249255)","source":"_posts/springmvc-note-1.md","raw":"---\ntitle: SpringMVC笔记\ncategories: SpringMVC笔记\ndate: 2020-03-01 16:40:23\n---\n## 上手实践\n1. WEB-INF/lib/ 添加Spring相关JAR包 \n2. src或resources下配置springmvc.xml (注意：1.要开启对包的注解扫描 2.可配置在返回地址上添加前缀和后缀(视图解析器InternalResourceViewResolver) 3.配置静态资源访问）\n3. web.xml 配置DispatcherServlet前端控制器(注意：1.配置springmvc.xml位置2.load-on-startup标签 Tomcat启动时加载DispatcherServlet 3.SpringMVC的拦截路径 4.配置编码过滤器解决post提交表单乱码)\n4. 创建类 @Controller @RequestMapping\n\n## 注意点\n1. 需要传递参数返回ModelAndView 不传递参数可以返回String\n2. 重定向：返回字符串前加redirect:\n3. @RequestMapping匹配请求.action可省略；浏览器、重定向：redirect 发送请求不可省略\n4. 配置 mvc:view-controller 可设置跳转的页面 (需要添加mvc:annotation-driven 否则不会加载RequestMappingHandlerAdapter 会导致@RequestMapping失效)\n\n\nweb.xml中SpringMVC的url-patten取值\n- / :拦截所有,不包括jsp，**包含.js .png .css** (推荐) \n- /* :拦截所有:jsp .js .png .css  \n- *.action *.do: 拦截以do action 结尾的请求\n\t\n## 数据绑定\n1. 通过传入 HttpServletRequest request 可获取网页传递数据 getParameter\n2. 请求参数名称与处理器形参名称一致时会将请求参数与形参进行绑定（表单也可以）\n3. 使用@RequestParam(value = \"\") 指定请求参数，其他参数：required,defaultValue \n4. 传递Bean要求表单和属性一致\n5. 表单name属性相同封装数组\n6. 包装类绑定数据需要使用：类名.属性名，包装类List使用：类名[n].属性名 (n>=0)\n\n自定义Date参数绑定\n1. 网页传输的参数都是String类型，由转换器转换为对应类型，转换失败404(Date默认格式yyyy/MM/dd)\n2. 实现 Converter<String,Date> 类，实现convert方法\n3. springmvc.xml 注入转换器，添加注解驱动\n\nRequestMapping参数\n1. value 设置多个路径共同访问对应方法\n2. method 限制请求方式\n3. params 限制请求参数和请求值\n4. headers 限制请求头\n\n@RequestHeader\n@CookieValue\n\n\nAnt URL风格\n1. 一个?匹配一个字符\n2. *匹配任意字符\n3. **匹配多重路径\n\nREST 资源定位及资源操作风格\n1. URL定位资源，HTTP描述操作(POST,GET,PUT,DELETE 分别对应 CRUD)\n2. RequestMapping方法参数使用 @PathVariable 接收路径参数 \n3. 默认情况下Form表单是不支持PUT请求和DELETE请求的（POST请求转换为PUT或DELETE请求：1.配置过滤器 2.表单添加_method字段）\n4. Tomcat 8 开始 JSPs 只允许GET,POST,HEAD 需要重定向，否则404\n\n\nmvc:annotation-driven\n会自动注册三个Bean\n- RequestMappingHandlerMapping\n- RequestMappingHandlerAdapter\n- ExceptionHandlerExceptionResolver\n\n\nSpringMVC form\n- input\n- radiobutton\n- checkboxes\n- select\n- error (配合Hibernate Validator)\n\n## JSON\n前端使用Ajax发送请求时，服务器以JSON的数据格式响应给浏览器\n1. 方法加 @ResponseBody 注解返回JSON对象\n2. 可以返回对象、Map、List\n3. 表单序列化 方法参数使用@RequestBody 注解接收浏览器发送的JSON\n4. 默认情况发送接收都是简单Key-Value形式（无法发送复杂类型如Array），要指定发送JSON\n5. 需要解决 JSON.stringify() 不会自动解析，识别单个值为字符串，而不是数组的问题\n\n记：如果没有在接收JSON的RequestMapping方法前没有加 @ResponseBody 注解\n服务器可以接收到JSON，方法返回字符串，对应的xhr响应 404\n```java\n    @RequestMapping(\"/testJson\")\n    @ResponseBody\n    public String testJson(@RequestBody User user){\n        System.out.println(user);\n        return \"success\";\n    }\n```\n服务器可以接收到JSON，如果方法返回对象，对应的xhr响应 500\n```java\n    @RequestMapping(\"/testJson2\")\n    @ResponseBody\n    public User testJson2(@RequestBody User user) {\n        System.out.println(user);\n        return user;\n    }\n```\n\n## 值传递\nRequest域：一次请求过程中传递处理的数据\n1. RequestMapping方法参数传入 ModeAndView,Model,Map,Bean 数据都是写入Request域\n2. 键值对、domian(也是放在键值对里，键：类名小写，值：对象)、HashMap、List（元素包装类型小写为key）\n3. mergeAttributes：Map键相同不会覆盖 \n4. containsAttribute：是否包含属性\n\nHttpSession：多个请求之间可以共享这个属性\n类上添加@SessionAttributes 指定需要存放到Session域中的key值或者类型\n方法参数也可用用这个注解@SessionAttributes\n\nRequestMapping方法参数内使用@ModelAttribute 可以给修改存入Request域的键值\n@ModelAttribute注解注释的方法会在此controller每个方法执行前被执行\n\n方法参数内使用@ModelAttribute修饰的Bean 会覆盖掉已存在的属性值（表单没有传递这个属性，那么还继续用ModelAttribute中定义的属性值）\n\nModelAttribute写的内容会真覆盖Session内容\n\n\n## 其他\n下载\n文件名中文编码问题\n上传\n\n异常处理\n1. 先按继承关系最近的 带@ExceptionHandler注解的方法\n2. 没找到再找带 @ControllerAdvice 的类\n\n国际化\n\n拦截器\n\n如果发生异常\n    处理器方法执行之前调用 preHandle\n    / by zero\n    请求处理完成之后 afterCompletion\n\n多个拦截器执行顺序\n- preHandle 按照 springmvc.xml 配置的顺序执行\n- postHandle,afterCompletion 都是倒叙执行\n## SpringMVC执行过程\n1. 用户发送请求至 前端控制器DispatcherServlet\n2. DispatcherServlet 收到请求调用 HandlerMapping处理器映射器\n3. 处理器映射器 根据请求url找到具体的处理器，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet\n4. DispatcherServlet 通过 HandlerAdapter处理器适配器 调用处理器\n5. 执行处理器(Controller，也叫后端控制器)\n6. Controller 执行完成返回 ModelAndView\n7. HandlerAdapter 将 Controller执行结果 ModelAndView返回给 DispatcherServlet\n8. DispatcherServlet 将 ModelAndView 传给 ViewReslover视图解析器\n9. ViewReslover 解析后返回具体View\n10. DispatcherServlet 对View进行渲染视图（即将模型数据填充至视图中）\n11. DispatcherServlet 响应用户\n\n自定义部分：前端控制器DispatcherServlet、处理器Handler、视图View\n\nHandlerMapping：映射@RequestMapping注解，映射成功返回HandlerMethod\nHandlerAdapter：对@RequestMapping方法进行适配，解析对应方法\nViewReslover：在springmvc.xml中配置视图解析器，给返回地址添加前缀和后缀\n\n\n## 参考资料\n[SpringMvc接受json参数报404问题解决](https://blog.csdn.net/little_pig_lxl/article/details/88249255)","slug":"springmvc-note-1","published":1,"updated":"2020-06-13T02:55:34.831Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke3x9g6a001pzgvucrdlfhbx","content":"<h2 id=\"上手实践\"><a href=\"#上手实践\" class=\"headerlink\" title=\"上手实践\"></a>上手实践</h2><ol>\n<li>WEB-INF/lib/ 添加Spring相关JAR包 </li>\n<li>src或resources下配置springmvc.xml (注意：1.要开启对包的注解扫描 2.可配置在返回地址上添加前缀和后缀(视图解析器InternalResourceViewResolver) 3.配置静态资源访问）</li>\n<li>web.xml 配置DispatcherServlet前端控制器(注意：1.配置springmvc.xml位置2.load-on-startup标签 Tomcat启动时加载DispatcherServlet 3.SpringMVC的拦截路径 4.配置编码过滤器解决post提交表单乱码)</li>\n<li>创建类 @Controller @RequestMapping</li>\n</ol>\n<h2 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h2><ol>\n<li>需要传递参数返回ModelAndView 不传递参数可以返回String</li>\n<li>重定向：返回字符串前加redirect:</li>\n<li>@RequestMapping匹配请求.action可省略；浏览器、重定向：redirect 发送请求不可省略</li>\n<li>配置 mvc:view-controller 可设置跳转的页面 (需要添加mvc:annotation-driven 否则不会加载RequestMappingHandlerAdapter 会导致@RequestMapping失效)</li>\n</ol>\n<p>web.xml中SpringMVC的url-patten取值</p>\n<ul>\n<li>/ :拦截所有,不包括jsp，<strong>包含.js .png .css</strong> (推荐) </li>\n<li>/* :拦截所有:jsp .js .png .css  </li>\n<li>*.action *.do: 拦截以do action 结尾的请求</li>\n</ul>\n<h2 id=\"数据绑定\"><a href=\"#数据绑定\" class=\"headerlink\" title=\"数据绑定\"></a>数据绑定</h2><ol>\n<li>通过传入 HttpServletRequest request 可获取网页传递数据 getParameter</li>\n<li>请求参数名称与处理器形参名称一致时会将请求参数与形参进行绑定（表单也可以）</li>\n<li>使用@RequestParam(value = “”) 指定请求参数，其他参数：required,defaultValue </li>\n<li>传递Bean要求表单和属性一致</li>\n<li>表单name属性相同封装数组</li>\n<li>包装类绑定数据需要使用：类名.属性名，包装类List使用：类名[n].属性名 (n&gt;=0)</li>\n</ol>\n<p>自定义Date参数绑定</p>\n<ol>\n<li>网页传输的参数都是String类型，由转换器转换为对应类型，转换失败404(Date默认格式yyyy/MM/dd)</li>\n<li>实现 Converter&lt;String,Date&gt; 类，实现convert方法</li>\n<li>springmvc.xml 注入转换器，添加注解驱动</li>\n</ol>\n<p>RequestMapping参数</p>\n<ol>\n<li>value 设置多个路径共同访问对应方法</li>\n<li>method 限制请求方式</li>\n<li>params 限制请求参数和请求值</li>\n<li>headers 限制请求头</li>\n</ol>\n<p>@RequestHeader<br>@CookieValue</p>\n<p>Ant URL风格</p>\n<ol>\n<li>一个?匹配一个字符</li>\n<li>*匹配任意字符</li>\n<li>**匹配多重路径</li>\n</ol>\n<p>REST 资源定位及资源操作风格</p>\n<ol>\n<li>URL定位资源，HTTP描述操作(POST,GET,PUT,DELETE 分别对应 CRUD)</li>\n<li>RequestMapping方法参数使用 @PathVariable 接收路径参数 </li>\n<li>默认情况下Form表单是不支持PUT请求和DELETE请求的（POST请求转换为PUT或DELETE请求：1.配置过滤器 2.表单添加_method字段）</li>\n<li>Tomcat 8 开始 JSPs 只允许GET,POST,HEAD 需要重定向，否则404</li>\n</ol>\n<p>mvc:annotation-driven<br>会自动注册三个Bean</p>\n<ul>\n<li>RequestMappingHandlerMapping</li>\n<li>RequestMappingHandlerAdapter</li>\n<li>ExceptionHandlerExceptionResolver</li>\n</ul>\n<p>SpringMVC form</p>\n<ul>\n<li>input</li>\n<li>radiobutton</li>\n<li>checkboxes</li>\n<li>select</li>\n<li>error (配合Hibernate Validator)</li>\n</ul>\n<h2 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h2><p>前端使用Ajax发送请求时，服务器以JSON的数据格式响应给浏览器</p>\n<ol>\n<li>方法加 @ResponseBody 注解返回JSON对象</li>\n<li>可以返回对象、Map、List</li>\n<li>表单序列化 方法参数使用@RequestBody 注解接收浏览器发送的JSON</li>\n<li>默认情况发送接收都是简单Key-Value形式（无法发送复杂类型如Array），要指定发送JSON</li>\n<li>需要解决 JSON.stringify() 不会自动解析，识别单个值为字符串，而不是数组的问题</li>\n</ol>\n<p>记：如果没有在接收JSON的RequestMapping方法前没有加 @ResponseBody 注解<br>服务器可以接收到JSON，方法返回字符串，对应的xhr响应 404</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/testJson\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">testJson</span><span class=\"params\">(@RequestBody User user)</span></span>&#123;</span><br><span class=\"line\">    System.out.println(user);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"success\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>服务器可以接收到JSON，如果方法返回对象，对应的xhr响应 500</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/testJson2\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">testJson2</span><span class=\"params\">(@RequestBody User user)</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(user);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> user;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"值传递\"><a href=\"#值传递\" class=\"headerlink\" title=\"值传递\"></a>值传递</h2><p>Request域：一次请求过程中传递处理的数据</p>\n<ol>\n<li>RequestMapping方法参数传入 ModeAndView,Model,Map,Bean 数据都是写入Request域</li>\n<li>键值对、domian(也是放在键值对里，键：类名小写，值：对象)、HashMap、List（元素包装类型小写为key）</li>\n<li>mergeAttributes：Map键相同不会覆盖 </li>\n<li>containsAttribute：是否包含属性</li>\n</ol>\n<p>HttpSession：多个请求之间可以共享这个属性<br>类上添加@SessionAttributes 指定需要存放到Session域中的key值或者类型<br>方法参数也可用用这个注解@SessionAttributes</p>\n<p>RequestMapping方法参数内使用@ModelAttribute 可以给修改存入Request域的键值<br>@ModelAttribute注解注释的方法会在此controller每个方法执行前被执行</p>\n<p>方法参数内使用@ModelAttribute修饰的Bean 会覆盖掉已存在的属性值（表单没有传递这个属性，那么还继续用ModelAttribute中定义的属性值）</p>\n<p>ModelAttribute写的内容会真覆盖Session内容</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>下载<br>文件名中文编码问题<br>上传</p>\n<p>异常处理</p>\n<ol>\n<li>先按继承关系最近的 带@ExceptionHandler注解的方法</li>\n<li>没找到再找带 @ControllerAdvice 的类</li>\n</ol>\n<p>国际化</p>\n<p>拦截器</p>\n<p>如果发生异常<br>    处理器方法执行之前调用 preHandle<br>    / by zero<br>    请求处理完成之后 afterCompletion</p>\n<p>多个拦截器执行顺序</p>\n<ul>\n<li>preHandle 按照 springmvc.xml 配置的顺序执行</li>\n<li>postHandle,afterCompletion 都是倒叙执行<h2 id=\"SpringMVC执行过程\"><a href=\"#SpringMVC执行过程\" class=\"headerlink\" title=\"SpringMVC执行过程\"></a>SpringMVC执行过程</h2></li>\n</ul>\n<ol>\n<li>用户发送请求至 前端控制器DispatcherServlet</li>\n<li>DispatcherServlet 收到请求调用 HandlerMapping处理器映射器</li>\n<li>处理器映射器 根据请求url找到具体的处理器，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet</li>\n<li>DispatcherServlet 通过 HandlerAdapter处理器适配器 调用处理器</li>\n<li>执行处理器(Controller，也叫后端控制器)</li>\n<li>Controller 执行完成返回 ModelAndView</li>\n<li>HandlerAdapter 将 Controller执行结果 ModelAndView返回给 DispatcherServlet</li>\n<li>DispatcherServlet 将 ModelAndView 传给 ViewReslover视图解析器</li>\n<li>ViewReslover 解析后返回具体View</li>\n<li>DispatcherServlet 对View进行渲染视图（即将模型数据填充至视图中）</li>\n<li>DispatcherServlet 响应用户</li>\n</ol>\n<p>自定义部分：前端控制器DispatcherServlet、处理器Handler、视图View</p>\n<p>HandlerMapping：映射@RequestMapping注解，映射成功返回HandlerMethod<br>HandlerAdapter：对@RequestMapping方法进行适配，解析对应方法<br>ViewReslover：在springmvc.xml中配置视图解析器，给返回地址添加前缀和后缀</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://blog.csdn.net/little_pig_lxl/article/details/88249255\" target=\"_blank\" rel=\"noopener\">SpringMvc接受json参数报404问题解决</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"上手实践\"><a href=\"#上手实践\" class=\"headerlink\" title=\"上手实践\"></a>上手实践</h2><ol>\n<li>WEB-INF/lib/ 添加Spring相关JAR包 </li>\n<li>src或resources下配置springmvc.xml (注意：1.要开启对包的注解扫描 2.可配置在返回地址上添加前缀和后缀(视图解析器InternalResourceViewResolver) 3.配置静态资源访问）</li>\n<li>web.xml 配置DispatcherServlet前端控制器(注意：1.配置springmvc.xml位置2.load-on-startup标签 Tomcat启动时加载DispatcherServlet 3.SpringMVC的拦截路径 4.配置编码过滤器解决post提交表单乱码)</li>\n<li>创建类 @Controller @RequestMapping</li>\n</ol>\n<h2 id=\"注意点\"><a href=\"#注意点\" class=\"headerlink\" title=\"注意点\"></a>注意点</h2><ol>\n<li>需要传递参数返回ModelAndView 不传递参数可以返回String</li>\n<li>重定向：返回字符串前加redirect:</li>\n<li>@RequestMapping匹配请求.action可省略；浏览器、重定向：redirect 发送请求不可省略</li>\n<li>配置 mvc:view-controller 可设置跳转的页面 (需要添加mvc:annotation-driven 否则不会加载RequestMappingHandlerAdapter 会导致@RequestMapping失效)</li>\n</ol>\n<p>web.xml中SpringMVC的url-patten取值</p>\n<ul>\n<li>/ :拦截所有,不包括jsp，<strong>包含.js .png .css</strong> (推荐) </li>\n<li>/* :拦截所有:jsp .js .png .css  </li>\n<li>*.action *.do: 拦截以do action 结尾的请求</li>\n</ul>\n<h2 id=\"数据绑定\"><a href=\"#数据绑定\" class=\"headerlink\" title=\"数据绑定\"></a>数据绑定</h2><ol>\n<li>通过传入 HttpServletRequest request 可获取网页传递数据 getParameter</li>\n<li>请求参数名称与处理器形参名称一致时会将请求参数与形参进行绑定（表单也可以）</li>\n<li>使用@RequestParam(value = “”) 指定请求参数，其他参数：required,defaultValue </li>\n<li>传递Bean要求表单和属性一致</li>\n<li>表单name属性相同封装数组</li>\n<li>包装类绑定数据需要使用：类名.属性名，包装类List使用：类名[n].属性名 (n&gt;=0)</li>\n</ol>\n<p>自定义Date参数绑定</p>\n<ol>\n<li>网页传输的参数都是String类型，由转换器转换为对应类型，转换失败404(Date默认格式yyyy/MM/dd)</li>\n<li>实现 Converter&lt;String,Date&gt; 类，实现convert方法</li>\n<li>springmvc.xml 注入转换器，添加注解驱动</li>\n</ol>\n<p>RequestMapping参数</p>\n<ol>\n<li>value 设置多个路径共同访问对应方法</li>\n<li>method 限制请求方式</li>\n<li>params 限制请求参数和请求值</li>\n<li>headers 限制请求头</li>\n</ol>\n<p>@RequestHeader<br>@CookieValue</p>\n<p>Ant URL风格</p>\n<ol>\n<li>一个?匹配一个字符</li>\n<li>*匹配任意字符</li>\n<li>**匹配多重路径</li>\n</ol>\n<p>REST 资源定位及资源操作风格</p>\n<ol>\n<li>URL定位资源，HTTP描述操作(POST,GET,PUT,DELETE 分别对应 CRUD)</li>\n<li>RequestMapping方法参数使用 @PathVariable 接收路径参数 </li>\n<li>默认情况下Form表单是不支持PUT请求和DELETE请求的（POST请求转换为PUT或DELETE请求：1.配置过滤器 2.表单添加_method字段）</li>\n<li>Tomcat 8 开始 JSPs 只允许GET,POST,HEAD 需要重定向，否则404</li>\n</ol>\n<p>mvc:annotation-driven<br>会自动注册三个Bean</p>\n<ul>\n<li>RequestMappingHandlerMapping</li>\n<li>RequestMappingHandlerAdapter</li>\n<li>ExceptionHandlerExceptionResolver</li>\n</ul>\n<p>SpringMVC form</p>\n<ul>\n<li>input</li>\n<li>radiobutton</li>\n<li>checkboxes</li>\n<li>select</li>\n<li>error (配合Hibernate Validator)</li>\n</ul>\n<h2 id=\"JSON\"><a href=\"#JSON\" class=\"headerlink\" title=\"JSON\"></a>JSON</h2><p>前端使用Ajax发送请求时，服务器以JSON的数据格式响应给浏览器</p>\n<ol>\n<li>方法加 @ResponseBody 注解返回JSON对象</li>\n<li>可以返回对象、Map、List</li>\n<li>表单序列化 方法参数使用@RequestBody 注解接收浏览器发送的JSON</li>\n<li>默认情况发送接收都是简单Key-Value形式（无法发送复杂类型如Array），要指定发送JSON</li>\n<li>需要解决 JSON.stringify() 不会自动解析，识别单个值为字符串，而不是数组的问题</li>\n</ol>\n<p>记：如果没有在接收JSON的RequestMapping方法前没有加 @ResponseBody 注解<br>服务器可以接收到JSON，方法返回字符串，对应的xhr响应 404</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/testJson\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">testJson</span><span class=\"params\">(@RequestBody User user)</span></span>&#123;</span><br><span class=\"line\">    System.out.println(user);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"success\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>服务器可以接收到JSON，如果方法返回对象，对应的xhr响应 500</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/testJson2\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> User <span class=\"title\">testJson2</span><span class=\"params\">(@RequestBody User user)</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(user);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> user;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"值传递\"><a href=\"#值传递\" class=\"headerlink\" title=\"值传递\"></a>值传递</h2><p>Request域：一次请求过程中传递处理的数据</p>\n<ol>\n<li>RequestMapping方法参数传入 ModeAndView,Model,Map,Bean 数据都是写入Request域</li>\n<li>键值对、domian(也是放在键值对里，键：类名小写，值：对象)、HashMap、List（元素包装类型小写为key）</li>\n<li>mergeAttributes：Map键相同不会覆盖 </li>\n<li>containsAttribute：是否包含属性</li>\n</ol>\n<p>HttpSession：多个请求之间可以共享这个属性<br>类上添加@SessionAttributes 指定需要存放到Session域中的key值或者类型<br>方法参数也可用用这个注解@SessionAttributes</p>\n<p>RequestMapping方法参数内使用@ModelAttribute 可以给修改存入Request域的键值<br>@ModelAttribute注解注释的方法会在此controller每个方法执行前被执行</p>\n<p>方法参数内使用@ModelAttribute修饰的Bean 会覆盖掉已存在的属性值（表单没有传递这个属性，那么还继续用ModelAttribute中定义的属性值）</p>\n<p>ModelAttribute写的内容会真覆盖Session内容</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>下载<br>文件名中文编码问题<br>上传</p>\n<p>异常处理</p>\n<ol>\n<li>先按继承关系最近的 带@ExceptionHandler注解的方法</li>\n<li>没找到再找带 @ControllerAdvice 的类</li>\n</ol>\n<p>国际化</p>\n<p>拦截器</p>\n<p>如果发生异常<br>    处理器方法执行之前调用 preHandle<br>    / by zero<br>    请求处理完成之后 afterCompletion</p>\n<p>多个拦截器执行顺序</p>\n<ul>\n<li>preHandle 按照 springmvc.xml 配置的顺序执行</li>\n<li>postHandle,afterCompletion 都是倒叙执行<h2 id=\"SpringMVC执行过程\"><a href=\"#SpringMVC执行过程\" class=\"headerlink\" title=\"SpringMVC执行过程\"></a>SpringMVC执行过程</h2></li>\n</ul>\n<ol>\n<li>用户发送请求至 前端控制器DispatcherServlet</li>\n<li>DispatcherServlet 收到请求调用 HandlerMapping处理器映射器</li>\n<li>处理器映射器 根据请求url找到具体的处理器，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet</li>\n<li>DispatcherServlet 通过 HandlerAdapter处理器适配器 调用处理器</li>\n<li>执行处理器(Controller，也叫后端控制器)</li>\n<li>Controller 执行完成返回 ModelAndView</li>\n<li>HandlerAdapter 将 Controller执行结果 ModelAndView返回给 DispatcherServlet</li>\n<li>DispatcherServlet 将 ModelAndView 传给 ViewReslover视图解析器</li>\n<li>ViewReslover 解析后返回具体View</li>\n<li>DispatcherServlet 对View进行渲染视图（即将模型数据填充至视图中）</li>\n<li>DispatcherServlet 响应用户</li>\n</ol>\n<p>自定义部分：前端控制器DispatcherServlet、处理器Handler、视图View</p>\n<p>HandlerMapping：映射@RequestMapping注解，映射成功返回HandlerMethod<br>HandlerAdapter：对@RequestMapping方法进行适配，解析对应方法<br>ViewReslover：在springmvc.xml中配置视图解析器，给返回地址添加前缀和后缀</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://blog.csdn.net/little_pig_lxl/article/details/88249255\" target=\"_blank\" rel=\"noopener\">SpringMvc接受json参数报404问题解决</a></p>\n"},{"title":"非暴力沟通","date":"2020-08-02T13:07:07.000Z","_content":"\n> 也许我们并不认为自己的谈话方式是暴力的，但我们的语言确实常常引发自己和他人的痛苦\n>\n> ——马歇尔·卢森堡 《非暴力沟通》\n\n<br>\n\n前段时间看了一些讲述“暴力沟通”的文章和视频，很有感触。在某些情况下，我们很容易被情绪所主导，试图用暴力沟通解决问题，但是问题总会越来越糟糕，等缓过神来，已经说了伤害人的话，只能后悔\n\n<br>\n\n被提及比较多的解决方法都是来自马歇尔·卢森堡的[《非暴力沟通》](https://book.douban.com/subject/3533221/)，这本书提出了化解暴力沟通的方法，主要分为四个步骤：1. 陈述事实（不要掺杂自己过激的表达） 2. 表达感受 3.说出哪些需求导致了这样的感受 4. 提出请求\n\n在实际的生活中我们可能并不会按照这样的模板来说话，这样套公式说出来的话反而怪怪的。但是这个方法也给我们很大的启发：表达的时候陈述事实，不要掺杂自己的观点和过激言语。很可能一开始只是一个小问题，因为没有正确沟通，升级为了暴力沟通，两方都冲昏了头脑，接着翻出了各种各样的往事，两个人互相伤害，还不断地加码。如果我们能对这样的情况有一个概念，那么我们至少在一开始就可以重视表达客观事实和自己的感受\n\n观察到的情况：在面对没那么亲近的人或者是陌生人的时候心态很平和，反而在一些特定的情况下面对比较亲近的人（比如我们的父母）的时候带着点戾气。在这些情况下很难放下情绪表达客观事实和自己的感受，这个时候或许可以先不着急沟通，先冷静，想想对方的不易，尝试去化解对方说的话，**把对方的暴力沟通转化为上面的4个步骤**，经历了这个过程事情总会慢慢变好。和其他的理论一样，知道了并不会改变什么，还需要在实践中磨合理论，克制本能的反应，一开始可能还是一团糟，但是慢慢地沟通就会越来越平顺\n\n\n<br>\n\n豆瓣读书：[非暴力沟通](https://book.douban.com/subject/3533221/)\n\n知乎相关问答：[如何评价《非暴力沟通》这本书？](https://www.zhihu.com/question/20613214)\n\n最后推荐一部还蛮有意思的跟沟通相关的短片[《静音》](https://www.bilibili.com/video/BV187411m7zb)","source":"_posts/nonviolent-communication.md","raw":"---\ntitle: 非暴力沟通\ncategories: 零碎\ndate: 2020-08-02 21:07:07\n---\n\n> 也许我们并不认为自己的谈话方式是暴力的，但我们的语言确实常常引发自己和他人的痛苦\n>\n> ——马歇尔·卢森堡 《非暴力沟通》\n\n<br>\n\n前段时间看了一些讲述“暴力沟通”的文章和视频，很有感触。在某些情况下，我们很容易被情绪所主导，试图用暴力沟通解决问题，但是问题总会越来越糟糕，等缓过神来，已经说了伤害人的话，只能后悔\n\n<br>\n\n被提及比较多的解决方法都是来自马歇尔·卢森堡的[《非暴力沟通》](https://book.douban.com/subject/3533221/)，这本书提出了化解暴力沟通的方法，主要分为四个步骤：1. 陈述事实（不要掺杂自己过激的表达） 2. 表达感受 3.说出哪些需求导致了这样的感受 4. 提出请求\n\n在实际的生活中我们可能并不会按照这样的模板来说话，这样套公式说出来的话反而怪怪的。但是这个方法也给我们很大的启发：表达的时候陈述事实，不要掺杂自己的观点和过激言语。很可能一开始只是一个小问题，因为没有正确沟通，升级为了暴力沟通，两方都冲昏了头脑，接着翻出了各种各样的往事，两个人互相伤害，还不断地加码。如果我们能对这样的情况有一个概念，那么我们至少在一开始就可以重视表达客观事实和自己的感受\n\n观察到的情况：在面对没那么亲近的人或者是陌生人的时候心态很平和，反而在一些特定的情况下面对比较亲近的人（比如我们的父母）的时候带着点戾气。在这些情况下很难放下情绪表达客观事实和自己的感受，这个时候或许可以先不着急沟通，先冷静，想想对方的不易，尝试去化解对方说的话，**把对方的暴力沟通转化为上面的4个步骤**，经历了这个过程事情总会慢慢变好。和其他的理论一样，知道了并不会改变什么，还需要在实践中磨合理论，克制本能的反应，一开始可能还是一团糟，但是慢慢地沟通就会越来越平顺\n\n\n<br>\n\n豆瓣读书：[非暴力沟通](https://book.douban.com/subject/3533221/)\n\n知乎相关问答：[如何评价《非暴力沟通》这本书？](https://www.zhihu.com/question/20613214)\n\n最后推荐一部还蛮有意思的跟沟通相关的短片[《静音》](https://www.bilibili.com/video/BV187411m7zb)","slug":"nonviolent-communication","published":1,"updated":"2020-08-04T15:39:40.088Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke3x9g6c001qzgvu47mk95nq","content":"<blockquote>\n<p>也许我们并不认为自己的谈话方式是暴力的，但我们的语言确实常常引发自己和他人的痛苦</p>\n<p>——马歇尔·卢森堡 《非暴力沟通》</p>\n</blockquote>\n<br>\n\n<p>前段时间看了一些讲述“暴力沟通”的文章和视频，很有感触。在某些情况下，我们很容易被情绪所主导，试图用暴力沟通解决问题，但是问题总会越来越糟糕，等缓过神来，已经说了伤害人的话，只能后悔</p>\n<br>\n\n<p>被提及比较多的解决方法都是来自马歇尔·卢森堡的<a href=\"https://book.douban.com/subject/3533221/\" target=\"_blank\" rel=\"noopener\">《非暴力沟通》</a>，这本书提出了化解暴力沟通的方法，主要分为四个步骤：1. 陈述事实（不要掺杂自己过激的表达） 2. 表达感受 3.说出哪些需求导致了这样的感受 4. 提出请求</p>\n<p>在实际的生活中我们可能并不会按照这样的模板来说话，这样套公式说出来的话反而怪怪的。但是这个方法也给我们很大的启发：表达的时候陈述事实，不要掺杂自己的观点和过激言语。很可能一开始只是一个小问题，因为没有正确沟通，升级为了暴力沟通，两方都冲昏了头脑，接着翻出了各种各样的往事，两个人互相伤害，还不断地加码。如果我们能对这样的情况有一个概念，那么我们至少在一开始就可以重视表达客观事实和自己的感受</p>\n<p>观察到的情况：在面对没那么亲近的人或者是陌生人的时候心态很平和，反而在一些特定的情况下面对比较亲近的人（比如我们的父母）的时候带着点戾气。在这些情况下很难放下情绪表达客观事实和自己的感受，这个时候或许可以先不着急沟通，先冷静，想想对方的不易，尝试去化解对方说的话，<strong>把对方的暴力沟通转化为上面的4个步骤</strong>，经历了这个过程事情总会慢慢变好。和其他的理论一样，知道了并不会改变什么，还需要在实践中磨合理论，克制本能的反应，一开始可能还是一团糟，但是慢慢地沟通就会越来越平顺</p>\n<br>\n\n<p>豆瓣读书：<a href=\"https://book.douban.com/subject/3533221/\" target=\"_blank\" rel=\"noopener\">非暴力沟通</a></p>\n<p>知乎相关问答：<a href=\"https://www.zhihu.com/question/20613214\" target=\"_blank\" rel=\"noopener\">如何评价《非暴力沟通》这本书？</a></p>\n<p>最后推荐一部还蛮有意思的跟沟通相关的短片<a href=\"https://www.bilibili.com/video/BV187411m7zb\" target=\"_blank\" rel=\"noopener\">《静音》</a></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>也许我们并不认为自己的谈话方式是暴力的，但我们的语言确实常常引发自己和他人的痛苦</p>\n<p>——马歇尔·卢森堡 《非暴力沟通》</p>\n</blockquote>\n<br>\n\n<p>前段时间看了一些讲述“暴力沟通”的文章和视频，很有感触。在某些情况下，我们很容易被情绪所主导，试图用暴力沟通解决问题，但是问题总会越来越糟糕，等缓过神来，已经说了伤害人的话，只能后悔</p>\n<br>\n\n<p>被提及比较多的解决方法都是来自马歇尔·卢森堡的<a href=\"https://book.douban.com/subject/3533221/\" target=\"_blank\" rel=\"noopener\">《非暴力沟通》</a>，这本书提出了化解暴力沟通的方法，主要分为四个步骤：1. 陈述事实（不要掺杂自己过激的表达） 2. 表达感受 3.说出哪些需求导致了这样的感受 4. 提出请求</p>\n<p>在实际的生活中我们可能并不会按照这样的模板来说话，这样套公式说出来的话反而怪怪的。但是这个方法也给我们很大的启发：表达的时候陈述事实，不要掺杂自己的观点和过激言语。很可能一开始只是一个小问题，因为没有正确沟通，升级为了暴力沟通，两方都冲昏了头脑，接着翻出了各种各样的往事，两个人互相伤害，还不断地加码。如果我们能对这样的情况有一个概念，那么我们至少在一开始就可以重视表达客观事实和自己的感受</p>\n<p>观察到的情况：在面对没那么亲近的人或者是陌生人的时候心态很平和，反而在一些特定的情况下面对比较亲近的人（比如我们的父母）的时候带着点戾气。在这些情况下很难放下情绪表达客观事实和自己的感受，这个时候或许可以先不着急沟通，先冷静，想想对方的不易，尝试去化解对方说的话，<strong>把对方的暴力沟通转化为上面的4个步骤</strong>，经历了这个过程事情总会慢慢变好。和其他的理论一样，知道了并不会改变什么，还需要在实践中磨合理论，克制本能的反应，一开始可能还是一团糟，但是慢慢地沟通就会越来越平顺</p>\n<br>\n\n<p>豆瓣读书：<a href=\"https://book.douban.com/subject/3533221/\" target=\"_blank\" rel=\"noopener\">非暴力沟通</a></p>\n<p>知乎相关问答：<a href=\"https://www.zhihu.com/question/20613214\" target=\"_blank\" rel=\"noopener\">如何评价《非暴力沟通》这本书？</a></p>\n<p>最后推荐一部还蛮有意思的跟沟通相关的短片<a href=\"https://www.bilibili.com/video/BV187411m7zb\" target=\"_blank\" rel=\"noopener\">《静音》</a></p>\n"},{"title":"Web服务器笔记-商城列表","date":"2020-02-14T08:00:41.000Z","_content":"## 准备\n复制工程，右键工程-Properties-Web Project Settings-修改项目名\n修改.html为.jsp 右键修改文件编码为UTF-8\n在每个jsp头部加入\n```jsp\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n```\n修改网页代码中写死的项目名\n修改网页中写死的跳转html为jsp\n\n## 头部尾部分离\n新建header.jsp和footer.jsp (仅保留开头的配置，删除html代码)\n各自复制header和footer代码，(不需要body)去除不需要的css样式\n删除index中的header和footer代码和不需要的css样式 (index只留index.css,header保留common,footer,header)\n修改登录和注册页面尾部\n\n## 商品列表思路\n![思路](web-server-note-10/1.png)\n从数据库当中取出对应商品展示到页面当中\n\t\t\n建表\n建立ORM\n把相关jar拷贝到工程当中\n建立servlet\n1.连接数据库\n2.从数据库当中获取数据\n3.把从数据库中取出的数据存放到request域当中\n4.转发到商品列表页面，转发时把request对象传入\n\n转发到jsp\n1.从请求域当中把数据获取出来\n2.从集合当中取出每一个商品，展示到页面当中\n商品列表\n## 获取数据\n\n导入goods表到数据库，根据表新建domain，设置好字段和bean，提供toString\n```java\npackage com.it666.servlet;\n\n@WebServlet(\"/GoodsServlet\")\npublic class GoodsServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tprotected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\t// 1.连接数据库\n\t\tQueryRunner qr = new QueryRunner(JDBCUtil.getDataSource());\n\t\tString sql = \"select * from goods\";\n\t\t// 2.获取数据\n\t\tList<Goods> allGoods = null;\n\t\ttry {\n\t\t\tallGoods = qr.query(sql, new BeanListHandler<Goods>(Goods.class));\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tSystem.out.println(allGoods);\n\t\t// 3. 把数据存到equest域\n\t\trequest.setAttribute(\"allGoods\", allGoods);\n\t\t// 4.转发到商品列表，转发时把request对象传入\n\t\trequest.getRequestDispatcher(\"/goods_list.jsp\").forward(request, response);\t\n\t}\n}\n```\n## 数据展示\nGoodsServlet\n```java\npackage com.it666.servlet;\n\n@WebServlet(\"/GoodsServlet\")\npublic class GoodsServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tprotected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\t// 1.连接数据库\n\t\tQueryRunner qr = new QueryRunner(JDBCUtil.getDataSource());\n\t\tString sql = \"select * from goods\";\n\t\t// 2.获取数据\n\t\tList<Goods> allGoods = null;\n\t\ttry {\n\t\t\tallGoods = qr.query(sql, new BeanListHandler<Goods>(Goods.class));\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tSystem.out.println(allGoods);\n\t\t// 3. 把数据存到equest域\n\t\trequest.setAttribute(\"allGoods\", allGoods);\n\t\t// 4.转发到商品列表，转发时把request对象传入\n\t\trequest.getRequestDispatcher(\"/goods_list.jsp\").forward(request, response);\t\n\t}\n}\n```\n修改goodList.jsp\n(前端改成单引号，防止和Java冲突)\n```jsp\n<!-- 热卖商品 -->\n<div id=\"hot_goods\">\n    <h3>热卖商品</h3>\n    <div class=\"hot_goods_body\">\n        <ul>\n            <%\n                //从域中取数据\n                List<Goods> allGoods = (List<Goods>) request.getAttribute(\"allGoods\");\n                System.out.print(allGoods);\n                if (allGoods != null) {\n                    // 取出每一个商品\n                    for (Goods pro : allGoods) {\n                        out.write(\"<li>\");\n                        out.write(\"<a href='#'>\");\n                        out.write(\"<img src='images/pimages/\"+pro.getImage()+\"' alt=''>\");\n                        out.write(\"<p>\"+pro.getName()+\"</p>\");\n                        out.write(\"<i id='yuan'>￥</i> <span\");\n                        out.write(\"id='price'>\"+pro.getPrice()+\"</span>\");\n                        out.write(\"</a>\");\n                        out.write(\"</li>\");\n                    }\n                } else {\n                    out.write(\"没有商品\");\n                }\n            %>\n\n        </ul>\n    </div>\n</div>\n```\n修改头部商品页面的入口地址，注意要加项目名称\n\n## 参考资料\n\n[Java零基础到高级JavaWeb与项目](https://study.163.com/course/introduction/1005981003.htm)","source":"_posts/web-server-note-10.md","raw":"---\ntitle: Web服务器笔记-商城列表\ncategories: Web服务器笔记\ndate: 2020-02-14 16:00:41\n---\n## 准备\n复制工程，右键工程-Properties-Web Project Settings-修改项目名\n修改.html为.jsp 右键修改文件编码为UTF-8\n在每个jsp头部加入\n```jsp\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n```\n修改网页代码中写死的项目名\n修改网页中写死的跳转html为jsp\n\n## 头部尾部分离\n新建header.jsp和footer.jsp (仅保留开头的配置，删除html代码)\n各自复制header和footer代码，(不需要body)去除不需要的css样式\n删除index中的header和footer代码和不需要的css样式 (index只留index.css,header保留common,footer,header)\n修改登录和注册页面尾部\n\n## 商品列表思路\n![思路](web-server-note-10/1.png)\n从数据库当中取出对应商品展示到页面当中\n\t\t\n建表\n建立ORM\n把相关jar拷贝到工程当中\n建立servlet\n1.连接数据库\n2.从数据库当中获取数据\n3.把从数据库中取出的数据存放到request域当中\n4.转发到商品列表页面，转发时把request对象传入\n\n转发到jsp\n1.从请求域当中把数据获取出来\n2.从集合当中取出每一个商品，展示到页面当中\n商品列表\n## 获取数据\n\n导入goods表到数据库，根据表新建domain，设置好字段和bean，提供toString\n```java\npackage com.it666.servlet;\n\n@WebServlet(\"/GoodsServlet\")\npublic class GoodsServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tprotected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\t// 1.连接数据库\n\t\tQueryRunner qr = new QueryRunner(JDBCUtil.getDataSource());\n\t\tString sql = \"select * from goods\";\n\t\t// 2.获取数据\n\t\tList<Goods> allGoods = null;\n\t\ttry {\n\t\t\tallGoods = qr.query(sql, new BeanListHandler<Goods>(Goods.class));\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tSystem.out.println(allGoods);\n\t\t// 3. 把数据存到equest域\n\t\trequest.setAttribute(\"allGoods\", allGoods);\n\t\t// 4.转发到商品列表，转发时把request对象传入\n\t\trequest.getRequestDispatcher(\"/goods_list.jsp\").forward(request, response);\t\n\t}\n}\n```\n## 数据展示\nGoodsServlet\n```java\npackage com.it666.servlet;\n\n@WebServlet(\"/GoodsServlet\")\npublic class GoodsServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tprotected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\t// 1.连接数据库\n\t\tQueryRunner qr = new QueryRunner(JDBCUtil.getDataSource());\n\t\tString sql = \"select * from goods\";\n\t\t// 2.获取数据\n\t\tList<Goods> allGoods = null;\n\t\ttry {\n\t\t\tallGoods = qr.query(sql, new BeanListHandler<Goods>(Goods.class));\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tSystem.out.println(allGoods);\n\t\t// 3. 把数据存到equest域\n\t\trequest.setAttribute(\"allGoods\", allGoods);\n\t\t// 4.转发到商品列表，转发时把request对象传入\n\t\trequest.getRequestDispatcher(\"/goods_list.jsp\").forward(request, response);\t\n\t}\n}\n```\n修改goodList.jsp\n(前端改成单引号，防止和Java冲突)\n```jsp\n<!-- 热卖商品 -->\n<div id=\"hot_goods\">\n    <h3>热卖商品</h3>\n    <div class=\"hot_goods_body\">\n        <ul>\n            <%\n                //从域中取数据\n                List<Goods> allGoods = (List<Goods>) request.getAttribute(\"allGoods\");\n                System.out.print(allGoods);\n                if (allGoods != null) {\n                    // 取出每一个商品\n                    for (Goods pro : allGoods) {\n                        out.write(\"<li>\");\n                        out.write(\"<a href='#'>\");\n                        out.write(\"<img src='images/pimages/\"+pro.getImage()+\"' alt=''>\");\n                        out.write(\"<p>\"+pro.getName()+\"</p>\");\n                        out.write(\"<i id='yuan'>￥</i> <span\");\n                        out.write(\"id='price'>\"+pro.getPrice()+\"</span>\");\n                        out.write(\"</a>\");\n                        out.write(\"</li>\");\n                    }\n                } else {\n                    out.write(\"没有商品\");\n                }\n            %>\n\n        </ul>\n    </div>\n</div>\n```\n修改头部商品页面的入口地址，注意要加项目名称\n\n## 参考资料\n\n[Java零基础到高级JavaWeb与项目](https://study.163.com/course/introduction/1005981003.htm)","slug":"web-server-note-10","published":1,"updated":"2020-06-13T02:55:34.836Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke3x9g6f001tzgvu1d4h3t9h","content":"<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><p>复制工程，右键工程-Properties-Web Project Settings-修改项目名<br>修改.html为.jsp 右键修改文件编码为UTF-8<br>在每个jsp头部加入</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=<span class=\"string\">\"java\"</span> contentType=<span class=\"string\">\"text/html; charset=UTF-8\"</span></span><br><span class=\"line\">    pageEncoding=<span class=\"string\">\"UTF-8\"</span>%&gt;</span><br></pre></td></tr></table></figure>\n<p>修改网页代码中写死的项目名<br>修改网页中写死的跳转html为jsp</p>\n<h2 id=\"头部尾部分离\"><a href=\"#头部尾部分离\" class=\"headerlink\" title=\"头部尾部分离\"></a>头部尾部分离</h2><p>新建header.jsp和footer.jsp (仅保留开头的配置，删除html代码)<br>各自复制header和footer代码，(不需要body)去除不需要的css样式<br>删除index中的header和footer代码和不需要的css样式 (index只留index.css,header保留common,footer,header)<br>修改登录和注册页面尾部</p>\n<h2 id=\"商品列表思路\"><a href=\"#商品列表思路\" class=\"headerlink\" title=\"商品列表思路\"></a>商品列表思路</h2><p><img src=\"/2020/02/14/web-server-note-10/1.png\" alt=\"思路\"><br>从数据库当中取出对应商品展示到页面当中</p>\n<p>建表<br>建立ORM<br>把相关jar拷贝到工程当中<br>建立servlet<br>1.连接数据库<br>2.从数据库当中获取数据<br>3.把从数据库中取出的数据存放到request域当中<br>4.转发到商品列表页面，转发时把request对象传入</p>\n<p>转发到jsp<br>1.从请求域当中把数据获取出来<br>2.从集合当中取出每一个商品，展示到页面当中<br>商品列表</p>\n<h2 id=\"获取数据\"><a href=\"#获取数据\" class=\"headerlink\" title=\"获取数据\"></a>获取数据</h2><p>导入goods表到数据库，根据表新建domain，设置好字段和bean，提供toString</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.it666.servlet;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/GoodsServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GoodsServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.连接数据库</span></span><br><span class=\"line\">\t\tQueryRunner qr = <span class=\"keyword\">new</span> QueryRunner(JDBCUtil.getDataSource());</span><br><span class=\"line\">\t\tString sql = <span class=\"string\">\"select * from goods\"</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 2.获取数据</span></span><br><span class=\"line\">\t\tList&lt;Goods&gt; allGoods = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tallGoods = qr.query(sql, <span class=\"keyword\">new</span> BeanListHandler&lt;Goods&gt;(Goods.class));</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(allGoods);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 3. 把数据存到equest域</span></span><br><span class=\"line\">\t\trequest.setAttribute(<span class=\"string\">\"allGoods\"</span>, allGoods);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 4.转发到商品列表，转发时把request对象传入</span></span><br><span class=\"line\">\t\trequest.getRequestDispatcher(<span class=\"string\">\"/goods_list.jsp\"</span>).forward(request, response);\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"数据展示\"><a href=\"#数据展示\" class=\"headerlink\" title=\"数据展示\"></a>数据展示</h2><p>GoodsServlet</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.it666.servlet;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/GoodsServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GoodsServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.连接数据库</span></span><br><span class=\"line\">\t\tQueryRunner qr = <span class=\"keyword\">new</span> QueryRunner(JDBCUtil.getDataSource());</span><br><span class=\"line\">\t\tString sql = <span class=\"string\">\"select * from goods\"</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 2.获取数据</span></span><br><span class=\"line\">\t\tList&lt;Goods&gt; allGoods = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tallGoods = qr.query(sql, <span class=\"keyword\">new</span> BeanListHandler&lt;Goods&gt;(Goods.class));</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(allGoods);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 3. 把数据存到equest域</span></span><br><span class=\"line\">\t\trequest.setAttribute(<span class=\"string\">\"allGoods\"</span>, allGoods);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 4.转发到商品列表，转发时把request对象传入</span></span><br><span class=\"line\">\t\trequest.getRequestDispatcher(<span class=\"string\">\"/goods_list.jsp\"</span>).forward(request, response);\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改goodList.jsp<br>(前端改成单引号，防止和Java冲突)</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 热卖商品 --&gt;</span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"hot_goods\"</span>&gt;</span><br><span class=\"line\">    &lt;h3&gt;热卖商品&lt;/h3&gt;</span><br><span class=\"line\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"hot_goods_body\"</span>&gt;</span><br><span class=\"line\">        &lt;ul&gt;</span><br><span class=\"line\">            &lt;%</span><br><span class=\"line\">                <span class=\"comment\">//从域中取数据</span></span><br><span class=\"line\">                List&lt;Goods&gt; allGoods = (List&lt;Goods&gt;) request.getAttribute(<span class=\"string\">\"allGoods\"</span>);</span><br><span class=\"line\">                System.out.print(allGoods);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (allGoods != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 取出每一个商品</span></span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (Goods pro : allGoods) &#123;</span><br><span class=\"line\">                        out.write(<span class=\"string\">\"&lt;li&gt;\"</span>);</span><br><span class=\"line\">                        out.write(<span class=\"string\">\"&lt;a href='#'&gt;\"</span>);</span><br><span class=\"line\">                        out.write(<span class=\"string\">\"&lt;img src='images/pimages/\"</span>+pro.getImage()+<span class=\"string\">\"' alt=''&gt;\"</span>);</span><br><span class=\"line\">                        out.write(<span class=\"string\">\"&lt;p&gt;\"</span>+pro.getName()+<span class=\"string\">\"&lt;/p&gt;\"</span>);</span><br><span class=\"line\">                        out.write(<span class=\"string\">\"&lt;i id='yuan'&gt;￥&lt;/i&gt; &lt;span\"</span>);</span><br><span class=\"line\">                        out.write(<span class=\"string\">\"id='price'&gt;\"</span>+pro.getPrice()+<span class=\"string\">\"&lt;/span&gt;\"</span>);</span><br><span class=\"line\">                        out.write(<span class=\"string\">\"&lt;/a&gt;\"</span>);</span><br><span class=\"line\">                        out.write(<span class=\"string\">\"&lt;/li&gt;\"</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    out.write(<span class=\"string\">\"没有商品\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;/ul&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>修改头部商品页面的入口地址，注意要加项目名称</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005981003.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级JavaWeb与项目</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><p>复制工程，右键工程-Properties-Web Project Settings-修改项目名<br>修改.html为.jsp 右键修改文件编码为UTF-8<br>在每个jsp头部加入</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=<span class=\"string\">\"java\"</span> contentType=<span class=\"string\">\"text/html; charset=UTF-8\"</span></span><br><span class=\"line\">    pageEncoding=<span class=\"string\">\"UTF-8\"</span>%&gt;</span><br></pre></td></tr></table></figure>\n<p>修改网页代码中写死的项目名<br>修改网页中写死的跳转html为jsp</p>\n<h2 id=\"头部尾部分离\"><a href=\"#头部尾部分离\" class=\"headerlink\" title=\"头部尾部分离\"></a>头部尾部分离</h2><p>新建header.jsp和footer.jsp (仅保留开头的配置，删除html代码)<br>各自复制header和footer代码，(不需要body)去除不需要的css样式<br>删除index中的header和footer代码和不需要的css样式 (index只留index.css,header保留common,footer,header)<br>修改登录和注册页面尾部</p>\n<h2 id=\"商品列表思路\"><a href=\"#商品列表思路\" class=\"headerlink\" title=\"商品列表思路\"></a>商品列表思路</h2><p><img src=\"/2020/02/14/web-server-note-10/1.png\" alt=\"思路\"><br>从数据库当中取出对应商品展示到页面当中</p>\n<p>建表<br>建立ORM<br>把相关jar拷贝到工程当中<br>建立servlet<br>1.连接数据库<br>2.从数据库当中获取数据<br>3.把从数据库中取出的数据存放到request域当中<br>4.转发到商品列表页面，转发时把request对象传入</p>\n<p>转发到jsp<br>1.从请求域当中把数据获取出来<br>2.从集合当中取出每一个商品，展示到页面当中<br>商品列表</p>\n<h2 id=\"获取数据\"><a href=\"#获取数据\" class=\"headerlink\" title=\"获取数据\"></a>获取数据</h2><p>导入goods表到数据库，根据表新建domain，设置好字段和bean，提供toString</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.it666.servlet;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/GoodsServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GoodsServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.连接数据库</span></span><br><span class=\"line\">\t\tQueryRunner qr = <span class=\"keyword\">new</span> QueryRunner(JDBCUtil.getDataSource());</span><br><span class=\"line\">\t\tString sql = <span class=\"string\">\"select * from goods\"</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 2.获取数据</span></span><br><span class=\"line\">\t\tList&lt;Goods&gt; allGoods = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tallGoods = qr.query(sql, <span class=\"keyword\">new</span> BeanListHandler&lt;Goods&gt;(Goods.class));</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(allGoods);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 3. 把数据存到equest域</span></span><br><span class=\"line\">\t\trequest.setAttribute(<span class=\"string\">\"allGoods\"</span>, allGoods);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 4.转发到商品列表，转发时把request对象传入</span></span><br><span class=\"line\">\t\trequest.getRequestDispatcher(<span class=\"string\">\"/goods_list.jsp\"</span>).forward(request, response);\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"数据展示\"><a href=\"#数据展示\" class=\"headerlink\" title=\"数据展示\"></a>数据展示</h2><p>GoodsServlet</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.it666.servlet;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/GoodsServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GoodsServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.连接数据库</span></span><br><span class=\"line\">\t\tQueryRunner qr = <span class=\"keyword\">new</span> QueryRunner(JDBCUtil.getDataSource());</span><br><span class=\"line\">\t\tString sql = <span class=\"string\">\"select * from goods\"</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 2.获取数据</span></span><br><span class=\"line\">\t\tList&lt;Goods&gt; allGoods = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tallGoods = qr.query(sql, <span class=\"keyword\">new</span> BeanListHandler&lt;Goods&gt;(Goods.class));</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(allGoods);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 3. 把数据存到equest域</span></span><br><span class=\"line\">\t\trequest.setAttribute(<span class=\"string\">\"allGoods\"</span>, allGoods);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 4.转发到商品列表，转发时把request对象传入</span></span><br><span class=\"line\">\t\trequest.getRequestDispatcher(<span class=\"string\">\"/goods_list.jsp\"</span>).forward(request, response);\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改goodList.jsp<br>(前端改成单引号，防止和Java冲突)</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 热卖商品 --&gt;</span><br><span class=\"line\">&lt;div id=<span class=\"string\">\"hot_goods\"</span>&gt;</span><br><span class=\"line\">    &lt;h3&gt;热卖商品&lt;/h3&gt;</span><br><span class=\"line\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"hot_goods_body\"</span>&gt;</span><br><span class=\"line\">        &lt;ul&gt;</span><br><span class=\"line\">            &lt;%</span><br><span class=\"line\">                <span class=\"comment\">//从域中取数据</span></span><br><span class=\"line\">                List&lt;Goods&gt; allGoods = (List&lt;Goods&gt;) request.getAttribute(<span class=\"string\">\"allGoods\"</span>);</span><br><span class=\"line\">                System.out.print(allGoods);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (allGoods != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 取出每一个商品</span></span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (Goods pro : allGoods) &#123;</span><br><span class=\"line\">                        out.write(<span class=\"string\">\"&lt;li&gt;\"</span>);</span><br><span class=\"line\">                        out.write(<span class=\"string\">\"&lt;a href='#'&gt;\"</span>);</span><br><span class=\"line\">                        out.write(<span class=\"string\">\"&lt;img src='images/pimages/\"</span>+pro.getImage()+<span class=\"string\">\"' alt=''&gt;\"</span>);</span><br><span class=\"line\">                        out.write(<span class=\"string\">\"&lt;p&gt;\"</span>+pro.getName()+<span class=\"string\">\"&lt;/p&gt;\"</span>);</span><br><span class=\"line\">                        out.write(<span class=\"string\">\"&lt;i id='yuan'&gt;￥&lt;/i&gt; &lt;span\"</span>);</span><br><span class=\"line\">                        out.write(<span class=\"string\">\"id='price'&gt;\"</span>+pro.getPrice()+<span class=\"string\">\"&lt;/span&gt;\"</span>);</span><br><span class=\"line\">                        out.write(<span class=\"string\">\"&lt;/a&gt;\"</span>);</span><br><span class=\"line\">                        out.write(<span class=\"string\">\"&lt;/li&gt;\"</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    out.write(<span class=\"string\">\"没有商品\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;/ul&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>修改头部商品页面的入口地址，注意要加项目名称</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005981003.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级JavaWeb与项目</a></p>\n"},{"title":"Web服务器笔记-http协议","date":"2020-02-05T13:48:45.000Z","_content":"## CS与BS\n软件使用方式上两种划分\n#### C/S:Client/Server PC客户端、服务器架构\n特点：在服务器当中就主要是一个数据库，把所有的业务逻辑以及界面都交给客户端完成\n优点：较为安全，用户界面丰富，用户体验好\n缺点：每次升级都要重新安装，针对于不同的操作系统开发，可移植性差\n\n#### B/S：Browser/Server 浏览器/服务器架构\n特点：\n- 基于浏览器访问的应用\n- 把业务层交给服务器来完成，客户端仅仅做界面的渲染和数据的交换\n\n优点：只开发服务器端，可以跨平台、移植性很强\n缺点：安全性比较低，用户体验较差\n\n## Web资源\nWEB网页，它用于表示网络主机上供外界访问的资源\nWeb资源分类\n- 静态Web资源：指web页面中供人们浏览的数据始终是不变\n- 动态Web资源：指web页面中供人们浏览的数据是由程序产生的，不同时间点访问web页面看到的内容各不相同\n\nweb资源存放在哪里\n所有的web资源都放在一个web服务器当中\nweb服务器就是可以供外界访问web资源的一个软件\nweb资源放到指定的目录当中，就可以通过对应的端口在浏览器当中访问到\n\nURL地址\n协议：//主机地址：端口号/资源地址\n![URL协议](web-server-note-1/1.png)\n资源访问流程\n客户端：浏览器、Android程序、iOS程序、微信小程序\n服务器：php服务器、tomcat服务器、nodeJS服务器等\n\nhttp请求的过程\n浏览器通过网址（就是IP地址）找到对应的电脑，电脑当中安装的有web服务器，通过端口号找到对应服务器，服务器把页面返回给你\n\nBS结构流程图\n![BS结构流程图](web-server-note-1/2.png)\n\n#### 请求与响应\n请求：把客户端请求发送给服务器\n响应：服务器把你要的数据发送给客户端\n\n请求与响应都要一定的格式\n- 约定好客户端以什么样的格式把数据给服务器\n- 约定好服务器以什么样的格式把数据给客户端\n- 这个约定使用的就是HTTP协议\n\n## HTTP协议\nHTTP，超文本传输协议 (HyperText Transfer Protocol) 是互联网上应用最为广泛的一种网络协议\n所有的WWW文件都必须遵守这个标准\n设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法\n约束请求与响应的规则\n\nHTTP组成部分：请求、响应\n请求与响应都是成对存在的\n\n请求的发送方式\n1. 通过浏览器的地址栏\n2. 通过html当中的form表单\n3. 通过a链接的href\n4. src属性\t\t\n\n\n## Http请求\n#### 1.请求行\n请求方式\nPOST\nGET\n\n协议版本\nHTTP/1.0，发送请求，创建一次连接，获得一个web资源，连接断开\nHTTP/1.1，发送请求，创建一次连接，获得**多个web资源，保持连接**\n#### 2.请求头\n请求头是客户端发送给服务器端的一些信息\n使用键值对表示key：value\n自动的把客户端的信息发送给服务器\n\n#### 3.常见请求头\nReferer：    浏览器通知服务器，当前请求来自何处。如果是直接访问，则不会有这个头。常用于：防盗链\nIf-Modified-Since：浏览器通知服务器，本地缓存的最后变更时间\nCookie：用于存放浏览器缓存的cookie信息\nUser-Agent：浏览器通知服务器，客户端浏览器与操作系统相关信息\nConnection：保持连接状态。Keep-Alive 连接中，close 已关闭\nHost：请求的服务器主机名\nContent-Length：请求体的长度\nContent-Type：如果是POST请求，会有这个头，默认值为application/x-www-form-urlencoded，表示请求体内容使用url编码\n\nAccept：浏览器可支持的MIME类型，文件类型的一种描述方式\n- text/html ，html文件\n- text/css，css文件\n- text/javascript，js文件\n- image/*，所有图片文件\n\nAccept-Encoding：浏览器通知服务器，浏览器支持的数据压缩格式。如：GZIP压缩\nAccept-Language：浏览器通知服务器，浏览器支持的语言\n\n#### 4.请求体\n当请求方式是post，请求体会有请求的参数\n如果请求方式为get，请求参数不会出现在请求体中，会拼接在url地址后面\n\n![http请求](./web-server-note-1/3.png)\n\n## Http响应\n#### 1.状态码\n200 ：请求成功\n302 ：请求重定向\n304 ：请求资源没有改变，访问本地缓存\n404 ：请求资源不存在，通常是用户路径编写错误，也可能是服务器资源已删除\n500 ：服务器内部错误，通常程序抛异常\n\n#### 2.响应头\n服务器端将信息以键值对的形式返回给客户端\n自动的把服务器端的信息传给客户端\n\n#### 3.常见响应头\nLocation：指定响应的路径，需要与状态码302配合使用，完成跳转\nContent-Type：响应正文的类型（MIME类型）\nContent-Disposition：通过浏览器以下载方式解析正文\nSet-Cookie：服务器向浏览器写入cookie\nContent-Encoding：服务器使用的压缩格式\nContent-length：响应正文的长度\nRefresh：定时刷新\nServer：服务器名称，默认值：Apache-Coyote/1.1。可以通过conf/server.xml配置进行修改\nLast-Modified：服务器通知浏览器，文件的最后修改时间\n\n#### 4.响应体\n响应体是服务器回写给客户端的页面正文\n浏览器将正文加载到内存\n然后解析渲染显示页面内容\n\n![http响应](web-server-note-1/4.png)\n\n\n## 请求方式\n\n8种请求类型\n1. OPTIONS：返回服务器针对特定资源所支持的HTTP请求方法，也可以利用向web服务器发送‘*’的请求来测试服务器的功能性\n2. HEAD：请求指定的页面信息，并返回头部信息\n3. GET：请求指定的页面信息，并返回实体主体\n4. POST：向指定资源提交数据进行处理请求\n5. PUT：向指定资源位置上传其最新内容\n6. DELETE：请求服务器删除Request-URL所标识的资源\n7. TRACE：回显服务器收到的请求，主要用于测试或诊断\n8. CONNECT：HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器\n\t\n## 常用两种请求\n#### GET\nGET 方法向页面请求发送参数\n地址和参数信息中间用 ? 字符分隔\n    http://www.it666.com/hello?key1=value1&key2=value2\n查询字符串会显示在地址栏的URL中，不安全，请不要使用GET请求提交敏感数据\nGET 方法有大小限制：请求字符串中最多只能有 1024 个字符\nGET请求能够被缓存\nGET请求会保存在浏览器的浏览记录中\n可以添加书签\n编码类型为application/x-www-form-urlencoded\n只允许ASCII字符类型，不能用二进制流\n点击刷新时，不会有反应\nGET请求主要用以获取数据\n\n#### POST\nPOST 方法向页面请求发送参数\n使用POST方法时，查询字符串在POST信息中单独存在，和HTTP请求一起发送到服务器\n编码类型为：application/x-www-form-urlencoded or multipart/form-data. 请为二进制数据使用multipart编码\n没有历史记录\n参数类型没有限制，可以是字符串也可以是二进制流\n数据不会显示在地址栏中，也不会缓存下来或保存在浏览记录中，所以看POST求情比GET请求安全，但也不是最安全的方式。如需要传送敏感数据，请使用加密方式传输\n查询字符串不会显示在地址栏中\nPOST传输的数据量大，可以达到2M，而Get方法由于受到URL长度限制,只能传递大约1024字节. \nPOST就是为了将数据传送到服务器段，Get就是为了从服务器段取得数据\n\n## 参考资料\n[Java零基础到高级JavaWeb与项目](https://study.163.com/course/introduction/1005981003.htm)","source":"_posts/web-server-note-1.md","raw":"---\ntitle: Web服务器笔记-http协议\ncategories: Web服务器笔记\ndate: 2020-02-05 21:48:45\n---\n## CS与BS\n软件使用方式上两种划分\n#### C/S:Client/Server PC客户端、服务器架构\n特点：在服务器当中就主要是一个数据库，把所有的业务逻辑以及界面都交给客户端完成\n优点：较为安全，用户界面丰富，用户体验好\n缺点：每次升级都要重新安装，针对于不同的操作系统开发，可移植性差\n\n#### B/S：Browser/Server 浏览器/服务器架构\n特点：\n- 基于浏览器访问的应用\n- 把业务层交给服务器来完成，客户端仅仅做界面的渲染和数据的交换\n\n优点：只开发服务器端，可以跨平台、移植性很强\n缺点：安全性比较低，用户体验较差\n\n## Web资源\nWEB网页，它用于表示网络主机上供外界访问的资源\nWeb资源分类\n- 静态Web资源：指web页面中供人们浏览的数据始终是不变\n- 动态Web资源：指web页面中供人们浏览的数据是由程序产生的，不同时间点访问web页面看到的内容各不相同\n\nweb资源存放在哪里\n所有的web资源都放在一个web服务器当中\nweb服务器就是可以供外界访问web资源的一个软件\nweb资源放到指定的目录当中，就可以通过对应的端口在浏览器当中访问到\n\nURL地址\n协议：//主机地址：端口号/资源地址\n![URL协议](web-server-note-1/1.png)\n资源访问流程\n客户端：浏览器、Android程序、iOS程序、微信小程序\n服务器：php服务器、tomcat服务器、nodeJS服务器等\n\nhttp请求的过程\n浏览器通过网址（就是IP地址）找到对应的电脑，电脑当中安装的有web服务器，通过端口号找到对应服务器，服务器把页面返回给你\n\nBS结构流程图\n![BS结构流程图](web-server-note-1/2.png)\n\n#### 请求与响应\n请求：把客户端请求发送给服务器\n响应：服务器把你要的数据发送给客户端\n\n请求与响应都要一定的格式\n- 约定好客户端以什么样的格式把数据给服务器\n- 约定好服务器以什么样的格式把数据给客户端\n- 这个约定使用的就是HTTP协议\n\n## HTTP协议\nHTTP，超文本传输协议 (HyperText Transfer Protocol) 是互联网上应用最为广泛的一种网络协议\n所有的WWW文件都必须遵守这个标准\n设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法\n约束请求与响应的规则\n\nHTTP组成部分：请求、响应\n请求与响应都是成对存在的\n\n请求的发送方式\n1. 通过浏览器的地址栏\n2. 通过html当中的form表单\n3. 通过a链接的href\n4. src属性\t\t\n\n\n## Http请求\n#### 1.请求行\n请求方式\nPOST\nGET\n\n协议版本\nHTTP/1.0，发送请求，创建一次连接，获得一个web资源，连接断开\nHTTP/1.1，发送请求，创建一次连接，获得**多个web资源，保持连接**\n#### 2.请求头\n请求头是客户端发送给服务器端的一些信息\n使用键值对表示key：value\n自动的把客户端的信息发送给服务器\n\n#### 3.常见请求头\nReferer：    浏览器通知服务器，当前请求来自何处。如果是直接访问，则不会有这个头。常用于：防盗链\nIf-Modified-Since：浏览器通知服务器，本地缓存的最后变更时间\nCookie：用于存放浏览器缓存的cookie信息\nUser-Agent：浏览器通知服务器，客户端浏览器与操作系统相关信息\nConnection：保持连接状态。Keep-Alive 连接中，close 已关闭\nHost：请求的服务器主机名\nContent-Length：请求体的长度\nContent-Type：如果是POST请求，会有这个头，默认值为application/x-www-form-urlencoded，表示请求体内容使用url编码\n\nAccept：浏览器可支持的MIME类型，文件类型的一种描述方式\n- text/html ，html文件\n- text/css，css文件\n- text/javascript，js文件\n- image/*，所有图片文件\n\nAccept-Encoding：浏览器通知服务器，浏览器支持的数据压缩格式。如：GZIP压缩\nAccept-Language：浏览器通知服务器，浏览器支持的语言\n\n#### 4.请求体\n当请求方式是post，请求体会有请求的参数\n如果请求方式为get，请求参数不会出现在请求体中，会拼接在url地址后面\n\n![http请求](./web-server-note-1/3.png)\n\n## Http响应\n#### 1.状态码\n200 ：请求成功\n302 ：请求重定向\n304 ：请求资源没有改变，访问本地缓存\n404 ：请求资源不存在，通常是用户路径编写错误，也可能是服务器资源已删除\n500 ：服务器内部错误，通常程序抛异常\n\n#### 2.响应头\n服务器端将信息以键值对的形式返回给客户端\n自动的把服务器端的信息传给客户端\n\n#### 3.常见响应头\nLocation：指定响应的路径，需要与状态码302配合使用，完成跳转\nContent-Type：响应正文的类型（MIME类型）\nContent-Disposition：通过浏览器以下载方式解析正文\nSet-Cookie：服务器向浏览器写入cookie\nContent-Encoding：服务器使用的压缩格式\nContent-length：响应正文的长度\nRefresh：定时刷新\nServer：服务器名称，默认值：Apache-Coyote/1.1。可以通过conf/server.xml配置进行修改\nLast-Modified：服务器通知浏览器，文件的最后修改时间\n\n#### 4.响应体\n响应体是服务器回写给客户端的页面正文\n浏览器将正文加载到内存\n然后解析渲染显示页面内容\n\n![http响应](web-server-note-1/4.png)\n\n\n## 请求方式\n\n8种请求类型\n1. OPTIONS：返回服务器针对特定资源所支持的HTTP请求方法，也可以利用向web服务器发送‘*’的请求来测试服务器的功能性\n2. HEAD：请求指定的页面信息，并返回头部信息\n3. GET：请求指定的页面信息，并返回实体主体\n4. POST：向指定资源提交数据进行处理请求\n5. PUT：向指定资源位置上传其最新内容\n6. DELETE：请求服务器删除Request-URL所标识的资源\n7. TRACE：回显服务器收到的请求，主要用于测试或诊断\n8. CONNECT：HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器\n\t\n## 常用两种请求\n#### GET\nGET 方法向页面请求发送参数\n地址和参数信息中间用 ? 字符分隔\n    http://www.it666.com/hello?key1=value1&key2=value2\n查询字符串会显示在地址栏的URL中，不安全，请不要使用GET请求提交敏感数据\nGET 方法有大小限制：请求字符串中最多只能有 1024 个字符\nGET请求能够被缓存\nGET请求会保存在浏览器的浏览记录中\n可以添加书签\n编码类型为application/x-www-form-urlencoded\n只允许ASCII字符类型，不能用二进制流\n点击刷新时，不会有反应\nGET请求主要用以获取数据\n\n#### POST\nPOST 方法向页面请求发送参数\n使用POST方法时，查询字符串在POST信息中单独存在，和HTTP请求一起发送到服务器\n编码类型为：application/x-www-form-urlencoded or multipart/form-data. 请为二进制数据使用multipart编码\n没有历史记录\n参数类型没有限制，可以是字符串也可以是二进制流\n数据不会显示在地址栏中，也不会缓存下来或保存在浏览记录中，所以看POST求情比GET请求安全，但也不是最安全的方式。如需要传送敏感数据，请使用加密方式传输\n查询字符串不会显示在地址栏中\nPOST传输的数据量大，可以达到2M，而Get方法由于受到URL长度限制,只能传递大约1024字节. \nPOST就是为了将数据传送到服务器段，Get就是为了从服务器段取得数据\n\n## 参考资料\n[Java零基础到高级JavaWeb与项目](https://study.163.com/course/introduction/1005981003.htm)","slug":"web-server-note-1","published":1,"updated":"2020-06-13T02:55:34.832Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke3x9g6g001vzgvu2eza92yx","content":"<h2 id=\"CS与BS\"><a href=\"#CS与BS\" class=\"headerlink\" title=\"CS与BS\"></a>CS与BS</h2><p>软件使用方式上两种划分</p>\n<h4 id=\"C-S-Client-Server-PC客户端、服务器架构\"><a href=\"#C-S-Client-Server-PC客户端、服务器架构\" class=\"headerlink\" title=\"C/S:Client/Server PC客户端、服务器架构\"></a>C/S:Client/Server PC客户端、服务器架构</h4><p>特点：在服务器当中就主要是一个数据库，把所有的业务逻辑以及界面都交给客户端完成<br>优点：较为安全，用户界面丰富，用户体验好<br>缺点：每次升级都要重新安装，针对于不同的操作系统开发，可移植性差</p>\n<h4 id=\"B-S：Browser-Server-浏览器-服务器架构\"><a href=\"#B-S：Browser-Server-浏览器-服务器架构\" class=\"headerlink\" title=\"B/S：Browser/Server 浏览器/服务器架构\"></a>B/S：Browser/Server 浏览器/服务器架构</h4><p>特点：</p>\n<ul>\n<li>基于浏览器访问的应用</li>\n<li>把业务层交给服务器来完成，客户端仅仅做界面的渲染和数据的交换</li>\n</ul>\n<p>优点：只开发服务器端，可以跨平台、移植性很强<br>缺点：安全性比较低，用户体验较差</p>\n<h2 id=\"Web资源\"><a href=\"#Web资源\" class=\"headerlink\" title=\"Web资源\"></a>Web资源</h2><p>WEB网页，它用于表示网络主机上供外界访问的资源<br>Web资源分类</p>\n<ul>\n<li>静态Web资源：指web页面中供人们浏览的数据始终是不变</li>\n<li>动态Web资源：指web页面中供人们浏览的数据是由程序产生的，不同时间点访问web页面看到的内容各不相同</li>\n</ul>\n<p>web资源存放在哪里<br>所有的web资源都放在一个web服务器当中<br>web服务器就是可以供外界访问web资源的一个软件<br>web资源放到指定的目录当中，就可以通过对应的端口在浏览器当中访问到</p>\n<p>URL地址<br>协议：//主机地址：端口号/资源地址<br><img src=\"/2020/02/05/web-server-note-1/1.png\" alt=\"URL协议\"><br>资源访问流程<br>客户端：浏览器、Android程序、iOS程序、微信小程序<br>服务器：php服务器、tomcat服务器、nodeJS服务器等</p>\n<p>http请求的过程<br>浏览器通过网址（就是IP地址）找到对应的电脑，电脑当中安装的有web服务器，通过端口号找到对应服务器，服务器把页面返回给你</p>\n<p>BS结构流程图<br><img src=\"/2020/02/05/web-server-note-1/2.png\" alt=\"BS结构流程图\"></p>\n<h4 id=\"请求与响应\"><a href=\"#请求与响应\" class=\"headerlink\" title=\"请求与响应\"></a>请求与响应</h4><p>请求：把客户端请求发送给服务器<br>响应：服务器把你要的数据发送给客户端</p>\n<p>请求与响应都要一定的格式</p>\n<ul>\n<li>约定好客户端以什么样的格式把数据给服务器</li>\n<li>约定好服务器以什么样的格式把数据给客户端</li>\n<li>这个约定使用的就是HTTP协议</li>\n</ul>\n<h2 id=\"HTTP协议\"><a href=\"#HTTP协议\" class=\"headerlink\" title=\"HTTP协议\"></a>HTTP协议</h2><p>HTTP，超文本传输协议 (HyperText Transfer Protocol) 是互联网上应用最为广泛的一种网络协议<br>所有的WWW文件都必须遵守这个标准<br>设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法<br>约束请求与响应的规则</p>\n<p>HTTP组成部分：请求、响应<br>请求与响应都是成对存在的</p>\n<p>请求的发送方式</p>\n<ol>\n<li>通过浏览器的地址栏</li>\n<li>通过html当中的form表单</li>\n<li>通过a链接的href</li>\n<li>src属性        </li>\n</ol>\n<h2 id=\"Http请求\"><a href=\"#Http请求\" class=\"headerlink\" title=\"Http请求\"></a>Http请求</h2><h4 id=\"1-请求行\"><a href=\"#1-请求行\" class=\"headerlink\" title=\"1.请求行\"></a>1.请求行</h4><p>请求方式<br>POST<br>GET</p>\n<p>协议版本<br>HTTP/1.0，发送请求，创建一次连接，获得一个web资源，连接断开<br>HTTP/1.1，发送请求，创建一次连接，获得<strong>多个web资源，保持连接</strong></p>\n<h4 id=\"2-请求头\"><a href=\"#2-请求头\" class=\"headerlink\" title=\"2.请求头\"></a>2.请求头</h4><p>请求头是客户端发送给服务器端的一些信息<br>使用键值对表示key：value<br>自动的把客户端的信息发送给服务器</p>\n<h4 id=\"3-常见请求头\"><a href=\"#3-常见请求头\" class=\"headerlink\" title=\"3.常见请求头\"></a>3.常见请求头</h4><p>Referer：    浏览器通知服务器，当前请求来自何处。如果是直接访问，则不会有这个头。常用于：防盗链<br>If-Modified-Since：浏览器通知服务器，本地缓存的最后变更时间<br>Cookie：用于存放浏览器缓存的cookie信息<br>User-Agent：浏览器通知服务器，客户端浏览器与操作系统相关信息<br>Connection：保持连接状态。Keep-Alive 连接中，close 已关闭<br>Host：请求的服务器主机名<br>Content-Length：请求体的长度<br>Content-Type：如果是POST请求，会有这个头，默认值为application/x-www-form-urlencoded，表示请求体内容使用url编码</p>\n<p>Accept：浏览器可支持的MIME类型，文件类型的一种描述方式</p>\n<ul>\n<li>text/html ，html文件</li>\n<li>text/css，css文件</li>\n<li>text/javascript，js文件</li>\n<li>image/*，所有图片文件</li>\n</ul>\n<p>Accept-Encoding：浏览器通知服务器，浏览器支持的数据压缩格式。如：GZIP压缩<br>Accept-Language：浏览器通知服务器，浏览器支持的语言</p>\n<h4 id=\"4-请求体\"><a href=\"#4-请求体\" class=\"headerlink\" title=\"4.请求体\"></a>4.请求体</h4><p>当请求方式是post，请求体会有请求的参数<br>如果请求方式为get，请求参数不会出现在请求体中，会拼接在url地址后面</p>\n<p><img src=\"/2020/02/05/web-server-note-1/3.png\" alt=\"http请求\"></p>\n<h2 id=\"Http响应\"><a href=\"#Http响应\" class=\"headerlink\" title=\"Http响应\"></a>Http响应</h2><h4 id=\"1-状态码\"><a href=\"#1-状态码\" class=\"headerlink\" title=\"1.状态码\"></a>1.状态码</h4><p>200 ：请求成功<br>302 ：请求重定向<br>304 ：请求资源没有改变，访问本地缓存<br>404 ：请求资源不存在，通常是用户路径编写错误，也可能是服务器资源已删除<br>500 ：服务器内部错误，通常程序抛异常</p>\n<h4 id=\"2-响应头\"><a href=\"#2-响应头\" class=\"headerlink\" title=\"2.响应头\"></a>2.响应头</h4><p>服务器端将信息以键值对的形式返回给客户端<br>自动的把服务器端的信息传给客户端</p>\n<h4 id=\"3-常见响应头\"><a href=\"#3-常见响应头\" class=\"headerlink\" title=\"3.常见响应头\"></a>3.常见响应头</h4><p>Location：指定响应的路径，需要与状态码302配合使用，完成跳转<br>Content-Type：响应正文的类型（MIME类型）<br>Content-Disposition：通过浏览器以下载方式解析正文<br>Set-Cookie：服务器向浏览器写入cookie<br>Content-Encoding：服务器使用的压缩格式<br>Content-length：响应正文的长度<br>Refresh：定时刷新<br>Server：服务器名称，默认值：Apache-Coyote/1.1。可以通过conf/server.xml配置进行修改<br>Last-Modified：服务器通知浏览器，文件的最后修改时间</p>\n<h4 id=\"4-响应体\"><a href=\"#4-响应体\" class=\"headerlink\" title=\"4.响应体\"></a>4.响应体</h4><p>响应体是服务器回写给客户端的页面正文<br>浏览器将正文加载到内存<br>然后解析渲染显示页面内容</p>\n<p><img src=\"/2020/02/05/web-server-note-1/4.png\" alt=\"http响应\"></p>\n<h2 id=\"请求方式\"><a href=\"#请求方式\" class=\"headerlink\" title=\"请求方式\"></a>请求方式</h2><p>8种请求类型</p>\n<ol>\n<li>OPTIONS：返回服务器针对特定资源所支持的HTTP请求方法，也可以利用向web服务器发送‘*’的请求来测试服务器的功能性</li>\n<li>HEAD：请求指定的页面信息，并返回头部信息</li>\n<li>GET：请求指定的页面信息，并返回实体主体</li>\n<li>POST：向指定资源提交数据进行处理请求</li>\n<li>PUT：向指定资源位置上传其最新内容</li>\n<li>DELETE：请求服务器删除Request-URL所标识的资源</li>\n<li>TRACE：回显服务器收到的请求，主要用于测试或诊断</li>\n<li>CONNECT：HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器</li>\n</ol>\n<h2 id=\"常用两种请求\"><a href=\"#常用两种请求\" class=\"headerlink\" title=\"常用两种请求\"></a>常用两种请求</h2><h4 id=\"GET\"><a href=\"#GET\" class=\"headerlink\" title=\"GET\"></a>GET</h4><p>GET 方法向页面请求发送参数<br>地址和参数信息中间用 ? 字符分隔<br>    <a href=\"http://www.it666.com/hello?key1=value1&amp;key2=value2\" target=\"_blank\" rel=\"noopener\">http://www.it666.com/hello?key1=value1&amp;key2=value2</a><br>查询字符串会显示在地址栏的URL中，不安全，请不要使用GET请求提交敏感数据<br>GET 方法有大小限制：请求字符串中最多只能有 1024 个字符<br>GET请求能够被缓存<br>GET请求会保存在浏览器的浏览记录中<br>可以添加书签<br>编码类型为application/x-www-form-urlencoded<br>只允许ASCII字符类型，不能用二进制流<br>点击刷新时，不会有反应<br>GET请求主要用以获取数据</p>\n<h4 id=\"POST\"><a href=\"#POST\" class=\"headerlink\" title=\"POST\"></a>POST</h4><p>POST 方法向页面请求发送参数<br>使用POST方法时，查询字符串在POST信息中单独存在，和HTTP请求一起发送到服务器<br>编码类型为：application/x-www-form-urlencoded or multipart/form-data. 请为二进制数据使用multipart编码<br>没有历史记录<br>参数类型没有限制，可以是字符串也可以是二进制流<br>数据不会显示在地址栏中，也不会缓存下来或保存在浏览记录中，所以看POST求情比GET请求安全，但也不是最安全的方式。如需要传送敏感数据，请使用加密方式传输<br>查询字符串不会显示在地址栏中<br>POST传输的数据量大，可以达到2M，而Get方法由于受到URL长度限制,只能传递大约1024字节.<br>POST就是为了将数据传送到服务器段，Get就是为了从服务器段取得数据</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005981003.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级JavaWeb与项目</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"CS与BS\"><a href=\"#CS与BS\" class=\"headerlink\" title=\"CS与BS\"></a>CS与BS</h2><p>软件使用方式上两种划分</p>\n<h4 id=\"C-S-Client-Server-PC客户端、服务器架构\"><a href=\"#C-S-Client-Server-PC客户端、服务器架构\" class=\"headerlink\" title=\"C/S:Client/Server PC客户端、服务器架构\"></a>C/S:Client/Server PC客户端、服务器架构</h4><p>特点：在服务器当中就主要是一个数据库，把所有的业务逻辑以及界面都交给客户端完成<br>优点：较为安全，用户界面丰富，用户体验好<br>缺点：每次升级都要重新安装，针对于不同的操作系统开发，可移植性差</p>\n<h4 id=\"B-S：Browser-Server-浏览器-服务器架构\"><a href=\"#B-S：Browser-Server-浏览器-服务器架构\" class=\"headerlink\" title=\"B/S：Browser/Server 浏览器/服务器架构\"></a>B/S：Browser/Server 浏览器/服务器架构</h4><p>特点：</p>\n<ul>\n<li>基于浏览器访问的应用</li>\n<li>把业务层交给服务器来完成，客户端仅仅做界面的渲染和数据的交换</li>\n</ul>\n<p>优点：只开发服务器端，可以跨平台、移植性很强<br>缺点：安全性比较低，用户体验较差</p>\n<h2 id=\"Web资源\"><a href=\"#Web资源\" class=\"headerlink\" title=\"Web资源\"></a>Web资源</h2><p>WEB网页，它用于表示网络主机上供外界访问的资源<br>Web资源分类</p>\n<ul>\n<li>静态Web资源：指web页面中供人们浏览的数据始终是不变</li>\n<li>动态Web资源：指web页面中供人们浏览的数据是由程序产生的，不同时间点访问web页面看到的内容各不相同</li>\n</ul>\n<p>web资源存放在哪里<br>所有的web资源都放在一个web服务器当中<br>web服务器就是可以供外界访问web资源的一个软件<br>web资源放到指定的目录当中，就可以通过对应的端口在浏览器当中访问到</p>\n<p>URL地址<br>协议：//主机地址：端口号/资源地址<br><img src=\"/2020/02/05/web-server-note-1/1.png\" alt=\"URL协议\"><br>资源访问流程<br>客户端：浏览器、Android程序、iOS程序、微信小程序<br>服务器：php服务器、tomcat服务器、nodeJS服务器等</p>\n<p>http请求的过程<br>浏览器通过网址（就是IP地址）找到对应的电脑，电脑当中安装的有web服务器，通过端口号找到对应服务器，服务器把页面返回给你</p>\n<p>BS结构流程图<br><img src=\"/2020/02/05/web-server-note-1/2.png\" alt=\"BS结构流程图\"></p>\n<h4 id=\"请求与响应\"><a href=\"#请求与响应\" class=\"headerlink\" title=\"请求与响应\"></a>请求与响应</h4><p>请求：把客户端请求发送给服务器<br>响应：服务器把你要的数据发送给客户端</p>\n<p>请求与响应都要一定的格式</p>\n<ul>\n<li>约定好客户端以什么样的格式把数据给服务器</li>\n<li>约定好服务器以什么样的格式把数据给客户端</li>\n<li>这个约定使用的就是HTTP协议</li>\n</ul>\n<h2 id=\"HTTP协议\"><a href=\"#HTTP协议\" class=\"headerlink\" title=\"HTTP协议\"></a>HTTP协议</h2><p>HTTP，超文本传输协议 (HyperText Transfer Protocol) 是互联网上应用最为广泛的一种网络协议<br>所有的WWW文件都必须遵守这个标准<br>设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法<br>约束请求与响应的规则</p>\n<p>HTTP组成部分：请求、响应<br>请求与响应都是成对存在的</p>\n<p>请求的发送方式</p>\n<ol>\n<li>通过浏览器的地址栏</li>\n<li>通过html当中的form表单</li>\n<li>通过a链接的href</li>\n<li>src属性        </li>\n</ol>\n<h2 id=\"Http请求\"><a href=\"#Http请求\" class=\"headerlink\" title=\"Http请求\"></a>Http请求</h2><h4 id=\"1-请求行\"><a href=\"#1-请求行\" class=\"headerlink\" title=\"1.请求行\"></a>1.请求行</h4><p>请求方式<br>POST<br>GET</p>\n<p>协议版本<br>HTTP/1.0，发送请求，创建一次连接，获得一个web资源，连接断开<br>HTTP/1.1，发送请求，创建一次连接，获得<strong>多个web资源，保持连接</strong></p>\n<h4 id=\"2-请求头\"><a href=\"#2-请求头\" class=\"headerlink\" title=\"2.请求头\"></a>2.请求头</h4><p>请求头是客户端发送给服务器端的一些信息<br>使用键值对表示key：value<br>自动的把客户端的信息发送给服务器</p>\n<h4 id=\"3-常见请求头\"><a href=\"#3-常见请求头\" class=\"headerlink\" title=\"3.常见请求头\"></a>3.常见请求头</h4><p>Referer：    浏览器通知服务器，当前请求来自何处。如果是直接访问，则不会有这个头。常用于：防盗链<br>If-Modified-Since：浏览器通知服务器，本地缓存的最后变更时间<br>Cookie：用于存放浏览器缓存的cookie信息<br>User-Agent：浏览器通知服务器，客户端浏览器与操作系统相关信息<br>Connection：保持连接状态。Keep-Alive 连接中，close 已关闭<br>Host：请求的服务器主机名<br>Content-Length：请求体的长度<br>Content-Type：如果是POST请求，会有这个头，默认值为application/x-www-form-urlencoded，表示请求体内容使用url编码</p>\n<p>Accept：浏览器可支持的MIME类型，文件类型的一种描述方式</p>\n<ul>\n<li>text/html ，html文件</li>\n<li>text/css，css文件</li>\n<li>text/javascript，js文件</li>\n<li>image/*，所有图片文件</li>\n</ul>\n<p>Accept-Encoding：浏览器通知服务器，浏览器支持的数据压缩格式。如：GZIP压缩<br>Accept-Language：浏览器通知服务器，浏览器支持的语言</p>\n<h4 id=\"4-请求体\"><a href=\"#4-请求体\" class=\"headerlink\" title=\"4.请求体\"></a>4.请求体</h4><p>当请求方式是post，请求体会有请求的参数<br>如果请求方式为get，请求参数不会出现在请求体中，会拼接在url地址后面</p>\n<p><img src=\"/2020/02/05/web-server-note-1/3.png\" alt=\"http请求\"></p>\n<h2 id=\"Http响应\"><a href=\"#Http响应\" class=\"headerlink\" title=\"Http响应\"></a>Http响应</h2><h4 id=\"1-状态码\"><a href=\"#1-状态码\" class=\"headerlink\" title=\"1.状态码\"></a>1.状态码</h4><p>200 ：请求成功<br>302 ：请求重定向<br>304 ：请求资源没有改变，访问本地缓存<br>404 ：请求资源不存在，通常是用户路径编写错误，也可能是服务器资源已删除<br>500 ：服务器内部错误，通常程序抛异常</p>\n<h4 id=\"2-响应头\"><a href=\"#2-响应头\" class=\"headerlink\" title=\"2.响应头\"></a>2.响应头</h4><p>服务器端将信息以键值对的形式返回给客户端<br>自动的把服务器端的信息传给客户端</p>\n<h4 id=\"3-常见响应头\"><a href=\"#3-常见响应头\" class=\"headerlink\" title=\"3.常见响应头\"></a>3.常见响应头</h4><p>Location：指定响应的路径，需要与状态码302配合使用，完成跳转<br>Content-Type：响应正文的类型（MIME类型）<br>Content-Disposition：通过浏览器以下载方式解析正文<br>Set-Cookie：服务器向浏览器写入cookie<br>Content-Encoding：服务器使用的压缩格式<br>Content-length：响应正文的长度<br>Refresh：定时刷新<br>Server：服务器名称，默认值：Apache-Coyote/1.1。可以通过conf/server.xml配置进行修改<br>Last-Modified：服务器通知浏览器，文件的最后修改时间</p>\n<h4 id=\"4-响应体\"><a href=\"#4-响应体\" class=\"headerlink\" title=\"4.响应体\"></a>4.响应体</h4><p>响应体是服务器回写给客户端的页面正文<br>浏览器将正文加载到内存<br>然后解析渲染显示页面内容</p>\n<p><img src=\"/2020/02/05/web-server-note-1/4.png\" alt=\"http响应\"></p>\n<h2 id=\"请求方式\"><a href=\"#请求方式\" class=\"headerlink\" title=\"请求方式\"></a>请求方式</h2><p>8种请求类型</p>\n<ol>\n<li>OPTIONS：返回服务器针对特定资源所支持的HTTP请求方法，也可以利用向web服务器发送‘*’的请求来测试服务器的功能性</li>\n<li>HEAD：请求指定的页面信息，并返回头部信息</li>\n<li>GET：请求指定的页面信息，并返回实体主体</li>\n<li>POST：向指定资源提交数据进行处理请求</li>\n<li>PUT：向指定资源位置上传其最新内容</li>\n<li>DELETE：请求服务器删除Request-URL所标识的资源</li>\n<li>TRACE：回显服务器收到的请求，主要用于测试或诊断</li>\n<li>CONNECT：HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器</li>\n</ol>\n<h2 id=\"常用两种请求\"><a href=\"#常用两种请求\" class=\"headerlink\" title=\"常用两种请求\"></a>常用两种请求</h2><h4 id=\"GET\"><a href=\"#GET\" class=\"headerlink\" title=\"GET\"></a>GET</h4><p>GET 方法向页面请求发送参数<br>地址和参数信息中间用 ? 字符分隔<br>    <a href=\"http://www.it666.com/hello?key1=value1&amp;key2=value2\" target=\"_blank\" rel=\"noopener\">http://www.it666.com/hello?key1=value1&amp;key2=value2</a><br>查询字符串会显示在地址栏的URL中，不安全，请不要使用GET请求提交敏感数据<br>GET 方法有大小限制：请求字符串中最多只能有 1024 个字符<br>GET请求能够被缓存<br>GET请求会保存在浏览器的浏览记录中<br>可以添加书签<br>编码类型为application/x-www-form-urlencoded<br>只允许ASCII字符类型，不能用二进制流<br>点击刷新时，不会有反应<br>GET请求主要用以获取数据</p>\n<h4 id=\"POST\"><a href=\"#POST\" class=\"headerlink\" title=\"POST\"></a>POST</h4><p>POST 方法向页面请求发送参数<br>使用POST方法时，查询字符串在POST信息中单独存在，和HTTP请求一起发送到服务器<br>编码类型为：application/x-www-form-urlencoded or multipart/form-data. 请为二进制数据使用multipart编码<br>没有历史记录<br>参数类型没有限制，可以是字符串也可以是二进制流<br>数据不会显示在地址栏中，也不会缓存下来或保存在浏览记录中，所以看POST求情比GET请求安全，但也不是最安全的方式。如需要传送敏感数据，请使用加密方式传输<br>查询字符串不会显示在地址栏中<br>POST传输的数据量大，可以达到2M，而Get方法由于受到URL长度限制,只能传递大约1024字节.<br>POST就是为了将数据传送到服务器段，Get就是为了从服务器段取得数据</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005981003.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级JavaWeb与项目</a></p>\n"},{"title":"Web服务器笔记-过滤器","date":"2020-02-23T10:53:25.000Z","_content":"## 过滤器\nfilter是对客户端访问资源的过滤，符合条件放行，不符合条件不放行\n并且可以对目标资源访问前后进行逻辑处理\n![](web-server-note-17/1.png)\n\n![](web-server-note-17/2.png)\n\n过滤器编写步骤\n1. 编写一个过滤器的类实现Filter接口\n2. 实现接口中尚未实现的方法(着重实现doFilter方法)\n3. 在web.xml中进行配置(主要是配置要对哪些资源进行过滤)\n4. 配置filter-class\n5. 配置filter-mapping，对哪些资源进行过滤\n\n```java\npackage com.itlike.web.filter;\n\npublic class FirstFilter implements Filter {\n    @Override\n    public void init(FilterConfig filterConfig) throws ServletException {\n\n    }\n\n    // 是否对请求进行放行\n    @Override\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n        System.out.println(\"this is Filter \");\n        // 放行\n        filterChain.doFilter(servletRequest,servletResponse);\n    }\n\n    @Override\n    public void destroy() {\n    }\n}\n```\n\n```java\npackage com.itlike.web;\n\n@WebServlet(\"/MyServlet\")\npublic class MyServlet extends HttpServlet {\n    @Override\n    protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        System.out.println(\"MyServlet\");\n    }\n}\n```\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\"\n         version=\"4.0\">\n    <filter>\n        <filter-name>myfliter</filter-name>\n        <filter-class>com.itlike.web.filter.FirstFilter</filter-class>\n    </filter>\n\n    <filter-mapping>\n        <filter-name>myfliter</filter-name>\n    <!-- 发送MySerlvet请求的时候，就会到myfliter-->\n        <url-pattern>/MyServlet</url-pattern>\n    </filter-mapping>\n</web-app>\n```\nFilter选择javax.servlet.Filter\n注意：更改了Web.xml 要重启服务器\n    \n访问一个资源的时候，会被过滤器拦截\n要在过滤器当中进行放行之后， 才能够访问到对应的servlet\nchain.doFilter(req,res)\n\n## 过滤器的访问流程\n在发送一个请求时， web容器会先到filter当中，创建三个参数，res,req,chain\n在过滤器当中，放行之后，才能够访问到对应的资源\n中间的过滤器可能有多个，在一个过滤器当中，可以调用另外一个过滤器\n也有可能过滤器没有拦截所有的资源，有些资源可以直接被访问\n\n## filter生命周期\n#### init方法\n当filter对象创建时调用\n当服务器启动时创建\n因为有可能一个filter对应多个servlet\n启动时， 先把filter准备好， 访问资源时就可以进行过滤了\n\nfilterconfig\n当前filter对象的配置信息\n和servletConfig差不多， 获取名称，参数\n获取servletContext对象\n先有的ServletContext\n\n#### dofitter方法\n当匹配到mapping时调用dofilter\n参数：res req FilterChain\n\nFilterChain 过滤器链对象\n内部维护着各个filter的索引，并且知道所有filter的顺序\n是根据mapping的顺序来执行的\n\n#### destroy方法\n当filter对象销毁时调用\n关闭服务器时销毁对象\n和servletContext的生命周期是一样\n\n\n## 配置\n#### mapping\n完全匹配 \n目录匹配\n扩展名匹配\n\n#### servlet_name\n可以把路径直接指定**某一个**Servlet，可以有多个servlet_name\n开发中基本上使用的都是mapping\n\n#### dispatcher\n配置请求的形式，不是请求方式，是页面跳转的形式\n形式分类\n- REQUEST\n默认值，代表直接访问某个资源时执行filter\n- ERROR\n发生错误时 进行跳转是执行filter\n- INCLUDE\n包含资源时执行filter\n- FORWARD\n转发之后才去执行filter\n\n\n                        \n## 参考资料\n\n[Java零基础到高级JavaWeb与项目](https://study.163.com/course/introduction/1005981003.htm)","source":"_posts/web-server-note-17.md","raw":"---\ntitle: Web服务器笔记-过滤器\ncategories: Web服务器笔记\ndate: 2020-02-23 18:53:25\n---\n## 过滤器\nfilter是对客户端访问资源的过滤，符合条件放行，不符合条件不放行\n并且可以对目标资源访问前后进行逻辑处理\n![](web-server-note-17/1.png)\n\n![](web-server-note-17/2.png)\n\n过滤器编写步骤\n1. 编写一个过滤器的类实现Filter接口\n2. 实现接口中尚未实现的方法(着重实现doFilter方法)\n3. 在web.xml中进行配置(主要是配置要对哪些资源进行过滤)\n4. 配置filter-class\n5. 配置filter-mapping，对哪些资源进行过滤\n\n```java\npackage com.itlike.web.filter;\n\npublic class FirstFilter implements Filter {\n    @Override\n    public void init(FilterConfig filterConfig) throws ServletException {\n\n    }\n\n    // 是否对请求进行放行\n    @Override\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n        System.out.println(\"this is Filter \");\n        // 放行\n        filterChain.doFilter(servletRequest,servletResponse);\n    }\n\n    @Override\n    public void destroy() {\n    }\n}\n```\n\n```java\npackage com.itlike.web;\n\n@WebServlet(\"/MyServlet\")\npublic class MyServlet extends HttpServlet {\n    @Override\n    protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        System.out.println(\"MyServlet\");\n    }\n}\n```\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\"\n         version=\"4.0\">\n    <filter>\n        <filter-name>myfliter</filter-name>\n        <filter-class>com.itlike.web.filter.FirstFilter</filter-class>\n    </filter>\n\n    <filter-mapping>\n        <filter-name>myfliter</filter-name>\n    <!-- 发送MySerlvet请求的时候，就会到myfliter-->\n        <url-pattern>/MyServlet</url-pattern>\n    </filter-mapping>\n</web-app>\n```\nFilter选择javax.servlet.Filter\n注意：更改了Web.xml 要重启服务器\n    \n访问一个资源的时候，会被过滤器拦截\n要在过滤器当中进行放行之后， 才能够访问到对应的servlet\nchain.doFilter(req,res)\n\n## 过滤器的访问流程\n在发送一个请求时， web容器会先到filter当中，创建三个参数，res,req,chain\n在过滤器当中，放行之后，才能够访问到对应的资源\n中间的过滤器可能有多个，在一个过滤器当中，可以调用另外一个过滤器\n也有可能过滤器没有拦截所有的资源，有些资源可以直接被访问\n\n## filter生命周期\n#### init方法\n当filter对象创建时调用\n当服务器启动时创建\n因为有可能一个filter对应多个servlet\n启动时， 先把filter准备好， 访问资源时就可以进行过滤了\n\nfilterconfig\n当前filter对象的配置信息\n和servletConfig差不多， 获取名称，参数\n获取servletContext对象\n先有的ServletContext\n\n#### dofitter方法\n当匹配到mapping时调用dofilter\n参数：res req FilterChain\n\nFilterChain 过滤器链对象\n内部维护着各个filter的索引，并且知道所有filter的顺序\n是根据mapping的顺序来执行的\n\n#### destroy方法\n当filter对象销毁时调用\n关闭服务器时销毁对象\n和servletContext的生命周期是一样\n\n\n## 配置\n#### mapping\n完全匹配 \n目录匹配\n扩展名匹配\n\n#### servlet_name\n可以把路径直接指定**某一个**Servlet，可以有多个servlet_name\n开发中基本上使用的都是mapping\n\n#### dispatcher\n配置请求的形式，不是请求方式，是页面跳转的形式\n形式分类\n- REQUEST\n默认值，代表直接访问某个资源时执行filter\n- ERROR\n发生错误时 进行跳转是执行filter\n- INCLUDE\n包含资源时执行filter\n- FORWARD\n转发之后才去执行filter\n\n\n                        \n## 参考资料\n\n[Java零基础到高级JavaWeb与项目](https://study.163.com/course/introduction/1005981003.htm)","slug":"web-server-note-17","published":1,"updated":"2020-06-13T02:55:34.872Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke3x9g6j001yzgvueopx38rj","content":"<h2 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h2><p>filter是对客户端访问资源的过滤，符合条件放行，不符合条件不放行<br>并且可以对目标资源访问前后进行逻辑处理<br><img src=\"/2020/02/23/web-server-note-17/1.png\" alt></p>\n<p><img src=\"/2020/02/23/web-server-note-17/2.png\" alt></p>\n<p>过滤器编写步骤</p>\n<ol>\n<li>编写一个过滤器的类实现Filter接口</li>\n<li>实现接口中尚未实现的方法(着重实现doFilter方法)</li>\n<li>在web.xml中进行配置(主要是配置要对哪些资源进行过滤)</li>\n<li>配置filter-class</li>\n<li>配置filter-mapping，对哪些资源进行过滤</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itlike.web.filter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FirstFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(FilterConfig filterConfig)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 是否对请求进行放行</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"this is Filter \"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 放行</span></span><br><span class=\"line\">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itlike.web;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/MyServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"MyServlet\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://xmlns.jcp.org/xml/ns/javaee\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">version</span>=<span class=\"string\">\"4.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>myfliter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>com.itlike.web.filter.FirstFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>myfliter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 发送MySerlvet请求的时候，就会到myfliter--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/MyServlet<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Filter选择javax.servlet.Filter<br>注意：更改了Web.xml 要重启服务器</p>\n<p>访问一个资源的时候，会被过滤器拦截<br>要在过滤器当中进行放行之后， 才能够访问到对应的servlet<br>chain.doFilter(req,res)</p>\n<h2 id=\"过滤器的访问流程\"><a href=\"#过滤器的访问流程\" class=\"headerlink\" title=\"过滤器的访问流程\"></a>过滤器的访问流程</h2><p>在发送一个请求时， web容器会先到filter当中，创建三个参数，res,req,chain<br>在过滤器当中，放行之后，才能够访问到对应的资源<br>中间的过滤器可能有多个，在一个过滤器当中，可以调用另外一个过滤器<br>也有可能过滤器没有拦截所有的资源，有些资源可以直接被访问</p>\n<h2 id=\"filter生命周期\"><a href=\"#filter生命周期\" class=\"headerlink\" title=\"filter生命周期\"></a>filter生命周期</h2><h4 id=\"init方法\"><a href=\"#init方法\" class=\"headerlink\" title=\"init方法\"></a>init方法</h4><p>当filter对象创建时调用<br>当服务器启动时创建<br>因为有可能一个filter对应多个servlet<br>启动时， 先把filter准备好， 访问资源时就可以进行过滤了</p>\n<p>filterconfig<br>当前filter对象的配置信息<br>和servletConfig差不多， 获取名称，参数<br>获取servletContext对象<br>先有的ServletContext</p>\n<h4 id=\"dofitter方法\"><a href=\"#dofitter方法\" class=\"headerlink\" title=\"dofitter方法\"></a>dofitter方法</h4><p>当匹配到mapping时调用dofilter<br>参数：res req FilterChain</p>\n<p>FilterChain 过滤器链对象<br>内部维护着各个filter的索引，并且知道所有filter的顺序<br>是根据mapping的顺序来执行的</p>\n<h4 id=\"destroy方法\"><a href=\"#destroy方法\" class=\"headerlink\" title=\"destroy方法\"></a>destroy方法</h4><p>当filter对象销毁时调用<br>关闭服务器时销毁对象<br>和servletContext的生命周期是一样</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><h4 id=\"mapping\"><a href=\"#mapping\" class=\"headerlink\" title=\"mapping\"></a>mapping</h4><p>完全匹配<br>目录匹配<br>扩展名匹配</p>\n<h4 id=\"servlet-name\"><a href=\"#servlet-name\" class=\"headerlink\" title=\"servlet_name\"></a>servlet_name</h4><p>可以把路径直接指定<strong>某一个</strong>Servlet，可以有多个servlet_name<br>开发中基本上使用的都是mapping</p>\n<h4 id=\"dispatcher\"><a href=\"#dispatcher\" class=\"headerlink\" title=\"dispatcher\"></a>dispatcher</h4><p>配置请求的形式，不是请求方式，是页面跳转的形式<br>形式分类</p>\n<ul>\n<li>REQUEST<br>默认值，代表直接访问某个资源时执行filter</li>\n<li>ERROR<br>发生错误时 进行跳转是执行filter</li>\n<li>INCLUDE<br>包含资源时执行filter</li>\n<li>FORWARD<br>转发之后才去执行filter</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005981003.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级JavaWeb与项目</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h2><p>filter是对客户端访问资源的过滤，符合条件放行，不符合条件不放行<br>并且可以对目标资源访问前后进行逻辑处理<br><img src=\"/2020/02/23/web-server-note-17/1.png\" alt></p>\n<p><img src=\"/2020/02/23/web-server-note-17/2.png\" alt></p>\n<p>过滤器编写步骤</p>\n<ol>\n<li>编写一个过滤器的类实现Filter接口</li>\n<li>实现接口中尚未实现的方法(着重实现doFilter方法)</li>\n<li>在web.xml中进行配置(主要是配置要对哪些资源进行过滤)</li>\n<li>配置filter-class</li>\n<li>配置filter-mapping，对哪些资源进行过滤</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itlike.web.filter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FirstFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(FilterConfig filterConfig)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 是否对请求进行放行</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"this is Filter \"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 放行</span></span><br><span class=\"line\">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.itlike.web;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/MyServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"MyServlet\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://xmlns.jcp.org/xml/ns/javaee\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">version</span>=<span class=\"string\">\"4.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>myfliter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>com.itlike.web.filter.FirstFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>myfliter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 发送MySerlvet请求的时候，就会到myfliter--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/MyServlet<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Filter选择javax.servlet.Filter<br>注意：更改了Web.xml 要重启服务器</p>\n<p>访问一个资源的时候，会被过滤器拦截<br>要在过滤器当中进行放行之后， 才能够访问到对应的servlet<br>chain.doFilter(req,res)</p>\n<h2 id=\"过滤器的访问流程\"><a href=\"#过滤器的访问流程\" class=\"headerlink\" title=\"过滤器的访问流程\"></a>过滤器的访问流程</h2><p>在发送一个请求时， web容器会先到filter当中，创建三个参数，res,req,chain<br>在过滤器当中，放行之后，才能够访问到对应的资源<br>中间的过滤器可能有多个，在一个过滤器当中，可以调用另外一个过滤器<br>也有可能过滤器没有拦截所有的资源，有些资源可以直接被访问</p>\n<h2 id=\"filter生命周期\"><a href=\"#filter生命周期\" class=\"headerlink\" title=\"filter生命周期\"></a>filter生命周期</h2><h4 id=\"init方法\"><a href=\"#init方法\" class=\"headerlink\" title=\"init方法\"></a>init方法</h4><p>当filter对象创建时调用<br>当服务器启动时创建<br>因为有可能一个filter对应多个servlet<br>启动时， 先把filter准备好， 访问资源时就可以进行过滤了</p>\n<p>filterconfig<br>当前filter对象的配置信息<br>和servletConfig差不多， 获取名称，参数<br>获取servletContext对象<br>先有的ServletContext</p>\n<h4 id=\"dofitter方法\"><a href=\"#dofitter方法\" class=\"headerlink\" title=\"dofitter方法\"></a>dofitter方法</h4><p>当匹配到mapping时调用dofilter<br>参数：res req FilterChain</p>\n<p>FilterChain 过滤器链对象<br>内部维护着各个filter的索引，并且知道所有filter的顺序<br>是根据mapping的顺序来执行的</p>\n<h4 id=\"destroy方法\"><a href=\"#destroy方法\" class=\"headerlink\" title=\"destroy方法\"></a>destroy方法</h4><p>当filter对象销毁时调用<br>关闭服务器时销毁对象<br>和servletContext的生命周期是一样</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><h4 id=\"mapping\"><a href=\"#mapping\" class=\"headerlink\" title=\"mapping\"></a>mapping</h4><p>完全匹配<br>目录匹配<br>扩展名匹配</p>\n<h4 id=\"servlet-name\"><a href=\"#servlet-name\" class=\"headerlink\" title=\"servlet_name\"></a>servlet_name</h4><p>可以把路径直接指定<strong>某一个</strong>Servlet，可以有多个servlet_name<br>开发中基本上使用的都是mapping</p>\n<h4 id=\"dispatcher\"><a href=\"#dispatcher\" class=\"headerlink\" title=\"dispatcher\"></a>dispatcher</h4><p>配置请求的形式，不是请求方式，是页面跳转的形式<br>形式分类</p>\n<ul>\n<li>REQUEST<br>默认值，代表直接访问某个资源时执行filter</li>\n<li>ERROR<br>发生错误时 进行跳转是执行filter</li>\n<li>INCLUDE<br>包含资源时执行filter</li>\n<li>FORWARD<br>转发之后才去执行filter</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005981003.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级JavaWeb与项目</a></p>\n"},{"title":"Web服务器笔记-EL/JSTL","date":"2020-02-16T06:29:34.000Z","_content":"## EL表达式\nEL (Express Lanuage)表达式可以嵌入在jsp页面内部\n减少jsp脚本的编写\nEL出现的目的是要替代jsp页面中脚本的编写\n\n#### EL最主要的作用是获得四大域中的数据\n- pageContext\n${pageScope.key};\n- request\n${requestScope.key}\n- session\n${sessionScope.key}\n- application\n${applicationScope.key}\n\n```jsp\n\n<%\n\tpageContext.setAttribute(\"name\", \"pageContextValue\");\n\trequest.setAttribute(\"name\", \"requestValue\");\n\tsession.setAttribute(\"name\", \"sessionValue\");\n\tapplication.setAttribute(\"name\", \"applicationValue\");\n%>\n${pageScope.name }\n<br/>\n${requestScope.name }\n<br/>\n${sessionScope.name }\n<br/>\n${applicationScope.name }\n```\n\n#### 简写\n${EL表达式}\nEL从四个域中获得某个值${key}\n依次从pageContext域，request域，session域，application域中获取属性\n在某个域中获取后将不在向后寻找(从小到大)\n\t\t\t\t\n#### EL内置11对象（基本不用，只用pageContext）\n- pageScope\n获取JSP中pageScope域中的数据\n- requestScope\n获取JSP中requestScope域中的数据\n- sessionScope\n获取JSP中sessionScope域中的数据\n- applicationScope\n获取JSP中applicationScope域中的数据\n- param\nrequest.getParameter()\n- paramValues\nrquest.getParameterValues()\n- header\nrequest.getHeader(name)\n- headerValues\nrequest.getHeaderValues()\n- initParam\nthis.getServletContext().getInitParameter(name)\n- cookie\t\nrequest.getCookies()---cookie.getName()---cookie.getValue()\n- pageContext\npageContext获得其他八大对象\n**获取当前项目的名称：${pageContext.request.contextPath}**\n\n##### EL执行表达式\n内部可以进行运算，只要有结果\n```jsp\n${1+1}\n${empty user} \n${user==null?true:false}\n```\n判读user是否为空 输出true\n\n## JSTL \n(JSP Standard Tag Library) JSP标准标签库\n可以嵌入在JSP页面中使用标签的形式完成业务逻辑等功能\nJSTL出现的目的同EL一样也是要代替JSP页面中的脚本代码\n\n#### JSTL标准标签库有5个子库\n- Core :核心库(其他的库都过时了)\nhttp://java.sun.com/jsp/jstl/core\n前缀：c\n- I18N：国际化库\nhttp://java.sun.com/jsp/jstl/fmt\n前缀：fmt\n- SQL\nhttp://java.sun.com/jsp/jstl/sql\n前缀：sql\n- XML\nhttp://java.sun.com/jsp/jstl/xml\n前缀：x\n- Functions\nhttp://java.sun.com/jsp/jstl/functions\n前缀：fn\n\n#### 使用\n1. 把JSTL标签库jar包引入工程当中 jstl-1.2.jar\n2. 引入标签库\n```jsp\n<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%>\n```\n\n#### 标签\nif标签\n```jsp\n<c:if test=\"${1==1 }\">满足条件时，中间的内容才会显示出来</c:if>\n```\n通过是结合EL表达式一起使用，EL从域中取数据，使用JSTL进行判断或者遍历\n没有else所有只能\n        \nif标签使用场景：\n用户登录成功时，进入首页中，显示用户名\n步骤\n1.登录成功时，把用户写到session域当中，修改LogginServlet\n```java\nif (u != null) {\n    response.getWriter().write(\"登录成功\");\n    // \n    HttpSession session = request.getSession();\n    session.setAttribute(\"user\", u);\n    //\n    response.setHeader(\"refresh\", \"2;url=/31-Mystore/index.jsp\");\n} else {\n    response.getWriter().write(\"登录失败\");\n    response.setHeader(\"refresh\", \"2;url=/31-Mystore/login.jsp\");\n}\n```\n2.在Header.jsp中进行判断，从session域当中取数据，先引入标签库\n3.通过EL结合JSTL进行判断\n```html\n<div class=\"header_top_center\">\n    <div class=\"h_top_left\">欢迎来到码蚁商城</div>\n    <div class=\"h_top_right\">\n        <!-- 判断有没有用户 session -->\n        <c:if test=\"${empty user}\">\n            <a href=\"login.jsp\">登录</a>\n            <a href=\"regist.jsp\">免费注册</a>\n        </c:if>\n        \n        <c:if test=\"${!empty user }\">\n            <!-- 或者直接${ user.username } -->\n            欢迎：${user.getUsername() }\n            <a href=\"#\">退出</a>\n        </c:if>\n        \n        \n        <a href=\"#\">购物车</a> <a href=\"#\">我的订单</a>\n    </div>\n</div>\n```\n\n            \nforeach标签\n- 普通循环:从域当中取数据，自动把数据存储pagescope\n```jsp\n<c:forEach begin=\"0\" end=\"5\" var=\"i\">\n\t${i }\n</c:forEach>\n<!--等同于 ${pageScope.i} -->\n```\n- 第二种：增加for循环\n遍历字符串集合\n```jsp\n<%\nList<String> strList = new ArrayList<String>();\nstrList.add(\"aaa\");\nstrList.add(\"bbb\");\nsession.setAttribute(\"strList\", strList);\n%>\n<c:forEach items=\"${strList}\" var=\"str\"> \n\t${str }\n</c:forEach>\n```\n\n遍历对象集合\n```jsp\n<%\nList<User> userList = new ArrayList<User>();\nUser u1 = new User();\nu1.setUsername(\"zs\");\nuserList.add(u1);\n\nUser u2 = new User();\nu2.setUsername(\"ls\");\nuserList.add(u2);\n\nsession.setAttribute(\"userList\", userList);\n%>\n<c:forEach items=\"${userList}\" var=\"user\"> \n\t${user.username }\n</c:forEach>\n```\n\n遍历map\n```jsp\n<%\nMap<String ,String> strMap = new HashMap<String,String>();\nstrMap.put(\"name\",\"zs\");\nstrMap.put(\"age\", \"30\");\nsession.setAttribute(\"strMap\", strMap);\n%>\n<c:forEach items=\"${strMap }\" var = \"entry\">\n\t${entry.key}:${entry.value}\n</c:forEach>\n```\n\n商品列表展示\n修改goods_list.jsp\n```jsp\n<c:if test=\"${empty allGoods }\">\n    没有商品\n</c:if>\n\n\n<c:forEach items=\"${allGoods }\" var=\"goods\">\n    <li>\n    <a href=\"#\">\n        <img src=\"images/pimages/${goods.image }\" alt=\"\">\n        <p>${goods.name }</p>\n        <i id=\"yuan\">￥</i> <span id=\"price\">${goods.price }</span>\n    </a>\n    </li>\n</c:forEach>\n```\n\t\t\n## 参考资料\n\n[Java零基础到高级JavaWeb与项目](https://study.163.com/course/introduction/1005981003.htm)","source":"_posts/web-server-note-11.md","raw":"---\ntitle: Web服务器笔记-EL/JSTL\ncategories: Web服务器笔记\ndate: 2020-02-16 14:29:34\n---\n## EL表达式\nEL (Express Lanuage)表达式可以嵌入在jsp页面内部\n减少jsp脚本的编写\nEL出现的目的是要替代jsp页面中脚本的编写\n\n#### EL最主要的作用是获得四大域中的数据\n- pageContext\n${pageScope.key};\n- request\n${requestScope.key}\n- session\n${sessionScope.key}\n- application\n${applicationScope.key}\n\n```jsp\n\n<%\n\tpageContext.setAttribute(\"name\", \"pageContextValue\");\n\trequest.setAttribute(\"name\", \"requestValue\");\n\tsession.setAttribute(\"name\", \"sessionValue\");\n\tapplication.setAttribute(\"name\", \"applicationValue\");\n%>\n${pageScope.name }\n<br/>\n${requestScope.name }\n<br/>\n${sessionScope.name }\n<br/>\n${applicationScope.name }\n```\n\n#### 简写\n${EL表达式}\nEL从四个域中获得某个值${key}\n依次从pageContext域，request域，session域，application域中获取属性\n在某个域中获取后将不在向后寻找(从小到大)\n\t\t\t\t\n#### EL内置11对象（基本不用，只用pageContext）\n- pageScope\n获取JSP中pageScope域中的数据\n- requestScope\n获取JSP中requestScope域中的数据\n- sessionScope\n获取JSP中sessionScope域中的数据\n- applicationScope\n获取JSP中applicationScope域中的数据\n- param\nrequest.getParameter()\n- paramValues\nrquest.getParameterValues()\n- header\nrequest.getHeader(name)\n- headerValues\nrequest.getHeaderValues()\n- initParam\nthis.getServletContext().getInitParameter(name)\n- cookie\t\nrequest.getCookies()---cookie.getName()---cookie.getValue()\n- pageContext\npageContext获得其他八大对象\n**获取当前项目的名称：${pageContext.request.contextPath}**\n\n##### EL执行表达式\n内部可以进行运算，只要有结果\n```jsp\n${1+1}\n${empty user} \n${user==null?true:false}\n```\n判读user是否为空 输出true\n\n## JSTL \n(JSP Standard Tag Library) JSP标准标签库\n可以嵌入在JSP页面中使用标签的形式完成业务逻辑等功能\nJSTL出现的目的同EL一样也是要代替JSP页面中的脚本代码\n\n#### JSTL标准标签库有5个子库\n- Core :核心库(其他的库都过时了)\nhttp://java.sun.com/jsp/jstl/core\n前缀：c\n- I18N：国际化库\nhttp://java.sun.com/jsp/jstl/fmt\n前缀：fmt\n- SQL\nhttp://java.sun.com/jsp/jstl/sql\n前缀：sql\n- XML\nhttp://java.sun.com/jsp/jstl/xml\n前缀：x\n- Functions\nhttp://java.sun.com/jsp/jstl/functions\n前缀：fn\n\n#### 使用\n1. 把JSTL标签库jar包引入工程当中 jstl-1.2.jar\n2. 引入标签库\n```jsp\n<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%>\n```\n\n#### 标签\nif标签\n```jsp\n<c:if test=\"${1==1 }\">满足条件时，中间的内容才会显示出来</c:if>\n```\n通过是结合EL表达式一起使用，EL从域中取数据，使用JSTL进行判断或者遍历\n没有else所有只能\n        \nif标签使用场景：\n用户登录成功时，进入首页中，显示用户名\n步骤\n1.登录成功时，把用户写到session域当中，修改LogginServlet\n```java\nif (u != null) {\n    response.getWriter().write(\"登录成功\");\n    // \n    HttpSession session = request.getSession();\n    session.setAttribute(\"user\", u);\n    //\n    response.setHeader(\"refresh\", \"2;url=/31-Mystore/index.jsp\");\n} else {\n    response.getWriter().write(\"登录失败\");\n    response.setHeader(\"refresh\", \"2;url=/31-Mystore/login.jsp\");\n}\n```\n2.在Header.jsp中进行判断，从session域当中取数据，先引入标签库\n3.通过EL结合JSTL进行判断\n```html\n<div class=\"header_top_center\">\n    <div class=\"h_top_left\">欢迎来到码蚁商城</div>\n    <div class=\"h_top_right\">\n        <!-- 判断有没有用户 session -->\n        <c:if test=\"${empty user}\">\n            <a href=\"login.jsp\">登录</a>\n            <a href=\"regist.jsp\">免费注册</a>\n        </c:if>\n        \n        <c:if test=\"${!empty user }\">\n            <!-- 或者直接${ user.username } -->\n            欢迎：${user.getUsername() }\n            <a href=\"#\">退出</a>\n        </c:if>\n        \n        \n        <a href=\"#\">购物车</a> <a href=\"#\">我的订单</a>\n    </div>\n</div>\n```\n\n            \nforeach标签\n- 普通循环:从域当中取数据，自动把数据存储pagescope\n```jsp\n<c:forEach begin=\"0\" end=\"5\" var=\"i\">\n\t${i }\n</c:forEach>\n<!--等同于 ${pageScope.i} -->\n```\n- 第二种：增加for循环\n遍历字符串集合\n```jsp\n<%\nList<String> strList = new ArrayList<String>();\nstrList.add(\"aaa\");\nstrList.add(\"bbb\");\nsession.setAttribute(\"strList\", strList);\n%>\n<c:forEach items=\"${strList}\" var=\"str\"> \n\t${str }\n</c:forEach>\n```\n\n遍历对象集合\n```jsp\n<%\nList<User> userList = new ArrayList<User>();\nUser u1 = new User();\nu1.setUsername(\"zs\");\nuserList.add(u1);\n\nUser u2 = new User();\nu2.setUsername(\"ls\");\nuserList.add(u2);\n\nsession.setAttribute(\"userList\", userList);\n%>\n<c:forEach items=\"${userList}\" var=\"user\"> \n\t${user.username }\n</c:forEach>\n```\n\n遍历map\n```jsp\n<%\nMap<String ,String> strMap = new HashMap<String,String>();\nstrMap.put(\"name\",\"zs\");\nstrMap.put(\"age\", \"30\");\nsession.setAttribute(\"strMap\", strMap);\n%>\n<c:forEach items=\"${strMap }\" var = \"entry\">\n\t${entry.key}:${entry.value}\n</c:forEach>\n```\n\n商品列表展示\n修改goods_list.jsp\n```jsp\n<c:if test=\"${empty allGoods }\">\n    没有商品\n</c:if>\n\n\n<c:forEach items=\"${allGoods }\" var=\"goods\">\n    <li>\n    <a href=\"#\">\n        <img src=\"images/pimages/${goods.image }\" alt=\"\">\n        <p>${goods.name }</p>\n        <i id=\"yuan\">￥</i> <span id=\"price\">${goods.price }</span>\n    </a>\n    </li>\n</c:forEach>\n```\n\t\t\n## 参考资料\n\n[Java零基础到高级JavaWeb与项目](https://study.163.com/course/introduction/1005981003.htm)","slug":"web-server-note-11","published":1,"updated":"2020-06-13T02:55:34.839Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke3x9g6l0020zgvuco85c5im","content":"<h2 id=\"EL表达式\"><a href=\"#EL表达式\" class=\"headerlink\" title=\"EL表达式\"></a>EL表达式</h2><p>EL (Express Lanuage)表达式可以嵌入在jsp页面内部<br>减少jsp脚本的编写<br>EL出现的目的是要替代jsp页面中脚本的编写</p>\n<h4 id=\"EL最主要的作用是获得四大域中的数据\"><a href=\"#EL最主要的作用是获得四大域中的数据\" class=\"headerlink\" title=\"EL最主要的作用是获得四大域中的数据\"></a>EL最主要的作用是获得四大域中的数据</h4><ul>\n<li>pageContext<br>${pageScope.key};</li>\n<li>request<br>${requestScope.key}</li>\n<li>session<br>${sessionScope.key}</li>\n<li>application<br>${applicationScope.key}</li>\n</ul>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">\tpageContext.setAttribute(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"pageContextValue\"</span>);</span><br><span class=\"line\">\trequest.setAttribute(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"requestValue\"</span>);</span><br><span class=\"line\">\tsession.setAttribute(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"sessionValue\"</span>);</span><br><span class=\"line\">\tapplication.setAttribute(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"applicationValue\"</span>);</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\">$&#123;pageScope.name &#125;</span><br><span class=\"line\">&lt;br/&gt;</span><br><span class=\"line\">$&#123;requestScope.name &#125;</span><br><span class=\"line\">&lt;br/&gt;</span><br><span class=\"line\">$&#123;sessionScope.name &#125;</span><br><span class=\"line\">&lt;br/&gt;</span><br><span class=\"line\">$&#123;applicationScope.name &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"简写\"><a href=\"#简写\" class=\"headerlink\" title=\"简写\"></a>简写</h4><p>${EL表达式}<br>EL从四个域中获得某个值${key}<br>依次从pageContext域，request域，session域，application域中获取属性<br>在某个域中获取后将不在向后寻找(从小到大)</p>\n<h4 id=\"EL内置11对象（基本不用，只用pageContext）\"><a href=\"#EL内置11对象（基本不用，只用pageContext）\" class=\"headerlink\" title=\"EL内置11对象（基本不用，只用pageContext）\"></a>EL内置11对象（基本不用，只用pageContext）</h4><ul>\n<li>pageScope<br>获取JSP中pageScope域中的数据</li>\n<li>requestScope<br>获取JSP中requestScope域中的数据</li>\n<li>sessionScope<br>获取JSP中sessionScope域中的数据</li>\n<li>applicationScope<br>获取JSP中applicationScope域中的数据</li>\n<li>param<br>request.getParameter()</li>\n<li>paramValues<br>rquest.getParameterValues()</li>\n<li>header<br>request.getHeader(name)</li>\n<li>headerValues<br>request.getHeaderValues()</li>\n<li>initParam<br>this.getServletContext().getInitParameter(name)</li>\n<li>cookie<br>request.getCookies()—cookie.getName()—cookie.getValue()</li>\n<li>pageContext<br>pageContext获得其他八大对象</li>\n</ul>\n<p><strong>获取当前项目的名称：${pageContext.request.contextPath}</strong></p>\n<h5 id=\"EL执行表达式\"><a href=\"#EL执行表达式\" class=\"headerlink\" title=\"EL执行表达式\"></a>EL执行表达式</h5><p>内部可以进行运算，只要有结果</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;<span class=\"number\">1</span>+<span class=\"number\">1</span>&#125;</span><br><span class=\"line\">$&#123;empty user&#125; </span><br><span class=\"line\">$&#123;user==<span class=\"keyword\">null</span>?<span class=\"keyword\">true</span>:<span class=\"keyword\">false</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>判读user是否为空 输出true</p>\n<h2 id=\"JSTL\"><a href=\"#JSTL\" class=\"headerlink\" title=\"JSTL\"></a>JSTL</h2><p>(JSP Standard Tag Library) JSP标准标签库<br>可以嵌入在JSP页面中使用标签的形式完成业务逻辑等功能<br>JSTL出现的目的同EL一样也是要代替JSP页面中的脚本代码</p>\n<h4 id=\"JSTL标准标签库有5个子库\"><a href=\"#JSTL标准标签库有5个子库\" class=\"headerlink\" title=\"JSTL标准标签库有5个子库\"></a>JSTL标准标签库有5个子库</h4><ul>\n<li>Core :核心库(其他的库都过时了)<br><a href=\"http://java.sun.com/jsp/jstl/core\" target=\"_blank\" rel=\"noopener\">http://java.sun.com/jsp/jstl/core</a><br>前缀：c</li>\n<li>I18N：国际化库<br><a href=\"http://java.sun.com/jsp/jstl/fmt\" target=\"_blank\" rel=\"noopener\">http://java.sun.com/jsp/jstl/fmt</a><br>前缀：fmt</li>\n<li>SQL<br><a href=\"http://java.sun.com/jsp/jstl/sql\" target=\"_blank\" rel=\"noopener\">http://java.sun.com/jsp/jstl/sql</a><br>前缀：sql</li>\n<li>XML<br><a href=\"http://java.sun.com/jsp/jstl/xml\" target=\"_blank\" rel=\"noopener\">http://java.sun.com/jsp/jstl/xml</a><br>前缀：x</li>\n<li>Functions<br><a href=\"http://java.sun.com/jsp/jstl/functions\" target=\"_blank\" rel=\"noopener\">http://java.sun.com/jsp/jstl/functions</a><br>前缀：fn</li>\n</ul>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><ol>\n<li>把JSTL标签库jar包引入工程当中 jstl-1.2.jar</li>\n<li>引入标签库<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ taglib uri=<span class=\"string\">\"http://java.sun.com/jsp/jstl/core\"</span> prefix=<span class=\"string\">\"c\"</span>%&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h4 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h4><p>if标签</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;c:if test=\"$&#123;1==1 &#125;\"&gt;满足条件时，中间的内容才会显示出来&lt;/c:if&gt;</span><br></pre></td></tr></table></figure>\n<p>通过是结合EL表达式一起使用，EL从域中取数据，使用JSTL进行判断或者遍历<br>没有else所有只能</p>\n<p>if标签使用场景：<br>用户登录成功时，进入首页中，显示用户名<br>步骤<br>1.登录成功时，把用户写到session域当中，修改LogginServlet</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (u != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    response.getWriter().write(<span class=\"string\">\"登录成功\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// </span></span><br><span class=\"line\">    HttpSession session = request.getSession();</span><br><span class=\"line\">    session.setAttribute(<span class=\"string\">\"user\"</span>, u);</span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    response.setHeader(<span class=\"string\">\"refresh\"</span>, <span class=\"string\">\"2;url=/31-Mystore/index.jsp\"</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    response.getWriter().write(<span class=\"string\">\"登录失败\"</span>);</span><br><span class=\"line\">    response.setHeader(<span class=\"string\">\"refresh\"</span>, <span class=\"string\">\"2;url=/31-Mystore/login.jsp\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.在Header.jsp中进行判断，从session域当中取数据，先引入标签库<br>3.通过EL结合JSTL进行判断</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header_top_center\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"h_top_left\"</span>&gt;</span>欢迎来到码蚁商城<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"h_top_right\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 判断有没有用户 session --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">c:if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;empty user&#125;\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"login.jsp\"</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"regist.jsp\"</span>&gt;</span>免费注册<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">c:if</span>&gt;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">c:if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;!empty user &#125;\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 或者直接$&#123; user.username &#125; --&gt;</span></span><br><span class=\"line\">            欢迎：$&#123;user.getUsername() &#125;</span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span>退出<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">c:if</span>&gt;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span>购物车<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span>我的订单<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>foreach标签</p>\n<ul>\n<li>普通循环:从域当中取数据，自动把数据存储pagescope<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;c:forEach begin=<span class=\"string\">\"0\"</span> end=<span class=\"string\">\"5\"</span> <span class=\"keyword\">var</span>=<span class=\"string\">\"i\"</span>&gt;</span><br><span class=\"line\">\t$&#123;i &#125;</span><br><span class=\"line\">&lt;/c:forEach&gt;</span><br><span class=\"line\">&lt;!--等同于 $&#123;pageScope.i&#125; --&gt;</span><br></pre></td></tr></table></figure></li>\n<li>第二种：增加for循环<br>遍历字符串集合<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%</span><br><span class=\"line\">List&lt;String&gt; strList = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">strList.add(<span class=\"string\">\"aaa\"</span>);</span><br><span class=\"line\">strList.add(<span class=\"string\">\"bbb\"</span>);</span><br><span class=\"line\">session.setAttribute(<span class=\"string\">\"strList\"</span>, strList);</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\">&lt;c:forEach items=<span class=\"string\">\"$&#123;strList&#125;\"</span> <span class=\"keyword\">var</span>=<span class=\"string\">\"str\"</span>&gt; </span><br><span class=\"line\">\t$&#123;str &#125;</span><br><span class=\"line\">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>遍历对象集合</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%</span><br><span class=\"line\">List&lt;User&gt; userList = <span class=\"keyword\">new</span> ArrayList&lt;User&gt;();</span><br><span class=\"line\">User u1 = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">u1.setUsername(<span class=\"string\">\"zs\"</span>);</span><br><span class=\"line\">userList.add(u1);</span><br><span class=\"line\"></span><br><span class=\"line\">User u2 = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">u2.setUsername(<span class=\"string\">\"ls\"</span>);</span><br><span class=\"line\">userList.add(u2);</span><br><span class=\"line\"></span><br><span class=\"line\">session.setAttribute(<span class=\"string\">\"userList\"</span>, userList);</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\">&lt;c:forEach items=<span class=\"string\">\"$&#123;userList&#125;\"</span> <span class=\"keyword\">var</span>=<span class=\"string\">\"user\"</span>&gt; </span><br><span class=\"line\">\t$&#123;user.username &#125;</span><br><span class=\"line\">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure>\n\n<p>遍历map</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%</span><br><span class=\"line\">Map&lt;String ,String&gt; strMap = <span class=\"keyword\">new</span> HashMap&lt;String,String&gt;();</span><br><span class=\"line\">strMap.put(<span class=\"string\">\"name\"</span>,<span class=\"string\">\"zs\"</span>);</span><br><span class=\"line\">strMap.put(<span class=\"string\">\"age\"</span>, <span class=\"string\">\"30\"</span>);</span><br><span class=\"line\">session.setAttribute(<span class=\"string\">\"strMap\"</span>, strMap);</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\">&lt;c:forEach items=<span class=\"string\">\"$&#123;strMap &#125;\"</span> <span class=\"keyword\">var</span> = <span class=\"string\">\"entry\"</span>&gt;</span><br><span class=\"line\">\t$&#123;entry.key&#125;:$&#123;entry.value&#125;</span><br><span class=\"line\">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure>\n\n<p>商品列表展示<br>修改goods_list.jsp</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;c:<span class=\"keyword\">if</span> test=<span class=\"string\">\"$&#123;empty allGoods &#125;\"</span>&gt;</span><br><span class=\"line\">    没有商品</span><br><span class=\"line\">&lt;/c:if&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;c:forEach items=<span class=\"string\">\"$&#123;allGoods &#125;\"</span> <span class=\"keyword\">var</span>=<span class=\"string\">\"goods\"</span>&gt;</span><br><span class=\"line\">    &lt;li&gt;</span><br><span class=\"line\">    &lt;a href=<span class=\"string\">\"#\"</span>&gt;</span><br><span class=\"line\">        &lt;img src=<span class=\"string\">\"images/pimages/$&#123;goods.image &#125;\"</span> alt=<span class=\"string\">\"\"</span>&gt;</span><br><span class=\"line\">        &lt;p&gt;$&#123;goods.name &#125;&lt;/p&gt;</span><br><span class=\"line\">        &lt;i id=\"yuan\"&gt;￥&lt;/i&gt; &lt;span id=\"price\"&gt;$&#123;goods.price &#125;&lt;/span&gt;</span><br><span class=\"line\">    &lt;/a&gt;</span><br><span class=\"line\">    &lt;/li&gt;</span><br><span class=\"line\">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005981003.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级JavaWeb与项目</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"EL表达式\"><a href=\"#EL表达式\" class=\"headerlink\" title=\"EL表达式\"></a>EL表达式</h2><p>EL (Express Lanuage)表达式可以嵌入在jsp页面内部<br>减少jsp脚本的编写<br>EL出现的目的是要替代jsp页面中脚本的编写</p>\n<h4 id=\"EL最主要的作用是获得四大域中的数据\"><a href=\"#EL最主要的作用是获得四大域中的数据\" class=\"headerlink\" title=\"EL最主要的作用是获得四大域中的数据\"></a>EL最主要的作用是获得四大域中的数据</h4><ul>\n<li>pageContext<br>${pageScope.key};</li>\n<li>request<br>${requestScope.key}</li>\n<li>session<br>${sessionScope.key}</li>\n<li>application<br>${applicationScope.key}</li>\n</ul>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">\tpageContext.setAttribute(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"pageContextValue\"</span>);</span><br><span class=\"line\">\trequest.setAttribute(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"requestValue\"</span>);</span><br><span class=\"line\">\tsession.setAttribute(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"sessionValue\"</span>);</span><br><span class=\"line\">\tapplication.setAttribute(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"applicationValue\"</span>);</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\">$&#123;pageScope.name &#125;</span><br><span class=\"line\">&lt;br/&gt;</span><br><span class=\"line\">$&#123;requestScope.name &#125;</span><br><span class=\"line\">&lt;br/&gt;</span><br><span class=\"line\">$&#123;sessionScope.name &#125;</span><br><span class=\"line\">&lt;br/&gt;</span><br><span class=\"line\">$&#123;applicationScope.name &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"简写\"><a href=\"#简写\" class=\"headerlink\" title=\"简写\"></a>简写</h4><p>${EL表达式}<br>EL从四个域中获得某个值${key}<br>依次从pageContext域，request域，session域，application域中获取属性<br>在某个域中获取后将不在向后寻找(从小到大)</p>\n<h4 id=\"EL内置11对象（基本不用，只用pageContext）\"><a href=\"#EL内置11对象（基本不用，只用pageContext）\" class=\"headerlink\" title=\"EL内置11对象（基本不用，只用pageContext）\"></a>EL内置11对象（基本不用，只用pageContext）</h4><ul>\n<li>pageScope<br>获取JSP中pageScope域中的数据</li>\n<li>requestScope<br>获取JSP中requestScope域中的数据</li>\n<li>sessionScope<br>获取JSP中sessionScope域中的数据</li>\n<li>applicationScope<br>获取JSP中applicationScope域中的数据</li>\n<li>param<br>request.getParameter()</li>\n<li>paramValues<br>rquest.getParameterValues()</li>\n<li>header<br>request.getHeader(name)</li>\n<li>headerValues<br>request.getHeaderValues()</li>\n<li>initParam<br>this.getServletContext().getInitParameter(name)</li>\n<li>cookie<br>request.getCookies()—cookie.getName()—cookie.getValue()</li>\n<li>pageContext<br>pageContext获得其他八大对象</li>\n</ul>\n<p><strong>获取当前项目的名称：${pageContext.request.contextPath}</strong></p>\n<h5 id=\"EL执行表达式\"><a href=\"#EL执行表达式\" class=\"headerlink\" title=\"EL执行表达式\"></a>EL执行表达式</h5><p>内部可以进行运算，只要有结果</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;<span class=\"number\">1</span>+<span class=\"number\">1</span>&#125;</span><br><span class=\"line\">$&#123;empty user&#125; </span><br><span class=\"line\">$&#123;user==<span class=\"keyword\">null</span>?<span class=\"keyword\">true</span>:<span class=\"keyword\">false</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>判读user是否为空 输出true</p>\n<h2 id=\"JSTL\"><a href=\"#JSTL\" class=\"headerlink\" title=\"JSTL\"></a>JSTL</h2><p>(JSP Standard Tag Library) JSP标准标签库<br>可以嵌入在JSP页面中使用标签的形式完成业务逻辑等功能<br>JSTL出现的目的同EL一样也是要代替JSP页面中的脚本代码</p>\n<h4 id=\"JSTL标准标签库有5个子库\"><a href=\"#JSTL标准标签库有5个子库\" class=\"headerlink\" title=\"JSTL标准标签库有5个子库\"></a>JSTL标准标签库有5个子库</h4><ul>\n<li>Core :核心库(其他的库都过时了)<br><a href=\"http://java.sun.com/jsp/jstl/core\" target=\"_blank\" rel=\"noopener\">http://java.sun.com/jsp/jstl/core</a><br>前缀：c</li>\n<li>I18N：国际化库<br><a href=\"http://java.sun.com/jsp/jstl/fmt\" target=\"_blank\" rel=\"noopener\">http://java.sun.com/jsp/jstl/fmt</a><br>前缀：fmt</li>\n<li>SQL<br><a href=\"http://java.sun.com/jsp/jstl/sql\" target=\"_blank\" rel=\"noopener\">http://java.sun.com/jsp/jstl/sql</a><br>前缀：sql</li>\n<li>XML<br><a href=\"http://java.sun.com/jsp/jstl/xml\" target=\"_blank\" rel=\"noopener\">http://java.sun.com/jsp/jstl/xml</a><br>前缀：x</li>\n<li>Functions<br><a href=\"http://java.sun.com/jsp/jstl/functions\" target=\"_blank\" rel=\"noopener\">http://java.sun.com/jsp/jstl/functions</a><br>前缀：fn</li>\n</ul>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><ol>\n<li>把JSTL标签库jar包引入工程当中 jstl-1.2.jar</li>\n<li>引入标签库<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ taglib uri=<span class=\"string\">\"http://java.sun.com/jsp/jstl/core\"</span> prefix=<span class=\"string\">\"c\"</span>%&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h4 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h4><p>if标签</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;c:if test=\"$&#123;1==1 &#125;\"&gt;满足条件时，中间的内容才会显示出来&lt;/c:if&gt;</span><br></pre></td></tr></table></figure>\n<p>通过是结合EL表达式一起使用，EL从域中取数据，使用JSTL进行判断或者遍历<br>没有else所有只能</p>\n<p>if标签使用场景：<br>用户登录成功时，进入首页中，显示用户名<br>步骤<br>1.登录成功时，把用户写到session域当中，修改LogginServlet</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (u != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    response.getWriter().write(<span class=\"string\">\"登录成功\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// </span></span><br><span class=\"line\">    HttpSession session = request.getSession();</span><br><span class=\"line\">    session.setAttribute(<span class=\"string\">\"user\"</span>, u);</span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    response.setHeader(<span class=\"string\">\"refresh\"</span>, <span class=\"string\">\"2;url=/31-Mystore/index.jsp\"</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    response.getWriter().write(<span class=\"string\">\"登录失败\"</span>);</span><br><span class=\"line\">    response.setHeader(<span class=\"string\">\"refresh\"</span>, <span class=\"string\">\"2;url=/31-Mystore/login.jsp\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.在Header.jsp中进行判断，从session域当中取数据，先引入标签库<br>3.通过EL结合JSTL进行判断</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"header_top_center\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"h_top_left\"</span>&gt;</span>欢迎来到码蚁商城<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"h_top_right\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 判断有没有用户 session --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">c:if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;empty user&#125;\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"login.jsp\"</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"regist.jsp\"</span>&gt;</span>免费注册<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">c:if</span>&gt;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">c:if</span> <span class=\"attr\">test</span>=<span class=\"string\">\"$&#123;!empty user &#125;\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 或者直接$&#123; user.username &#125; --&gt;</span></span><br><span class=\"line\">            欢迎：$&#123;user.getUsername() &#125;</span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span>退出<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">c:if</span>&gt;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span>购物车<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span>我的订单<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>foreach标签</p>\n<ul>\n<li>普通循环:从域当中取数据，自动把数据存储pagescope<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;c:forEach begin=<span class=\"string\">\"0\"</span> end=<span class=\"string\">\"5\"</span> <span class=\"keyword\">var</span>=<span class=\"string\">\"i\"</span>&gt;</span><br><span class=\"line\">\t$&#123;i &#125;</span><br><span class=\"line\">&lt;/c:forEach&gt;</span><br><span class=\"line\">&lt;!--等同于 $&#123;pageScope.i&#125; --&gt;</span><br></pre></td></tr></table></figure></li>\n<li>第二种：增加for循环<br>遍历字符串集合<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%</span><br><span class=\"line\">List&lt;String&gt; strList = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">strList.add(<span class=\"string\">\"aaa\"</span>);</span><br><span class=\"line\">strList.add(<span class=\"string\">\"bbb\"</span>);</span><br><span class=\"line\">session.setAttribute(<span class=\"string\">\"strList\"</span>, strList);</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\">&lt;c:forEach items=<span class=\"string\">\"$&#123;strList&#125;\"</span> <span class=\"keyword\">var</span>=<span class=\"string\">\"str\"</span>&gt; </span><br><span class=\"line\">\t$&#123;str &#125;</span><br><span class=\"line\">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>遍历对象集合</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%</span><br><span class=\"line\">List&lt;User&gt; userList = <span class=\"keyword\">new</span> ArrayList&lt;User&gt;();</span><br><span class=\"line\">User u1 = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">u1.setUsername(<span class=\"string\">\"zs\"</span>);</span><br><span class=\"line\">userList.add(u1);</span><br><span class=\"line\"></span><br><span class=\"line\">User u2 = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">u2.setUsername(<span class=\"string\">\"ls\"</span>);</span><br><span class=\"line\">userList.add(u2);</span><br><span class=\"line\"></span><br><span class=\"line\">session.setAttribute(<span class=\"string\">\"userList\"</span>, userList);</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\">&lt;c:forEach items=<span class=\"string\">\"$&#123;userList&#125;\"</span> <span class=\"keyword\">var</span>=<span class=\"string\">\"user\"</span>&gt; </span><br><span class=\"line\">\t$&#123;user.username &#125;</span><br><span class=\"line\">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure>\n\n<p>遍历map</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%</span><br><span class=\"line\">Map&lt;String ,String&gt; strMap = <span class=\"keyword\">new</span> HashMap&lt;String,String&gt;();</span><br><span class=\"line\">strMap.put(<span class=\"string\">\"name\"</span>,<span class=\"string\">\"zs\"</span>);</span><br><span class=\"line\">strMap.put(<span class=\"string\">\"age\"</span>, <span class=\"string\">\"30\"</span>);</span><br><span class=\"line\">session.setAttribute(<span class=\"string\">\"strMap\"</span>, strMap);</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\">&lt;c:forEach items=<span class=\"string\">\"$&#123;strMap &#125;\"</span> <span class=\"keyword\">var</span> = <span class=\"string\">\"entry\"</span>&gt;</span><br><span class=\"line\">\t$&#123;entry.key&#125;:$&#123;entry.value&#125;</span><br><span class=\"line\">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure>\n\n<p>商品列表展示<br>修改goods_list.jsp</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;c:<span class=\"keyword\">if</span> test=<span class=\"string\">\"$&#123;empty allGoods &#125;\"</span>&gt;</span><br><span class=\"line\">    没有商品</span><br><span class=\"line\">&lt;/c:if&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;c:forEach items=<span class=\"string\">\"$&#123;allGoods &#125;\"</span> <span class=\"keyword\">var</span>=<span class=\"string\">\"goods\"</span>&gt;</span><br><span class=\"line\">    &lt;li&gt;</span><br><span class=\"line\">    &lt;a href=<span class=\"string\">\"#\"</span>&gt;</span><br><span class=\"line\">        &lt;img src=<span class=\"string\">\"images/pimages/$&#123;goods.image &#125;\"</span> alt=<span class=\"string\">\"\"</span>&gt;</span><br><span class=\"line\">        &lt;p&gt;$&#123;goods.name &#125;&lt;/p&gt;</span><br><span class=\"line\">        &lt;i id=\"yuan\"&gt;￥&lt;/i&gt; &lt;span id=\"price\"&gt;$&#123;goods.price &#125;&lt;/span&gt;</span><br><span class=\"line\">    &lt;/a&gt;</span><br><span class=\"line\">    &lt;/li&gt;</span><br><span class=\"line\">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005981003.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级JavaWeb与项目</a></p>\n"},{"title":"Web服务器笔记-开发模式","date":"2020-02-16T10:27:38.000Z","_content":"## JavaEE开发模式\n模式在开发过程中总结出的“套路”，总结出的一套约定俗成的设计模式\n\n- model1模式\n技术组成：JSP+JavaBean\n弊端：\n业务多时，导致JSP页面容易混乱\n- model2模式 \n技术组成：JSP+Servlet+JavaBean\n优点：\n开发中使用各个技术擅长的方面\nServlet擅长Java的业务代码\nJSP擅长页面的展示\nMVC：\nModel:JavaBean 封装数据\nView:JSP 页面展示\nController:Servlet 获取数据，对数据进行封装，传递数据、指定页面显示\n![餐厅](web-server-note-12/1.png)\n![MVC](web-server-note-12/1.png)\n- 三层架构\nWeb层 与客户端交互\nService层 复杂业务逻辑\nDAO层 与数据库进行交互\n![三层餐厅](web-server-note-12/3.png)\n![三层](web-server-note-12/4.png)\n![三层架构逻辑](web-server-note-12/5.png)\n## 商品列表改写\n根据包来分层\n- com.it666.web GoodsServlet.java\n- com.it666.service GoodsService.java\n- com.it666.dao GoodsDao.java\n原来GoodsServlet\n```java\npackage com.it666.servlet;\n\n@WebServlet(\"/GoodsServlet\")\npublic class GoodsServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tprotected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\t\n\t\t// 1.连接数据库\n\t\tQueryRunner qr = new QueryRunner(JDBCUtil.getDataSource());\n\t\tString sql = \"select * from goods\";\n\t\t// 2.获取数据\n\t\tList<Goods> allGoods = null;\n\t\ttry {\n\t\t\tallGoods = qr.query(sql, new BeanListHandler<Goods>(Goods.class));\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tSystem.out.println(allGoods);\n\t\t// 3. 把数据存到equest域\n\t\trequest.setAttribute(\"allGoods\", allGoods);\n\t\t// 4.转发到商品列表，转发时把request对象传入\n\t\trequest.getRequestDispatcher(\"/goods_list.jsp\").forward(request, response);\t\n\t}\n}\n```\n\nGoodsServlet\n```java\nGoodsService goodsService = new GoodsService();\nList<Goods> allGoods = goodsService.findAllGoods();\n```\n\nGoodsService\n```java\npackage com.it666.service;\n\npublic class GoodsService {\n\n\tpublic List<Goods> findAllGoods() {\n\t\tGoodsDao goodsDao = new GoodsDao();\n\t\treturn goodsDao.findAllGoods();\n\t}\n\n}\n```\n\nGoodsDao\n```java\npackage com.it666.dao;\n\npublic class GoodsDao {\n\n\tpublic List<Goods> findAllGoods() {\n\t\t// 1.连接数据库\n\t\tQueryRunner qr = new QueryRunner(JDBCUtil.getDataSource());\n\t\tString sql = \"select * from goods\";\n\t\t// 2.获取数据\n\t\tList<Goods> allGoods = null;\n\t\ttry {\n\t\t\tallGoods = qr.query(sql, new BeanListHandler<Goods>(Goods.class));\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn allGoods;\n\t}\n\n}\n```\n\n在GoodsServlet最后加上\n```java\n// 3. 把数据存到equest域\nrequest.setAttribute(\"allGoods\", allGoods);\n// 4.转发到商品列表，转发时把request对象传入\nrequest.getRequestDispatcher(\"/goods_list.jsp\").forward(request, response);\n```\n对GoodServlet进行测试\n\n## 参考资料\n\n[Java零基础到高级JavaWeb与项目](https://study.163.com/course/introduction/1005981003.htm)","source":"_posts/web-server-note-12.md","raw":"---\ntitle: Web服务器笔记-开发模式\ncategories: Web服务器笔记\ndate: 2020-02-16 18:27:38\n---\n## JavaEE开发模式\n模式在开发过程中总结出的“套路”，总结出的一套约定俗成的设计模式\n\n- model1模式\n技术组成：JSP+JavaBean\n弊端：\n业务多时，导致JSP页面容易混乱\n- model2模式 \n技术组成：JSP+Servlet+JavaBean\n优点：\n开发中使用各个技术擅长的方面\nServlet擅长Java的业务代码\nJSP擅长页面的展示\nMVC：\nModel:JavaBean 封装数据\nView:JSP 页面展示\nController:Servlet 获取数据，对数据进行封装，传递数据、指定页面显示\n![餐厅](web-server-note-12/1.png)\n![MVC](web-server-note-12/1.png)\n- 三层架构\nWeb层 与客户端交互\nService层 复杂业务逻辑\nDAO层 与数据库进行交互\n![三层餐厅](web-server-note-12/3.png)\n![三层](web-server-note-12/4.png)\n![三层架构逻辑](web-server-note-12/5.png)\n## 商品列表改写\n根据包来分层\n- com.it666.web GoodsServlet.java\n- com.it666.service GoodsService.java\n- com.it666.dao GoodsDao.java\n原来GoodsServlet\n```java\npackage com.it666.servlet;\n\n@WebServlet(\"/GoodsServlet\")\npublic class GoodsServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tprotected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\t\n\t\t// 1.连接数据库\n\t\tQueryRunner qr = new QueryRunner(JDBCUtil.getDataSource());\n\t\tString sql = \"select * from goods\";\n\t\t// 2.获取数据\n\t\tList<Goods> allGoods = null;\n\t\ttry {\n\t\t\tallGoods = qr.query(sql, new BeanListHandler<Goods>(Goods.class));\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tSystem.out.println(allGoods);\n\t\t// 3. 把数据存到equest域\n\t\trequest.setAttribute(\"allGoods\", allGoods);\n\t\t// 4.转发到商品列表，转发时把request对象传入\n\t\trequest.getRequestDispatcher(\"/goods_list.jsp\").forward(request, response);\t\n\t}\n}\n```\n\nGoodsServlet\n```java\nGoodsService goodsService = new GoodsService();\nList<Goods> allGoods = goodsService.findAllGoods();\n```\n\nGoodsService\n```java\npackage com.it666.service;\n\npublic class GoodsService {\n\n\tpublic List<Goods> findAllGoods() {\n\t\tGoodsDao goodsDao = new GoodsDao();\n\t\treturn goodsDao.findAllGoods();\n\t}\n\n}\n```\n\nGoodsDao\n```java\npackage com.it666.dao;\n\npublic class GoodsDao {\n\n\tpublic List<Goods> findAllGoods() {\n\t\t// 1.连接数据库\n\t\tQueryRunner qr = new QueryRunner(JDBCUtil.getDataSource());\n\t\tString sql = \"select * from goods\";\n\t\t// 2.获取数据\n\t\tList<Goods> allGoods = null;\n\t\ttry {\n\t\t\tallGoods = qr.query(sql, new BeanListHandler<Goods>(Goods.class));\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn allGoods;\n\t}\n\n}\n```\n\n在GoodsServlet最后加上\n```java\n// 3. 把数据存到equest域\nrequest.setAttribute(\"allGoods\", allGoods);\n// 4.转发到商品列表，转发时把request对象传入\nrequest.getRequestDispatcher(\"/goods_list.jsp\").forward(request, response);\n```\n对GoodServlet进行测试\n\n## 参考资料\n\n[Java零基础到高级JavaWeb与项目](https://study.163.com/course/introduction/1005981003.htm)","slug":"web-server-note-12","published":1,"updated":"2020-06-13T02:55:34.840Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke3x9g6n0023zgvu7n95bee4","content":"<h2 id=\"JavaEE开发模式\"><a href=\"#JavaEE开发模式\" class=\"headerlink\" title=\"JavaEE开发模式\"></a>JavaEE开发模式</h2><p>模式在开发过程中总结出的“套路”，总结出的一套约定俗成的设计模式</p>\n<ul>\n<li>model1模式<br>技术组成：JSP+JavaBean<br>弊端：<br>业务多时，导致JSP页面容易混乱</li>\n<li>model2模式<br>技术组成：JSP+Servlet+JavaBean<br>优点：<br>开发中使用各个技术擅长的方面<br>Servlet擅长Java的业务代码<br>JSP擅长页面的展示<br>MVC：<br>Model:JavaBean 封装数据<br>View:JSP 页面展示<br>Controller:Servlet 获取数据，对数据进行封装，传递数据、指定页面显示<br><img src=\"/2020/02/16/web-server-note-12/1.png\" alt=\"餐厅\"><br><img src=\"/2020/02/16/web-server-note-12/1.png\" alt=\"MVC\"></li>\n<li>三层架构<br>Web层 与客户端交互<br>Service层 复杂业务逻辑<br>DAO层 与数据库进行交互<br><img src=\"/2020/02/16/web-server-note-12/3.png\" alt=\"三层餐厅\"><br><img src=\"/2020/02/16/web-server-note-12/4.png\" alt=\"三层\"><br><img src=\"/2020/02/16/web-server-note-12/5.png\" alt=\"三层架构逻辑\"><h2 id=\"商品列表改写\"><a href=\"#商品列表改写\" class=\"headerlink\" title=\"商品列表改写\"></a>商品列表改写</h2>根据包来分层</li>\n<li>com.it666.web GoodsServlet.java</li>\n<li>com.it666.service GoodsService.java</li>\n<li>com.it666.dao GoodsDao.java<br>原来GoodsServlet<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.it666.servlet;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/GoodsServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GoodsServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.连接数据库</span></span><br><span class=\"line\">\t\tQueryRunner qr = <span class=\"keyword\">new</span> QueryRunner(JDBCUtil.getDataSource());</span><br><span class=\"line\">\t\tString sql = <span class=\"string\">\"select * from goods\"</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 2.获取数据</span></span><br><span class=\"line\">\t\tList&lt;Goods&gt; allGoods = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tallGoods = qr.query(sql, <span class=\"keyword\">new</span> BeanListHandler&lt;Goods&gt;(Goods.class));</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(allGoods);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 3. 把数据存到equest域</span></span><br><span class=\"line\">\t\trequest.setAttribute(<span class=\"string\">\"allGoods\"</span>, allGoods);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 4.转发到商品列表，转发时把request对象传入</span></span><br><span class=\"line\">\t\trequest.getRequestDispatcher(<span class=\"string\">\"/goods_list.jsp\"</span>).forward(request, response);\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>GoodsServlet</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GoodsService goodsService = <span class=\"keyword\">new</span> GoodsService();</span><br><span class=\"line\">List&lt;Goods&gt; allGoods = goodsService.findAllGoods();</span><br></pre></td></tr></table></figure>\n\n<p>GoodsService</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.it666.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GoodsService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;Goods&gt; <span class=\"title\">findAllGoods</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tGoodsDao goodsDao = <span class=\"keyword\">new</span> GoodsDao();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> goodsDao.findAllGoods();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>GoodsDao</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.it666.dao;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GoodsDao</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;Goods&gt; <span class=\"title\">findAllGoods</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.连接数据库</span></span><br><span class=\"line\">\t\tQueryRunner qr = <span class=\"keyword\">new</span> QueryRunner(JDBCUtil.getDataSource());</span><br><span class=\"line\">\t\tString sql = <span class=\"string\">\"select * from goods\"</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 2.获取数据</span></span><br><span class=\"line\">\t\tList&lt;Goods&gt; allGoods = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tallGoods = qr.query(sql, <span class=\"keyword\">new</span> BeanListHandler&lt;Goods&gt;(Goods.class));</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> allGoods;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在GoodsServlet最后加上</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 3. 把数据存到equest域</span></span><br><span class=\"line\">request.setAttribute(<span class=\"string\">\"allGoods\"</span>, allGoods);</span><br><span class=\"line\"><span class=\"comment\">// 4.转发到商品列表，转发时把request对象传入</span></span><br><span class=\"line\">request.getRequestDispatcher(<span class=\"string\">\"/goods_list.jsp\"</span>).forward(request, response);</span><br></pre></td></tr></table></figure>\n<p>对GoodServlet进行测试</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005981003.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级JavaWeb与项目</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"JavaEE开发模式\"><a href=\"#JavaEE开发模式\" class=\"headerlink\" title=\"JavaEE开发模式\"></a>JavaEE开发模式</h2><p>模式在开发过程中总结出的“套路”，总结出的一套约定俗成的设计模式</p>\n<ul>\n<li>model1模式<br>技术组成：JSP+JavaBean<br>弊端：<br>业务多时，导致JSP页面容易混乱</li>\n<li>model2模式<br>技术组成：JSP+Servlet+JavaBean<br>优点：<br>开发中使用各个技术擅长的方面<br>Servlet擅长Java的业务代码<br>JSP擅长页面的展示<br>MVC：<br>Model:JavaBean 封装数据<br>View:JSP 页面展示<br>Controller:Servlet 获取数据，对数据进行封装，传递数据、指定页面显示<br><img src=\"/2020/02/16/web-server-note-12/1.png\" alt=\"餐厅\"><br><img src=\"/2020/02/16/web-server-note-12/1.png\" alt=\"MVC\"></li>\n<li>三层架构<br>Web层 与客户端交互<br>Service层 复杂业务逻辑<br>DAO层 与数据库进行交互<br><img src=\"/2020/02/16/web-server-note-12/3.png\" alt=\"三层餐厅\"><br><img src=\"/2020/02/16/web-server-note-12/4.png\" alt=\"三层\"><br><img src=\"/2020/02/16/web-server-note-12/5.png\" alt=\"三层架构逻辑\"><h2 id=\"商品列表改写\"><a href=\"#商品列表改写\" class=\"headerlink\" title=\"商品列表改写\"></a>商品列表改写</h2>根据包来分层</li>\n<li>com.it666.web GoodsServlet.java</li>\n<li>com.it666.service GoodsService.java</li>\n<li>com.it666.dao GoodsDao.java<br>原来GoodsServlet<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.it666.servlet;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/GoodsServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GoodsServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.连接数据库</span></span><br><span class=\"line\">\t\tQueryRunner qr = <span class=\"keyword\">new</span> QueryRunner(JDBCUtil.getDataSource());</span><br><span class=\"line\">\t\tString sql = <span class=\"string\">\"select * from goods\"</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 2.获取数据</span></span><br><span class=\"line\">\t\tList&lt;Goods&gt; allGoods = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tallGoods = qr.query(sql, <span class=\"keyword\">new</span> BeanListHandler&lt;Goods&gt;(Goods.class));</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(allGoods);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 3. 把数据存到equest域</span></span><br><span class=\"line\">\t\trequest.setAttribute(<span class=\"string\">\"allGoods\"</span>, allGoods);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 4.转发到商品列表，转发时把request对象传入</span></span><br><span class=\"line\">\t\trequest.getRequestDispatcher(<span class=\"string\">\"/goods_list.jsp\"</span>).forward(request, response);\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>GoodsServlet</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GoodsService goodsService = <span class=\"keyword\">new</span> GoodsService();</span><br><span class=\"line\">List&lt;Goods&gt; allGoods = goodsService.findAllGoods();</span><br></pre></td></tr></table></figure>\n\n<p>GoodsService</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.it666.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GoodsService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;Goods&gt; <span class=\"title\">findAllGoods</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tGoodsDao goodsDao = <span class=\"keyword\">new</span> GoodsDao();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> goodsDao.findAllGoods();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>GoodsDao</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.it666.dao;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GoodsDao</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;Goods&gt; <span class=\"title\">findAllGoods</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.连接数据库</span></span><br><span class=\"line\">\t\tQueryRunner qr = <span class=\"keyword\">new</span> QueryRunner(JDBCUtil.getDataSource());</span><br><span class=\"line\">\t\tString sql = <span class=\"string\">\"select * from goods\"</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 2.获取数据</span></span><br><span class=\"line\">\t\tList&lt;Goods&gt; allGoods = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tallGoods = qr.query(sql, <span class=\"keyword\">new</span> BeanListHandler&lt;Goods&gt;(Goods.class));</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> allGoods;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在GoodsServlet最后加上</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 3. 把数据存到equest域</span></span><br><span class=\"line\">request.setAttribute(<span class=\"string\">\"allGoods\"</span>, allGoods);</span><br><span class=\"line\"><span class=\"comment\">// 4.转发到商品列表，转发时把request对象传入</span></span><br><span class=\"line\">request.getRequestDispatcher(<span class=\"string\">\"/goods_list.jsp\"</span>).forward(request, response);</span><br></pre></td></tr></table></figure>\n<p>对GoodServlet进行测试</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005981003.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级JavaWeb与项目</a></p>\n"},{"title":"Web服务器笔记-分页","date":"2020-02-23T05:48:47.000Z","_content":"封装PageBean，减少写入域中的数据\n```java\npackage com.myxq.domain;\n\n@Getter@Setter\npublic class PageBean {\n    // 当前是哪一页\n    private Integer currentPage;\n    // 共多少页\n    private Integer totalPage;\n    // 多少条记录\n    private Integer totalCount;\n    // 当前页商品\n    private List<Goods> goodsList = new ArrayList<>();\n}\n\n```\n修改admin_index.jsp中main的指向\n```jsp\n        <frame src=\"${pageContext.request.contextPath }/GoodsServlet?action=getPageDate&currentPage=1\" name=\"mainFrame\" >\n```\n\n```java\npublic String getPageDate(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\ttry {\n\t\t\t// 1.获取当前页码\n\t\t\tString currentPage = request.getParameter(\"currentPage\");\n\t\t\t// 2.把页码给业务层 返回一个pageBean\n\t\t\tGoodsService goodsService = new GoodsService();\n\t\t\tPageBean pageBean = goodsService.getPageBean(Integer.parseInt(currentPage));\n\n\t\t\t// 3.把pageBean写到域中\n\t\t\trequest.setAttribute(\"pageBean\",pageBean);\n\t\t\t// 4.转发\n\t\t\treturn \"admin/main.jsp\";\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn null;\n\t}\n```\n\n\n```java\n\tpublic PageBean getPageBean(Integer currentPage) throws SQLException {\n\t\tPageBean pageBean = new PageBean();\n\t\t// 设置当前页\n\t\tpageBean.setCurrentPage(currentPage);\n\t\t// 获取有多少条记录\n\t\t// 从数据库中查询\n\t\tLong count = goodsDao.getCount();\n\t\tpageBean.setTotalCount(count.intValue());\n\t\t// 一页展示多少条数据\n\t\tInteger pageCount = 5;\n\n\t\t// 总页数 // 16/5=3  1 所以要向上取整\n\t\t// 注意两个Integer相除只会整数\n\t\tdouble totalPage = Math.ceil(1.0 * pageBean.getTotalCount() / pageCount);\n\t\tpageBean.setTotalPage((int)totalPage);\n\n\t\t// 当前页商品的角标\n\t\tInteger index = (pageBean.getCurrentPage()-1)*pageCount;\n\t\tList<Goods> list  = goodsDao.getPageDate(index,pageCount);\n\n\t\tpageBean.setGoodsList(list);\n\t\treturn pageBean;\n\t}\n```\n\n```java\n\tpublic Long getCount() throws SQLException {\n\t\tString sql = \"select count(*) from goods\";\n\t\tLong count = (Long) qr.query(sql,new ScalarHandler());\n\t\treturn count;\n\n\t}\n\n\tpublic List<Goods> getPageDate(Integer index, Integer pageCount) throws SQLException {\n\t\tString sql = \"select * from goods limit ?,?\";\n\t\tList<Goods> pageGoods = qr.query(sql, new BeanListHandler<Goods>(Goods.class), index, pageCount);\n\t\treturn pageGoods;\n\t}\n```\n\n查询结果就一个使用ScalarHandler结果集\n查询结果是一个Long类型，不能强转为Integer，因为**包装类型不能用括号强转**，要调用用方法才能转换\n\n修改getListGoods方法\n\n\n\n修改分页\n```jsp\n\t\t<c:forEach items=\"${pageBean.goodsList }\" var=\"goods\" varStatus=\"status\">\n\n\n//分页<script>\n\t\t//分页\n\t\t$(\"#page\").paging({\n\t\t\tpageNo : ${pageBean.currentPage},\n\t\t\ttotalPage : ${pageBean.totalPage},\n\t\t\ttotalSize : ${pageBean.totalCount},\n\t\t\tcallback : function(num) {\n\t\t\t\t// alert(num);\n\t\t\t\t// 重新发送请求\n\t\t\t\t$(window).attr('location', '${ctx}/GoodsServlet?action=getPageDate&currentPage='+num);\n\t\t\t\t// ${pageContext.request.contextPath }/GoodsServlet?action=getPageDate&currentPage=1\n\t\t\t}\n\t\t});\n\n\t</script>\n```\n\n## 参考资料\n\n[Java零基础到高级JavaWeb与项目](https://study.163.com/course/introduction/1005981003.htm)","source":"_posts/web-server-note-15.md","raw":"---\ntitle: Web服务器笔记-分页\ncategories: Web服务器笔记\ndate: 2020-02-23 13:48:47\n---\n封装PageBean，减少写入域中的数据\n```java\npackage com.myxq.domain;\n\n@Getter@Setter\npublic class PageBean {\n    // 当前是哪一页\n    private Integer currentPage;\n    // 共多少页\n    private Integer totalPage;\n    // 多少条记录\n    private Integer totalCount;\n    // 当前页商品\n    private List<Goods> goodsList = new ArrayList<>();\n}\n\n```\n修改admin_index.jsp中main的指向\n```jsp\n        <frame src=\"${pageContext.request.contextPath }/GoodsServlet?action=getPageDate&currentPage=1\" name=\"mainFrame\" >\n```\n\n```java\npublic String getPageDate(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\ttry {\n\t\t\t// 1.获取当前页码\n\t\t\tString currentPage = request.getParameter(\"currentPage\");\n\t\t\t// 2.把页码给业务层 返回一个pageBean\n\t\t\tGoodsService goodsService = new GoodsService();\n\t\t\tPageBean pageBean = goodsService.getPageBean(Integer.parseInt(currentPage));\n\n\t\t\t// 3.把pageBean写到域中\n\t\t\trequest.setAttribute(\"pageBean\",pageBean);\n\t\t\t// 4.转发\n\t\t\treturn \"admin/main.jsp\";\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn null;\n\t}\n```\n\n\n```java\n\tpublic PageBean getPageBean(Integer currentPage) throws SQLException {\n\t\tPageBean pageBean = new PageBean();\n\t\t// 设置当前页\n\t\tpageBean.setCurrentPage(currentPage);\n\t\t// 获取有多少条记录\n\t\t// 从数据库中查询\n\t\tLong count = goodsDao.getCount();\n\t\tpageBean.setTotalCount(count.intValue());\n\t\t// 一页展示多少条数据\n\t\tInteger pageCount = 5;\n\n\t\t// 总页数 // 16/5=3  1 所以要向上取整\n\t\t// 注意两个Integer相除只会整数\n\t\tdouble totalPage = Math.ceil(1.0 * pageBean.getTotalCount() / pageCount);\n\t\tpageBean.setTotalPage((int)totalPage);\n\n\t\t// 当前页商品的角标\n\t\tInteger index = (pageBean.getCurrentPage()-1)*pageCount;\n\t\tList<Goods> list  = goodsDao.getPageDate(index,pageCount);\n\n\t\tpageBean.setGoodsList(list);\n\t\treturn pageBean;\n\t}\n```\n\n```java\n\tpublic Long getCount() throws SQLException {\n\t\tString sql = \"select count(*) from goods\";\n\t\tLong count = (Long) qr.query(sql,new ScalarHandler());\n\t\treturn count;\n\n\t}\n\n\tpublic List<Goods> getPageDate(Integer index, Integer pageCount) throws SQLException {\n\t\tString sql = \"select * from goods limit ?,?\";\n\t\tList<Goods> pageGoods = qr.query(sql, new BeanListHandler<Goods>(Goods.class), index, pageCount);\n\t\treturn pageGoods;\n\t}\n```\n\n查询结果就一个使用ScalarHandler结果集\n查询结果是一个Long类型，不能强转为Integer，因为**包装类型不能用括号强转**，要调用用方法才能转换\n\n修改getListGoods方法\n\n\n\n修改分页\n```jsp\n\t\t<c:forEach items=\"${pageBean.goodsList }\" var=\"goods\" varStatus=\"status\">\n\n\n//分页<script>\n\t\t//分页\n\t\t$(\"#page\").paging({\n\t\t\tpageNo : ${pageBean.currentPage},\n\t\t\ttotalPage : ${pageBean.totalPage},\n\t\t\ttotalSize : ${pageBean.totalCount},\n\t\t\tcallback : function(num) {\n\t\t\t\t// alert(num);\n\t\t\t\t// 重新发送请求\n\t\t\t\t$(window).attr('location', '${ctx}/GoodsServlet?action=getPageDate&currentPage='+num);\n\t\t\t\t// ${pageContext.request.contextPath }/GoodsServlet?action=getPageDate&currentPage=1\n\t\t\t}\n\t\t});\n\n\t</script>\n```\n\n## 参考资料\n\n[Java零基础到高级JavaWeb与项目](https://study.163.com/course/introduction/1005981003.htm)","slug":"web-server-note-15","published":1,"updated":"2020-06-13T02:55:34.868Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke3x9g6p0024zgvueoymcp82","content":"<p>封装PageBean，减少写入域中的数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.domain;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Getter</span><span class=\"meta\">@Setter</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PageBean</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 当前是哪一页</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer currentPage;</span><br><span class=\"line\">    <span class=\"comment\">// 共多少页</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer totalPage;</span><br><span class=\"line\">    <span class=\"comment\">// 多少条记录</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer totalCount;</span><br><span class=\"line\">    <span class=\"comment\">// 当前页商品</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Goods&gt; goodsList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改admin_index.jsp中main的指向</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;frame src=<span class=\"string\">\"$&#123;pageContext.request.contextPath &#125;/GoodsServlet?action=getPageDate&amp;currentPage=1\"</span> name=<span class=\"string\">\"mainFrame\"</span> &gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getPageDate</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 1.获取当前页码</span></span><br><span class=\"line\">\t\t\tString currentPage = request.getParameter(<span class=\"string\">\"currentPage\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 2.把页码给业务层 返回一个pageBean</span></span><br><span class=\"line\">\t\t\tGoodsService goodsService = <span class=\"keyword\">new</span> GoodsService();</span><br><span class=\"line\">\t\t\tPageBean pageBean = goodsService.getPageBean(Integer.parseInt(currentPage));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 3.把pageBean写到域中</span></span><br><span class=\"line\">\t\t\trequest.setAttribute(<span class=\"string\">\"pageBean\"</span>,pageBean);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 4.转发</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"admin/main.jsp\"</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> PageBean <span class=\"title\">getPageBean</span><span class=\"params\">(Integer currentPage)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">\tPageBean pageBean = <span class=\"keyword\">new</span> PageBean();</span><br><span class=\"line\">\t<span class=\"comment\">// 设置当前页</span></span><br><span class=\"line\">\tpageBean.setCurrentPage(currentPage);</span><br><span class=\"line\">\t<span class=\"comment\">// 获取有多少条记录</span></span><br><span class=\"line\">\t<span class=\"comment\">// 从数据库中查询</span></span><br><span class=\"line\">\tLong count = goodsDao.getCount();</span><br><span class=\"line\">\tpageBean.setTotalCount(count.intValue());</span><br><span class=\"line\">\t<span class=\"comment\">// 一页展示多少条数据</span></span><br><span class=\"line\">\tInteger pageCount = <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 总页数 // 16/5=3  1 所以要向上取整</span></span><br><span class=\"line\">\t<span class=\"comment\">// 注意两个Integer相除只会整数</span></span><br><span class=\"line\">\t<span class=\"keyword\">double</span> totalPage = Math.ceil(<span class=\"number\">1.0</span> * pageBean.getTotalCount() / pageCount);</span><br><span class=\"line\">\tpageBean.setTotalPage((<span class=\"keyword\">int</span>)totalPage);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 当前页商品的角标</span></span><br><span class=\"line\">\tInteger index = (pageBean.getCurrentPage()-<span class=\"number\">1</span>)*pageCount;</span><br><span class=\"line\">\tList&lt;Goods&gt; list  = goodsDao.getPageDate(index,pageCount);</span><br><span class=\"line\"></span><br><span class=\"line\">\tpageBean.setGoodsList(list);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> pageBean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">getCount</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">\tString sql = <span class=\"string\">\"select count(*) from goods\"</span>;</span><br><span class=\"line\">\tLong count = (Long) qr.query(sql,<span class=\"keyword\">new</span> ScalarHandler());</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> count;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Goods&gt; <span class=\"title\">getPageDate</span><span class=\"params\">(Integer index, Integer pageCount)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">\tString sql = <span class=\"string\">\"select * from goods limit ?,?\"</span>;</span><br><span class=\"line\">\tList&lt;Goods&gt; pageGoods = qr.query(sql, <span class=\"keyword\">new</span> BeanListHandler&lt;Goods&gt;(Goods.class), index, pageCount);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> pageGoods;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>查询结果就一个使用ScalarHandler结果集<br>查询结果是一个Long类型，不能强转为Integer，因为<strong>包装类型不能用括号强转</strong>，要调用用方法才能转换</p>\n<p>修改getListGoods方法</p>\n<p>修改分页</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&lt;c:forEach items=<span class=\"string\">\"$&#123;pageBean.goodsList &#125;\"</span> <span class=\"keyword\">var</span>=<span class=\"string\">\"goods\"</span> varStatus=<span class=\"string\">\"status\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//分页&lt;script&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//分页</span></span><br><span class=\"line\">\t\t$(<span class=\"string\">\"#page\"</span>).paging(&#123;</span><br><span class=\"line\">\t\t\tpageNo : $&#123;pageBean.currentPage&#125;,</span><br><span class=\"line\">\t\t\ttotalPage : $&#123;pageBean.totalPage&#125;,</span><br><span class=\"line\">\t\t\ttotalSize : $&#123;pageBean.totalCount&#125;,</span><br><span class=\"line\">\t\t\tcallback : function(num) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// alert(num);</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 重新发送请求</span></span><br><span class=\"line\">\t\t\t\t$(window).attr(<span class=\"string\">'location'</span>, <span class=\"string\">'$&#123;ctx&#125;/GoodsServlet?action=getPageDate&amp;currentPage='</span>+num);</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// $&#123;pageContext.request.contextPath &#125;/GoodsServlet?action=getPageDate&amp;currentPage=1</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005981003.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级JavaWeb与项目</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>封装PageBean，减少写入域中的数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.domain;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Getter</span><span class=\"meta\">@Setter</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PageBean</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 当前是哪一页</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer currentPage;</span><br><span class=\"line\">    <span class=\"comment\">// 共多少页</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer totalPage;</span><br><span class=\"line\">    <span class=\"comment\">// 多少条记录</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer totalCount;</span><br><span class=\"line\">    <span class=\"comment\">// 当前页商品</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Goods&gt; goodsList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改admin_index.jsp中main的指向</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;frame src=<span class=\"string\">\"$&#123;pageContext.request.contextPath &#125;/GoodsServlet?action=getPageDate&amp;currentPage=1\"</span> name=<span class=\"string\">\"mainFrame\"</span> &gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getPageDate</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 1.获取当前页码</span></span><br><span class=\"line\">\t\t\tString currentPage = request.getParameter(<span class=\"string\">\"currentPage\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 2.把页码给业务层 返回一个pageBean</span></span><br><span class=\"line\">\t\t\tGoodsService goodsService = <span class=\"keyword\">new</span> GoodsService();</span><br><span class=\"line\">\t\t\tPageBean pageBean = goodsService.getPageBean(Integer.parseInt(currentPage));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 3.把pageBean写到域中</span></span><br><span class=\"line\">\t\t\trequest.setAttribute(<span class=\"string\">\"pageBean\"</span>,pageBean);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 4.转发</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"admin/main.jsp\"</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> PageBean <span class=\"title\">getPageBean</span><span class=\"params\">(Integer currentPage)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">\tPageBean pageBean = <span class=\"keyword\">new</span> PageBean();</span><br><span class=\"line\">\t<span class=\"comment\">// 设置当前页</span></span><br><span class=\"line\">\tpageBean.setCurrentPage(currentPage);</span><br><span class=\"line\">\t<span class=\"comment\">// 获取有多少条记录</span></span><br><span class=\"line\">\t<span class=\"comment\">// 从数据库中查询</span></span><br><span class=\"line\">\tLong count = goodsDao.getCount();</span><br><span class=\"line\">\tpageBean.setTotalCount(count.intValue());</span><br><span class=\"line\">\t<span class=\"comment\">// 一页展示多少条数据</span></span><br><span class=\"line\">\tInteger pageCount = <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 总页数 // 16/5=3  1 所以要向上取整</span></span><br><span class=\"line\">\t<span class=\"comment\">// 注意两个Integer相除只会整数</span></span><br><span class=\"line\">\t<span class=\"keyword\">double</span> totalPage = Math.ceil(<span class=\"number\">1.0</span> * pageBean.getTotalCount() / pageCount);</span><br><span class=\"line\">\tpageBean.setTotalPage((<span class=\"keyword\">int</span>)totalPage);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 当前页商品的角标</span></span><br><span class=\"line\">\tInteger index = (pageBean.getCurrentPage()-<span class=\"number\">1</span>)*pageCount;</span><br><span class=\"line\">\tList&lt;Goods&gt; list  = goodsDao.getPageDate(index,pageCount);</span><br><span class=\"line\"></span><br><span class=\"line\">\tpageBean.setGoodsList(list);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> pageBean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">getCount</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">\tString sql = <span class=\"string\">\"select count(*) from goods\"</span>;</span><br><span class=\"line\">\tLong count = (Long) qr.query(sql,<span class=\"keyword\">new</span> ScalarHandler());</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> count;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;Goods&gt; <span class=\"title\">getPageDate</span><span class=\"params\">(Integer index, Integer pageCount)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">\tString sql = <span class=\"string\">\"select * from goods limit ?,?\"</span>;</span><br><span class=\"line\">\tList&lt;Goods&gt; pageGoods = qr.query(sql, <span class=\"keyword\">new</span> BeanListHandler&lt;Goods&gt;(Goods.class), index, pageCount);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> pageGoods;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>查询结果就一个使用ScalarHandler结果集<br>查询结果是一个Long类型，不能强转为Integer，因为<strong>包装类型不能用括号强转</strong>，要调用用方法才能转换</p>\n<p>修改getListGoods方法</p>\n<p>修改分页</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t&lt;c:forEach items=<span class=\"string\">\"$&#123;pageBean.goodsList &#125;\"</span> <span class=\"keyword\">var</span>=<span class=\"string\">\"goods\"</span> varStatus=<span class=\"string\">\"status\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//分页&lt;script&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//分页</span></span><br><span class=\"line\">\t\t$(<span class=\"string\">\"#page\"</span>).paging(&#123;</span><br><span class=\"line\">\t\t\tpageNo : $&#123;pageBean.currentPage&#125;,</span><br><span class=\"line\">\t\t\ttotalPage : $&#123;pageBean.totalPage&#125;,</span><br><span class=\"line\">\t\t\ttotalSize : $&#123;pageBean.totalCount&#125;,</span><br><span class=\"line\">\t\t\tcallback : function(num) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// alert(num);</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 重新发送请求</span></span><br><span class=\"line\">\t\t\t\t$(window).attr(<span class=\"string\">'location'</span>, <span class=\"string\">'$&#123;ctx&#125;/GoodsServlet?action=getPageDate&amp;currentPage='</span>+num);</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// $&#123;pageContext.request.contextPath &#125;/GoodsServlet?action=getPageDate&amp;currentPage=1</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005981003.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级JavaWeb与项目</a></p>\n"},{"title":"Web服务器笔记-通用Servlet","date":"2020-02-22T11:07:33.000Z","_content":"#### 通用Servlet\n定义个请求都要去写一个Servlet，一个商品模块就写了6个Servlet\n一个工程当中会有很多的Servlet\n\n#### 解决办法\n在一个模块当中只写一个Servlet，在跳转到Servlet时，根据不同的操作，传入一个特定的参数\n在Servlet当中接收特定的参数，根据参数的值不同，跳转到不同的Servlet中\n\n实现步骤\n1. 假设有一个页面里面有四个请求\n```jsp\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\">\n<title>Insert title here</title>\n</head>\n<body>\n\t<a href=\"${pageContext.request.contextPath }/TestServlet?action=add\">添加</a>\n\t<a href=\"${pageContext.request.contextPath }/TestServlet?action=del\">删除</a>\n\t<a href=\"${pageContext.request.contextPath }/TestServlet?action=update\">更新</a>\n</body>\n</html>\n```\n2. 定义一个TestServlet接收请求\n3. 定义各自的业务方法\n```java\npackage com.myxq;\n\n@WebServlet(\"/TestServlet\")\npublic class TestServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tprotected void service(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\tSystem.out.println(\"TestServlet\");\n\t\tString action = request.getParameter(\"action\");\n\t\tif (\"add\".equals(action)) {\n\n\t\t\tadd(request, response);\n\t\t} else if (\"del\".equals(action)) {\n\n\t\t\tdel(request, response);\n\t\t} else if (\"update\".equals(action)) {\n\n\t\t\tupdate(request, response);\n\t\t}\n\t}\n\n\tprotected void add(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tSystem.out.println(\"add\");\n\t}\n\n\tprotected void del(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tSystem.out.println(\"del\");\n\t}\n\n\tprotected void update(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\tSystem.out.println(\"update\");\n\t}\n}\n```\n```java\nif (\"add\".equals(action)) \n// 这样可以避免action为空，空指针异常，通常用常量调用equals\n```\n\n#### 改进\n每一个业务中都有一个转发，只是转发的路径不同\n把转发拿到service中处理，调用各自方法时，返回跳转的路径\n```java\npackage com.myxq;\n\n@WebServlet(\"/TestServlet\")\npublic class TestServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tprotected void service(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\tSystem.out.println(\"TestServlet\");\n\t\tString desPath = null;\n\t\t\n\t\tString action = request.getParameter(\"action\");\n\t\tif (\"add\".equals(action)) {\n\n\t\t\tdesPath = add(request, response);\n\t\t} else if (\"del\".equals(action)) {\n\n\t\t\tdesPath = del(request, response);\n\t\t} else if (\"update\".equals(action)) {\n\n\t\t\tdesPath = update(request, response);\n\t\t}\n\t\t\n\t\tif (desPath != null) {\n\t\t\trequest.getRequestDispatcher(desPath).forward(request, response);\n\t\t}\n\t}\n\n\tprotected String add(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tSystem.out.println(\"add\");\n\t\treturn \"add.jsp\";\n\t}\n\n\tprotected String del(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tSystem.out.println(\"del\");\n\t\treturn \"del.jsp\";\n\t}\n\n\tprotected String update(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\tSystem.out.println(\"update\");\n\t\treturn \"update.jsp\";\n\t}\n}\n```\n\n#### 改进2\nservice当中if判断比较多，使用反射\n接收参数之后，查看当前字节码当中有没有和参数相同的方法\n如果有，就动态的来去调用\n注意反射直接invoke的方法必须是public的\n```java\npackage com.myxq;\n\n@WebServlet(\"/TestServlet2\")\npublic class TestServlet2 extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tprotected void service(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\tSystem.out.println(\"TestServlet\");\n\t\tString desPath = null;\n\n\t\tString action = request.getParameter(\"action\");\n\n\t\t// 1.获取字节码\n\t\ttry {\n\t\t\tClass clazz = this.getClass();\n\t\t\tMethod method = clazz.getMethod(action, HttpServletRequest.class, HttpServletResponse.class);\n\t\t\t// 判断有没有传入的方法\n\t\t\tif(method != null) {\n\t\t\t\t// 使用当前对象调用\n\t\t\t\tdesPath = (String) method.invoke(this, request,response);\n\t\t\t}\n\t\t\t// 转发\n\t\t\tif (desPath != null) {\n\t\t\t\trequest.getRequestDispatcher(desPath).forward(request, response);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t}\n\n\tpublic String add(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\tSystem.out.println(\"add\");\n\t\treturn \"add.jsp\";\n\t}\n\n\tpublic String del(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\tSystem.out.println(\"del\");\n\t\treturn \"del.jsp\";\n\t}\n\n\tpublic String update(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\tSystem.out.println(\"update\");\n\t\treturn \"update.jsp\";\n\t}\n}\n```\n\n#### 抽取基类\n把service方法单独存放到一个类当中\n以后别人在使用的时候，只需要提供对应的方法\n\nBaseServlet\n```java\npackage com.myxq;\n\n@WebServlet(\"/BaseServlet\")\npublic class BaseServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tprotected void service(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\tSystem.out.println(\"TestServlet\");\n\t\tString desPath = null;\n\n\t\tString action = request.getParameter(\"action\");\n\n\t\t// 1.获取字节码\n\t\ttry {\n\t\t\tClass clazz = this.getClass();\n\t\t\tMethod method = clazz.getMethod(action, HttpServletRequest.class, HttpServletResponse.class);\n\t\t\t// 判断有没有传入的方法\n\t\t\tif (method != null) {\n\t\t\t\t// 使用当前对象调用\n\t\t\t\tdesPath = (String) method.invoke(this, request, response);\n\t\t\t}\n\t\t\t// 转发\n\t\t\tif (desPath != null) {\n\t\t\t\trequest.getRequestDispatcher(desPath).forward(request, response);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t}\n}\n```\n\nTestServlet2继承BaseServlet\n```java\npackage com.myxq;\n\n@WebServlet(\"/TestServlet2\")\npublic class TestServlet2 extends BaseServlet{\n\tprivate static final long serialVersionUID = 1L;\n\n\t// 进入方法，找service方法，没找到，到父类中查找\n\n\tpublic String add(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\tSystem.out.println(\"add\");\n\t\treturn \"add.jsp\";\n\t}\n\n\tpublic String del(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\tSystem.out.println(\"del\");\n\t\treturn \"del.jsp\";\n\t}\n\n\tpublic String update(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\tSystem.out.println(\"update\");\n\t\treturn \"update.jsp\";\n\t}\n}\n```\n\n## 通用Servlet改进项目\n\n创建GoodsServlet 继承 BaseServlet\n```java\npackage com.myxq.web;\n\n\n@WebServlet(\"/GoodsServlet\")\npublic class GoodsServlet extends BaseServlet {\n}\n\n```\n修改jsp中的Servlet指向，链接到GoodsServlet，加上指定的action\n在GoodsServlet中添加对应的public方法，返回转发的页面String，如果需要处理异常，则在最后return null\n\nGoodsServlet\n```java\npackage com.myxq.web;\n\n@WebServlet(\"/GoodsServlet\")\npublic class GoodsServlet extends BaseServlet {\n\tpublic String getListGoods(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\tSystem.out.println(\"GoodsListServlet\");\n\t\t// 调用服务层\n\t\tGoodsService goodsService = new GoodsService();\n\t\ttry {\n\t\t\tList<Goods> allGoods = goodsService.getAllGoods();\n\n\t\t\t// 反转\n\t\t\tCollections.reverse(allGoods);\n\n\t\t\t// System.out.println(allGoods);\n\t\t\t// 把数据写到request域\n\t\t\trequest.setAttribute(\"allGoods\", allGoods);\n\t\t\t// 转发\n\t\t\treturn \"admin/main.jsp\";\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic String delGoods(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\t// 1. 接收参数\n\t\tString id = request.getParameter(\"id\");\n\t\t// System.out.println(id);\n\t\t// 2. 调用服务层\n\t\tGoodsService goodsService = new GoodsService();\n\n\t\ttry {\n\t\t\tgoodsService.deleteGoods(id);\n\t\t\treturn \"GoodsServlet?action=getListGoods\";\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn null;\n\n\t}\n\n\tpublic String editGoodsUI(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\tString id = request.getParameter(\"id\");\n\t\t// System.out.println(\"GoodsEditUIServlet\"+id);\n\t\ttry {\n\t\t\t// 1.获取当前商品\n\t\t\tGoodsService goodsService = new GoodsService();\n\t\t\tGoods goods = goodsService.getGoodsWithId(id);\n\t\t\tSystem.out.println(goods);\n\t\t\t// 把商品写入request域中\n\t\t\trequest.setAttribute(\"goods\", goods);\n\n\t\t\t// 2.获取所有分类\n\t\t\tCategoryService categoryService = new CategoryService();\n\t\t\tList<Category> allCategory = categoryService.findCategory();\n\t\t\trequest.setAttribute(\"allCategory\", allCategory);\n\t\t\t// 3.转发到JSP页面\n\t\t\treturn \"/admin/edit.jsp\";\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic String editGoods(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\t// 设置字符集 post\n\t\trequest.setCharacterEncoding(\"utf-8\");\n\t\t// System.out.println(\"GoodsEditServlet\");\n\t\t// 1.获取所有参数\n\t\tMap<String, String[]> parameterMap = request.getParameterMap();\n\t\t// 2.封装成Goods对象\n\t\tGoods goods = new Goods();\n\t\ttry {\n\t\t\tBeanUtils.populate(goods, parameterMap);\n\t\t\tSystem.out.println(goods);\n\t\t\t// 3.根据id更新数据\n\t\t\t// 4.调用服务层 更新数据\n\t\t\tGoodsService goodsService = new GoodsService();\n\t\t\tgoods.setImage(\"goods_10.png\");\n\t\t\tgoodsService.updateGoods(goods);\n\n\t\t\t// 5.跳转mian.jsp\n\t\t\treturn \"GoodsServlet?action=getListGoods\";\n\t\t} catch (Exception e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic String addGoodsUI(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\t// 1.取出所有分类\n\t\tList<Category> allCategory = null;\n\t\tCategoryService categoryService = new CategoryService();\n\t\ttry {\n\t\t\tallCategory = categoryService.findCategory();\n\t\t\tSystem.out.println(allCategory);\n\t\t\t// 2.把分类存到域中\n\t\t\trequest.setAttribute(\"allCategory\", allCategory);\n\t\t\t// 3.转发edit.jsp\n\t\t\treturn \"admin/add.jsp\";\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic String addGoods(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\t// System.out.println(\"GoodsAddServlet\");\n\t\t// 1.获取所有参数\n\t\trequest.setCharacterEncoding(\"utf-8\");\n\t\tMap<String, String[]> map = request.getParameterMap();\n\t\t// System.out.println(map);\n\t\tGoods goods = new Goods();\n\t\tBeanUtils beanUtils = new BeanUtils();\n\t\ttry {\n\t\t\tBeanUtils.populate(goods, map);\n\t\t\tgoods.setImage(\"goods_11.png\");\n\t\t\tSystem.out.println(request.getParameter(\"name\"));\n\t\t\tSystem.out.println(goods);\n\t\t\t// 调用服务层\n\t\t\tGoodsService goodsService = new GoodsService();\n\t\t\tgoodsService.addGoods(goods);\n\n\t\t\t// 跳转列表 取最新数据\n\t\t\treturn \"GoodsServlet?action=getListGoods\";\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\treturn null;\n\t}\n}\n```\n出现了一个问题：在子类中添加编码，post表单接收到的还是乱码，可以把设置编码写到BaseServlet中\n```java\nrequest.setCharacterEncoding(\"utf-8\");\n```\n## 参考资料\n\n[Java零基础到高级JavaWeb与项目](https://study.163.com/course/introduction/1005981003.htm)","source":"_posts/web-server-note-14.md","raw":"---\ntitle: Web服务器笔记-通用Servlet\ncategories: Web服务器笔记\ndate: 2020-02-22 19:07:33\n---\n#### 通用Servlet\n定义个请求都要去写一个Servlet，一个商品模块就写了6个Servlet\n一个工程当中会有很多的Servlet\n\n#### 解决办法\n在一个模块当中只写一个Servlet，在跳转到Servlet时，根据不同的操作，传入一个特定的参数\n在Servlet当中接收特定的参数，根据参数的值不同，跳转到不同的Servlet中\n\n实现步骤\n1. 假设有一个页面里面有四个请求\n```jsp\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\">\n<title>Insert title here</title>\n</head>\n<body>\n\t<a href=\"${pageContext.request.contextPath }/TestServlet?action=add\">添加</a>\n\t<a href=\"${pageContext.request.contextPath }/TestServlet?action=del\">删除</a>\n\t<a href=\"${pageContext.request.contextPath }/TestServlet?action=update\">更新</a>\n</body>\n</html>\n```\n2. 定义一个TestServlet接收请求\n3. 定义各自的业务方法\n```java\npackage com.myxq;\n\n@WebServlet(\"/TestServlet\")\npublic class TestServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tprotected void service(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\tSystem.out.println(\"TestServlet\");\n\t\tString action = request.getParameter(\"action\");\n\t\tif (\"add\".equals(action)) {\n\n\t\t\tadd(request, response);\n\t\t} else if (\"del\".equals(action)) {\n\n\t\t\tdel(request, response);\n\t\t} else if (\"update\".equals(action)) {\n\n\t\t\tupdate(request, response);\n\t\t}\n\t}\n\n\tprotected void add(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tSystem.out.println(\"add\");\n\t}\n\n\tprotected void del(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tSystem.out.println(\"del\");\n\t}\n\n\tprotected void update(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\tSystem.out.println(\"update\");\n\t}\n}\n```\n```java\nif (\"add\".equals(action)) \n// 这样可以避免action为空，空指针异常，通常用常量调用equals\n```\n\n#### 改进\n每一个业务中都有一个转发，只是转发的路径不同\n把转发拿到service中处理，调用各自方法时，返回跳转的路径\n```java\npackage com.myxq;\n\n@WebServlet(\"/TestServlet\")\npublic class TestServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tprotected void service(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\tSystem.out.println(\"TestServlet\");\n\t\tString desPath = null;\n\t\t\n\t\tString action = request.getParameter(\"action\");\n\t\tif (\"add\".equals(action)) {\n\n\t\t\tdesPath = add(request, response);\n\t\t} else if (\"del\".equals(action)) {\n\n\t\t\tdesPath = del(request, response);\n\t\t} else if (\"update\".equals(action)) {\n\n\t\t\tdesPath = update(request, response);\n\t\t}\n\t\t\n\t\tif (desPath != null) {\n\t\t\trequest.getRequestDispatcher(desPath).forward(request, response);\n\t\t}\n\t}\n\n\tprotected String add(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tSystem.out.println(\"add\");\n\t\treturn \"add.jsp\";\n\t}\n\n\tprotected String del(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tSystem.out.println(\"del\");\n\t\treturn \"del.jsp\";\n\t}\n\n\tprotected String update(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\tSystem.out.println(\"update\");\n\t\treturn \"update.jsp\";\n\t}\n}\n```\n\n#### 改进2\nservice当中if判断比较多，使用反射\n接收参数之后，查看当前字节码当中有没有和参数相同的方法\n如果有，就动态的来去调用\n注意反射直接invoke的方法必须是public的\n```java\npackage com.myxq;\n\n@WebServlet(\"/TestServlet2\")\npublic class TestServlet2 extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tprotected void service(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\tSystem.out.println(\"TestServlet\");\n\t\tString desPath = null;\n\n\t\tString action = request.getParameter(\"action\");\n\n\t\t// 1.获取字节码\n\t\ttry {\n\t\t\tClass clazz = this.getClass();\n\t\t\tMethod method = clazz.getMethod(action, HttpServletRequest.class, HttpServletResponse.class);\n\t\t\t// 判断有没有传入的方法\n\t\t\tif(method != null) {\n\t\t\t\t// 使用当前对象调用\n\t\t\t\tdesPath = (String) method.invoke(this, request,response);\n\t\t\t}\n\t\t\t// 转发\n\t\t\tif (desPath != null) {\n\t\t\t\trequest.getRequestDispatcher(desPath).forward(request, response);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t}\n\n\tpublic String add(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\tSystem.out.println(\"add\");\n\t\treturn \"add.jsp\";\n\t}\n\n\tpublic String del(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\tSystem.out.println(\"del\");\n\t\treturn \"del.jsp\";\n\t}\n\n\tpublic String update(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\tSystem.out.println(\"update\");\n\t\treturn \"update.jsp\";\n\t}\n}\n```\n\n#### 抽取基类\n把service方法单独存放到一个类当中\n以后别人在使用的时候，只需要提供对应的方法\n\nBaseServlet\n```java\npackage com.myxq;\n\n@WebServlet(\"/BaseServlet\")\npublic class BaseServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tprotected void service(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\tSystem.out.println(\"TestServlet\");\n\t\tString desPath = null;\n\n\t\tString action = request.getParameter(\"action\");\n\n\t\t// 1.获取字节码\n\t\ttry {\n\t\t\tClass clazz = this.getClass();\n\t\t\tMethod method = clazz.getMethod(action, HttpServletRequest.class, HttpServletResponse.class);\n\t\t\t// 判断有没有传入的方法\n\t\t\tif (method != null) {\n\t\t\t\t// 使用当前对象调用\n\t\t\t\tdesPath = (String) method.invoke(this, request, response);\n\t\t\t}\n\t\t\t// 转发\n\t\t\tif (desPath != null) {\n\t\t\t\trequest.getRequestDispatcher(desPath).forward(request, response);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t}\n}\n```\n\nTestServlet2继承BaseServlet\n```java\npackage com.myxq;\n\n@WebServlet(\"/TestServlet2\")\npublic class TestServlet2 extends BaseServlet{\n\tprivate static final long serialVersionUID = 1L;\n\n\t// 进入方法，找service方法，没找到，到父类中查找\n\n\tpublic String add(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\tSystem.out.println(\"add\");\n\t\treturn \"add.jsp\";\n\t}\n\n\tpublic String del(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\tSystem.out.println(\"del\");\n\t\treturn \"del.jsp\";\n\t}\n\n\tpublic String update(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\tSystem.out.println(\"update\");\n\t\treturn \"update.jsp\";\n\t}\n}\n```\n\n## 通用Servlet改进项目\n\n创建GoodsServlet 继承 BaseServlet\n```java\npackage com.myxq.web;\n\n\n@WebServlet(\"/GoodsServlet\")\npublic class GoodsServlet extends BaseServlet {\n}\n\n```\n修改jsp中的Servlet指向，链接到GoodsServlet，加上指定的action\n在GoodsServlet中添加对应的public方法，返回转发的页面String，如果需要处理异常，则在最后return null\n\nGoodsServlet\n```java\npackage com.myxq.web;\n\n@WebServlet(\"/GoodsServlet\")\npublic class GoodsServlet extends BaseServlet {\n\tpublic String getListGoods(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\tSystem.out.println(\"GoodsListServlet\");\n\t\t// 调用服务层\n\t\tGoodsService goodsService = new GoodsService();\n\t\ttry {\n\t\t\tList<Goods> allGoods = goodsService.getAllGoods();\n\n\t\t\t// 反转\n\t\t\tCollections.reverse(allGoods);\n\n\t\t\t// System.out.println(allGoods);\n\t\t\t// 把数据写到request域\n\t\t\trequest.setAttribute(\"allGoods\", allGoods);\n\t\t\t// 转发\n\t\t\treturn \"admin/main.jsp\";\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic String delGoods(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\t// 1. 接收参数\n\t\tString id = request.getParameter(\"id\");\n\t\t// System.out.println(id);\n\t\t// 2. 调用服务层\n\t\tGoodsService goodsService = new GoodsService();\n\n\t\ttry {\n\t\t\tgoodsService.deleteGoods(id);\n\t\t\treturn \"GoodsServlet?action=getListGoods\";\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn null;\n\n\t}\n\n\tpublic String editGoodsUI(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\tString id = request.getParameter(\"id\");\n\t\t// System.out.println(\"GoodsEditUIServlet\"+id);\n\t\ttry {\n\t\t\t// 1.获取当前商品\n\t\t\tGoodsService goodsService = new GoodsService();\n\t\t\tGoods goods = goodsService.getGoodsWithId(id);\n\t\t\tSystem.out.println(goods);\n\t\t\t// 把商品写入request域中\n\t\t\trequest.setAttribute(\"goods\", goods);\n\n\t\t\t// 2.获取所有分类\n\t\t\tCategoryService categoryService = new CategoryService();\n\t\t\tList<Category> allCategory = categoryService.findCategory();\n\t\t\trequest.setAttribute(\"allCategory\", allCategory);\n\t\t\t// 3.转发到JSP页面\n\t\t\treturn \"/admin/edit.jsp\";\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic String editGoods(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\t// 设置字符集 post\n\t\trequest.setCharacterEncoding(\"utf-8\");\n\t\t// System.out.println(\"GoodsEditServlet\");\n\t\t// 1.获取所有参数\n\t\tMap<String, String[]> parameterMap = request.getParameterMap();\n\t\t// 2.封装成Goods对象\n\t\tGoods goods = new Goods();\n\t\ttry {\n\t\t\tBeanUtils.populate(goods, parameterMap);\n\t\t\tSystem.out.println(goods);\n\t\t\t// 3.根据id更新数据\n\t\t\t// 4.调用服务层 更新数据\n\t\t\tGoodsService goodsService = new GoodsService();\n\t\t\tgoods.setImage(\"goods_10.png\");\n\t\t\tgoodsService.updateGoods(goods);\n\n\t\t\t// 5.跳转mian.jsp\n\t\t\treturn \"GoodsServlet?action=getListGoods\";\n\t\t} catch (Exception e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic String addGoodsUI(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\t// 1.取出所有分类\n\t\tList<Category> allCategory = null;\n\t\tCategoryService categoryService = new CategoryService();\n\t\ttry {\n\t\t\tallCategory = categoryService.findCategory();\n\t\t\tSystem.out.println(allCategory);\n\t\t\t// 2.把分类存到域中\n\t\t\trequest.setAttribute(\"allCategory\", allCategory);\n\t\t\t// 3.转发edit.jsp\n\t\t\treturn \"admin/add.jsp\";\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic String addGoods(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\t// System.out.println(\"GoodsAddServlet\");\n\t\t// 1.获取所有参数\n\t\trequest.setCharacterEncoding(\"utf-8\");\n\t\tMap<String, String[]> map = request.getParameterMap();\n\t\t// System.out.println(map);\n\t\tGoods goods = new Goods();\n\t\tBeanUtils beanUtils = new BeanUtils();\n\t\ttry {\n\t\t\tBeanUtils.populate(goods, map);\n\t\t\tgoods.setImage(\"goods_11.png\");\n\t\t\tSystem.out.println(request.getParameter(\"name\"));\n\t\t\tSystem.out.println(goods);\n\t\t\t// 调用服务层\n\t\t\tGoodsService goodsService = new GoodsService();\n\t\t\tgoodsService.addGoods(goods);\n\n\t\t\t// 跳转列表 取最新数据\n\t\t\treturn \"GoodsServlet?action=getListGoods\";\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\treturn null;\n\t}\n}\n```\n出现了一个问题：在子类中添加编码，post表单接收到的还是乱码，可以把设置编码写到BaseServlet中\n```java\nrequest.setCharacterEncoding(\"utf-8\");\n```\n## 参考资料\n\n[Java零基础到高级JavaWeb与项目](https://study.163.com/course/introduction/1005981003.htm)","slug":"web-server-note-14","published":1,"updated":"2020-06-13T02:55:34.867Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke3x9g6t0027zgvu3qnt3vep","content":"<h4 id=\"通用Servlet\"><a href=\"#通用Servlet\" class=\"headerlink\" title=\"通用Servlet\"></a>通用Servlet</h4><p>定义个请求都要去写一个Servlet，一个商品模块就写了6个Servlet<br>一个工程当中会有很多的Servlet</p>\n<h4 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h4><p>在一个模块当中只写一个Servlet，在跳转到Servlet时，根据不同的操作，传入一个特定的参数<br>在Servlet当中接收特定的参数，根据参数的值不同，跳转到不同的Servlet中</p>\n<p>实现步骤</p>\n<ol>\n<li>假设有一个页面里面有四个请求<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=<span class=\"string\">\"java\"</span> contentType=<span class=\"string\">\"text/html; charset=UTF-8\"</span></span><br><span class=\"line\">    pageEncoding=<span class=\"string\">\"UTF-8\"</span>%&gt;</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;a href=\"$&#123;pageContext.request.contextPath &#125;/TestServlet?action=add\"&gt;添加&lt;/a&gt;</span><br><span class=\"line\">\t&lt;a href=\"$&#123;pageContext.request.contextPath &#125;/TestServlet?action=del\"&gt;删除&lt;/a&gt;</span><br><span class=\"line\">\t&lt;a href=\"$&#123;pageContext.request.contextPath &#125;/TestServlet?action=update\"&gt;更新&lt;/a&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li>\n<li>定义一个TestServlet接收请求</li>\n<li>定义各自的业务方法<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/TestServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"TestServlet\"</span>);</span><br><span class=\"line\">\t\tString action = request.getParameter(<span class=\"string\">\"action\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"string\">\"add\"</span>.equals(action)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tadd(request, response);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"del\"</span>.equals(action)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tdel(request, response);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"update\"</span>.equals(action)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tupdate(request, response);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"add\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">del</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"del\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"update\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">\"add\"</span>.equals(action)) </span><br><span class=\"line\"><span class=\"comment\">// 这样可以避免action为空，空指针异常，通常用常量调用equals</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h4 id=\"改进\"><a href=\"#改进\" class=\"headerlink\" title=\"改进\"></a>改进</h4><p>每一个业务中都有一个转发，只是转发的路径不同<br>把转发拿到service中处理，调用各自方法时，返回跳转的路径</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/TestServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"TestServlet\"</span>);</span><br><span class=\"line\">\t\tString desPath = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tString action = request.getParameter(<span class=\"string\">\"action\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"string\">\"add\"</span>.equals(action)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tdesPath = add(request, response);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"del\"</span>.equals(action)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tdesPath = del(request, response);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"update\"</span>.equals(action)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tdesPath = update(request, response);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (desPath != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\trequest.getRequestDispatcher(desPath).forward(request, response);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">add</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"add\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"add.jsp\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">del</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"del\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"del.jsp\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">update</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"update\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"update.jsp\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"改进2\"><a href=\"#改进2\" class=\"headerlink\" title=\"改进2\"></a>改进2</h4><p>service当中if判断比较多，使用反射<br>接收参数之后，查看当前字节码当中有没有和参数相同的方法<br>如果有，就动态的来去调用<br>注意反射直接invoke的方法必须是public的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/TestServlet2\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestServlet2</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"TestServlet\"</span>);</span><br><span class=\"line\">\t\tString desPath = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tString action = request.getParameter(<span class=\"string\">\"action\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.获取字节码</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tClass clazz = <span class=\"keyword\">this</span>.getClass();</span><br><span class=\"line\">\t\t\tMethod method = clazz.getMethod(action, HttpServletRequest.class, HttpServletResponse.class);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 判断有没有传入的方法</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(method != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 使用当前对象调用</span></span><br><span class=\"line\">\t\t\t\tdesPath = (String) method.invoke(<span class=\"keyword\">this</span>, request,response);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 转发</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (desPath != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\trequest.getRequestDispatcher(desPath).forward(request, response);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">add</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"add\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"add.jsp\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">del</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"del\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"del.jsp\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">update</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"update\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"update.jsp\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"抽取基类\"><a href=\"#抽取基类\" class=\"headerlink\" title=\"抽取基类\"></a>抽取基类</h4><p>把service方法单独存放到一个类当中<br>以后别人在使用的时候，只需要提供对应的方法</p>\n<p>BaseServlet</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/BaseServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"TestServlet\"</span>);</span><br><span class=\"line\">\t\tString desPath = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tString action = request.getParameter(<span class=\"string\">\"action\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.获取字节码</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tClass clazz = <span class=\"keyword\">this</span>.getClass();</span><br><span class=\"line\">\t\t\tMethod method = clazz.getMethod(action, HttpServletRequest.class, HttpServletResponse.class);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 判断有没有传入的方法</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (method != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 使用当前对象调用</span></span><br><span class=\"line\">\t\t\t\tdesPath = (String) method.invoke(<span class=\"keyword\">this</span>, request, response);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 转发</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (desPath != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\trequest.getRequestDispatcher(desPath).forward(request, response);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>TestServlet2继承BaseServlet</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/TestServlet2\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestServlet2</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseServlet</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 进入方法，找service方法，没找到，到父类中查找</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">add</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"add\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"add.jsp\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">del</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"del\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"del.jsp\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">update</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"update\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"update.jsp\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"通用Servlet改进项目\"><a href=\"#通用Servlet改进项目\" class=\"headerlink\" title=\"通用Servlet改进项目\"></a>通用Servlet改进项目</h2><p>创建GoodsServlet 继承 BaseServlet</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.web;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/GoodsServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GoodsServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseServlet</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改jsp中的Servlet指向，链接到GoodsServlet，加上指定的action<br>在GoodsServlet中添加对应的public方法，返回转发的页面String，如果需要处理异常，则在最后return null</p>\n<p>GoodsServlet</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.web;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/GoodsServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GoodsServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getListGoods</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"GoodsListServlet\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 调用服务层</span></span><br><span class=\"line\">\t\tGoodsService goodsService = <span class=\"keyword\">new</span> GoodsService();</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tList&lt;Goods&gt; allGoods = goodsService.getAllGoods();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 反转</span></span><br><span class=\"line\">\t\t\tCollections.reverse(allGoods);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// System.out.println(allGoods);</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 把数据写到request域</span></span><br><span class=\"line\">\t\t\trequest.setAttribute(<span class=\"string\">\"allGoods\"</span>, allGoods);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 转发</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"admin/main.jsp\"</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">delGoods</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 1. 接收参数</span></span><br><span class=\"line\">\t\tString id = request.getParameter(<span class=\"string\">\"id\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// System.out.println(id);</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 2. 调用服务层</span></span><br><span class=\"line\">\t\tGoodsService goodsService = <span class=\"keyword\">new</span> GoodsService();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tgoodsService.deleteGoods(id);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"GoodsServlet?action=getListGoods\"</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">editGoodsUI</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tString id = request.getParameter(<span class=\"string\">\"id\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// System.out.println(\"GoodsEditUIServlet\"+id);</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 1.获取当前商品</span></span><br><span class=\"line\">\t\t\tGoodsService goodsService = <span class=\"keyword\">new</span> GoodsService();</span><br><span class=\"line\">\t\t\tGoods goods = goodsService.getGoodsWithId(id);</span><br><span class=\"line\">\t\t\tSystem.out.println(goods);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 把商品写入request域中</span></span><br><span class=\"line\">\t\t\trequest.setAttribute(<span class=\"string\">\"goods\"</span>, goods);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 2.获取所有分类</span></span><br><span class=\"line\">\t\t\tCategoryService categoryService = <span class=\"keyword\">new</span> CategoryService();</span><br><span class=\"line\">\t\t\tList&lt;Category&gt; allCategory = categoryService.findCategory();</span><br><span class=\"line\">\t\t\trequest.setAttribute(<span class=\"string\">\"allCategory\"</span>, allCategory);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 3.转发到JSP页面</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"/admin/edit.jsp\"</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">editGoods</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 设置字符集 post</span></span><br><span class=\"line\">\t\trequest.setCharacterEncoding(<span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// System.out.println(\"GoodsEditServlet\");</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.获取所有参数</span></span><br><span class=\"line\">\t\tMap&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 2.封装成Goods对象</span></span><br><span class=\"line\">\t\tGoods goods = <span class=\"keyword\">new</span> Goods();</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tBeanUtils.populate(goods, parameterMap);</span><br><span class=\"line\">\t\t\tSystem.out.println(goods);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 3.根据id更新数据</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 4.调用服务层 更新数据</span></span><br><span class=\"line\">\t\t\tGoodsService goodsService = <span class=\"keyword\">new</span> GoodsService();</span><br><span class=\"line\">\t\t\tgoods.setImage(<span class=\"string\">\"goods_10.png\"</span>);</span><br><span class=\"line\">\t\t\tgoodsService.updateGoods(goods);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 5.跳转mian.jsp</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"GoodsServlet?action=getListGoods\"</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">addGoodsUI</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.取出所有分类</span></span><br><span class=\"line\">\t\tList&lt;Category&gt; allCategory = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tCategoryService categoryService = <span class=\"keyword\">new</span> CategoryService();</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tallCategory = categoryService.findCategory();</span><br><span class=\"line\">\t\t\tSystem.out.println(allCategory);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 2.把分类存到域中</span></span><br><span class=\"line\">\t\t\trequest.setAttribute(<span class=\"string\">\"allCategory\"</span>, allCategory);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 3.转发edit.jsp</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"admin/add.jsp\"</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">addGoods</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// System.out.println(\"GoodsAddServlet\");</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.获取所有参数</span></span><br><span class=\"line\">\t\trequest.setCharacterEncoding(<span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">\t\tMap&lt;String, String[]&gt; map = request.getParameterMap();</span><br><span class=\"line\">\t\t<span class=\"comment\">// System.out.println(map);</span></span><br><span class=\"line\">\t\tGoods goods = <span class=\"keyword\">new</span> Goods();</span><br><span class=\"line\">\t\tBeanUtils beanUtils = <span class=\"keyword\">new</span> BeanUtils();</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tBeanUtils.populate(goods, map);</span><br><span class=\"line\">\t\t\tgoods.setImage(<span class=\"string\">\"goods_11.png\"</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(request.getParameter(<span class=\"string\">\"name\"</span>));</span><br><span class=\"line\">\t\t\tSystem.out.println(goods);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 调用服务层</span></span><br><span class=\"line\">\t\t\tGoodsService goodsService = <span class=\"keyword\">new</span> GoodsService();</span><br><span class=\"line\">\t\t\tgoodsService.addGoods(goods);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 跳转列表 取最新数据</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"GoodsServlet?action=getListGoods\"</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>出现了一个问题：在子类中添加编码，post表单接收到的还是乱码，可以把设置编码写到BaseServlet中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request.setCharacterEncoding(<span class=\"string\">\"utf-8\"</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005981003.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级JavaWeb与项目</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"通用Servlet\"><a href=\"#通用Servlet\" class=\"headerlink\" title=\"通用Servlet\"></a>通用Servlet</h4><p>定义个请求都要去写一个Servlet，一个商品模块就写了6个Servlet<br>一个工程当中会有很多的Servlet</p>\n<h4 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h4><p>在一个模块当中只写一个Servlet，在跳转到Servlet时，根据不同的操作，传入一个特定的参数<br>在Servlet当中接收特定的参数，根据参数的值不同，跳转到不同的Servlet中</p>\n<p>实现步骤</p>\n<ol>\n<li>假设有一个页面里面有四个请求<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=<span class=\"string\">\"java\"</span> contentType=<span class=\"string\">\"text/html; charset=UTF-8\"</span></span><br><span class=\"line\">    pageEncoding=<span class=\"string\">\"UTF-8\"</span>%&gt;</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&lt;a href=\"$&#123;pageContext.request.contextPath &#125;/TestServlet?action=add\"&gt;添加&lt;/a&gt;</span><br><span class=\"line\">\t&lt;a href=\"$&#123;pageContext.request.contextPath &#125;/TestServlet?action=del\"&gt;删除&lt;/a&gt;</span><br><span class=\"line\">\t&lt;a href=\"$&#123;pageContext.request.contextPath &#125;/TestServlet?action=update\"&gt;更新&lt;/a&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li>\n<li>定义一个TestServlet接收请求</li>\n<li>定义各自的业务方法<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/TestServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"TestServlet\"</span>);</span><br><span class=\"line\">\t\tString action = request.getParameter(<span class=\"string\">\"action\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"string\">\"add\"</span>.equals(action)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tadd(request, response);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"del\"</span>.equals(action)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tdel(request, response);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"update\"</span>.equals(action)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tupdate(request, response);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"add\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">del</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"del\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"update\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">\"add\"</span>.equals(action)) </span><br><span class=\"line\"><span class=\"comment\">// 这样可以避免action为空，空指针异常，通常用常量调用equals</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h4 id=\"改进\"><a href=\"#改进\" class=\"headerlink\" title=\"改进\"></a>改进</h4><p>每一个业务中都有一个转发，只是转发的路径不同<br>把转发拿到service中处理，调用各自方法时，返回跳转的路径</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/TestServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"TestServlet\"</span>);</span><br><span class=\"line\">\t\tString desPath = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tString action = request.getParameter(<span class=\"string\">\"action\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"string\">\"add\"</span>.equals(action)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tdesPath = add(request, response);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"del\"</span>.equals(action)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tdesPath = del(request, response);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"update\"</span>.equals(action)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tdesPath = update(request, response);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (desPath != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\trequest.getRequestDispatcher(desPath).forward(request, response);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">add</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"add\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"add.jsp\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">del</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"del\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"del.jsp\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">update</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"update\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"update.jsp\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"改进2\"><a href=\"#改进2\" class=\"headerlink\" title=\"改进2\"></a>改进2</h4><p>service当中if判断比较多，使用反射<br>接收参数之后，查看当前字节码当中有没有和参数相同的方法<br>如果有，就动态的来去调用<br>注意反射直接invoke的方法必须是public的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/TestServlet2\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestServlet2</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"TestServlet\"</span>);</span><br><span class=\"line\">\t\tString desPath = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tString action = request.getParameter(<span class=\"string\">\"action\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.获取字节码</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tClass clazz = <span class=\"keyword\">this</span>.getClass();</span><br><span class=\"line\">\t\t\tMethod method = clazz.getMethod(action, HttpServletRequest.class, HttpServletResponse.class);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 判断有没有传入的方法</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(method != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 使用当前对象调用</span></span><br><span class=\"line\">\t\t\t\tdesPath = (String) method.invoke(<span class=\"keyword\">this</span>, request,response);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 转发</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (desPath != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\trequest.getRequestDispatcher(desPath).forward(request, response);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">add</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"add\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"add.jsp\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">del</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"del\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"del.jsp\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">update</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"update\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"update.jsp\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"抽取基类\"><a href=\"#抽取基类\" class=\"headerlink\" title=\"抽取基类\"></a>抽取基类</h4><p>把service方法单独存放到一个类当中<br>以后别人在使用的时候，只需要提供对应的方法</p>\n<p>BaseServlet</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/BaseServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"TestServlet\"</span>);</span><br><span class=\"line\">\t\tString desPath = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tString action = request.getParameter(<span class=\"string\">\"action\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.获取字节码</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tClass clazz = <span class=\"keyword\">this</span>.getClass();</span><br><span class=\"line\">\t\t\tMethod method = clazz.getMethod(action, HttpServletRequest.class, HttpServletResponse.class);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 判断有没有传入的方法</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (method != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 使用当前对象调用</span></span><br><span class=\"line\">\t\t\t\tdesPath = (String) method.invoke(<span class=\"keyword\">this</span>, request, response);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 转发</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (desPath != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\trequest.getRequestDispatcher(desPath).forward(request, response);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>TestServlet2继承BaseServlet</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/TestServlet2\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestServlet2</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseServlet</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 进入方法，找service方法，没找到，到父类中查找</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">add</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"add\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"add.jsp\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">del</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"del\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"del.jsp\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">update</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"update\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"update.jsp\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"通用Servlet改进项目\"><a href=\"#通用Servlet改进项目\" class=\"headerlink\" title=\"通用Servlet改进项目\"></a>通用Servlet改进项目</h2><p>创建GoodsServlet 继承 BaseServlet</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.web;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/GoodsServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GoodsServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseServlet</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改jsp中的Servlet指向，链接到GoodsServlet，加上指定的action<br>在GoodsServlet中添加对应的public方法，返回转发的页面String，如果需要处理异常，则在最后return null</p>\n<p>GoodsServlet</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.web;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/GoodsServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GoodsServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getListGoods</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"GoodsListServlet\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 调用服务层</span></span><br><span class=\"line\">\t\tGoodsService goodsService = <span class=\"keyword\">new</span> GoodsService();</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tList&lt;Goods&gt; allGoods = goodsService.getAllGoods();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 反转</span></span><br><span class=\"line\">\t\t\tCollections.reverse(allGoods);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// System.out.println(allGoods);</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 把数据写到request域</span></span><br><span class=\"line\">\t\t\trequest.setAttribute(<span class=\"string\">\"allGoods\"</span>, allGoods);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 转发</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"admin/main.jsp\"</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">delGoods</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 1. 接收参数</span></span><br><span class=\"line\">\t\tString id = request.getParameter(<span class=\"string\">\"id\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// System.out.println(id);</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 2. 调用服务层</span></span><br><span class=\"line\">\t\tGoodsService goodsService = <span class=\"keyword\">new</span> GoodsService();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tgoodsService.deleteGoods(id);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"GoodsServlet?action=getListGoods\"</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">editGoodsUI</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tString id = request.getParameter(<span class=\"string\">\"id\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// System.out.println(\"GoodsEditUIServlet\"+id);</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 1.获取当前商品</span></span><br><span class=\"line\">\t\t\tGoodsService goodsService = <span class=\"keyword\">new</span> GoodsService();</span><br><span class=\"line\">\t\t\tGoods goods = goodsService.getGoodsWithId(id);</span><br><span class=\"line\">\t\t\tSystem.out.println(goods);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 把商品写入request域中</span></span><br><span class=\"line\">\t\t\trequest.setAttribute(<span class=\"string\">\"goods\"</span>, goods);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 2.获取所有分类</span></span><br><span class=\"line\">\t\t\tCategoryService categoryService = <span class=\"keyword\">new</span> CategoryService();</span><br><span class=\"line\">\t\t\tList&lt;Category&gt; allCategory = categoryService.findCategory();</span><br><span class=\"line\">\t\t\trequest.setAttribute(<span class=\"string\">\"allCategory\"</span>, allCategory);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 3.转发到JSP页面</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"/admin/edit.jsp\"</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">editGoods</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 设置字符集 post</span></span><br><span class=\"line\">\t\trequest.setCharacterEncoding(<span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// System.out.println(\"GoodsEditServlet\");</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.获取所有参数</span></span><br><span class=\"line\">\t\tMap&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 2.封装成Goods对象</span></span><br><span class=\"line\">\t\tGoods goods = <span class=\"keyword\">new</span> Goods();</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tBeanUtils.populate(goods, parameterMap);</span><br><span class=\"line\">\t\t\tSystem.out.println(goods);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 3.根据id更新数据</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 4.调用服务层 更新数据</span></span><br><span class=\"line\">\t\t\tGoodsService goodsService = <span class=\"keyword\">new</span> GoodsService();</span><br><span class=\"line\">\t\t\tgoods.setImage(<span class=\"string\">\"goods_10.png\"</span>);</span><br><span class=\"line\">\t\t\tgoodsService.updateGoods(goods);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 5.跳转mian.jsp</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"GoodsServlet?action=getListGoods\"</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">addGoodsUI</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.取出所有分类</span></span><br><span class=\"line\">\t\tList&lt;Category&gt; allCategory = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tCategoryService categoryService = <span class=\"keyword\">new</span> CategoryService();</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tallCategory = categoryService.findCategory();</span><br><span class=\"line\">\t\t\tSystem.out.println(allCategory);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 2.把分类存到域中</span></span><br><span class=\"line\">\t\t\trequest.setAttribute(<span class=\"string\">\"allCategory\"</span>, allCategory);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 3.转发edit.jsp</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"admin/add.jsp\"</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">addGoods</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// System.out.println(\"GoodsAddServlet\");</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.获取所有参数</span></span><br><span class=\"line\">\t\trequest.setCharacterEncoding(<span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">\t\tMap&lt;String, String[]&gt; map = request.getParameterMap();</span><br><span class=\"line\">\t\t<span class=\"comment\">// System.out.println(map);</span></span><br><span class=\"line\">\t\tGoods goods = <span class=\"keyword\">new</span> Goods();</span><br><span class=\"line\">\t\tBeanUtils beanUtils = <span class=\"keyword\">new</span> BeanUtils();</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tBeanUtils.populate(goods, map);</span><br><span class=\"line\">\t\t\tgoods.setImage(<span class=\"string\">\"goods_11.png\"</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(request.getParameter(<span class=\"string\">\"name\"</span>));</span><br><span class=\"line\">\t\t\tSystem.out.println(goods);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 调用服务层</span></span><br><span class=\"line\">\t\t\tGoodsService goodsService = <span class=\"keyword\">new</span> GoodsService();</span><br><span class=\"line\">\t\t\tgoodsService.addGoods(goods);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 跳转列表 取最新数据</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"GoodsServlet?action=getListGoods\"</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>出现了一个问题：在子类中添加编码，post表单接收到的还是乱码，可以把设置编码写到BaseServlet中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request.setCharacterEncoding(<span class=\"string\">\"utf-8\"</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005981003.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级JavaWeb与项目</a></p>\n"},{"title":"Web服务器笔记-三层架构实践","date":"2020-02-16T11:40:11.000Z","_content":"## 后台管理系统登录\nJSP凡是action src href都要写绝对路径，需要加上工程名称\n获取当前项目名\n```java\n${pageContext.request.contextPath }\n```\n![三层架构实践](web-server-note-13/1.png)\n\n\nWeb层 AdminServlet类\n```java\npackage com.myxq.web;\n\n@WebServlet(\"/AdminServlet\")\npublic class AdminServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tprotected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tString name = request.getParameter(\"username\");\n\t\tString pwd = request.getParameter(\"password\");\n\t\tSystem.out.println(\"name:\"+name+\" pwd:\"+pwd);\n\t}\n}\n```\n新建一个Service层 AdminService类\n在AdminServlet中调用登录业务\n```java\n\t\t// 调用 登录业务\n\t\tAdminService adminService = new AdminService();\n\t\tadminService.login(name,pwd);\n```\n自动创建login方法\n\n```java\npackage com.myxq.service;\n\npublic class AdminService {\n\tpublic void login(String name, String pwd) {\n\t\t// 调用Dao层到数据库查询\n\n\t}\n}\n```\n新建一个DAO层 AdminService类\n在AdminService中调用Dao层到数据库查询\n```java\n\t\t// 调用Dao层到数据库查询\n\t\tAdminDao adminDao = new AdminDao();\n\t\tadminDao.checkAdmin(name,pwd);\n```\n自动创建checkAdmin方法\n导入数据库相关Jar包，创建util包，写JdbcUtil，创建db.properties\n```java\npackage com.myxq.dao;\n\npublic class AdminDao {\n\n\tpublic Admin checkAdmin(String name, String pwd) throws SQLException {\n\t\t// 到数据库中查询 返回查询结果\n\n\t\t// 1.连接数据库\n\t\tQueryRunner qr = new QueryRunner(JDBCUtil.getDataSource());\n\t\tString sql = \"select * from admin where username= ?and password = ?\";\n\t\t// 2.获取数据\n\t\tAdmin admin = null;\n\t\tadmin = qr.query(sql, new BeanHandler<Admin>(Admin.class), name, pwd);\n\n\t\treturn admin;\n\n\t}\n}\n抛出异常\n\n修改AdminService，继续抛出SQLException\n```java\npackage com.myxq.service;\n\npublic class AdminService {\n\n\tpublic Admin login(String name, String pwd) throws Exception {\n\t\t// 调用Dao层到数据库查询\n\t\tAdminDao adminDao = new AdminDao();\n\t\tAdmin admin = adminDao.checkAdmin(name,pwd);\n\t\tif (admin != null) {\n\t\t\treturn admin;\n\t\t}else {\n\t\t\tthrow new Exception(\"用户名或密码错误\");\n\t\t}\n\t}\t\n}\n```\n修改AdminServlet，最终调用者，必须处理异常\n如果项目修改了重启服务器还是报错，可以尝试Project-Clean 清除缓存\n```java\npackage com.myxq.web;\n\n@WebServlet(\"/AdminServlet\")\npublic class AdminServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tprotected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tString name = request.getParameter(\"username\");\n\t\tString pwd = request.getParameter(\"password\");\n\t\tSystem.out.println(\"name:\"+name+\" pwd:\"+pwd);\n\t\t// 调用 登录业务\n\t\tAdminService adminService = new AdminService();\n\t\ttry {\n\t\t\tadminService.login(name,pwd);\n\t\t\tSystem.out.println(\"登录成功\");\n\t\t} catch (Exception e) {\n\t\t\tSystem.out.println(\"登录失败\");\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n}\n\n```\n服务器跳转时，路径相对的是服务器WebContent\n浏览器请求跳转时，路径相对的当前的JSP\n这两个是冲突的，所以JSP凡是action src href都要写绝对路径\n```html\n\t<link rel=\"stylesheet\" href=\"${pageContext.request.contextPath }/admin/css/style.css\" type=\"text/css\" />\n```\n对网页进行测试\n\n登录成功重定向后台首页\n```java\n\tprotected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tString name = request.getParameter(\"username\");\n\t\tString pwd = request.getParameter(\"password\");\n\t\tSystem.out.println(\"name:\"+name+\" pwd:\"+pwd);\n\t\t// 调用 登录业务\n\t\tAdminService adminService = new AdminService();\n\t\ttry {\n\t\t\tAdmin admin = adminService.login(name,pwd);\n\t\t\tSystem.out.println(\"登录成功\");\n\t\t\t// 把用户保存到Session\n\t\t\tHttpSession session = request.getSession();\n\t\t\tsession.setAttribute(\"admin\", admin);\n\t\t\t// 跳转到后台首页\n\t\t\t// 使用重定向，地址栏需要变化\n\t\t\tresponse.sendRedirect(request.getContextPath()+\"/admin/admin_index.jsp\");\n\t\t} catch (Exception e) {\n\t\t\tif (e.getMessage().equals(\"用户名或密码错误\")){\n\t\t\t\tSystem.out.println(\"登录失败\");\n\t\t\t\t// 跳转回登录页面，回显错误信息\n\t\t\t\trequest.setAttribute(\"err\", e.getMessage());\n\t\t\t\t// 转发\n\t\t\t\trequest.getRequestDispatcher(\"admin/admin_login.jsp\").forward(request,response);\n\t\t\t}else {\n\t\t\t\te.printStackTrace();\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n```\n因为是重定向，所以需要修改admin_index的src为绝对路径\n重定向：浏览器的跳转，相对JSP路径\n```html\n<frameset rows=\"70,*\" frameborder=0 border=\"0\" framespacing=\"0\">\n    <frame src=\"${pageContext.request.contextPath }/admin/top.jsp\" name=\"topFrame\" scrolling=\"NO\" noresize>\n    <frameset cols=\"250,*\" frameborder=\"0\" border=\"0\"  framespacing=\"10\">\n        <frame src=\"${pageContext.request.contextPath }/admin/left.jsp\" name=\"leftFrame\"  scrolling=\"NO\">\n        <frame src=\"${pageContext.request.contextPath }/admin/main.jsp\" name=\"mainFrame\" >\n    </frameset>\n</frameset>\n```\n修改后天显示的用户名\n```html\n<div class=\"admin_top\">\n    <div class=\"top_left\">\n        码蚁商城\n    </div>\n    <div class=\"h_top_right\">\n        <img src=\"images/user_icon.png\" alt=\"\">\n\t\t<!-- 从Session域中取数据 -->\n        <span>${admin.username }</span>\n    </div>\n</div>\n```\n## 商品管理业务\n![商品管理业务](web-server-note-13/2.png)\n\n#### 商品显示\nDAO层 GoodsDao类\n暂时不用面向接口，面向接口编程，需求变更，用其他数据库，就只需要变更实现类\n新建domain\n```java\npackage com.myxq.domain;\n\n@Setter@Getter\npublic class Goods {\n\tprivate Integer id;\n\tprivate String name;\n\tprivate Double price;\n\tprivate String image;\n\t@Override\n\tpublic String toString() {\n\t\treturn \"Goods [id=\" + id + \", name=\" + name + \", price=\" + price + \", image=\" + image + \", getClass()=\"\n\t\t\t\t+ getClass() + \", hashCode()=\" + hashCode() + \", toString()=\" + super.toString() + \"]\";\n\t}\t\n}\n```\njar包，db.properties,Util包JdbcUtil\n单元测试initialization Error，无代码无关，单元测试初始化错误，Clean工程就好了\n写一个方法，就马上测试\n\n```java\npackage com.myxq.dao;\n\npublic class GoodsDao {\n\tQueryRunner qr = new QueryRunner(JDBCUtil.getDataSource());\n\n\t// 增删改查\n\t// 1.从数据库中获取所有商品\n\tpublic List<Goods> getAllGoods() throws SQLException {\n\t\tString sql = \"select * from goods\";\n\t\tList<Goods> allGoods = qr.query(sql, new BeanListHandler<Goods>(Goods.class));\n\t\treturn allGoods;\n\t}\n\n\t// 2.添加商品到数据\n\tpublic void addGoods(Goods goods) throws SQLException {\n\t\tString sql = \"insert into goods (name,price,image)value(?,?,?)\";\n\t\tqr.update(sql, goods.getName(), goods.getPrice(), goods.getImage());\n\t}\n\n\t// 3.根据id删除商品\n\tpublic void delGoods(int id) throws SQLException {\n\t\tString sql = \"delete from goods where id = ?\";\n\t\tqr.update(sql, id);\n\t}\n\t// 4.修改指定商品\n\tpublic void updateGoods(Goods goods) throws SQLException {\n\t\tString sql = \"update goods set name=?,price=?,image=? where id = ?\";\n\t\tqr.update(sql,goods.getName(),goods.getPrice(),goods.getImage(),goods.getId());\n\t}\t\n}\n```\n测试类\n```java\npackage com.myxq.test;\n\npublic class GoodsDaoTest {\n\t@Test\n\tpublic void testGetAllGoods() throws SQLException {\n\t\tGoodsDao goodsDao = new GoodsDao();\n\t\tList<Goods> allGoods = goodsDao.getAllGoods();\n\t\tSystem.out.println(allGoods);\n\t}\n\n\t@Test\n\tpublic void testAddGoods() throws SQLException {\n\t\tGoodsDao goodsDao = new GoodsDao();\n\t\tGoods goods = new Goods();\n\t\tgoods.setName(\"测试\");\n\t\tgoods.setPrice(200.0);\n\t\tgoods.setImage(\"goods_10.png\");\n\t\tgoodsDao.addGoods(goods);\n\t}\n\n\t@Test\n\tpublic void testDelGoods() throws SQLException {\n\t\tGoodsDao goodsDao = new GoodsDao();\n\t\tgoodsDao.delGoods(17);\n\t}\n\t@Test \n\tpublic void testUpdateGoods() throws SQLException {\n\t\tGoods goods = new Goods();\n\t\tgoods.setId(17);\n\t\tgoods.setName(\"update\");\n\t\tgoods.setPrice(17.0);\n\t\tgoods.setImage(\"goods_11.png\");\n\t\t\n\t\tGoodsDao goodsDao = new GoodsDao();\n\t\tgoodsDao.updateGoods(goods);\n\t}\n}\n\n\n```\nWeb层 GoodsListServlet类\n\n创建GoodsListServlet类，写一句输出语句\n修改admin_index.jsp的mainFrame\n```jsp\n <frame src=\"${pageContext.request.contextPath }/GoodsListServlet\" name=\"mainFrame\" >\n```\n测试是否跳转到Servlet\n\n创建Service层 GoodsService类\n```java\npackage com.myxq.service;\n\npublic class GoodsService {\t\n}\n```\n在GoodsListServlet中调用服务层\n```java\nprotected void service(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\tSystem.out.println(\"GoodsListServlet\");\n\t\t// 调用服务层\n\t\tGoodsService goodsService = new GoodsService();\n\t\tgoodsService.getAllGoods();\n\t}\n```\n自动生成getAllGoods方法，抛出异常\n```java\npackage com.myxq.service;\n\npublic class GoodsService {\n\tpublic List<Goods> getAllGoods() throws SQLException {\n\t\tGoodsDao goodsDao = new GoodsDao();\n\t\tList<Goods> allGoods = goodsDao.getAllGoods();\n\t\treturn allGoods;\n\t}\t\n}\n```\n继续写Servlet\n```java\nprotected void service(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\tSystem.out.println(\"GoodsListServlet\");\n\t\t// 调用服务层\n\t\tGoodsService goodsService = new GoodsService();\n\t\ttry {\n\t\t\tList<Goods> allGoods = goodsService.getAllGoods();\n\t\t\t// System.out.println(allGoods);\n\t\t\t// 把数据写到request域\n\t\t\trequest.setAttribute(\"allGoods\", allGoods);\n\t\t\t// 转发\n\t\t\trequest.getRequestDispatcher(\"admin/main.jsp\").forward(request, response);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n```\n修改main.jsp的css路径\n```jsp\n<%\n\tString ctx = request.getContextPath();\n\tpageContext.setAttribute(\"ctx\", ctx);\n%>\n\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n\n    <link rel=\"stylesheet\" href=\"${ctx}/admin/css/style.css\" type=\"text/css\" />\n    <link rel=\"stylesheet\" href=\"${ctx}/admin/css/amazeui.min.css\" />\n    <link rel=\"stylesheet\" href=\"${ctx}/admin/css/pageStyle.css\">\n\n</head>\n```\n测试网页\n\n```jsp\n<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>\n\n<c:forEach items=\"${allGoods }\" var=\"goods\" varStatus=\"status\">\n\t\t\t<ul class=\"list_goods_ul\">\n\t\t\t\t<!-- status是一个对象for循环状态 index就是取当前for循环角标 -->\n\t\t\t\t<li>${status.index+1 }</li>\n\t\t\t\t<li><img src=\"${ctx }/admin/images/pimages/${goods.image}\"></li>\n\t\t\t\t<li>${goods.name }</li>\n\t\t\t\t<li>${goods.price }</li>\n\t\t\t\t<li><a href=\"#\"><img class=\"img_icon\"\n\t\t\t\t\t\tsrc=\"${ctx }/admin/images/edit_icon.png\" alt=\"\"></a></li>\n\t\t\t\t<li><a href=\"#\"><img class=\"img_icon\"\n\t\t\t\t\t\tsrc=\"${ctx }/admin/images/delete_icon.png\" alt=\"\"></a></li>\n\t\t\t</ul>\n\t\t</c:forEach>\n\n\n\t<script src=\"${ctx }/admin/js/jquery.min.js\"></script>\n\t<script type=\"text/javascript\" src=\"${ctx }/admin/js/paging.js\"></script>\n```\n\n![](web-server-note-13/3.png)\n\n## 删除商品\n\n步骤同上\n\n创建GoodsDelServlet类，测试连通\n修改jsp的删除按钮的href，修改后可以用Chrome浏览器鼠标悬停，查看连接地址是否正确\n在Servlet中接受参数，调用服务，服务中调用DAO，删除数据\nServlet中转发\n\n```jsp\n\t\t<c:forEach items=\"${allGoods }\" var=\"goods\" varStatus=\"status\">\n\t\t\t<ul class=\"list_goods_ul\">\n\t\t\t\t<!-- status是一个对象for循环状态 index就是取当前for循环角标 -->\n\t\t\t\t<li>${status.index+1 }</li>\n\t\t\t\t<li><img src=\"${ctx }/admin/images/pimages/${goods.image}\"></li>\n\t\t\t\t<li>${goods.name }</li>\n\t\t\t\t<li>${goods.price }</li>\n\t\t\t\t<li><a href=\"\"><img class=\"img_icon\"\n\t\t\t\t\t\tsrc=\"${ctx }/admin/images/edit_icon.png\" alt=\"\"></a></li>\n\t\t\t\t<li><a href=\"${ctx }/GoodsDelServlet?id=${goods.id}\"><img class=\"img_icon\"\n\t\t\t\t\t\tsrc=\"${ctx }/admin/images/delete_icon.png\" alt=\"\"></a></li>\n\t\t\t</ul>\n\t\t</c:forEach>\n\n```\n\nGoodsDelServlet类\n```java\npackage com.myxq.web;\n\n@WebServlet(\"/GoodsDelServlet\")\npublic class GoodsDelServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tprotected void service(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\t// System.out.println(\"GoodsDelServlet\");\n\t\t// 1. 接收参数\n\t\tString id = request.getParameter(\"id\");\n\t\t// System.out.println(id);\n\t\t// 2. 调用服务层\n\t\tGoodsService goodsService = new GoodsService();\n\t\ttry {\n\t\t\tgoodsService.deleteGoods(id);\n\t\t} catch (Exception e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\trequest.getRequestDispatcher(\"GoodsListServlet\").forward(request, response);\n\t}\n}\n```\n\nGoodsService类\n```java\npackage com.myxq.service;\n\npublic class GoodsService {\n\n\tGoodsDao goodsDao = new GoodsDao();\n\tpublic List<Goods> getAllGoods() throws SQLException {\n\t\tList<Goods> allGoods = goodsDao.getAllGoods();\n\t\treturn allGoods;\n\t}\n\n\tpublic void deleteGoods(String id) throws Exception {\n\t\tgoodsDao.delGoods(Integer.parseInt(id));\n\t}\t\n}\n```\n## 添加商品\n修改goods表，增加描述、是否热门、cid\n![数据库](web-server-note-13/4.png)\n增加分类表catogory\n![数据库](web-server-note-13/5.png)\n添加数据\n为goods表的cid做外键约束\n**修改了表JavaBean也要修改**，数据库需要对应\n**对应的插入数据库操作也要更新**\n\n![添加商品](web-server-note-13/5.png)\n\n创建GoodsAddUIServlet类\n创建CategoryService类\nGoodsAddUIServlet调用CategoryService中的findCategory方法\n创建CategoryDao类 \n\n\nGoodsAddUIServlet类\n```java\npackage com.myxq.web;\n\n@WebServlet(\"/GoodsAddUIServlet\")\npublic class GoodsAddUIServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tprotected void service(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\t// 1.取出所有分类\n\t\tList<Category> allCategory = null;\n\t\tCategoryService categoryService = new CategoryService();\n\t\ttry {\n\t\t\tallCategory = categoryService.findCategory();\n\t\t\tSystem.out.println(allCategory);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\t// 2.把分类存到域中\n\t\trequest.setAttribute(\"allCategory\", allCategory);\n\t\t// 3.转发edit.jsp\n\t\trequest.getRequestDispatcher(\"admin/add.jsp\").forward(request, response);\n\t}\n}\n```\n\nCategoryService类\n```java\npackage com.myxq.service;\n\npublic class CategoryService {\n\n\tpublic List<Category> findCategory() throws Exception {\n\t\tCategoryDao categoryDao = new CategoryDao();\n\t\tList<Category> allCategory = categoryDao.getAllCategory();\n\t\treturn allCategory;\n\t}\n}\n\n```\n\nCategoryDao类\n```java\npackage com.myxq.dao;\n\npublic class CategoryDao {\n\n\tpublic List<Category> getAllCategory() throws Exception {\n\t\tQueryRunner qr = new QueryRunner(JDBCUtil.getDataSource());\n\t\tString sql = \"select * from category\";\n\t\tList<Category> allCategory  = qr.query(sql, new BeanListHandler<Category>(Category.class));\n\t\treturn allCategory;\n\t}\n}\n```\n修改add.jsp\n添加foreach，转发所以需要修改一些路径为绝对路径\n```jsp\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>\n<%\n\tString ctx = request.getContextPath();\n\tpageContext.setAttribute(\"ctx\", ctx);\n%>\n\n    <link rel=\"stylesheet\" href=\"${ctx }/admin/css/style.css\" type=\"text/css\" />\n    <link rel=\"stylesheet\" href=\"${ctx }/admin/css/amazeui.min.css\" />\n        <div class=\"item1\">\n                <span>所属分类：</span>\n                 <select id=\"category_select\">&nbsp;&nbsp;\n                 \n                 <c:forEach items=\"${allCategory }\" var=\"category\">\n                 \t<option value=\"${category.cid }\">${category.cname }</option>\n                 </c:forEach>\n                    \n                     \n                 </select>\n        </div>\n\n   \n<script src=\"${ctx }/admin/js/jquery.min.js\"></script>\n\n<script>\n    $(\"#add\").click(function () {\n        $(window).attr('location','main.jsp');\n    });\n    \n    $(\"#reset\").click(function () {\n       $(window).attr('location','add.jsp');\n    });\n</script>\n</body>\n</html>\n```\n修改main.jsp链接为GoodsAddUIServlet\n```jsp\n\n\t<script src=\"${ctx }/admin/js/jquery.min.js\"></script>\n\t<script type=\"text/javascript\" src=\"${ctx }/admin/js/paging.js\"></script>\n\t<script>\n\t\t//分页\n\t\t$(\"#page\").paging({\n\t\t\tpageNo : 5,\n\t\t\ttotalPage : 10,\n\t\t\ttotalSize : 300,\n\t\t\tcallback : function(num) {\n\t\t\t\talert(num);\n\t\t\t}\n\t\t});\n\n\t\t$(\"#add\").click(function() {\n\t\t\t$(window).attr('location', '${ctx}/GoodsAddUIServlet');\n\t\t});\n\t</script>\n\n```\n\n添加商品接收参数\n创建GoodsAddServlet类\n修改add.jsp的form表达的各个name属性和表单地址等\n测试在Servlet获取所有参数的Map，使用BeanUtils封装，测试封装结果\n调用服务层方法\n服务处调用DAO\n**字段介绍用desc，desc是数据库关键字，所以开发一般是gdesc**\n修改类名为gdesc修改对应映射\n\nGoodsAddServlet类\n```java\npackage com.myxq.web;\n\n@WebServlet(\"/GoodsAddServlet\")\npublic class GoodsAddServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tprotected void service(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\t// System.out.println(\"GoodsAddServlet\");\n\t\t// 1.获取所有参数\n\t\trequest.setCharacterEncoding(\"utf-8\");\n\t\tMap<String, String[]> map = request.getParameterMap();\n\t\t// System.out.println(map);\n\t\tGoods goods = new Goods();\n\t\tBeanUtils beanUtils = new BeanUtils();\n\t\ttry {\n\t\t\tBeanUtils.populate(goods, map);\n\t\t\tgoods.setImage(\"goods_11.png\");\n\t\t\tSystem.out.println(goods);\n\t\t\t// 调用服务层\n\t\t\tGoodsService goodsService = new GoodsService();\n\t\t\tgoodsService.addGoods(goods);\n\t\t\t\n\t\t\t// 跳转列表 取最新数据\n\t\t\trequest.getRequestDispatcher(\"GoodsListServlet\").forward(request, response);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n```\n\nGoodsService类\n```java\npackage com.myxq.service;\n\npublic class GoodsService {\n\t// 保护DAO\n\tprivate GoodsDao goodsDao = new GoodsDao();\n\n\tpublic List<Goods> getAllGoods() throws SQLException {\n\t\tList<Goods> allGoods = goodsDao.getAllGoods();\n\t\treturn allGoods;\n\t}\n\n\tpublic void deleteGoods(String id) throws Exception {\n\t\tgoodsDao.delGoods(Integer.parseInt(id));\n\t}\n\n\tpublic void addGoods(Goods goods) throws SQLException {\n\t\t// 调用DAO\n\t\tgoodsDao.addGoods(goods);\n\t}\n}\n```\n\nGoodsDao类\n```java\npackage com.myxq.dao;\n\npublic class GoodsDao {\n\tQueryRunner qr = new QueryRunner(JDBCUtil.getDataSource());\n\n\t// 增删改查\n\t// 1.从数据库中获取所有商品\n\tpublic List<Goods> getAllGoods() throws SQLException {\n\t\tString sql = \"select * from goods\";\n\t\tList<Goods> allGoods = qr.query(sql, new BeanListHandler<Goods>(Goods.class));\n\t\treturn allGoods;\n\t}\n\n\t// 2.添加商品到数据\n\tpublic void addGoods(Goods goods) throws SQLException {\n\t\tString sql = \"insert into goods (name,price,image,gdesc,is_hot,cid) value (?,?,?,?,?,?)\";\n\t\tqr.update(sql, goods.getName(), goods.getPrice(), goods.getImage(),goods.getGdesc(),goods.getIs_hot(),goods.getCid());\n\t}\n\n\t// 3.根据id删除商品\n\tpublic void delGoods(int id) throws SQLException {\n\t\tString sql = \"delete from goods where id = ?\";\n\t\tqr.update(sql, id);\n\t}\n\t// 4.修改指定商品\n\tpublic void updateGoods(Goods goods) throws SQLException {\n\t\tString sql = \"update goods set name=?,price=?,image=? where id = ?\";\n\t\tqr.update(sql,goods.getName(),goods.getPrice(),goods.getImage(),goods.getId());\n\t}\t\n}\n```\n\nadd.jsp\n```jsp\n\t\t<div class=\"edit_content\">\n\t\t\t<form action=\"${ctx }/GoodsAddServlet\" method=\"post\" id=\"add_form\"\n\t\t\t\tstyle=\"background: none; width: 700px\">\n\t\t\t\t<div class=\"item1\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<span>商品名称：</span> <input type=\"text\" class=\"am-form-field\"\n\t\t\t\t\t\t\tname=\"name\">&nbsp;&nbsp;\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<span>商品价格：</span> <input type=\"text\" class=\"am-form-field\" name=\"price\">\n\t\t\t\t\t</div>\n\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"item1\">\n\t\t\t\t\t<span>所属分类：</span> <select id=\"category_select\" name=\"cid\">\n\n\t\t\t\t\t\t<c:forEach items=\"${allCategory }\" var=\"category\">\n\t\t\t\t\t\t\t<option value=\"${category.cid }\">${category.cname }</option>\n\t\t\t\t\t\t</c:forEach>\n\n\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t<div>\n\t\t\t\t\t<span>是否热门</span>\n\t\t\t\t\t<select id=\"category_select\" name=\"is_hot\">\n\t\t\t\t\t\t<option value=\"0\">否</option>\n\t\t\t\t\t\t<option value=\"1\">是</option>\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"item1\">\n\t\t\t\t\t<span>商品图片：</span> <input type=\"file\" name=\"image\" id=\"upload\" />\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"item1 item_desc\" >\n\t\t\t\t\t<span>商品描述：</span>\n\t\t\t\t\t<textarea id=\"desc\" name=\"gdesc\" rows=\"4\" cols=\"50\"></textarea>\n\t\t\t\t</div>\n\t\t\t\t<button class=\"am-btn am-btn-default\" type=\"button\" id=\"add\">添加</button>\n\t\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;\n\t\t\t\t<button class=\"am-btn am-btn-default\" type=\"button\" id=\"reset\">重置</button>\n\t\t\t</form>\n\t\t</div>\n\n\n\t</div>\n\n\t<script src=\"${ctx }/admin/js/jquery.min.js\"></script>\n\n\t<script>\n\t\t$(\"#add\").click(function() {\n\t\t\t$(\"#add_form\").submit();\n\t\t});\n\n\t\t$(\"#reset\").click(function() {\n\t\t\t$(window).attr('location', 'add.jsp');\n\t\t});\n\t</script>\n```\n\n## 问题解决\n解决写入数据库乱码问题，编辑db.properties文件\n```properties\nurl=jdbc:mysql://localhost:3306/mystore?useUnicode=true&characterEncoding=utf-8\n```\n反转集合（使得最后添加的显示到最开头）\n```java\npackage com.myxq.web;\n\n@WebServlet(\"/GoodsListServlet\")\npublic class GoodsListServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tprotected void service(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\tSystem.out.println(\"GoodsListServlet\");\n\t\t// 调用服务层\n\t\tGoodsService goodsService = new GoodsService();\n\t\ttry {\n\t\t\tList<Goods> allGoods = goodsService.getAllGoods();\n\t\t\t\n\t\t\t// 反转集合\n\t\t\tCollections.reverse(allGoods);\n\t\t\t\n\t\t\t// System.out.println(allGoods);\n\t\t\t// 把数据写到request域\n\t\t\trequest.setAttribute(\"allGoods\", allGoods);\n\t\t\t// 转发\n\t\t\trequest.getRequestDispatcher(\"admin/main.jsp\").forward(request, response);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n\n```\n## 编辑商品\n![](web-server-note-13/7.png)\n\n创建GoodsEditUIServlet\n```java\npackage com.myxq.web;\n\n@WebServlet(\"/GoodsEditUIServlet\")\npublic class GoodsEditUIServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tprotected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tSystem.out.println(\"GoodsEditUIServlet\");\n\t}\n}\n```\n修改main.jsp\n```jsp\n<li><a href=\"${ctx }/GoodsEditUIServlet?id=${goods.id}\"><img class=\"img_icon\"\n\t\t\t\t\t\tsrc=\"${ctx }/admin/images/edit_icon.png\" alt=\"\"></a></li>\n```\n用Chrome查看地址是否包含了id参数\n\nGoodsEditUIServlet\n```java\npackage com.myxq.web;\n\n@WebServlet(\"/GoodsEditUIServlet\")\npublic class GoodsEditUIServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tprotected void service(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\t// 接收id\n\t\tString id = request.getParameter(\"id\");\n\t\t// System.out.println(\"GoodsEditUIServlet\"+id);\n\t\ttry {\n\t\t\t// 1.获取当前商品\n\t\t\tGoodsService goodsService = new GoodsService();\n\t\t\tGoods goods = goodsService.getGoodsWithId(id);\n\t\t\tSystem.out.println(goods);\n\t\t\t// 把商品写入request域中\n\t\t\trequest.setAttribute(\"goods\", goods);\n\n\t\t\t// 2.获取所有分类\n\t\t\tCategoryService categoryService = new CategoryService();\n\t\t\tList<Category> allCategory = categoryService.findCategory();\n\t\t\trequest.setAttribute(\"allCategory\", allCategory);\n\t\t\t// 3.转发到JSP页面\n\t\t\trequest.getRequestDispatcher(\"/admin/edit.jsp\").forward(request, response);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t}\n}\n```\n\n修改edit.jsp\n```jsp\n<div class=\"item1\">\n        \t<div>\n        \t\t<span>所属分类：</span>\n                 <select id=\"categorySel\" name=\"cid\">\n                 \t<c:forEach items=\"${allCategory }\" var=\"category\">\n                 \t <option value=\"${category.cid }\">${category.cname }</option>\n                 \t</c:forEach>\n                 </select>\n                 &nbsp;\n        \t</div>\n        \t\n        \t<div>\n        \t\t<span>是否热门：</span>\n                 <select id=\"isHotSel\" name=\"is_hot\">\n                    <!-- 让value的值等于商品is_hot的option成为选中状态 -->\n                    <option value=\"0\">否</option>\n                    <option value=\"1\">是</option>\n                 </select>\n        \t</div>        \n                 \n        </div>\n\n        <div class=\"item1\">\n                <span>商品图片：</span>\n                <input type=\"file\" name=\"image\" />\n        </div>\n        \n        <div class=\"item1 item_desc\">\n            <span>商品描述：</span>\n         <textarea  id=\"desc\" name=\"gdesc\" rows=\"4\" cols=\"50\">${goods.gdesc }</textarea>\n        </div>\n        <button class=\"am-btn am-btn-default\" type=\"button\" id=\"edit\">更新</button>\n        &nbsp;&nbsp;&nbsp;&nbsp;\n        <button class=\"am-btn am-btn-default\" type=\"button\" id=\"reset\">重置</button>\n\t\t</form>\n   </div>\n```\n\n创建GoodsEditServlet\n修改edit.jsp 关联提交表单\n```jsp\n<form action=\"${ctx }/GoodsEditServlet\" method=\"post\" id=\"edit_form\" style=\"background: none; width: 700px;\">\n```\n\nedit.jsp的form表单时提交获取id的技巧\n```jsp\n<input type=\"text\"  name=\"id\" value=\"${goods.id }\" style=\"display:none\">\n```\n\nGoodsEditServlet\n```java\npackage com.myxq.web;\n\n@WebServlet(\"/GoodsEditServlet\")\npublic class GoodsEditServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tprotected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\t// 设置字符集 post\n\t\trequest.setCharacterEncoding(\"utf-8\");\n\t\t// System.out.println(\"GoodsEditServlet\");\n\t\t// 1.获取所有参数\n\t\tMap<String, String[]> parameterMap = request.getParameterMap();\n\t\t// 2.封装成Goods对象\n\t\tGoods goods = new Goods();\n\t\ttry {\n\t\t\tBeanUtils.populate(goods, parameterMap);\n\t\t\tSystem.out.println(goods);\n\t\t\t// 3.根据id更新数据\n\t\t\t// 4.调用服务层 更新数据\n\t\t\tGoodsService goodsService = new GoodsService();\n\t\t\tgoods.setImage(\"goods_10.png\");\n\t\t\tgoodsService.updateGoods(goods);\n\t\t\t\n\t\t\t// 5.跳转mian.jsp\n\t\t\trequest.getRequestDispatcher(\"GoodsListServlet\").forward(request, response);\n\t\t} catch (Exception e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\t\n\t}\n}\n\n```\n\nGoodsService\n```java\n\tpublic void updateGoods(Goods goods) throws Exception {\n\t\tgoodsDao.updateGoods(goods);\n\t}\n```\n\nGoodsDao\n```java\n\t// 4.修改指定商品\n\tpublic void updateGoods(Goods goods) throws SQLException {\n\t\tString sql = \"update goods set name=?,price=?,image=? ,gdesc=?,is_hot=?,cid=? where id = ?\";\n\t\tqr.update(sql,goods.getName(),goods.getPrice(),goods.getImage(),goods.getGdesc(),goods.getIs_hot(),goods.getCid(),goods.getId());\n\t}\n```\n修改更新商品页面（读取当前商品的信息）\nedit.jsp\n```js\n\t$(function () {\n        \n\t\t $(\"#edit\").click(function () {\n\t\t        //让表单提交 GoodsEditServlet\n\t\t        //获取表单  让其提交\n\t\t        $(\"#edit_form\").submit();\n\t\t  });\n\t\t \n\t\t //让value的值等于商品is_hot的option成为选中状态\n\t\t $(\"#isHotSel option[value=${goods.is_hot}]\").prop(\"selected\",true);\n\t\t $(\"#categorySel option[value=${goods.cid}]\").prop(\"selected\",true);\n\t\t \n    });\n```\n外层套一层$(function() 的原因是：等所有标签加载完毕，再去做执行里面的JQuery\n\n## 参考资料\n\n[Java零基础到高级JavaWeb与项目](https://study.163.com/course/introduction/1005981003.htm)","source":"_posts/web-server-note-13.md","raw":"---\ntitle: Web服务器笔记-三层架构实践\ncategories: Web服务器笔记\ndate: 2020-02-16 19:40:11\n---\n## 后台管理系统登录\nJSP凡是action src href都要写绝对路径，需要加上工程名称\n获取当前项目名\n```java\n${pageContext.request.contextPath }\n```\n![三层架构实践](web-server-note-13/1.png)\n\n\nWeb层 AdminServlet类\n```java\npackage com.myxq.web;\n\n@WebServlet(\"/AdminServlet\")\npublic class AdminServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tprotected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tString name = request.getParameter(\"username\");\n\t\tString pwd = request.getParameter(\"password\");\n\t\tSystem.out.println(\"name:\"+name+\" pwd:\"+pwd);\n\t}\n}\n```\n新建一个Service层 AdminService类\n在AdminServlet中调用登录业务\n```java\n\t\t// 调用 登录业务\n\t\tAdminService adminService = new AdminService();\n\t\tadminService.login(name,pwd);\n```\n自动创建login方法\n\n```java\npackage com.myxq.service;\n\npublic class AdminService {\n\tpublic void login(String name, String pwd) {\n\t\t// 调用Dao层到数据库查询\n\n\t}\n}\n```\n新建一个DAO层 AdminService类\n在AdminService中调用Dao层到数据库查询\n```java\n\t\t// 调用Dao层到数据库查询\n\t\tAdminDao adminDao = new AdminDao();\n\t\tadminDao.checkAdmin(name,pwd);\n```\n自动创建checkAdmin方法\n导入数据库相关Jar包，创建util包，写JdbcUtil，创建db.properties\n```java\npackage com.myxq.dao;\n\npublic class AdminDao {\n\n\tpublic Admin checkAdmin(String name, String pwd) throws SQLException {\n\t\t// 到数据库中查询 返回查询结果\n\n\t\t// 1.连接数据库\n\t\tQueryRunner qr = new QueryRunner(JDBCUtil.getDataSource());\n\t\tString sql = \"select * from admin where username= ?and password = ?\";\n\t\t// 2.获取数据\n\t\tAdmin admin = null;\n\t\tadmin = qr.query(sql, new BeanHandler<Admin>(Admin.class), name, pwd);\n\n\t\treturn admin;\n\n\t}\n}\n抛出异常\n\n修改AdminService，继续抛出SQLException\n```java\npackage com.myxq.service;\n\npublic class AdminService {\n\n\tpublic Admin login(String name, String pwd) throws Exception {\n\t\t// 调用Dao层到数据库查询\n\t\tAdminDao adminDao = new AdminDao();\n\t\tAdmin admin = adminDao.checkAdmin(name,pwd);\n\t\tif (admin != null) {\n\t\t\treturn admin;\n\t\t}else {\n\t\t\tthrow new Exception(\"用户名或密码错误\");\n\t\t}\n\t}\t\n}\n```\n修改AdminServlet，最终调用者，必须处理异常\n如果项目修改了重启服务器还是报错，可以尝试Project-Clean 清除缓存\n```java\npackage com.myxq.web;\n\n@WebServlet(\"/AdminServlet\")\npublic class AdminServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tprotected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tString name = request.getParameter(\"username\");\n\t\tString pwd = request.getParameter(\"password\");\n\t\tSystem.out.println(\"name:\"+name+\" pwd:\"+pwd);\n\t\t// 调用 登录业务\n\t\tAdminService adminService = new AdminService();\n\t\ttry {\n\t\t\tadminService.login(name,pwd);\n\t\t\tSystem.out.println(\"登录成功\");\n\t\t} catch (Exception e) {\n\t\t\tSystem.out.println(\"登录失败\");\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n}\n\n```\n服务器跳转时，路径相对的是服务器WebContent\n浏览器请求跳转时，路径相对的当前的JSP\n这两个是冲突的，所以JSP凡是action src href都要写绝对路径\n```html\n\t<link rel=\"stylesheet\" href=\"${pageContext.request.contextPath }/admin/css/style.css\" type=\"text/css\" />\n```\n对网页进行测试\n\n登录成功重定向后台首页\n```java\n\tprotected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tString name = request.getParameter(\"username\");\n\t\tString pwd = request.getParameter(\"password\");\n\t\tSystem.out.println(\"name:\"+name+\" pwd:\"+pwd);\n\t\t// 调用 登录业务\n\t\tAdminService adminService = new AdminService();\n\t\ttry {\n\t\t\tAdmin admin = adminService.login(name,pwd);\n\t\t\tSystem.out.println(\"登录成功\");\n\t\t\t// 把用户保存到Session\n\t\t\tHttpSession session = request.getSession();\n\t\t\tsession.setAttribute(\"admin\", admin);\n\t\t\t// 跳转到后台首页\n\t\t\t// 使用重定向，地址栏需要变化\n\t\t\tresponse.sendRedirect(request.getContextPath()+\"/admin/admin_index.jsp\");\n\t\t} catch (Exception e) {\n\t\t\tif (e.getMessage().equals(\"用户名或密码错误\")){\n\t\t\t\tSystem.out.println(\"登录失败\");\n\t\t\t\t// 跳转回登录页面，回显错误信息\n\t\t\t\trequest.setAttribute(\"err\", e.getMessage());\n\t\t\t\t// 转发\n\t\t\t\trequest.getRequestDispatcher(\"admin/admin_login.jsp\").forward(request,response);\n\t\t\t}else {\n\t\t\t\te.printStackTrace();\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n```\n因为是重定向，所以需要修改admin_index的src为绝对路径\n重定向：浏览器的跳转，相对JSP路径\n```html\n<frameset rows=\"70,*\" frameborder=0 border=\"0\" framespacing=\"0\">\n    <frame src=\"${pageContext.request.contextPath }/admin/top.jsp\" name=\"topFrame\" scrolling=\"NO\" noresize>\n    <frameset cols=\"250,*\" frameborder=\"0\" border=\"0\"  framespacing=\"10\">\n        <frame src=\"${pageContext.request.contextPath }/admin/left.jsp\" name=\"leftFrame\"  scrolling=\"NO\">\n        <frame src=\"${pageContext.request.contextPath }/admin/main.jsp\" name=\"mainFrame\" >\n    </frameset>\n</frameset>\n```\n修改后天显示的用户名\n```html\n<div class=\"admin_top\">\n    <div class=\"top_left\">\n        码蚁商城\n    </div>\n    <div class=\"h_top_right\">\n        <img src=\"images/user_icon.png\" alt=\"\">\n\t\t<!-- 从Session域中取数据 -->\n        <span>${admin.username }</span>\n    </div>\n</div>\n```\n## 商品管理业务\n![商品管理业务](web-server-note-13/2.png)\n\n#### 商品显示\nDAO层 GoodsDao类\n暂时不用面向接口，面向接口编程，需求变更，用其他数据库，就只需要变更实现类\n新建domain\n```java\npackage com.myxq.domain;\n\n@Setter@Getter\npublic class Goods {\n\tprivate Integer id;\n\tprivate String name;\n\tprivate Double price;\n\tprivate String image;\n\t@Override\n\tpublic String toString() {\n\t\treturn \"Goods [id=\" + id + \", name=\" + name + \", price=\" + price + \", image=\" + image + \", getClass()=\"\n\t\t\t\t+ getClass() + \", hashCode()=\" + hashCode() + \", toString()=\" + super.toString() + \"]\";\n\t}\t\n}\n```\njar包，db.properties,Util包JdbcUtil\n单元测试initialization Error，无代码无关，单元测试初始化错误，Clean工程就好了\n写一个方法，就马上测试\n\n```java\npackage com.myxq.dao;\n\npublic class GoodsDao {\n\tQueryRunner qr = new QueryRunner(JDBCUtil.getDataSource());\n\n\t// 增删改查\n\t// 1.从数据库中获取所有商品\n\tpublic List<Goods> getAllGoods() throws SQLException {\n\t\tString sql = \"select * from goods\";\n\t\tList<Goods> allGoods = qr.query(sql, new BeanListHandler<Goods>(Goods.class));\n\t\treturn allGoods;\n\t}\n\n\t// 2.添加商品到数据\n\tpublic void addGoods(Goods goods) throws SQLException {\n\t\tString sql = \"insert into goods (name,price,image)value(?,?,?)\";\n\t\tqr.update(sql, goods.getName(), goods.getPrice(), goods.getImage());\n\t}\n\n\t// 3.根据id删除商品\n\tpublic void delGoods(int id) throws SQLException {\n\t\tString sql = \"delete from goods where id = ?\";\n\t\tqr.update(sql, id);\n\t}\n\t// 4.修改指定商品\n\tpublic void updateGoods(Goods goods) throws SQLException {\n\t\tString sql = \"update goods set name=?,price=?,image=? where id = ?\";\n\t\tqr.update(sql,goods.getName(),goods.getPrice(),goods.getImage(),goods.getId());\n\t}\t\n}\n```\n测试类\n```java\npackage com.myxq.test;\n\npublic class GoodsDaoTest {\n\t@Test\n\tpublic void testGetAllGoods() throws SQLException {\n\t\tGoodsDao goodsDao = new GoodsDao();\n\t\tList<Goods> allGoods = goodsDao.getAllGoods();\n\t\tSystem.out.println(allGoods);\n\t}\n\n\t@Test\n\tpublic void testAddGoods() throws SQLException {\n\t\tGoodsDao goodsDao = new GoodsDao();\n\t\tGoods goods = new Goods();\n\t\tgoods.setName(\"测试\");\n\t\tgoods.setPrice(200.0);\n\t\tgoods.setImage(\"goods_10.png\");\n\t\tgoodsDao.addGoods(goods);\n\t}\n\n\t@Test\n\tpublic void testDelGoods() throws SQLException {\n\t\tGoodsDao goodsDao = new GoodsDao();\n\t\tgoodsDao.delGoods(17);\n\t}\n\t@Test \n\tpublic void testUpdateGoods() throws SQLException {\n\t\tGoods goods = new Goods();\n\t\tgoods.setId(17);\n\t\tgoods.setName(\"update\");\n\t\tgoods.setPrice(17.0);\n\t\tgoods.setImage(\"goods_11.png\");\n\t\t\n\t\tGoodsDao goodsDao = new GoodsDao();\n\t\tgoodsDao.updateGoods(goods);\n\t}\n}\n\n\n```\nWeb层 GoodsListServlet类\n\n创建GoodsListServlet类，写一句输出语句\n修改admin_index.jsp的mainFrame\n```jsp\n <frame src=\"${pageContext.request.contextPath }/GoodsListServlet\" name=\"mainFrame\" >\n```\n测试是否跳转到Servlet\n\n创建Service层 GoodsService类\n```java\npackage com.myxq.service;\n\npublic class GoodsService {\t\n}\n```\n在GoodsListServlet中调用服务层\n```java\nprotected void service(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\tSystem.out.println(\"GoodsListServlet\");\n\t\t// 调用服务层\n\t\tGoodsService goodsService = new GoodsService();\n\t\tgoodsService.getAllGoods();\n\t}\n```\n自动生成getAllGoods方法，抛出异常\n```java\npackage com.myxq.service;\n\npublic class GoodsService {\n\tpublic List<Goods> getAllGoods() throws SQLException {\n\t\tGoodsDao goodsDao = new GoodsDao();\n\t\tList<Goods> allGoods = goodsDao.getAllGoods();\n\t\treturn allGoods;\n\t}\t\n}\n```\n继续写Servlet\n```java\nprotected void service(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\tSystem.out.println(\"GoodsListServlet\");\n\t\t// 调用服务层\n\t\tGoodsService goodsService = new GoodsService();\n\t\ttry {\n\t\t\tList<Goods> allGoods = goodsService.getAllGoods();\n\t\t\t// System.out.println(allGoods);\n\t\t\t// 把数据写到request域\n\t\t\trequest.setAttribute(\"allGoods\", allGoods);\n\t\t\t// 转发\n\t\t\trequest.getRequestDispatcher(\"admin/main.jsp\").forward(request, response);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n```\n修改main.jsp的css路径\n```jsp\n<%\n\tString ctx = request.getContextPath();\n\tpageContext.setAttribute(\"ctx\", ctx);\n%>\n\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n\n    <link rel=\"stylesheet\" href=\"${ctx}/admin/css/style.css\" type=\"text/css\" />\n    <link rel=\"stylesheet\" href=\"${ctx}/admin/css/amazeui.min.css\" />\n    <link rel=\"stylesheet\" href=\"${ctx}/admin/css/pageStyle.css\">\n\n</head>\n```\n测试网页\n\n```jsp\n<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>\n\n<c:forEach items=\"${allGoods }\" var=\"goods\" varStatus=\"status\">\n\t\t\t<ul class=\"list_goods_ul\">\n\t\t\t\t<!-- status是一个对象for循环状态 index就是取当前for循环角标 -->\n\t\t\t\t<li>${status.index+1 }</li>\n\t\t\t\t<li><img src=\"${ctx }/admin/images/pimages/${goods.image}\"></li>\n\t\t\t\t<li>${goods.name }</li>\n\t\t\t\t<li>${goods.price }</li>\n\t\t\t\t<li><a href=\"#\"><img class=\"img_icon\"\n\t\t\t\t\t\tsrc=\"${ctx }/admin/images/edit_icon.png\" alt=\"\"></a></li>\n\t\t\t\t<li><a href=\"#\"><img class=\"img_icon\"\n\t\t\t\t\t\tsrc=\"${ctx }/admin/images/delete_icon.png\" alt=\"\"></a></li>\n\t\t\t</ul>\n\t\t</c:forEach>\n\n\n\t<script src=\"${ctx }/admin/js/jquery.min.js\"></script>\n\t<script type=\"text/javascript\" src=\"${ctx }/admin/js/paging.js\"></script>\n```\n\n![](web-server-note-13/3.png)\n\n## 删除商品\n\n步骤同上\n\n创建GoodsDelServlet类，测试连通\n修改jsp的删除按钮的href，修改后可以用Chrome浏览器鼠标悬停，查看连接地址是否正确\n在Servlet中接受参数，调用服务，服务中调用DAO，删除数据\nServlet中转发\n\n```jsp\n\t\t<c:forEach items=\"${allGoods }\" var=\"goods\" varStatus=\"status\">\n\t\t\t<ul class=\"list_goods_ul\">\n\t\t\t\t<!-- status是一个对象for循环状态 index就是取当前for循环角标 -->\n\t\t\t\t<li>${status.index+1 }</li>\n\t\t\t\t<li><img src=\"${ctx }/admin/images/pimages/${goods.image}\"></li>\n\t\t\t\t<li>${goods.name }</li>\n\t\t\t\t<li>${goods.price }</li>\n\t\t\t\t<li><a href=\"\"><img class=\"img_icon\"\n\t\t\t\t\t\tsrc=\"${ctx }/admin/images/edit_icon.png\" alt=\"\"></a></li>\n\t\t\t\t<li><a href=\"${ctx }/GoodsDelServlet?id=${goods.id}\"><img class=\"img_icon\"\n\t\t\t\t\t\tsrc=\"${ctx }/admin/images/delete_icon.png\" alt=\"\"></a></li>\n\t\t\t</ul>\n\t\t</c:forEach>\n\n```\n\nGoodsDelServlet类\n```java\npackage com.myxq.web;\n\n@WebServlet(\"/GoodsDelServlet\")\npublic class GoodsDelServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tprotected void service(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\t// System.out.println(\"GoodsDelServlet\");\n\t\t// 1. 接收参数\n\t\tString id = request.getParameter(\"id\");\n\t\t// System.out.println(id);\n\t\t// 2. 调用服务层\n\t\tGoodsService goodsService = new GoodsService();\n\t\ttry {\n\t\t\tgoodsService.deleteGoods(id);\n\t\t} catch (Exception e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\trequest.getRequestDispatcher(\"GoodsListServlet\").forward(request, response);\n\t}\n}\n```\n\nGoodsService类\n```java\npackage com.myxq.service;\n\npublic class GoodsService {\n\n\tGoodsDao goodsDao = new GoodsDao();\n\tpublic List<Goods> getAllGoods() throws SQLException {\n\t\tList<Goods> allGoods = goodsDao.getAllGoods();\n\t\treturn allGoods;\n\t}\n\n\tpublic void deleteGoods(String id) throws Exception {\n\t\tgoodsDao.delGoods(Integer.parseInt(id));\n\t}\t\n}\n```\n## 添加商品\n修改goods表，增加描述、是否热门、cid\n![数据库](web-server-note-13/4.png)\n增加分类表catogory\n![数据库](web-server-note-13/5.png)\n添加数据\n为goods表的cid做外键约束\n**修改了表JavaBean也要修改**，数据库需要对应\n**对应的插入数据库操作也要更新**\n\n![添加商品](web-server-note-13/5.png)\n\n创建GoodsAddUIServlet类\n创建CategoryService类\nGoodsAddUIServlet调用CategoryService中的findCategory方法\n创建CategoryDao类 \n\n\nGoodsAddUIServlet类\n```java\npackage com.myxq.web;\n\n@WebServlet(\"/GoodsAddUIServlet\")\npublic class GoodsAddUIServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tprotected void service(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\t// 1.取出所有分类\n\t\tList<Category> allCategory = null;\n\t\tCategoryService categoryService = new CategoryService();\n\t\ttry {\n\t\t\tallCategory = categoryService.findCategory();\n\t\t\tSystem.out.println(allCategory);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\t// 2.把分类存到域中\n\t\trequest.setAttribute(\"allCategory\", allCategory);\n\t\t// 3.转发edit.jsp\n\t\trequest.getRequestDispatcher(\"admin/add.jsp\").forward(request, response);\n\t}\n}\n```\n\nCategoryService类\n```java\npackage com.myxq.service;\n\npublic class CategoryService {\n\n\tpublic List<Category> findCategory() throws Exception {\n\t\tCategoryDao categoryDao = new CategoryDao();\n\t\tList<Category> allCategory = categoryDao.getAllCategory();\n\t\treturn allCategory;\n\t}\n}\n\n```\n\nCategoryDao类\n```java\npackage com.myxq.dao;\n\npublic class CategoryDao {\n\n\tpublic List<Category> getAllCategory() throws Exception {\n\t\tQueryRunner qr = new QueryRunner(JDBCUtil.getDataSource());\n\t\tString sql = \"select * from category\";\n\t\tList<Category> allCategory  = qr.query(sql, new BeanListHandler<Category>(Category.class));\n\t\treturn allCategory;\n\t}\n}\n```\n修改add.jsp\n添加foreach，转发所以需要修改一些路径为绝对路径\n```jsp\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>\n<%\n\tString ctx = request.getContextPath();\n\tpageContext.setAttribute(\"ctx\", ctx);\n%>\n\n    <link rel=\"stylesheet\" href=\"${ctx }/admin/css/style.css\" type=\"text/css\" />\n    <link rel=\"stylesheet\" href=\"${ctx }/admin/css/amazeui.min.css\" />\n        <div class=\"item1\">\n                <span>所属分类：</span>\n                 <select id=\"category_select\">&nbsp;&nbsp;\n                 \n                 <c:forEach items=\"${allCategory }\" var=\"category\">\n                 \t<option value=\"${category.cid }\">${category.cname }</option>\n                 </c:forEach>\n                    \n                     \n                 </select>\n        </div>\n\n   \n<script src=\"${ctx }/admin/js/jquery.min.js\"></script>\n\n<script>\n    $(\"#add\").click(function () {\n        $(window).attr('location','main.jsp');\n    });\n    \n    $(\"#reset\").click(function () {\n       $(window).attr('location','add.jsp');\n    });\n</script>\n</body>\n</html>\n```\n修改main.jsp链接为GoodsAddUIServlet\n```jsp\n\n\t<script src=\"${ctx }/admin/js/jquery.min.js\"></script>\n\t<script type=\"text/javascript\" src=\"${ctx }/admin/js/paging.js\"></script>\n\t<script>\n\t\t//分页\n\t\t$(\"#page\").paging({\n\t\t\tpageNo : 5,\n\t\t\ttotalPage : 10,\n\t\t\ttotalSize : 300,\n\t\t\tcallback : function(num) {\n\t\t\t\talert(num);\n\t\t\t}\n\t\t});\n\n\t\t$(\"#add\").click(function() {\n\t\t\t$(window).attr('location', '${ctx}/GoodsAddUIServlet');\n\t\t});\n\t</script>\n\n```\n\n添加商品接收参数\n创建GoodsAddServlet类\n修改add.jsp的form表达的各个name属性和表单地址等\n测试在Servlet获取所有参数的Map，使用BeanUtils封装，测试封装结果\n调用服务层方法\n服务处调用DAO\n**字段介绍用desc，desc是数据库关键字，所以开发一般是gdesc**\n修改类名为gdesc修改对应映射\n\nGoodsAddServlet类\n```java\npackage com.myxq.web;\n\n@WebServlet(\"/GoodsAddServlet\")\npublic class GoodsAddServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tprotected void service(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\t// System.out.println(\"GoodsAddServlet\");\n\t\t// 1.获取所有参数\n\t\trequest.setCharacterEncoding(\"utf-8\");\n\t\tMap<String, String[]> map = request.getParameterMap();\n\t\t// System.out.println(map);\n\t\tGoods goods = new Goods();\n\t\tBeanUtils beanUtils = new BeanUtils();\n\t\ttry {\n\t\t\tBeanUtils.populate(goods, map);\n\t\t\tgoods.setImage(\"goods_11.png\");\n\t\t\tSystem.out.println(goods);\n\t\t\t// 调用服务层\n\t\t\tGoodsService goodsService = new GoodsService();\n\t\t\tgoodsService.addGoods(goods);\n\t\t\t\n\t\t\t// 跳转列表 取最新数据\n\t\t\trequest.getRequestDispatcher(\"GoodsListServlet\").forward(request, response);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n```\n\nGoodsService类\n```java\npackage com.myxq.service;\n\npublic class GoodsService {\n\t// 保护DAO\n\tprivate GoodsDao goodsDao = new GoodsDao();\n\n\tpublic List<Goods> getAllGoods() throws SQLException {\n\t\tList<Goods> allGoods = goodsDao.getAllGoods();\n\t\treturn allGoods;\n\t}\n\n\tpublic void deleteGoods(String id) throws Exception {\n\t\tgoodsDao.delGoods(Integer.parseInt(id));\n\t}\n\n\tpublic void addGoods(Goods goods) throws SQLException {\n\t\t// 调用DAO\n\t\tgoodsDao.addGoods(goods);\n\t}\n}\n```\n\nGoodsDao类\n```java\npackage com.myxq.dao;\n\npublic class GoodsDao {\n\tQueryRunner qr = new QueryRunner(JDBCUtil.getDataSource());\n\n\t// 增删改查\n\t// 1.从数据库中获取所有商品\n\tpublic List<Goods> getAllGoods() throws SQLException {\n\t\tString sql = \"select * from goods\";\n\t\tList<Goods> allGoods = qr.query(sql, new BeanListHandler<Goods>(Goods.class));\n\t\treturn allGoods;\n\t}\n\n\t// 2.添加商品到数据\n\tpublic void addGoods(Goods goods) throws SQLException {\n\t\tString sql = \"insert into goods (name,price,image,gdesc,is_hot,cid) value (?,?,?,?,?,?)\";\n\t\tqr.update(sql, goods.getName(), goods.getPrice(), goods.getImage(),goods.getGdesc(),goods.getIs_hot(),goods.getCid());\n\t}\n\n\t// 3.根据id删除商品\n\tpublic void delGoods(int id) throws SQLException {\n\t\tString sql = \"delete from goods where id = ?\";\n\t\tqr.update(sql, id);\n\t}\n\t// 4.修改指定商品\n\tpublic void updateGoods(Goods goods) throws SQLException {\n\t\tString sql = \"update goods set name=?,price=?,image=? where id = ?\";\n\t\tqr.update(sql,goods.getName(),goods.getPrice(),goods.getImage(),goods.getId());\n\t}\t\n}\n```\n\nadd.jsp\n```jsp\n\t\t<div class=\"edit_content\">\n\t\t\t<form action=\"${ctx }/GoodsAddServlet\" method=\"post\" id=\"add_form\"\n\t\t\t\tstyle=\"background: none; width: 700px\">\n\t\t\t\t<div class=\"item1\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<span>商品名称：</span> <input type=\"text\" class=\"am-form-field\"\n\t\t\t\t\t\t\tname=\"name\">&nbsp;&nbsp;\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<span>商品价格：</span> <input type=\"text\" class=\"am-form-field\" name=\"price\">\n\t\t\t\t\t</div>\n\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"item1\">\n\t\t\t\t\t<span>所属分类：</span> <select id=\"category_select\" name=\"cid\">\n\n\t\t\t\t\t\t<c:forEach items=\"${allCategory }\" var=\"category\">\n\t\t\t\t\t\t\t<option value=\"${category.cid }\">${category.cname }</option>\n\t\t\t\t\t\t</c:forEach>\n\n\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t<div>\n\t\t\t\t\t<span>是否热门</span>\n\t\t\t\t\t<select id=\"category_select\" name=\"is_hot\">\n\t\t\t\t\t\t<option value=\"0\">否</option>\n\t\t\t\t\t\t<option value=\"1\">是</option>\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"item1\">\n\t\t\t\t\t<span>商品图片：</span> <input type=\"file\" name=\"image\" id=\"upload\" />\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"item1 item_desc\" >\n\t\t\t\t\t<span>商品描述：</span>\n\t\t\t\t\t<textarea id=\"desc\" name=\"gdesc\" rows=\"4\" cols=\"50\"></textarea>\n\t\t\t\t</div>\n\t\t\t\t<button class=\"am-btn am-btn-default\" type=\"button\" id=\"add\">添加</button>\n\t\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;\n\t\t\t\t<button class=\"am-btn am-btn-default\" type=\"button\" id=\"reset\">重置</button>\n\t\t\t</form>\n\t\t</div>\n\n\n\t</div>\n\n\t<script src=\"${ctx }/admin/js/jquery.min.js\"></script>\n\n\t<script>\n\t\t$(\"#add\").click(function() {\n\t\t\t$(\"#add_form\").submit();\n\t\t});\n\n\t\t$(\"#reset\").click(function() {\n\t\t\t$(window).attr('location', 'add.jsp');\n\t\t});\n\t</script>\n```\n\n## 问题解决\n解决写入数据库乱码问题，编辑db.properties文件\n```properties\nurl=jdbc:mysql://localhost:3306/mystore?useUnicode=true&characterEncoding=utf-8\n```\n反转集合（使得最后添加的显示到最开头）\n```java\npackage com.myxq.web;\n\n@WebServlet(\"/GoodsListServlet\")\npublic class GoodsListServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tprotected void service(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\tSystem.out.println(\"GoodsListServlet\");\n\t\t// 调用服务层\n\t\tGoodsService goodsService = new GoodsService();\n\t\ttry {\n\t\t\tList<Goods> allGoods = goodsService.getAllGoods();\n\t\t\t\n\t\t\t// 反转集合\n\t\t\tCollections.reverse(allGoods);\n\t\t\t\n\t\t\t// System.out.println(allGoods);\n\t\t\t// 把数据写到request域\n\t\t\trequest.setAttribute(\"allGoods\", allGoods);\n\t\t\t// 转发\n\t\t\trequest.getRequestDispatcher(\"admin/main.jsp\").forward(request, response);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n\n```\n## 编辑商品\n![](web-server-note-13/7.png)\n\n创建GoodsEditUIServlet\n```java\npackage com.myxq.web;\n\n@WebServlet(\"/GoodsEditUIServlet\")\npublic class GoodsEditUIServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tprotected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tSystem.out.println(\"GoodsEditUIServlet\");\n\t}\n}\n```\n修改main.jsp\n```jsp\n<li><a href=\"${ctx }/GoodsEditUIServlet?id=${goods.id}\"><img class=\"img_icon\"\n\t\t\t\t\t\tsrc=\"${ctx }/admin/images/edit_icon.png\" alt=\"\"></a></li>\n```\n用Chrome查看地址是否包含了id参数\n\nGoodsEditUIServlet\n```java\npackage com.myxq.web;\n\n@WebServlet(\"/GoodsEditUIServlet\")\npublic class GoodsEditUIServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tprotected void service(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\t// 接收id\n\t\tString id = request.getParameter(\"id\");\n\t\t// System.out.println(\"GoodsEditUIServlet\"+id);\n\t\ttry {\n\t\t\t// 1.获取当前商品\n\t\t\tGoodsService goodsService = new GoodsService();\n\t\t\tGoods goods = goodsService.getGoodsWithId(id);\n\t\t\tSystem.out.println(goods);\n\t\t\t// 把商品写入request域中\n\t\t\trequest.setAttribute(\"goods\", goods);\n\n\t\t\t// 2.获取所有分类\n\t\t\tCategoryService categoryService = new CategoryService();\n\t\t\tList<Category> allCategory = categoryService.findCategory();\n\t\t\trequest.setAttribute(\"allCategory\", allCategory);\n\t\t\t// 3.转发到JSP页面\n\t\t\trequest.getRequestDispatcher(\"/admin/edit.jsp\").forward(request, response);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t}\n}\n```\n\n修改edit.jsp\n```jsp\n<div class=\"item1\">\n        \t<div>\n        \t\t<span>所属分类：</span>\n                 <select id=\"categorySel\" name=\"cid\">\n                 \t<c:forEach items=\"${allCategory }\" var=\"category\">\n                 \t <option value=\"${category.cid }\">${category.cname }</option>\n                 \t</c:forEach>\n                 </select>\n                 &nbsp;\n        \t</div>\n        \t\n        \t<div>\n        \t\t<span>是否热门：</span>\n                 <select id=\"isHotSel\" name=\"is_hot\">\n                    <!-- 让value的值等于商品is_hot的option成为选中状态 -->\n                    <option value=\"0\">否</option>\n                    <option value=\"1\">是</option>\n                 </select>\n        \t</div>        \n                 \n        </div>\n\n        <div class=\"item1\">\n                <span>商品图片：</span>\n                <input type=\"file\" name=\"image\" />\n        </div>\n        \n        <div class=\"item1 item_desc\">\n            <span>商品描述：</span>\n         <textarea  id=\"desc\" name=\"gdesc\" rows=\"4\" cols=\"50\">${goods.gdesc }</textarea>\n        </div>\n        <button class=\"am-btn am-btn-default\" type=\"button\" id=\"edit\">更新</button>\n        &nbsp;&nbsp;&nbsp;&nbsp;\n        <button class=\"am-btn am-btn-default\" type=\"button\" id=\"reset\">重置</button>\n\t\t</form>\n   </div>\n```\n\n创建GoodsEditServlet\n修改edit.jsp 关联提交表单\n```jsp\n<form action=\"${ctx }/GoodsEditServlet\" method=\"post\" id=\"edit_form\" style=\"background: none; width: 700px;\">\n```\n\nedit.jsp的form表单时提交获取id的技巧\n```jsp\n<input type=\"text\"  name=\"id\" value=\"${goods.id }\" style=\"display:none\">\n```\n\nGoodsEditServlet\n```java\npackage com.myxq.web;\n\n@WebServlet(\"/GoodsEditServlet\")\npublic class GoodsEditServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tprotected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\t// 设置字符集 post\n\t\trequest.setCharacterEncoding(\"utf-8\");\n\t\t// System.out.println(\"GoodsEditServlet\");\n\t\t// 1.获取所有参数\n\t\tMap<String, String[]> parameterMap = request.getParameterMap();\n\t\t// 2.封装成Goods对象\n\t\tGoods goods = new Goods();\n\t\ttry {\n\t\t\tBeanUtils.populate(goods, parameterMap);\n\t\t\tSystem.out.println(goods);\n\t\t\t// 3.根据id更新数据\n\t\t\t// 4.调用服务层 更新数据\n\t\t\tGoodsService goodsService = new GoodsService();\n\t\t\tgoods.setImage(\"goods_10.png\");\n\t\t\tgoodsService.updateGoods(goods);\n\t\t\t\n\t\t\t// 5.跳转mian.jsp\n\t\t\trequest.getRequestDispatcher(\"GoodsListServlet\").forward(request, response);\n\t\t} catch (Exception e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\t\n\t}\n}\n\n```\n\nGoodsService\n```java\n\tpublic void updateGoods(Goods goods) throws Exception {\n\t\tgoodsDao.updateGoods(goods);\n\t}\n```\n\nGoodsDao\n```java\n\t// 4.修改指定商品\n\tpublic void updateGoods(Goods goods) throws SQLException {\n\t\tString sql = \"update goods set name=?,price=?,image=? ,gdesc=?,is_hot=?,cid=? where id = ?\";\n\t\tqr.update(sql,goods.getName(),goods.getPrice(),goods.getImage(),goods.getGdesc(),goods.getIs_hot(),goods.getCid(),goods.getId());\n\t}\n```\n修改更新商品页面（读取当前商品的信息）\nedit.jsp\n```js\n\t$(function () {\n        \n\t\t $(\"#edit\").click(function () {\n\t\t        //让表单提交 GoodsEditServlet\n\t\t        //获取表单  让其提交\n\t\t        $(\"#edit_form\").submit();\n\t\t  });\n\t\t \n\t\t //让value的值等于商品is_hot的option成为选中状态\n\t\t $(\"#isHotSel option[value=${goods.is_hot}]\").prop(\"selected\",true);\n\t\t $(\"#categorySel option[value=${goods.cid}]\").prop(\"selected\",true);\n\t\t \n    });\n```\n外层套一层$(function() 的原因是：等所有标签加载完毕，再去做执行里面的JQuery\n\n## 参考资料\n\n[Java零基础到高级JavaWeb与项目](https://study.163.com/course/introduction/1005981003.htm)","slug":"web-server-note-13","published":1,"updated":"2020-06-13T02:55:34.855Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke3x9g6v0028zgvu2hxp7k0l","content":"<h2 id=\"后台管理系统登录\"><a href=\"#后台管理系统登录\" class=\"headerlink\" title=\"后台管理系统登录\"></a>后台管理系统登录</h2><p>JSP凡是action src href都要写绝对路径，需要加上工程名称<br>获取当前项目名</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;pageContext.request.contextPath &#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2020/02/16/web-server-note-13/1.png\" alt=\"三层架构实践\"></p>\n<p>Web层 AdminServlet类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.web;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/AdminServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AdminServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tString name = request.getParameter(<span class=\"string\">\"username\"</span>);</span><br><span class=\"line\">\t\tString pwd = request.getParameter(<span class=\"string\">\"password\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"name:\"</span>+name+<span class=\"string\">\" pwd:\"</span>+pwd);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>新建一个Service层 AdminService类<br>在AdminServlet中调用登录业务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 调用 登录业务</span></span><br><span class=\"line\">AdminService adminService = <span class=\"keyword\">new</span> AdminService();</span><br><span class=\"line\">adminService.login(name,pwd);</span><br></pre></td></tr></table></figure>\n<p>自动创建login方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AdminService</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">login</span><span class=\"params\">(String name, String pwd)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 调用Dao层到数据库查询</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>新建一个DAO层 AdminService类<br>在AdminService中调用Dao层到数据库查询</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 调用Dao层到数据库查询</span></span><br><span class=\"line\">AdminDao adminDao = <span class=\"keyword\">new</span> AdminDao();</span><br><span class=\"line\">adminDao.checkAdmin(name,pwd);</span><br></pre></td></tr></table></figure>\n<p>自动创建checkAdmin方法<br>导入数据库相关Jar包，创建util包，写JdbcUtil，创建db.properties</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.dao;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AdminDao</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Admin <span class=\"title\">checkAdmin</span><span class=\"params\">(String name, String pwd)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 到数据库中查询 返回查询结果</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.连接数据库</span></span><br><span class=\"line\">\t\tQueryRunner qr = <span class=\"keyword\">new</span> QueryRunner(JDBCUtil.getDataSource());</span><br><span class=\"line\">\t\tString sql = <span class=\"string\">\"select * from admin where username= ?and password = ?\"</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 2.获取数据</span></span><br><span class=\"line\">\t\tAdmin admin = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tadmin = qr.query(sql, <span class=\"keyword\">new</span> BeanHandler&lt;Admin&gt;(Admin.class), name, pwd);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> admin;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">抛出异常</span><br><span class=\"line\"></span><br><span class=\"line\">修改AdminService，继续抛出SQLException</span><br><span class=\"line\">```java</span><br><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AdminService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Admin <span class=\"title\">login</span><span class=\"params\">(String name, String pwd)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 调用Dao层到数据库查询</span></span><br><span class=\"line\">\t\tAdminDao adminDao = <span class=\"keyword\">new</span> AdminDao();</span><br><span class=\"line\">\t\tAdmin admin = adminDao.checkAdmin(name,pwd);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (admin != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> admin;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"用户名或密码错误\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改AdminServlet，最终调用者，必须处理异常<br>如果项目修改了重启服务器还是报错，可以尝试Project-Clean 清除缓存</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.web;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/AdminServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AdminServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tString name = request.getParameter(<span class=\"string\">\"username\"</span>);</span><br><span class=\"line\">\t\tString pwd = request.getParameter(<span class=\"string\">\"password\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"name:\"</span>+name+<span class=\"string\">\" pwd:\"</span>+pwd);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 调用 登录业务</span></span><br><span class=\"line\">\t\tAdminService adminService = <span class=\"keyword\">new</span> AdminService();</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tadminService.login(name,pwd);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"登录成功\"</span>);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"登录失败\"</span>);</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>服务器跳转时，路径相对的是服务器WebContent<br>浏览器请求跳转时，路径相对的当前的JSP<br>这两个是冲突的，所以JSP凡是action src href都要写绝对路径</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"$&#123;pageContext.request.contextPath &#125;/admin/css/style.css\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>对网页进行测试</p>\n<p>登录成功重定向后台首页</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\tString name = request.getParameter(<span class=\"string\">\"username\"</span>);</span><br><span class=\"line\">\tString pwd = request.getParameter(<span class=\"string\">\"password\"</span>);</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"name:\"</span>+name+<span class=\"string\">\" pwd:\"</span>+pwd);</span><br><span class=\"line\">\t<span class=\"comment\">// 调用 登录业务</span></span><br><span class=\"line\">\tAdminService adminService = <span class=\"keyword\">new</span> AdminService();</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tAdmin admin = adminService.login(name,pwd);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"登录成功\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 把用户保存到Session</span></span><br><span class=\"line\">\t\tHttpSession session = request.getSession();</span><br><span class=\"line\">\t\tsession.setAttribute(<span class=\"string\">\"admin\"</span>, admin);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 跳转到后台首页</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 使用重定向，地址栏需要变化</span></span><br><span class=\"line\">\t\tresponse.sendRedirect(request.getContextPath()+<span class=\"string\">\"/admin/admin_index.jsp\"</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (e.getMessage().equals(<span class=\"string\">\"用户名或密码错误\"</span>))&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"登录失败\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 跳转回登录页面，回显错误信息</span></span><br><span class=\"line\">\t\t\trequest.setAttribute(<span class=\"string\">\"err\"</span>, e.getMessage());</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 转发</span></span><br><span class=\"line\">\t\t\trequest.getRequestDispatcher(<span class=\"string\">\"admin/admin_login.jsp\"</span>).forward(request,response);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为是重定向，所以需要修改admin_index的src为绝对路径<br>重定向：浏览器的跳转，相对JSP路径</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">frameset</span> <span class=\"attr\">rows</span>=<span class=\"string\">\"70,*\"</span> <span class=\"attr\">frameborder</span>=<span class=\"string\">0</span> <span class=\"attr\">border</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">framespacing</span>=<span class=\"string\">\"0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">frame</span> <span class=\"attr\">src</span>=<span class=\"string\">\"$&#123;pageContext.request.contextPath &#125;/admin/top.jsp\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"topFrame\"</span> <span class=\"attr\">scrolling</span>=<span class=\"string\">\"NO\"</span> <span class=\"attr\">noresize</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">frameset</span> <span class=\"attr\">cols</span>=<span class=\"string\">\"250,*\"</span> <span class=\"attr\">frameborder</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">border</span>=<span class=\"string\">\"0\"</span>  <span class=\"attr\">framespacing</span>=<span class=\"string\">\"10\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">frame</span> <span class=\"attr\">src</span>=<span class=\"string\">\"$&#123;pageContext.request.contextPath &#125;/admin/left.jsp\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"leftFrame\"</span>  <span class=\"attr\">scrolling</span>=<span class=\"string\">\"NO\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">frame</span> <span class=\"attr\">src</span>=<span class=\"string\">\"$&#123;pageContext.request.contextPath &#125;/admin/main.jsp\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mainFrame\"</span> &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">frameset</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">frameset</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>修改后天显示的用户名</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"admin_top\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"top_left\"</span>&gt;</span></span><br><span class=\"line\">        码蚁商城</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"h_top_right\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"images/user_icon.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 从Session域中取数据 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>$&#123;admin.username &#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"商品管理业务\"><a href=\"#商品管理业务\" class=\"headerlink\" title=\"商品管理业务\"></a>商品管理业务</h2><p><img src=\"/2020/02/16/web-server-note-13/2.png\" alt=\"商品管理业务\"></p>\n<h4 id=\"商品显示\"><a href=\"#商品显示\" class=\"headerlink\" title=\"商品显示\"></a>商品显示</h4><p>DAO层 GoodsDao类<br>暂时不用面向接口，面向接口编程，需求变更，用其他数据库，就只需要变更实现类<br>新建domain</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.domain;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Setter</span><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Goods</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Double price;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String image;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"Goods [id=\"</span> + id + <span class=\"string\">\", name=\"</span> + name + <span class=\"string\">\", price=\"</span> + price + <span class=\"string\">\", image=\"</span> + image + <span class=\"string\">\", getClass()=\"</span></span><br><span class=\"line\">\t\t\t\t+ getClass() + <span class=\"string\">\", hashCode()=\"</span> + hashCode() + <span class=\"string\">\", toString()=\"</span> + <span class=\"keyword\">super</span>.toString() + <span class=\"string\">\"]\"</span>;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>jar包，db.properties,Util包JdbcUtil<br>单元测试initialization Error，无代码无关，单元测试初始化错误，Clean工程就好了<br>写一个方法，就马上测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.dao;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GoodsDao</span> </span>&#123;</span><br><span class=\"line\">\tQueryRunner qr = <span class=\"keyword\">new</span> QueryRunner(JDBCUtil.getDataSource());</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 增删改查</span></span><br><span class=\"line\">\t<span class=\"comment\">// 1.从数据库中获取所有商品</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;Goods&gt; <span class=\"title\">getAllGoods</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">\t\tString sql = <span class=\"string\">\"select * from goods\"</span>;</span><br><span class=\"line\">\t\tList&lt;Goods&gt; allGoods = qr.query(sql, <span class=\"keyword\">new</span> BeanListHandler&lt;Goods&gt;(Goods.class));</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> allGoods;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 2.添加商品到数据</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addGoods</span><span class=\"params\">(Goods goods)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">\t\tString sql = <span class=\"string\">\"insert into goods (name,price,image)value(?,?,?)\"</span>;</span><br><span class=\"line\">\t\tqr.update(sql, goods.getName(), goods.getPrice(), goods.getImage());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 3.根据id删除商品</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delGoods</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">\t\tString sql = <span class=\"string\">\"delete from goods where id = ?\"</span>;</span><br><span class=\"line\">\t\tqr.update(sql, id);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 4.修改指定商品</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateGoods</span><span class=\"params\">(Goods goods)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">\t\tString sql = <span class=\"string\">\"update goods set name=?,price=?,image=? where id = ?\"</span>;</span><br><span class=\"line\">\t\tqr.update(sql,goods.getName(),goods.getPrice(),goods.getImage(),goods.getId());</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GoodsDaoTest</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testGetAllGoods</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">\t\tGoodsDao goodsDao = <span class=\"keyword\">new</span> GoodsDao();</span><br><span class=\"line\">\t\tList&lt;Goods&gt; allGoods = goodsDao.getAllGoods();</span><br><span class=\"line\">\t\tSystem.out.println(allGoods);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testAddGoods</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">\t\tGoodsDao goodsDao = <span class=\"keyword\">new</span> GoodsDao();</span><br><span class=\"line\">\t\tGoods goods = <span class=\"keyword\">new</span> Goods();</span><br><span class=\"line\">\t\tgoods.setName(<span class=\"string\">\"测试\"</span>);</span><br><span class=\"line\">\t\tgoods.setPrice(<span class=\"number\">200.0</span>);</span><br><span class=\"line\">\t\tgoods.setImage(<span class=\"string\">\"goods_10.png\"</span>);</span><br><span class=\"line\">\t\tgoodsDao.addGoods(goods);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testDelGoods</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">\t\tGoodsDao goodsDao = <span class=\"keyword\">new</span> GoodsDao();</span><br><span class=\"line\">\t\tgoodsDao.delGoods(<span class=\"number\">17</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Test</span> </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUpdateGoods</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">\t\tGoods goods = <span class=\"keyword\">new</span> Goods();</span><br><span class=\"line\">\t\tgoods.setId(<span class=\"number\">17</span>);</span><br><span class=\"line\">\t\tgoods.setName(<span class=\"string\">\"update\"</span>);</span><br><span class=\"line\">\t\tgoods.setPrice(<span class=\"number\">17.0</span>);</span><br><span class=\"line\">\t\tgoods.setImage(<span class=\"string\">\"goods_11.png\"</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tGoodsDao goodsDao = <span class=\"keyword\">new</span> GoodsDao();</span><br><span class=\"line\">\t\tgoodsDao.updateGoods(goods);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Web层 GoodsListServlet类</p>\n<p>创建GoodsListServlet类，写一句输出语句<br>修改admin_index.jsp的mainFrame</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;frame src=<span class=\"string\">\"$&#123;pageContext.request.contextPath &#125;/GoodsListServlet\"</span> name=<span class=\"string\">\"mainFrame\"</span> &gt;</span><br></pre></td></tr></table></figure>\n<p>测试是否跳转到Servlet</p>\n<p>创建Service层 GoodsService类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GoodsService</span> </span>&#123;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在GoodsListServlet中调用服务层</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"GoodsListServlet\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 调用服务层</span></span><br><span class=\"line\">\t\tGoodsService goodsService = <span class=\"keyword\">new</span> GoodsService();</span><br><span class=\"line\">\t\tgoodsService.getAllGoods();</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>自动生成getAllGoods方法，抛出异常</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GoodsService</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;Goods&gt; <span class=\"title\">getAllGoods</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">\t\tGoodsDao goodsDao = <span class=\"keyword\">new</span> GoodsDao();</span><br><span class=\"line\">\t\tList&lt;Goods&gt; allGoods = goodsDao.getAllGoods();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> allGoods;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>继续写Servlet</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"GoodsListServlet\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 调用服务层</span></span><br><span class=\"line\">\t\tGoodsService goodsService = <span class=\"keyword\">new</span> GoodsService();</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tList&lt;Goods&gt; allGoods = goodsService.getAllGoods();</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// System.out.println(allGoods);</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 把数据写到request域</span></span><br><span class=\"line\">\t\t\trequest.setAttribute(<span class=\"string\">\"allGoods\"</span>, allGoods);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 转发</span></span><br><span class=\"line\">\t\t\trequest.getRequestDispatcher(<span class=\"string\">\"admin/main.jsp\"</span>).forward(request, response);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>修改main.jsp的css路径</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%</span><br><span class=\"line\">\tString ctx = request.getContextPath();</span><br><span class=\"line\">\tpageContext.setAttribute(<span class=\"string\">\"ctx\"</span>, ctx);</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;link rel=<span class=\"string\">\"stylesheet\"</span> href=<span class=\"string\">\"$&#123;ctx&#125;/admin/css/style.css\"</span> type=<span class=\"string\">\"text/css\"</span> /&gt;</span><br><span class=\"line\">    &lt;link rel=<span class=\"string\">\"stylesheet\"</span> href=<span class=\"string\">\"$&#123;ctx&#125;/admin/css/amazeui.min.css\"</span> /&gt;</span><br><span class=\"line\">    &lt;link rel=<span class=\"string\">\"stylesheet\"</span> href=<span class=\"string\">\"$&#123;ctx&#125;/admin/css/pageStyle.css\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/head&gt;</span><br></pre></td></tr></table></figure>\n<p>测试网页</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ taglib uri=<span class=\"string\">\"http://java.sun.com/jsp/jstl/core\"</span> prefix=<span class=\"string\">\"c\"</span> %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;c:forEach items=<span class=\"string\">\"$&#123;allGoods &#125;\"</span> <span class=\"keyword\">var</span>=<span class=\"string\">\"goods\"</span> varStatus=<span class=\"string\">\"status\"</span>&gt;</span><br><span class=\"line\">\t\t\t&lt;ul <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"list_goods_ul\"</span>&gt;</span><br><span class=\"line\">\t\t\t\t&lt;!-- status是一个对象<span class=\"keyword\">for</span>循环状态 index就是取当前<span class=\"keyword\">for</span>循环角标 --&gt;</span><br><span class=\"line\">\t\t\t\t&lt;li&gt;$&#123;status.index+1 &#125;&lt;/li&gt;</span><br><span class=\"line\">\t\t\t\t&lt;li&gt;&lt;img src=\"$&#123;ctx &#125;/admin/images/pimages/$&#123;goods.image&#125;\"&gt;&lt;/li&gt;</span><br><span class=\"line\">\t\t\t\t&lt;li&gt;$&#123;goods.name &#125;&lt;/li&gt;</span><br><span class=\"line\">\t\t\t\t&lt;li&gt;$&#123;goods.price &#125;&lt;/li&gt;</span><br><span class=\"line\">\t\t\t\t&lt;li&gt;&lt;a href=<span class=\"string\">\"#\"</span>&gt;&lt;img <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"img_icon\"</span></span><br><span class=\"line\">\t\t\t\t\t\tsrc=\"$&#123;ctx &#125;/admin/images/edit_icon.png\" alt=\"\"&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">\t\t\t\t&lt;li&gt;&lt;a href=<span class=\"string\">\"#\"</span>&gt;&lt;img <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"img_icon\"</span></span><br><span class=\"line\">\t\t\t\t\t\tsrc=\"$&#123;ctx &#125;/admin/images/delete_icon.png\" alt=\"\"&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">\t\t\t&lt;/ul&gt;</span><br><span class=\"line\">\t\t&lt;/c:forEach&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;script src=\"$&#123;ctx &#125;/admin/js/jquery.min.js\"&gt;&lt;/script&gt;</span><br><span class=\"line\">\t&lt;script type=\"text/javascript\" src=\"$&#123;ctx &#125;/admin/js/paging.js\"&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2020/02/16/web-server-note-13/3.png\" alt></p>\n<h2 id=\"删除商品\"><a href=\"#删除商品\" class=\"headerlink\" title=\"删除商品\"></a>删除商品</h2><p>步骤同上</p>\n<p>创建GoodsDelServlet类，测试连通<br>修改jsp的删除按钮的href，修改后可以用Chrome浏览器鼠标悬停，查看连接地址是否正确<br>在Servlet中接受参数，调用服务，服务中调用DAO，删除数据<br>Servlet中转发</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;c:forEach items=<span class=\"string\">\"$&#123;allGoods &#125;\"</span> <span class=\"keyword\">var</span>=<span class=\"string\">\"goods\"</span> varStatus=<span class=\"string\">\"status\"</span>&gt;</span><br><span class=\"line\">\t&lt;ul <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"list_goods_ul\"</span>&gt;</span><br><span class=\"line\">\t\t&lt;!-- status是一个对象<span class=\"keyword\">for</span>循环状态 index就是取当前<span class=\"keyword\">for</span>循环角标 --&gt;</span><br><span class=\"line\">\t\t&lt;li&gt;$&#123;status.index+1 &#125;&lt;/li&gt;</span><br><span class=\"line\">\t\t&lt;li&gt;&lt;img src=\"$&#123;ctx &#125;/admin/images/pimages/$&#123;goods.image&#125;\"&gt;&lt;/li&gt;</span><br><span class=\"line\">\t\t&lt;li&gt;$&#123;goods.name &#125;&lt;/li&gt;</span><br><span class=\"line\">\t\t&lt;li&gt;$&#123;goods.price &#125;&lt;/li&gt;</span><br><span class=\"line\">\t\t&lt;li&gt;&lt;a href=<span class=\"string\">\"\"</span>&gt;&lt;img <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"img_icon\"</span></span><br><span class=\"line\">\t\t\t\tsrc=\"$&#123;ctx &#125;/admin/images/edit_icon.png\" alt=\"\"&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">\t\t&lt;li&gt;&lt;a href=<span class=\"string\">\"$&#123;ctx &#125;/GoodsDelServlet?id=$&#123;goods.id&#125;\"</span>&gt;&lt;img <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"img_icon\"</span></span><br><span class=\"line\">\t\t\t\tsrc=\"$&#123;ctx &#125;/admin/images/delete_icon.png\" alt=\"\"&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">\t&lt;/ul&gt;</span><br><span class=\"line\">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure>\n\n<p>GoodsDelServlet类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.web;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/GoodsDelServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GoodsDelServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// System.out.println(\"GoodsDelServlet\");</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 1. 接收参数</span></span><br><span class=\"line\">\t\tString id = request.getParameter(<span class=\"string\">\"id\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// System.out.println(id);</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 2. 调用服务层</span></span><br><span class=\"line\">\t\tGoodsService goodsService = <span class=\"keyword\">new</span> GoodsService();</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tgoodsService.deleteGoods(id);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\trequest.getRequestDispatcher(<span class=\"string\">\"GoodsListServlet\"</span>).forward(request, response);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>GoodsService类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GoodsService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tGoodsDao goodsDao = <span class=\"keyword\">new</span> GoodsDao();</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;Goods&gt; <span class=\"title\">getAllGoods</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">\t\tList&lt;Goods&gt; allGoods = goodsDao.getAllGoods();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> allGoods;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteGoods</span><span class=\"params\">(String id)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\tgoodsDao.delGoods(Integer.parseInt(id));</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加商品\"><a href=\"#添加商品\" class=\"headerlink\" title=\"添加商品\"></a>添加商品</h2><p>修改goods表，增加描述、是否热门、cid<br><img src=\"/2020/02/16/web-server-note-13/4.png\" alt=\"数据库\"><br>增加分类表catogory<br><img src=\"/2020/02/16/web-server-note-13/5.png\" alt=\"数据库\"><br>添加数据<br>为goods表的cid做外键约束<br><strong>修改了表JavaBean也要修改</strong>，数据库需要对应<br><strong>对应的插入数据库操作也要更新</strong></p>\n<p><img src=\"/2020/02/16/web-server-note-13/5.png\" alt=\"添加商品\"></p>\n<p>创建GoodsAddUIServlet类<br>创建CategoryService类<br>GoodsAddUIServlet调用CategoryService中的findCategory方法<br>创建CategoryDao类 </p>\n<p>GoodsAddUIServlet类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.web;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/GoodsAddUIServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GoodsAddUIServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.取出所有分类</span></span><br><span class=\"line\">\t\tList&lt;Category&gt; allCategory = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tCategoryService categoryService = <span class=\"keyword\">new</span> CategoryService();</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tallCategory = categoryService.findCategory();</span><br><span class=\"line\">\t\t\tSystem.out.println(allCategory);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 2.把分类存到域中</span></span><br><span class=\"line\">\t\trequest.setAttribute(<span class=\"string\">\"allCategory\"</span>, allCategory);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 3.转发edit.jsp</span></span><br><span class=\"line\">\t\trequest.getRequestDispatcher(<span class=\"string\">\"admin/add.jsp\"</span>).forward(request, response);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>CategoryService类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CategoryService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;Category&gt; <span class=\"title\">findCategory</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\tCategoryDao categoryDao = <span class=\"keyword\">new</span> CategoryDao();</span><br><span class=\"line\">\t\tList&lt;Category&gt; allCategory = categoryDao.getAllCategory();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> allCategory;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>CategoryDao类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.dao;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CategoryDao</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;Category&gt; <span class=\"title\">getAllCategory</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\tQueryRunner qr = <span class=\"keyword\">new</span> QueryRunner(JDBCUtil.getDataSource());</span><br><span class=\"line\">\t\tString sql = <span class=\"string\">\"select * from category\"</span>;</span><br><span class=\"line\">\t\tList&lt;Category&gt; allCategory  = qr.query(sql, <span class=\"keyword\">new</span> BeanListHandler&lt;Category&gt;(Category.class));</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> allCategory;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改add.jsp<br>添加foreach，转发所以需要修改一些路径为绝对路径</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=<span class=\"string\">\"java\"</span> contentType=<span class=\"string\">\"text/html; charset=UTF-8\"</span></span><br><span class=\"line\">    pageEncoding=<span class=\"string\">\"UTF-8\"</span>%&gt;</span><br><span class=\"line\">&lt;%@ taglib uri=<span class=\"string\">\"http://java.sun.com/jsp/jstl/core\"</span> prefix=<span class=\"string\">\"c\"</span> %&gt;</span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">\tString ctx = request.getContextPath();</span><br><span class=\"line\">\tpageContext.setAttribute(<span class=\"string\">\"ctx\"</span>, ctx);</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;link rel=<span class=\"string\">\"stylesheet\"</span> href=<span class=\"string\">\"$&#123;ctx &#125;/admin/css/style.css\"</span> type=<span class=\"string\">\"text/css\"</span> /&gt;</span><br><span class=\"line\">    &lt;link rel=<span class=\"string\">\"stylesheet\"</span> href=<span class=\"string\">\"$&#123;ctx &#125;/admin/css/amazeui.min.css\"</span> /&gt;</span><br><span class=\"line\">        &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"item1\"</span>&gt;</span><br><span class=\"line\">                &lt;span&gt;所属分类：&lt;/span&gt;</span><br><span class=\"line\">                 &lt;select id=<span class=\"string\">\"category_select\"</span>&gt;&amp;nbsp;&amp;nbsp;</span><br><span class=\"line\">                 </span><br><span class=\"line\">                 &lt;c:forEach items=<span class=\"string\">\"$&#123;allCategory &#125;\"</span> <span class=\"keyword\">var</span>=<span class=\"string\">\"category\"</span>&gt;</span><br><span class=\"line\">                 \t&lt;option value=\"$&#123;category.cid &#125;\"&gt;$&#123;category.cname &#125;&lt;/option&gt;</span><br><span class=\"line\">                 &lt;/c:forEach&gt;</span><br><span class=\"line\">                    </span><br><span class=\"line\">                     </span><br><span class=\"line\">                 &lt;/select&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">   </span><br><span class=\"line\">&lt;script src=\"$&#123;ctx &#125;/admin/js/jquery.min.js\"&gt;&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    $(<span class=\"string\">\"#add\"</span>).click(function () &#123;</span><br><span class=\"line\">        $(window).attr(<span class=\"string\">'location'</span>,<span class=\"string\">'main.jsp'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    $(<span class=\"string\">\"#reset\"</span>).click(function () &#123;</span><br><span class=\"line\">       $(window).attr(<span class=\"string\">'location'</span>,<span class=\"string\">'add.jsp'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>修改main.jsp链接为GoodsAddUIServlet</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;script src=\"$&#123;ctx &#125;/admin/js/jquery.min.js\"&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=\"text/javascript\" src=\"$&#123;ctx &#125;/admin/js/paging.js\"&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\t<span class=\"comment\">//分页</span></span><br><span class=\"line\">\t$(<span class=\"string\">\"#page\"</span>).paging(&#123;</span><br><span class=\"line\">\t\tpageNo : <span class=\"number\">5</span>,</span><br><span class=\"line\">\t\ttotalPage : <span class=\"number\">10</span>,</span><br><span class=\"line\">\t\ttotalSize : <span class=\"number\">300</span>,</span><br><span class=\"line\">\t\tcallback : function(num) &#123;</span><br><span class=\"line\">\t\t\talert(num);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t$(<span class=\"string\">\"#add\"</span>).click(function() &#123;</span><br><span class=\"line\">\t\t$(window).attr(<span class=\"string\">'location'</span>, <span class=\"string\">'$&#123;ctx&#125;/GoodsAddUIServlet'</span>);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>添加商品接收参数<br>创建GoodsAddServlet类<br>修改add.jsp的form表达的各个name属性和表单地址等<br>测试在Servlet获取所有参数的Map，使用BeanUtils封装，测试封装结果<br>调用服务层方法<br>服务处调用DAO<br><strong>字段介绍用desc，desc是数据库关键字，所以开发一般是gdesc</strong><br>修改类名为gdesc修改对应映射</p>\n<p>GoodsAddServlet类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.web;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/GoodsAddServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GoodsAddServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// System.out.println(\"GoodsAddServlet\");</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.获取所有参数</span></span><br><span class=\"line\">\t\trequest.setCharacterEncoding(<span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">\t\tMap&lt;String, String[]&gt; map = request.getParameterMap();</span><br><span class=\"line\">\t\t<span class=\"comment\">// System.out.println(map);</span></span><br><span class=\"line\">\t\tGoods goods = <span class=\"keyword\">new</span> Goods();</span><br><span class=\"line\">\t\tBeanUtils beanUtils = <span class=\"keyword\">new</span> BeanUtils();</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tBeanUtils.populate(goods, map);</span><br><span class=\"line\">\t\t\tgoods.setImage(<span class=\"string\">\"goods_11.png\"</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(goods);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 调用服务层</span></span><br><span class=\"line\">\t\t\tGoodsService goodsService = <span class=\"keyword\">new</span> GoodsService();</span><br><span class=\"line\">\t\t\tgoodsService.addGoods(goods);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 跳转列表 取最新数据</span></span><br><span class=\"line\">\t\t\trequest.getRequestDispatcher(<span class=\"string\">\"GoodsListServlet\"</span>).forward(request, response);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>GoodsService类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GoodsService</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 保护DAO</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> GoodsDao goodsDao = <span class=\"keyword\">new</span> GoodsDao();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;Goods&gt; <span class=\"title\">getAllGoods</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">\t\tList&lt;Goods&gt; allGoods = goodsDao.getAllGoods();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> allGoods;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteGoods</span><span class=\"params\">(String id)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\tgoodsDao.delGoods(Integer.parseInt(id));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addGoods</span><span class=\"params\">(Goods goods)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 调用DAO</span></span><br><span class=\"line\">\t\tgoodsDao.addGoods(goods);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>GoodsDao类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.dao;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GoodsDao</span> </span>&#123;</span><br><span class=\"line\">\tQueryRunner qr = <span class=\"keyword\">new</span> QueryRunner(JDBCUtil.getDataSource());</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 增删改查</span></span><br><span class=\"line\">\t<span class=\"comment\">// 1.从数据库中获取所有商品</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;Goods&gt; <span class=\"title\">getAllGoods</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">\t\tString sql = <span class=\"string\">\"select * from goods\"</span>;</span><br><span class=\"line\">\t\tList&lt;Goods&gt; allGoods = qr.query(sql, <span class=\"keyword\">new</span> BeanListHandler&lt;Goods&gt;(Goods.class));</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> allGoods;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 2.添加商品到数据</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addGoods</span><span class=\"params\">(Goods goods)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">\t\tString sql = <span class=\"string\">\"insert into goods (name,price,image,gdesc,is_hot,cid) value (?,?,?,?,?,?)\"</span>;</span><br><span class=\"line\">\t\tqr.update(sql, goods.getName(), goods.getPrice(), goods.getImage(),goods.getGdesc(),goods.getIs_hot(),goods.getCid());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 3.根据id删除商品</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delGoods</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">\t\tString sql = <span class=\"string\">\"delete from goods where id = ?\"</span>;</span><br><span class=\"line\">\t\tqr.update(sql, id);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 4.修改指定商品</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateGoods</span><span class=\"params\">(Goods goods)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">\t\tString sql = <span class=\"string\">\"update goods set name=?,price=?,image=? where id = ?\"</span>;</span><br><span class=\"line\">\t\tqr.update(sql,goods.getName(),goods.getPrice(),goods.getImage(),goods.getId());</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>add.jsp</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"edit_content\"</span>&gt;</span><br><span class=\"line\">\t\t&lt;form action=<span class=\"string\">\"$&#123;ctx &#125;/GoodsAddServlet\"</span> method=<span class=\"string\">\"post\"</span> id=<span class=\"string\">\"add_form\"</span></span><br><span class=\"line\">\t\t\tstyle=<span class=\"string\">\"background: none; width: 700px\"</span>&gt;</span><br><span class=\"line\">\t\t\t&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"item1\"</span>&gt;</span><br><span class=\"line\">\t\t\t\t&lt;div&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;span&gt;商品名称：&lt;/span&gt; &lt;input type=\"text\" class=\"am-form-field\"</span><br><span class=\"line\">\t\t\t\t\t\tname=<span class=\"string\">\"name\"</span>&gt;&amp;nbsp;&amp;nbsp;</span><br><span class=\"line\">\t\t\t\t&lt;/div&gt;</span><br><span class=\"line\">\t\t\t\t&lt;div&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;span&gt;商品价格：&lt;/span&gt; &lt;input type=\"text\" class=\"am-form-field\" name=\"price\"&gt;</span><br><span class=\"line\">\t\t\t\t&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"item1\"</span>&gt;</span><br><span class=\"line\">\t\t\t\t&lt;span&gt;所属分类：&lt;/span&gt; &lt;select id=\"category_select\" name=\"cid\"&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t&lt;c:forEach items=<span class=\"string\">\"$&#123;allCategory &#125;\"</span> <span class=\"keyword\">var</span>=<span class=\"string\">\"category\"</span>&gt;</span><br><span class=\"line\">\t\t\t\t\t\t&lt;option value=\"$&#123;category.cid &#125;\"&gt;$&#123;category.cname &#125;&lt;/option&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;/c:forEach&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t&lt;/select&gt;</span><br><span class=\"line\">\t\t\t&lt;/div&gt;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t&lt;div&gt;</span><br><span class=\"line\">\t\t\t\t&lt;span&gt;是否热门&lt;/span&gt;</span><br><span class=\"line\">\t\t\t\t&lt;select id=<span class=\"string\">\"category_select\"</span> name=<span class=\"string\">\"is_hot\"</span>&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;option value=\"0\"&gt;否&lt;/option&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;option value=\"1\"&gt;是&lt;/option&gt;</span><br><span class=\"line\">\t\t\t\t&lt;/select&gt;</span><br><span class=\"line\">\t\t\t&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"item1\"</span>&gt;</span><br><span class=\"line\">\t\t\t\t&lt;span&gt;商品图片：&lt;/span&gt; &lt;input type=\"file\" name=\"image\" id=\"upload\" /&gt;</span><br><span class=\"line\">\t\t\t&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"item1 item_desc\"</span> &gt;</span><br><span class=\"line\">\t\t\t\t&lt;span&gt;商品描述：&lt;/span&gt;</span><br><span class=\"line\">\t\t\t\t&lt;textarea id=\"desc\" name=\"gdesc\" rows=\"4\" cols=\"50\"&gt;&lt;/textarea&gt;</span><br><span class=\"line\">\t\t\t&lt;/div&gt;</span><br><span class=\"line\">\t\t\t&lt;button class=\"am-btn am-btn-default\" type=\"button\" id=\"add\"&gt;添加&lt;/button&gt;</span><br><span class=\"line\">\t\t\t&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class=\"line\">\t\t\t&lt;button class=\"am-btn am-btn-default\" type=\"button\" id=\"reset\"&gt;重置&lt;/button&gt;</span><br><span class=\"line\">\t\t&lt;/form&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script src=\"$&#123;ctx &#125;/admin/js/jquery.min.js\"&gt;&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\t$(<span class=\"string\">\"#add\"</span>).click(function() &#123;</span><br><span class=\"line\">\t\t$(<span class=\"string\">\"#add_form\"</span>).submit();</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t$(<span class=\"string\">\"#reset\"</span>).click(function() &#123;</span><br><span class=\"line\">\t\t$(window).attr(<span class=\"string\">'location'</span>, <span class=\"string\">'add.jsp'</span>);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h2><p>解决写入数据库乱码问题，编辑db.properties文件</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">url</span>=<span class=\"string\">jdbc:mysql://localhost:3306/mystore?useUnicode=true&amp;characterEncoding=utf-8</span></span><br></pre></td></tr></table></figure>\n<p>反转集合（使得最后添加的显示到最开头）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.web;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/GoodsListServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GoodsListServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"GoodsListServlet\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 调用服务层</span></span><br><span class=\"line\">\t\tGoodsService goodsService = <span class=\"keyword\">new</span> GoodsService();</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tList&lt;Goods&gt; allGoods = goodsService.getAllGoods();</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 反转集合</span></span><br><span class=\"line\">\t\t\tCollections.reverse(allGoods);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// System.out.println(allGoods);</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 把数据写到request域</span></span><br><span class=\"line\">\t\t\trequest.setAttribute(<span class=\"string\">\"allGoods\"</span>, allGoods);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 转发</span></span><br><span class=\"line\">\t\t\trequest.getRequestDispatcher(<span class=\"string\">\"admin/main.jsp\"</span>).forward(request, response);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"编辑商品\"><a href=\"#编辑商品\" class=\"headerlink\" title=\"编辑商品\"></a>编辑商品</h2><p><img src=\"/2020/02/16/web-server-note-13/7.png\" alt></p>\n<p>创建GoodsEditUIServlet</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.web;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/GoodsEditUIServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GoodsEditUIServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"GoodsEditUIServlet\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改main.jsp</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;li&gt;&lt;a href=<span class=\"string\">\"$&#123;ctx &#125;/GoodsEditUIServlet?id=$&#123;goods.id&#125;\"</span>&gt;&lt;img <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"img_icon\"</span></span><br><span class=\"line\">\t\t\t\t\t\tsrc=\"$&#123;ctx &#125;/admin/images/edit_icon.png\" alt=\"\"&gt;&lt;/a&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure>\n<p>用Chrome查看地址是否包含了id参数</p>\n<p>GoodsEditUIServlet</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.web;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/GoodsEditUIServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GoodsEditUIServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 接收id</span></span><br><span class=\"line\">\t\tString id = request.getParameter(<span class=\"string\">\"id\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// System.out.println(\"GoodsEditUIServlet\"+id);</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 1.获取当前商品</span></span><br><span class=\"line\">\t\t\tGoodsService goodsService = <span class=\"keyword\">new</span> GoodsService();</span><br><span class=\"line\">\t\t\tGoods goods = goodsService.getGoodsWithId(id);</span><br><span class=\"line\">\t\t\tSystem.out.println(goods);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 把商品写入request域中</span></span><br><span class=\"line\">\t\t\trequest.setAttribute(<span class=\"string\">\"goods\"</span>, goods);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 2.获取所有分类</span></span><br><span class=\"line\">\t\t\tCategoryService categoryService = <span class=\"keyword\">new</span> CategoryService();</span><br><span class=\"line\">\t\t\tList&lt;Category&gt; allCategory = categoryService.findCategory();</span><br><span class=\"line\">\t\t\trequest.setAttribute(<span class=\"string\">\"allCategory\"</span>, allCategory);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 3.转发到JSP页面</span></span><br><span class=\"line\">\t\t\trequest.getRequestDispatcher(<span class=\"string\">\"/admin/edit.jsp\"</span>).forward(request, response);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改edit.jsp</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"item1\"</span>&gt;</span><br><span class=\"line\">        \t&lt;div&gt;</span><br><span class=\"line\">        \t\t&lt;span&gt;所属分类：&lt;/span&gt;</span><br><span class=\"line\">                 &lt;select id=<span class=\"string\">\"categorySel\"</span> name=<span class=\"string\">\"cid\"</span>&gt;</span><br><span class=\"line\">                 \t&lt;c:forEach items=<span class=\"string\">\"$&#123;allCategory &#125;\"</span> <span class=\"keyword\">var</span>=<span class=\"string\">\"category\"</span>&gt;</span><br><span class=\"line\">                 \t &lt;option value=\"$&#123;category.cid &#125;\"&gt;$&#123;category.cname &#125;&lt;/option&gt;</span><br><span class=\"line\">                 \t&lt;/c:forEach&gt;</span><br><span class=\"line\">                 &lt;/select&gt;</span><br><span class=\"line\">                 &amp;nbsp;</span><br><span class=\"line\">        \t&lt;/div&gt;</span><br><span class=\"line\">        \t</span><br><span class=\"line\">        \t&lt;div&gt;</span><br><span class=\"line\">        \t\t&lt;span&gt;是否热门：&lt;/span&gt;</span><br><span class=\"line\">                 &lt;select id=<span class=\"string\">\"isHotSel\"</span> name=<span class=\"string\">\"is_hot\"</span>&gt;</span><br><span class=\"line\">                    &lt;!-- 让value的值等于商品is_hot的option成为选中状态 --&gt;</span><br><span class=\"line\">                    &lt;option value=\"0\"&gt;否&lt;/option&gt;</span><br><span class=\"line\">                    &lt;option value=\"1\"&gt;是&lt;/option&gt;</span><br><span class=\"line\">                 &lt;/select&gt;</span><br><span class=\"line\">        \t&lt;/div&gt;        </span><br><span class=\"line\">                 </span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"item1\"</span>&gt;</span><br><span class=\"line\">                &lt;span&gt;商品图片：&lt;/span&gt;</span><br><span class=\"line\">                &lt;input type=<span class=\"string\">\"file\"</span> name=<span class=\"string\">\"image\"</span> /&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        </span><br><span class=\"line\">        &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"item1 item_desc\"</span>&gt;</span><br><span class=\"line\">            &lt;span&gt;商品描述：&lt;/span&gt;</span><br><span class=\"line\">         &lt;textarea  id=\"desc\" name=\"gdesc\" rows=\"4\" cols=\"50\"&gt;$&#123;goods.gdesc &#125;&lt;/textarea&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        &lt;button class=\"am-btn am-btn-default\" type=\"button\" id=\"edit\"&gt;更新&lt;/button&gt;</span><br><span class=\"line\">        &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class=\"line\">        &lt;button class=\"am-btn am-btn-default\" type=\"button\" id=\"reset\"&gt;重置&lt;/button&gt;</span><br><span class=\"line\">\t\t&lt;/form&gt;</span><br><span class=\"line\">   &lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>创建GoodsEditServlet<br>修改edit.jsp 关联提交表单</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;form action=<span class=\"string\">\"$&#123;ctx &#125;/GoodsEditServlet\"</span> method=<span class=\"string\">\"post\"</span> id=<span class=\"string\">\"edit_form\"</span> style=<span class=\"string\">\"background: none; width: 700px;\"</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>edit.jsp的form表单时提交获取id的技巧</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=<span class=\"string\">\"text\"</span>  name=<span class=\"string\">\"id\"</span> value=<span class=\"string\">\"$&#123;goods.id &#125;\"</span> style=<span class=\"string\">\"display:none\"</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>GoodsEditServlet</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.web;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/GoodsEditServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GoodsEditServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 设置字符集 post</span></span><br><span class=\"line\">\t\trequest.setCharacterEncoding(<span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// System.out.println(\"GoodsEditServlet\");</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.获取所有参数</span></span><br><span class=\"line\">\t\tMap&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 2.封装成Goods对象</span></span><br><span class=\"line\">\t\tGoods goods = <span class=\"keyword\">new</span> Goods();</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tBeanUtils.populate(goods, parameterMap);</span><br><span class=\"line\">\t\t\tSystem.out.println(goods);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 3.根据id更新数据</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 4.调用服务层 更新数据</span></span><br><span class=\"line\">\t\t\tGoodsService goodsService = <span class=\"keyword\">new</span> GoodsService();</span><br><span class=\"line\">\t\t\tgoods.setImage(<span class=\"string\">\"goods_10.png\"</span>);</span><br><span class=\"line\">\t\t\tgoodsService.updateGoods(goods);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 5.跳转mian.jsp</span></span><br><span class=\"line\">\t\t\trequest.getRequestDispatcher(<span class=\"string\">\"GoodsListServlet\"</span>).forward(request, response);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>GoodsService</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateGoods</span><span class=\"params\">(Goods goods)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\tgoodsDao.updateGoods(goods);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>GoodsDao</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 4.修改指定商品</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateGoods</span><span class=\"params\">(Goods goods)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">\tString sql = <span class=\"string\">\"update goods set name=?,price=?,image=? ,gdesc=?,is_hot=?,cid=? where id = ?\"</span>;</span><br><span class=\"line\">\tqr.update(sql,goods.getName(),goods.getPrice(),goods.getImage(),goods.getGdesc(),goods.getIs_hot(),goods.getCid(),goods.getId());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改更新商品页面（读取当前商品的信息）<br>edit.jsp</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">       </span><br><span class=\"line\">\t $(<span class=\"string\">\"#edit\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t        <span class=\"comment\">//让表单提交 GoodsEditServlet</span></span><br><span class=\"line\">\t        <span class=\"comment\">//获取表单  让其提交</span></span><br><span class=\"line\">\t        $(<span class=\"string\">\"#edit_form\"</span>).submit();</span><br><span class=\"line\">\t  &#125;);</span><br><span class=\"line\">\t </span><br><span class=\"line\">\t <span class=\"comment\">//让value的值等于商品is_hot的option成为选中状态</span></span><br><span class=\"line\">\t $(<span class=\"string\">\"#isHotSel option[value=$&#123;goods.is_hot&#125;]\"</span>).prop(<span class=\"string\">\"selected\"</span>,<span class=\"literal\">true</span>);</span><br><span class=\"line\">\t $(<span class=\"string\">\"#categorySel option[value=$&#123;goods.cid&#125;]\"</span>).prop(<span class=\"string\">\"selected\"</span>,<span class=\"literal\">true</span>);</span><br><span class=\"line\">\t </span><br><span class=\"line\">   &#125;);</span><br></pre></td></tr></table></figure>\n<p>外层套一层$(function() 的原因是：等所有标签加载完毕，再去做执行里面的JQuery</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005981003.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级JavaWeb与项目</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"后台管理系统登录\"><a href=\"#后台管理系统登录\" class=\"headerlink\" title=\"后台管理系统登录\"></a>后台管理系统登录</h2><p>JSP凡是action src href都要写绝对路径，需要加上工程名称<br>获取当前项目名</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;pageContext.request.contextPath &#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2020/02/16/web-server-note-13/1.png\" alt=\"三层架构实践\"></p>\n<p>Web层 AdminServlet类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.web;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/AdminServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AdminServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tString name = request.getParameter(<span class=\"string\">\"username\"</span>);</span><br><span class=\"line\">\t\tString pwd = request.getParameter(<span class=\"string\">\"password\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"name:\"</span>+name+<span class=\"string\">\" pwd:\"</span>+pwd);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>新建一个Service层 AdminService类<br>在AdminServlet中调用登录业务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 调用 登录业务</span></span><br><span class=\"line\">AdminService adminService = <span class=\"keyword\">new</span> AdminService();</span><br><span class=\"line\">adminService.login(name,pwd);</span><br></pre></td></tr></table></figure>\n<p>自动创建login方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AdminService</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">login</span><span class=\"params\">(String name, String pwd)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 调用Dao层到数据库查询</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>新建一个DAO层 AdminService类<br>在AdminService中调用Dao层到数据库查询</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 调用Dao层到数据库查询</span></span><br><span class=\"line\">AdminDao adminDao = <span class=\"keyword\">new</span> AdminDao();</span><br><span class=\"line\">adminDao.checkAdmin(name,pwd);</span><br></pre></td></tr></table></figure>\n<p>自动创建checkAdmin方法<br>导入数据库相关Jar包，创建util包，写JdbcUtil，创建db.properties</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.dao;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AdminDao</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Admin <span class=\"title\">checkAdmin</span><span class=\"params\">(String name, String pwd)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 到数据库中查询 返回查询结果</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.连接数据库</span></span><br><span class=\"line\">\t\tQueryRunner qr = <span class=\"keyword\">new</span> QueryRunner(JDBCUtil.getDataSource());</span><br><span class=\"line\">\t\tString sql = <span class=\"string\">\"select * from admin where username= ?and password = ?\"</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 2.获取数据</span></span><br><span class=\"line\">\t\tAdmin admin = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tadmin = qr.query(sql, <span class=\"keyword\">new</span> BeanHandler&lt;Admin&gt;(Admin.class), name, pwd);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> admin;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">抛出异常</span><br><span class=\"line\"></span><br><span class=\"line\">修改AdminService，继续抛出SQLException</span><br><span class=\"line\">```java</span><br><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AdminService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Admin <span class=\"title\">login</span><span class=\"params\">(String name, String pwd)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 调用Dao层到数据库查询</span></span><br><span class=\"line\">\t\tAdminDao adminDao = <span class=\"keyword\">new</span> AdminDao();</span><br><span class=\"line\">\t\tAdmin admin = adminDao.checkAdmin(name,pwd);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (admin != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> admin;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"用户名或密码错误\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改AdminServlet，最终调用者，必须处理异常<br>如果项目修改了重启服务器还是报错，可以尝试Project-Clean 清除缓存</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.web;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/AdminServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AdminServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tString name = request.getParameter(<span class=\"string\">\"username\"</span>);</span><br><span class=\"line\">\t\tString pwd = request.getParameter(<span class=\"string\">\"password\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"name:\"</span>+name+<span class=\"string\">\" pwd:\"</span>+pwd);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 调用 登录业务</span></span><br><span class=\"line\">\t\tAdminService adminService = <span class=\"keyword\">new</span> AdminService();</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tadminService.login(name,pwd);</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"登录成功\"</span>);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"登录失败\"</span>);</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>服务器跳转时，路径相对的是服务器WebContent<br>浏览器请求跳转时，路径相对的当前的JSP<br>这两个是冲突的，所以JSP凡是action src href都要写绝对路径</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"$&#123;pageContext.request.contextPath &#125;/admin/css/style.css\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>对网页进行测试</p>\n<p>登录成功重定向后台首页</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\tString name = request.getParameter(<span class=\"string\">\"username\"</span>);</span><br><span class=\"line\">\tString pwd = request.getParameter(<span class=\"string\">\"password\"</span>);</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"name:\"</span>+name+<span class=\"string\">\" pwd:\"</span>+pwd);</span><br><span class=\"line\">\t<span class=\"comment\">// 调用 登录业务</span></span><br><span class=\"line\">\tAdminService adminService = <span class=\"keyword\">new</span> AdminService();</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tAdmin admin = adminService.login(name,pwd);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"登录成功\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 把用户保存到Session</span></span><br><span class=\"line\">\t\tHttpSession session = request.getSession();</span><br><span class=\"line\">\t\tsession.setAttribute(<span class=\"string\">\"admin\"</span>, admin);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 跳转到后台首页</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 使用重定向，地址栏需要变化</span></span><br><span class=\"line\">\t\tresponse.sendRedirect(request.getContextPath()+<span class=\"string\">\"/admin/admin_index.jsp\"</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (e.getMessage().equals(<span class=\"string\">\"用户名或密码错误\"</span>))&#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"登录失败\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 跳转回登录页面，回显错误信息</span></span><br><span class=\"line\">\t\t\trequest.setAttribute(<span class=\"string\">\"err\"</span>, e.getMessage());</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 转发</span></span><br><span class=\"line\">\t\t\trequest.getRequestDispatcher(<span class=\"string\">\"admin/admin_login.jsp\"</span>).forward(request,response);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为是重定向，所以需要修改admin_index的src为绝对路径<br>重定向：浏览器的跳转，相对JSP路径</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">frameset</span> <span class=\"attr\">rows</span>=<span class=\"string\">\"70,*\"</span> <span class=\"attr\">frameborder</span>=<span class=\"string\">0</span> <span class=\"attr\">border</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">framespacing</span>=<span class=\"string\">\"0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">frame</span> <span class=\"attr\">src</span>=<span class=\"string\">\"$&#123;pageContext.request.contextPath &#125;/admin/top.jsp\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"topFrame\"</span> <span class=\"attr\">scrolling</span>=<span class=\"string\">\"NO\"</span> <span class=\"attr\">noresize</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">frameset</span> <span class=\"attr\">cols</span>=<span class=\"string\">\"250,*\"</span> <span class=\"attr\">frameborder</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">border</span>=<span class=\"string\">\"0\"</span>  <span class=\"attr\">framespacing</span>=<span class=\"string\">\"10\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">frame</span> <span class=\"attr\">src</span>=<span class=\"string\">\"$&#123;pageContext.request.contextPath &#125;/admin/left.jsp\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"leftFrame\"</span>  <span class=\"attr\">scrolling</span>=<span class=\"string\">\"NO\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">frame</span> <span class=\"attr\">src</span>=<span class=\"string\">\"$&#123;pageContext.request.contextPath &#125;/admin/main.jsp\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mainFrame\"</span> &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">frameset</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">frameset</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>修改后天显示的用户名</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"admin_top\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"top_left\"</span>&gt;</span></span><br><span class=\"line\">        码蚁商城</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"h_top_right\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"images/user_icon.png\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 从Session域中取数据 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>$&#123;admin.username &#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"商品管理业务\"><a href=\"#商品管理业务\" class=\"headerlink\" title=\"商品管理业务\"></a>商品管理业务</h2><p><img src=\"/2020/02/16/web-server-note-13/2.png\" alt=\"商品管理业务\"></p>\n<h4 id=\"商品显示\"><a href=\"#商品显示\" class=\"headerlink\" title=\"商品显示\"></a>商品显示</h4><p>DAO层 GoodsDao类<br>暂时不用面向接口，面向接口编程，需求变更，用其他数据库，就只需要变更实现类<br>新建domain</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.domain;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Setter</span><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Goods</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Integer id;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Double price;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String image;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"Goods [id=\"</span> + id + <span class=\"string\">\", name=\"</span> + name + <span class=\"string\">\", price=\"</span> + price + <span class=\"string\">\", image=\"</span> + image + <span class=\"string\">\", getClass()=\"</span></span><br><span class=\"line\">\t\t\t\t+ getClass() + <span class=\"string\">\", hashCode()=\"</span> + hashCode() + <span class=\"string\">\", toString()=\"</span> + <span class=\"keyword\">super</span>.toString() + <span class=\"string\">\"]\"</span>;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>jar包，db.properties,Util包JdbcUtil<br>单元测试initialization Error，无代码无关，单元测试初始化错误，Clean工程就好了<br>写一个方法，就马上测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.dao;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GoodsDao</span> </span>&#123;</span><br><span class=\"line\">\tQueryRunner qr = <span class=\"keyword\">new</span> QueryRunner(JDBCUtil.getDataSource());</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 增删改查</span></span><br><span class=\"line\">\t<span class=\"comment\">// 1.从数据库中获取所有商品</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;Goods&gt; <span class=\"title\">getAllGoods</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">\t\tString sql = <span class=\"string\">\"select * from goods\"</span>;</span><br><span class=\"line\">\t\tList&lt;Goods&gt; allGoods = qr.query(sql, <span class=\"keyword\">new</span> BeanListHandler&lt;Goods&gt;(Goods.class));</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> allGoods;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 2.添加商品到数据</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addGoods</span><span class=\"params\">(Goods goods)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">\t\tString sql = <span class=\"string\">\"insert into goods (name,price,image)value(?,?,?)\"</span>;</span><br><span class=\"line\">\t\tqr.update(sql, goods.getName(), goods.getPrice(), goods.getImage());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 3.根据id删除商品</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delGoods</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">\t\tString sql = <span class=\"string\">\"delete from goods where id = ?\"</span>;</span><br><span class=\"line\">\t\tqr.update(sql, id);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 4.修改指定商品</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateGoods</span><span class=\"params\">(Goods goods)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">\t\tString sql = <span class=\"string\">\"update goods set name=?,price=?,image=? where id = ?\"</span>;</span><br><span class=\"line\">\t\tqr.update(sql,goods.getName(),goods.getPrice(),goods.getImage(),goods.getId());</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GoodsDaoTest</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testGetAllGoods</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">\t\tGoodsDao goodsDao = <span class=\"keyword\">new</span> GoodsDao();</span><br><span class=\"line\">\t\tList&lt;Goods&gt; allGoods = goodsDao.getAllGoods();</span><br><span class=\"line\">\t\tSystem.out.println(allGoods);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testAddGoods</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">\t\tGoodsDao goodsDao = <span class=\"keyword\">new</span> GoodsDao();</span><br><span class=\"line\">\t\tGoods goods = <span class=\"keyword\">new</span> Goods();</span><br><span class=\"line\">\t\tgoods.setName(<span class=\"string\">\"测试\"</span>);</span><br><span class=\"line\">\t\tgoods.setPrice(<span class=\"number\">200.0</span>);</span><br><span class=\"line\">\t\tgoods.setImage(<span class=\"string\">\"goods_10.png\"</span>);</span><br><span class=\"line\">\t\tgoodsDao.addGoods(goods);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testDelGoods</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">\t\tGoodsDao goodsDao = <span class=\"keyword\">new</span> GoodsDao();</span><br><span class=\"line\">\t\tgoodsDao.delGoods(<span class=\"number\">17</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Test</span> </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testUpdateGoods</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">\t\tGoods goods = <span class=\"keyword\">new</span> Goods();</span><br><span class=\"line\">\t\tgoods.setId(<span class=\"number\">17</span>);</span><br><span class=\"line\">\t\tgoods.setName(<span class=\"string\">\"update\"</span>);</span><br><span class=\"line\">\t\tgoods.setPrice(<span class=\"number\">17.0</span>);</span><br><span class=\"line\">\t\tgoods.setImage(<span class=\"string\">\"goods_11.png\"</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tGoodsDao goodsDao = <span class=\"keyword\">new</span> GoodsDao();</span><br><span class=\"line\">\t\tgoodsDao.updateGoods(goods);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Web层 GoodsListServlet类</p>\n<p>创建GoodsListServlet类，写一句输出语句<br>修改admin_index.jsp的mainFrame</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;frame src=<span class=\"string\">\"$&#123;pageContext.request.contextPath &#125;/GoodsListServlet\"</span> name=<span class=\"string\">\"mainFrame\"</span> &gt;</span><br></pre></td></tr></table></figure>\n<p>测试是否跳转到Servlet</p>\n<p>创建Service层 GoodsService类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GoodsService</span> </span>&#123;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在GoodsListServlet中调用服务层</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"GoodsListServlet\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 调用服务层</span></span><br><span class=\"line\">\t\tGoodsService goodsService = <span class=\"keyword\">new</span> GoodsService();</span><br><span class=\"line\">\t\tgoodsService.getAllGoods();</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>自动生成getAllGoods方法，抛出异常</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GoodsService</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;Goods&gt; <span class=\"title\">getAllGoods</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">\t\tGoodsDao goodsDao = <span class=\"keyword\">new</span> GoodsDao();</span><br><span class=\"line\">\t\tList&lt;Goods&gt; allGoods = goodsDao.getAllGoods();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> allGoods;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>继续写Servlet</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"GoodsListServlet\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 调用服务层</span></span><br><span class=\"line\">\t\tGoodsService goodsService = <span class=\"keyword\">new</span> GoodsService();</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tList&lt;Goods&gt; allGoods = goodsService.getAllGoods();</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// System.out.println(allGoods);</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 把数据写到request域</span></span><br><span class=\"line\">\t\t\trequest.setAttribute(<span class=\"string\">\"allGoods\"</span>, allGoods);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 转发</span></span><br><span class=\"line\">\t\t\trequest.getRequestDispatcher(<span class=\"string\">\"admin/main.jsp\"</span>).forward(request, response);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>修改main.jsp的css路径</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%</span><br><span class=\"line\">\tString ctx = request.getContextPath();</span><br><span class=\"line\">\tpageContext.setAttribute(<span class=\"string\">\"ctx\"</span>, ctx);</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;link rel=<span class=\"string\">\"stylesheet\"</span> href=<span class=\"string\">\"$&#123;ctx&#125;/admin/css/style.css\"</span> type=<span class=\"string\">\"text/css\"</span> /&gt;</span><br><span class=\"line\">    &lt;link rel=<span class=\"string\">\"stylesheet\"</span> href=<span class=\"string\">\"$&#123;ctx&#125;/admin/css/amazeui.min.css\"</span> /&gt;</span><br><span class=\"line\">    &lt;link rel=<span class=\"string\">\"stylesheet\"</span> href=<span class=\"string\">\"$&#123;ctx&#125;/admin/css/pageStyle.css\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/head&gt;</span><br></pre></td></tr></table></figure>\n<p>测试网页</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ taglib uri=<span class=\"string\">\"http://java.sun.com/jsp/jstl/core\"</span> prefix=<span class=\"string\">\"c\"</span> %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;c:forEach items=<span class=\"string\">\"$&#123;allGoods &#125;\"</span> <span class=\"keyword\">var</span>=<span class=\"string\">\"goods\"</span> varStatus=<span class=\"string\">\"status\"</span>&gt;</span><br><span class=\"line\">\t\t\t&lt;ul <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"list_goods_ul\"</span>&gt;</span><br><span class=\"line\">\t\t\t\t&lt;!-- status是一个对象<span class=\"keyword\">for</span>循环状态 index就是取当前<span class=\"keyword\">for</span>循环角标 --&gt;</span><br><span class=\"line\">\t\t\t\t&lt;li&gt;$&#123;status.index+1 &#125;&lt;/li&gt;</span><br><span class=\"line\">\t\t\t\t&lt;li&gt;&lt;img src=\"$&#123;ctx &#125;/admin/images/pimages/$&#123;goods.image&#125;\"&gt;&lt;/li&gt;</span><br><span class=\"line\">\t\t\t\t&lt;li&gt;$&#123;goods.name &#125;&lt;/li&gt;</span><br><span class=\"line\">\t\t\t\t&lt;li&gt;$&#123;goods.price &#125;&lt;/li&gt;</span><br><span class=\"line\">\t\t\t\t&lt;li&gt;&lt;a href=<span class=\"string\">\"#\"</span>&gt;&lt;img <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"img_icon\"</span></span><br><span class=\"line\">\t\t\t\t\t\tsrc=\"$&#123;ctx &#125;/admin/images/edit_icon.png\" alt=\"\"&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">\t\t\t\t&lt;li&gt;&lt;a href=<span class=\"string\">\"#\"</span>&gt;&lt;img <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"img_icon\"</span></span><br><span class=\"line\">\t\t\t\t\t\tsrc=\"$&#123;ctx &#125;/admin/images/delete_icon.png\" alt=\"\"&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">\t\t\t&lt;/ul&gt;</span><br><span class=\"line\">\t\t&lt;/c:forEach&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;script src=\"$&#123;ctx &#125;/admin/js/jquery.min.js\"&gt;&lt;/script&gt;</span><br><span class=\"line\">\t&lt;script type=\"text/javascript\" src=\"$&#123;ctx &#125;/admin/js/paging.js\"&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2020/02/16/web-server-note-13/3.png\" alt></p>\n<h2 id=\"删除商品\"><a href=\"#删除商品\" class=\"headerlink\" title=\"删除商品\"></a>删除商品</h2><p>步骤同上</p>\n<p>创建GoodsDelServlet类，测试连通<br>修改jsp的删除按钮的href，修改后可以用Chrome浏览器鼠标悬停，查看连接地址是否正确<br>在Servlet中接受参数，调用服务，服务中调用DAO，删除数据<br>Servlet中转发</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;c:forEach items=<span class=\"string\">\"$&#123;allGoods &#125;\"</span> <span class=\"keyword\">var</span>=<span class=\"string\">\"goods\"</span> varStatus=<span class=\"string\">\"status\"</span>&gt;</span><br><span class=\"line\">\t&lt;ul <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"list_goods_ul\"</span>&gt;</span><br><span class=\"line\">\t\t&lt;!-- status是一个对象<span class=\"keyword\">for</span>循环状态 index就是取当前<span class=\"keyword\">for</span>循环角标 --&gt;</span><br><span class=\"line\">\t\t&lt;li&gt;$&#123;status.index+1 &#125;&lt;/li&gt;</span><br><span class=\"line\">\t\t&lt;li&gt;&lt;img src=\"$&#123;ctx &#125;/admin/images/pimages/$&#123;goods.image&#125;\"&gt;&lt;/li&gt;</span><br><span class=\"line\">\t\t&lt;li&gt;$&#123;goods.name &#125;&lt;/li&gt;</span><br><span class=\"line\">\t\t&lt;li&gt;$&#123;goods.price &#125;&lt;/li&gt;</span><br><span class=\"line\">\t\t&lt;li&gt;&lt;a href=<span class=\"string\">\"\"</span>&gt;&lt;img <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"img_icon\"</span></span><br><span class=\"line\">\t\t\t\tsrc=\"$&#123;ctx &#125;/admin/images/edit_icon.png\" alt=\"\"&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">\t\t&lt;li&gt;&lt;a href=<span class=\"string\">\"$&#123;ctx &#125;/GoodsDelServlet?id=$&#123;goods.id&#125;\"</span>&gt;&lt;img <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"img_icon\"</span></span><br><span class=\"line\">\t\t\t\tsrc=\"$&#123;ctx &#125;/admin/images/delete_icon.png\" alt=\"\"&gt;&lt;/a&gt;&lt;/li&gt;</span><br><span class=\"line\">\t&lt;/ul&gt;</span><br><span class=\"line\">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure>\n\n<p>GoodsDelServlet类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.web;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/GoodsDelServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GoodsDelServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// System.out.println(\"GoodsDelServlet\");</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 1. 接收参数</span></span><br><span class=\"line\">\t\tString id = request.getParameter(<span class=\"string\">\"id\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// System.out.println(id);</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 2. 调用服务层</span></span><br><span class=\"line\">\t\tGoodsService goodsService = <span class=\"keyword\">new</span> GoodsService();</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tgoodsService.deleteGoods(id);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\trequest.getRequestDispatcher(<span class=\"string\">\"GoodsListServlet\"</span>).forward(request, response);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>GoodsService类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GoodsService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tGoodsDao goodsDao = <span class=\"keyword\">new</span> GoodsDao();</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;Goods&gt; <span class=\"title\">getAllGoods</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">\t\tList&lt;Goods&gt; allGoods = goodsDao.getAllGoods();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> allGoods;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteGoods</span><span class=\"params\">(String id)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\tgoodsDao.delGoods(Integer.parseInt(id));</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加商品\"><a href=\"#添加商品\" class=\"headerlink\" title=\"添加商品\"></a>添加商品</h2><p>修改goods表，增加描述、是否热门、cid<br><img src=\"/2020/02/16/web-server-note-13/4.png\" alt=\"数据库\"><br>增加分类表catogory<br><img src=\"/2020/02/16/web-server-note-13/5.png\" alt=\"数据库\"><br>添加数据<br>为goods表的cid做外键约束<br><strong>修改了表JavaBean也要修改</strong>，数据库需要对应<br><strong>对应的插入数据库操作也要更新</strong></p>\n<p><img src=\"/2020/02/16/web-server-note-13/5.png\" alt=\"添加商品\"></p>\n<p>创建GoodsAddUIServlet类<br>创建CategoryService类<br>GoodsAddUIServlet调用CategoryService中的findCategory方法<br>创建CategoryDao类 </p>\n<p>GoodsAddUIServlet类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.web;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/GoodsAddUIServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GoodsAddUIServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.取出所有分类</span></span><br><span class=\"line\">\t\tList&lt;Category&gt; allCategory = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tCategoryService categoryService = <span class=\"keyword\">new</span> CategoryService();</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tallCategory = categoryService.findCategory();</span><br><span class=\"line\">\t\t\tSystem.out.println(allCategory);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 2.把分类存到域中</span></span><br><span class=\"line\">\t\trequest.setAttribute(<span class=\"string\">\"allCategory\"</span>, allCategory);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 3.转发edit.jsp</span></span><br><span class=\"line\">\t\trequest.getRequestDispatcher(<span class=\"string\">\"admin/add.jsp\"</span>).forward(request, response);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>CategoryService类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CategoryService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;Category&gt; <span class=\"title\">findCategory</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\tCategoryDao categoryDao = <span class=\"keyword\">new</span> CategoryDao();</span><br><span class=\"line\">\t\tList&lt;Category&gt; allCategory = categoryDao.getAllCategory();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> allCategory;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>CategoryDao类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.dao;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CategoryDao</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;Category&gt; <span class=\"title\">getAllCategory</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\tQueryRunner qr = <span class=\"keyword\">new</span> QueryRunner(JDBCUtil.getDataSource());</span><br><span class=\"line\">\t\tString sql = <span class=\"string\">\"select * from category\"</span>;</span><br><span class=\"line\">\t\tList&lt;Category&gt; allCategory  = qr.query(sql, <span class=\"keyword\">new</span> BeanListHandler&lt;Category&gt;(Category.class));</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> allCategory;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改add.jsp<br>添加foreach，转发所以需要修改一些路径为绝对路径</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=<span class=\"string\">\"java\"</span> contentType=<span class=\"string\">\"text/html; charset=UTF-8\"</span></span><br><span class=\"line\">    pageEncoding=<span class=\"string\">\"UTF-8\"</span>%&gt;</span><br><span class=\"line\">&lt;%@ taglib uri=<span class=\"string\">\"http://java.sun.com/jsp/jstl/core\"</span> prefix=<span class=\"string\">\"c\"</span> %&gt;</span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">\tString ctx = request.getContextPath();</span><br><span class=\"line\">\tpageContext.setAttribute(<span class=\"string\">\"ctx\"</span>, ctx);</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;link rel=<span class=\"string\">\"stylesheet\"</span> href=<span class=\"string\">\"$&#123;ctx &#125;/admin/css/style.css\"</span> type=<span class=\"string\">\"text/css\"</span> /&gt;</span><br><span class=\"line\">    &lt;link rel=<span class=\"string\">\"stylesheet\"</span> href=<span class=\"string\">\"$&#123;ctx &#125;/admin/css/amazeui.min.css\"</span> /&gt;</span><br><span class=\"line\">        &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"item1\"</span>&gt;</span><br><span class=\"line\">                &lt;span&gt;所属分类：&lt;/span&gt;</span><br><span class=\"line\">                 &lt;select id=<span class=\"string\">\"category_select\"</span>&gt;&amp;nbsp;&amp;nbsp;</span><br><span class=\"line\">                 </span><br><span class=\"line\">                 &lt;c:forEach items=<span class=\"string\">\"$&#123;allCategory &#125;\"</span> <span class=\"keyword\">var</span>=<span class=\"string\">\"category\"</span>&gt;</span><br><span class=\"line\">                 \t&lt;option value=\"$&#123;category.cid &#125;\"&gt;$&#123;category.cname &#125;&lt;/option&gt;</span><br><span class=\"line\">                 &lt;/c:forEach&gt;</span><br><span class=\"line\">                    </span><br><span class=\"line\">                     </span><br><span class=\"line\">                 &lt;/select&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">   </span><br><span class=\"line\">&lt;script src=\"$&#123;ctx &#125;/admin/js/jquery.min.js\"&gt;&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    $(<span class=\"string\">\"#add\"</span>).click(function () &#123;</span><br><span class=\"line\">        $(window).attr(<span class=\"string\">'location'</span>,<span class=\"string\">'main.jsp'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    $(<span class=\"string\">\"#reset\"</span>).click(function () &#123;</span><br><span class=\"line\">       $(window).attr(<span class=\"string\">'location'</span>,<span class=\"string\">'add.jsp'</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>修改main.jsp链接为GoodsAddUIServlet</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;script src=\"$&#123;ctx &#125;/admin/js/jquery.min.js\"&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=\"text/javascript\" src=\"$&#123;ctx &#125;/admin/js/paging.js\"&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\t<span class=\"comment\">//分页</span></span><br><span class=\"line\">\t$(<span class=\"string\">\"#page\"</span>).paging(&#123;</span><br><span class=\"line\">\t\tpageNo : <span class=\"number\">5</span>,</span><br><span class=\"line\">\t\ttotalPage : <span class=\"number\">10</span>,</span><br><span class=\"line\">\t\ttotalSize : <span class=\"number\">300</span>,</span><br><span class=\"line\">\t\tcallback : function(num) &#123;</span><br><span class=\"line\">\t\t\talert(num);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t$(<span class=\"string\">\"#add\"</span>).click(function() &#123;</span><br><span class=\"line\">\t\t$(window).attr(<span class=\"string\">'location'</span>, <span class=\"string\">'$&#123;ctx&#125;/GoodsAddUIServlet'</span>);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>添加商品接收参数<br>创建GoodsAddServlet类<br>修改add.jsp的form表达的各个name属性和表单地址等<br>测试在Servlet获取所有参数的Map，使用BeanUtils封装，测试封装结果<br>调用服务层方法<br>服务处调用DAO<br><strong>字段介绍用desc，desc是数据库关键字，所以开发一般是gdesc</strong><br>修改类名为gdesc修改对应映射</p>\n<p>GoodsAddServlet类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.web;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/GoodsAddServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GoodsAddServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// System.out.println(\"GoodsAddServlet\");</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.获取所有参数</span></span><br><span class=\"line\">\t\trequest.setCharacterEncoding(<span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">\t\tMap&lt;String, String[]&gt; map = request.getParameterMap();</span><br><span class=\"line\">\t\t<span class=\"comment\">// System.out.println(map);</span></span><br><span class=\"line\">\t\tGoods goods = <span class=\"keyword\">new</span> Goods();</span><br><span class=\"line\">\t\tBeanUtils beanUtils = <span class=\"keyword\">new</span> BeanUtils();</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tBeanUtils.populate(goods, map);</span><br><span class=\"line\">\t\t\tgoods.setImage(<span class=\"string\">\"goods_11.png\"</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(goods);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 调用服务层</span></span><br><span class=\"line\">\t\t\tGoodsService goodsService = <span class=\"keyword\">new</span> GoodsService();</span><br><span class=\"line\">\t\t\tgoodsService.addGoods(goods);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 跳转列表 取最新数据</span></span><br><span class=\"line\">\t\t\trequest.getRequestDispatcher(<span class=\"string\">\"GoodsListServlet\"</span>).forward(request, response);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>GoodsService类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GoodsService</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 保护DAO</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> GoodsDao goodsDao = <span class=\"keyword\">new</span> GoodsDao();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;Goods&gt; <span class=\"title\">getAllGoods</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">\t\tList&lt;Goods&gt; allGoods = goodsDao.getAllGoods();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> allGoods;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteGoods</span><span class=\"params\">(String id)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\tgoodsDao.delGoods(Integer.parseInt(id));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addGoods</span><span class=\"params\">(Goods goods)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 调用DAO</span></span><br><span class=\"line\">\t\tgoodsDao.addGoods(goods);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>GoodsDao类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.dao;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GoodsDao</span> </span>&#123;</span><br><span class=\"line\">\tQueryRunner qr = <span class=\"keyword\">new</span> QueryRunner(JDBCUtil.getDataSource());</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 增删改查</span></span><br><span class=\"line\">\t<span class=\"comment\">// 1.从数据库中获取所有商品</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;Goods&gt; <span class=\"title\">getAllGoods</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">\t\tString sql = <span class=\"string\">\"select * from goods\"</span>;</span><br><span class=\"line\">\t\tList&lt;Goods&gt; allGoods = qr.query(sql, <span class=\"keyword\">new</span> BeanListHandler&lt;Goods&gt;(Goods.class));</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> allGoods;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 2.添加商品到数据</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addGoods</span><span class=\"params\">(Goods goods)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">\t\tString sql = <span class=\"string\">\"insert into goods (name,price,image,gdesc,is_hot,cid) value (?,?,?,?,?,?)\"</span>;</span><br><span class=\"line\">\t\tqr.update(sql, goods.getName(), goods.getPrice(), goods.getImage(),goods.getGdesc(),goods.getIs_hot(),goods.getCid());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 3.根据id删除商品</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delGoods</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">\t\tString sql = <span class=\"string\">\"delete from goods where id = ?\"</span>;</span><br><span class=\"line\">\t\tqr.update(sql, id);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 4.修改指定商品</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateGoods</span><span class=\"params\">(Goods goods)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">\t\tString sql = <span class=\"string\">\"update goods set name=?,price=?,image=? where id = ?\"</span>;</span><br><span class=\"line\">\t\tqr.update(sql,goods.getName(),goods.getPrice(),goods.getImage(),goods.getId());</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>add.jsp</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"edit_content\"</span>&gt;</span><br><span class=\"line\">\t\t&lt;form action=<span class=\"string\">\"$&#123;ctx &#125;/GoodsAddServlet\"</span> method=<span class=\"string\">\"post\"</span> id=<span class=\"string\">\"add_form\"</span></span><br><span class=\"line\">\t\t\tstyle=<span class=\"string\">\"background: none; width: 700px\"</span>&gt;</span><br><span class=\"line\">\t\t\t&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"item1\"</span>&gt;</span><br><span class=\"line\">\t\t\t\t&lt;div&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;span&gt;商品名称：&lt;/span&gt; &lt;input type=\"text\" class=\"am-form-field\"</span><br><span class=\"line\">\t\t\t\t\t\tname=<span class=\"string\">\"name\"</span>&gt;&amp;nbsp;&amp;nbsp;</span><br><span class=\"line\">\t\t\t\t&lt;/div&gt;</span><br><span class=\"line\">\t\t\t\t&lt;div&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;span&gt;商品价格：&lt;/span&gt; &lt;input type=\"text\" class=\"am-form-field\" name=\"price\"&gt;</span><br><span class=\"line\">\t\t\t\t&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"item1\"</span>&gt;</span><br><span class=\"line\">\t\t\t\t&lt;span&gt;所属分类：&lt;/span&gt; &lt;select id=\"category_select\" name=\"cid\"&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t&lt;c:forEach items=<span class=\"string\">\"$&#123;allCategory &#125;\"</span> <span class=\"keyword\">var</span>=<span class=\"string\">\"category\"</span>&gt;</span><br><span class=\"line\">\t\t\t\t\t\t&lt;option value=\"$&#123;category.cid &#125;\"&gt;$&#123;category.cname &#125;&lt;/option&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;/c:forEach&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t&lt;/select&gt;</span><br><span class=\"line\">\t\t\t&lt;/div&gt;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t&lt;div&gt;</span><br><span class=\"line\">\t\t\t\t&lt;span&gt;是否热门&lt;/span&gt;</span><br><span class=\"line\">\t\t\t\t&lt;select id=<span class=\"string\">\"category_select\"</span> name=<span class=\"string\">\"is_hot\"</span>&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;option value=\"0\"&gt;否&lt;/option&gt;</span><br><span class=\"line\">\t\t\t\t\t&lt;option value=\"1\"&gt;是&lt;/option&gt;</span><br><span class=\"line\">\t\t\t\t&lt;/select&gt;</span><br><span class=\"line\">\t\t\t&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"item1\"</span>&gt;</span><br><span class=\"line\">\t\t\t\t&lt;span&gt;商品图片：&lt;/span&gt; &lt;input type=\"file\" name=\"image\" id=\"upload\" /&gt;</span><br><span class=\"line\">\t\t\t&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"item1 item_desc\"</span> &gt;</span><br><span class=\"line\">\t\t\t\t&lt;span&gt;商品描述：&lt;/span&gt;</span><br><span class=\"line\">\t\t\t\t&lt;textarea id=\"desc\" name=\"gdesc\" rows=\"4\" cols=\"50\"&gt;&lt;/textarea&gt;</span><br><span class=\"line\">\t\t\t&lt;/div&gt;</span><br><span class=\"line\">\t\t\t&lt;button class=\"am-btn am-btn-default\" type=\"button\" id=\"add\"&gt;添加&lt;/button&gt;</span><br><span class=\"line\">\t\t\t&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class=\"line\">\t\t\t&lt;button class=\"am-btn am-btn-default\" type=\"button\" id=\"reset\"&gt;重置&lt;/button&gt;</span><br><span class=\"line\">\t\t&lt;/form&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script src=\"$&#123;ctx &#125;/admin/js/jquery.min.js\"&gt;&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">\t$(<span class=\"string\">\"#add\"</span>).click(function() &#123;</span><br><span class=\"line\">\t\t$(<span class=\"string\">\"#add_form\"</span>).submit();</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t$(<span class=\"string\">\"#reset\"</span>).click(function() &#123;</span><br><span class=\"line\">\t\t$(window).attr(<span class=\"string\">'location'</span>, <span class=\"string\">'add.jsp'</span>);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h2><p>解决写入数据库乱码问题，编辑db.properties文件</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">url</span>=<span class=\"string\">jdbc:mysql://localhost:3306/mystore?useUnicode=true&amp;characterEncoding=utf-8</span></span><br></pre></td></tr></table></figure>\n<p>反转集合（使得最后添加的显示到最开头）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.web;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/GoodsListServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GoodsListServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"GoodsListServlet\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 调用服务层</span></span><br><span class=\"line\">\t\tGoodsService goodsService = <span class=\"keyword\">new</span> GoodsService();</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tList&lt;Goods&gt; allGoods = goodsService.getAllGoods();</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 反转集合</span></span><br><span class=\"line\">\t\t\tCollections.reverse(allGoods);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// System.out.println(allGoods);</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 把数据写到request域</span></span><br><span class=\"line\">\t\t\trequest.setAttribute(<span class=\"string\">\"allGoods\"</span>, allGoods);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 转发</span></span><br><span class=\"line\">\t\t\trequest.getRequestDispatcher(<span class=\"string\">\"admin/main.jsp\"</span>).forward(request, response);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"编辑商品\"><a href=\"#编辑商品\" class=\"headerlink\" title=\"编辑商品\"></a>编辑商品</h2><p><img src=\"/2020/02/16/web-server-note-13/7.png\" alt></p>\n<p>创建GoodsEditUIServlet</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.web;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/GoodsEditUIServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GoodsEditUIServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"GoodsEditUIServlet\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改main.jsp</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;li&gt;&lt;a href=<span class=\"string\">\"$&#123;ctx &#125;/GoodsEditUIServlet?id=$&#123;goods.id&#125;\"</span>&gt;&lt;img <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"img_icon\"</span></span><br><span class=\"line\">\t\t\t\t\t\tsrc=\"$&#123;ctx &#125;/admin/images/edit_icon.png\" alt=\"\"&gt;&lt;/a&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure>\n<p>用Chrome查看地址是否包含了id参数</p>\n<p>GoodsEditUIServlet</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.web;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/GoodsEditUIServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GoodsEditUIServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 接收id</span></span><br><span class=\"line\">\t\tString id = request.getParameter(<span class=\"string\">\"id\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// System.out.println(\"GoodsEditUIServlet\"+id);</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 1.获取当前商品</span></span><br><span class=\"line\">\t\t\tGoodsService goodsService = <span class=\"keyword\">new</span> GoodsService();</span><br><span class=\"line\">\t\t\tGoods goods = goodsService.getGoodsWithId(id);</span><br><span class=\"line\">\t\t\tSystem.out.println(goods);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 把商品写入request域中</span></span><br><span class=\"line\">\t\t\trequest.setAttribute(<span class=\"string\">\"goods\"</span>, goods);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 2.获取所有分类</span></span><br><span class=\"line\">\t\t\tCategoryService categoryService = <span class=\"keyword\">new</span> CategoryService();</span><br><span class=\"line\">\t\t\tList&lt;Category&gt; allCategory = categoryService.findCategory();</span><br><span class=\"line\">\t\t\trequest.setAttribute(<span class=\"string\">\"allCategory\"</span>, allCategory);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 3.转发到JSP页面</span></span><br><span class=\"line\">\t\t\trequest.getRequestDispatcher(<span class=\"string\">\"/admin/edit.jsp\"</span>).forward(request, response);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改edit.jsp</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"item1\"</span>&gt;</span><br><span class=\"line\">        \t&lt;div&gt;</span><br><span class=\"line\">        \t\t&lt;span&gt;所属分类：&lt;/span&gt;</span><br><span class=\"line\">                 &lt;select id=<span class=\"string\">\"categorySel\"</span> name=<span class=\"string\">\"cid\"</span>&gt;</span><br><span class=\"line\">                 \t&lt;c:forEach items=<span class=\"string\">\"$&#123;allCategory &#125;\"</span> <span class=\"keyword\">var</span>=<span class=\"string\">\"category\"</span>&gt;</span><br><span class=\"line\">                 \t &lt;option value=\"$&#123;category.cid &#125;\"&gt;$&#123;category.cname &#125;&lt;/option&gt;</span><br><span class=\"line\">                 \t&lt;/c:forEach&gt;</span><br><span class=\"line\">                 &lt;/select&gt;</span><br><span class=\"line\">                 &amp;nbsp;</span><br><span class=\"line\">        \t&lt;/div&gt;</span><br><span class=\"line\">        \t</span><br><span class=\"line\">        \t&lt;div&gt;</span><br><span class=\"line\">        \t\t&lt;span&gt;是否热门：&lt;/span&gt;</span><br><span class=\"line\">                 &lt;select id=<span class=\"string\">\"isHotSel\"</span> name=<span class=\"string\">\"is_hot\"</span>&gt;</span><br><span class=\"line\">                    &lt;!-- 让value的值等于商品is_hot的option成为选中状态 --&gt;</span><br><span class=\"line\">                    &lt;option value=\"0\"&gt;否&lt;/option&gt;</span><br><span class=\"line\">                    &lt;option value=\"1\"&gt;是&lt;/option&gt;</span><br><span class=\"line\">                 &lt;/select&gt;</span><br><span class=\"line\">        \t&lt;/div&gt;        </span><br><span class=\"line\">                 </span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"item1\"</span>&gt;</span><br><span class=\"line\">                &lt;span&gt;商品图片：&lt;/span&gt;</span><br><span class=\"line\">                &lt;input type=<span class=\"string\">\"file\"</span> name=<span class=\"string\">\"image\"</span> /&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        </span><br><span class=\"line\">        &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"item1 item_desc\"</span>&gt;</span><br><span class=\"line\">            &lt;span&gt;商品描述：&lt;/span&gt;</span><br><span class=\"line\">         &lt;textarea  id=\"desc\" name=\"gdesc\" rows=\"4\" cols=\"50\"&gt;$&#123;goods.gdesc &#125;&lt;/textarea&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        &lt;button class=\"am-btn am-btn-default\" type=\"button\" id=\"edit\"&gt;更新&lt;/button&gt;</span><br><span class=\"line\">        &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class=\"line\">        &lt;button class=\"am-btn am-btn-default\" type=\"button\" id=\"reset\"&gt;重置&lt;/button&gt;</span><br><span class=\"line\">\t\t&lt;/form&gt;</span><br><span class=\"line\">   &lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p>创建GoodsEditServlet<br>修改edit.jsp 关联提交表单</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;form action=<span class=\"string\">\"$&#123;ctx &#125;/GoodsEditServlet\"</span> method=<span class=\"string\">\"post\"</span> id=<span class=\"string\">\"edit_form\"</span> style=<span class=\"string\">\"background: none; width: 700px;\"</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>edit.jsp的form表单时提交获取id的技巧</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=<span class=\"string\">\"text\"</span>  name=<span class=\"string\">\"id\"</span> value=<span class=\"string\">\"$&#123;goods.id &#125;\"</span> style=<span class=\"string\">\"display:none\"</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<p>GoodsEditServlet</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.web;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/GoodsEditServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GoodsEditServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 设置字符集 post</span></span><br><span class=\"line\">\t\trequest.setCharacterEncoding(<span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// System.out.println(\"GoodsEditServlet\");</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.获取所有参数</span></span><br><span class=\"line\">\t\tMap&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 2.封装成Goods对象</span></span><br><span class=\"line\">\t\tGoods goods = <span class=\"keyword\">new</span> Goods();</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tBeanUtils.populate(goods, parameterMap);</span><br><span class=\"line\">\t\t\tSystem.out.println(goods);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 3.根据id更新数据</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 4.调用服务层 更新数据</span></span><br><span class=\"line\">\t\t\tGoodsService goodsService = <span class=\"keyword\">new</span> GoodsService();</span><br><span class=\"line\">\t\t\tgoods.setImage(<span class=\"string\">\"goods_10.png\"</span>);</span><br><span class=\"line\">\t\t\tgoodsService.updateGoods(goods);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 5.跳转mian.jsp</span></span><br><span class=\"line\">\t\t\trequest.getRequestDispatcher(<span class=\"string\">\"GoodsListServlet\"</span>).forward(request, response);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>GoodsService</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateGoods</span><span class=\"params\">(Goods goods)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\tgoodsDao.updateGoods(goods);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>GoodsDao</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 4.修改指定商品</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateGoods</span><span class=\"params\">(Goods goods)</span> <span class=\"keyword\">throws</span> SQLException </span>&#123;</span><br><span class=\"line\">\tString sql = <span class=\"string\">\"update goods set name=?,price=?,image=? ,gdesc=?,is_hot=?,cid=? where id = ?\"</span>;</span><br><span class=\"line\">\tqr.update(sql,goods.getName(),goods.getPrice(),goods.getImage(),goods.getGdesc(),goods.getIs_hot(),goods.getCid(),goods.getId());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改更新商品页面（读取当前商品的信息）<br>edit.jsp</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">       </span><br><span class=\"line\">\t $(<span class=\"string\">\"#edit\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t        <span class=\"comment\">//让表单提交 GoodsEditServlet</span></span><br><span class=\"line\">\t        <span class=\"comment\">//获取表单  让其提交</span></span><br><span class=\"line\">\t        $(<span class=\"string\">\"#edit_form\"</span>).submit();</span><br><span class=\"line\">\t  &#125;);</span><br><span class=\"line\">\t </span><br><span class=\"line\">\t <span class=\"comment\">//让value的值等于商品is_hot的option成为选中状态</span></span><br><span class=\"line\">\t $(<span class=\"string\">\"#isHotSel option[value=$&#123;goods.is_hot&#125;]\"</span>).prop(<span class=\"string\">\"selected\"</span>,<span class=\"literal\">true</span>);</span><br><span class=\"line\">\t $(<span class=\"string\">\"#categorySel option[value=$&#123;goods.cid&#125;]\"</span>).prop(<span class=\"string\">\"selected\"</span>,<span class=\"literal\">true</span>);</span><br><span class=\"line\">\t </span><br><span class=\"line\">   &#125;);</span><br></pre></td></tr></table></figure>\n<p>外层套一层$(function() 的原因是：等所有标签加载完毕，再去做执行里面的JQuery</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005981003.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级JavaWeb与项目</a></p>\n"},{"title":"Web服务器笔记-代理","date":"2020-02-23T07:31:31.000Z","_content":"\n## 代理设计模式\n当某一个对象发生某一个事件时，通知另一个对象，让另一个对象做某事\n\n代理设计模式步骤\n1. 定义好协议（写接口）\n2. 遵守协议（代理对象实现接口）\n3. 成为代理（创建代理对象并赋值）\n4. 调用代理方法\n\n保姆婴儿案例\n![保姆婴儿案例](web-server-note-16/1.png)\n\n## 监听器\n能监听某个对象的状态变化的组件，监听域对象的变化\n监听器的内部使用的就是代理模式\n\n#### 监听器相关的概念\n事件源：被监听的对象\n- request\n- session\n- servletContext\n监听器：监听事件源的对象\n- 8个监听器\n注册监听器：监听器与事件源相绑定\n响应行为：监听到事件源变化时，去做什么事情\n\n#### 监听器划分\n三个监听域对象的创建与销毁\n- ServletContextListener\n- HttpSessionListener\n- ServletRequestListener\n三个监听域对象当中属性变化\n- ServletContextAttributeListener\n- HttpSessionAttributeListener\n- ServletRequestAttributeListener\t\n\n## 域监听器\n监听器的编写步骤\n1. 编写一个监听器类去实现监听器接口\n2. 覆盖监听器的方法\n3. 需要在web.xml中进行配置\n\n#### ServletContextListener\n监听ServletContext域的创建与销毁的监听\n    \nServletContext域生命周期\n服务器启动创建\n服务器关闭销毁\n\n作用\n初始化的工作：初始化对象 初始化数据  加载数据库驱动  连接池的初始化\n加载一些初始化的配置文件\n任务调度\n\n\nIDEA新建JavaEE工程\n1. 需要配置Tomcat的部署目录\n2. 依赖需要导入Tomcat jar包（第一次需要导入）\n3. 开启注解\n4. 在使用JRebel之前，在Panel中打勾\n```java\npackage com.myxq.listener;\n\npublic class ServletContextListenerTest implements ServletContextListener {\n    @Override\n    public void contextInitialized(ServletContextEvent servletContextEvent) {\n        // 获取当前监听的对象\n        // ServletContext servletContext = servletContextEvent.getServletContext();\n        // 方法2\n        ServletContext servletContext = (ServletContext) servletContextEvent.getSource();\n        System.out.println(\"服务器启动\");\n    }\n\n    @Override\n    public void contextDestroyed(ServletContextEvent servletContextEvent) {\n        System.out.println(\"服务器关闭\");\n    }\n}\n```\nweb.xml \n用copy Reference\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\"\n         version=\"4.0\">\n    <listener>\n        <listener-class>com.myxq.listener.ServletContextListenerTest</listener-class>\n    </listener>\n</web-app>\n```\n\n\n#### HttpSessionListener\n监听HttpSession域的创建与销毁\n\nHttpSession的生命周期\n第一次调用request.getSession时创建\n服务器关闭 Session过期 手动销毁\n\n运用场景\n记录访问人数\n\n```java\npackage com.myxq.listener;\n\npublic class HttpSessionListenerTest implements HttpSessionListener {\n\n    @Override\n    public void sessionCreated(HttpSessionEvent httpSessionEvent) {\n        // 获取监听对象\n        // HttpSession session = httpSessionEvent.getSession();\n        // 方法2\n        HttpSession session = (HttpSession) httpSessionEvent.getSource();\n        System.out.println(\"session created\");\n    }\n\n    @Override\n    public void sessionDestroyed(HttpSessionEvent httpSessionEvent) {\n        System.out.println(\"session destroyed\");\n    }\n}\n```\n\n```xml\n    <listener>\n        <listener-class>com.myxq.listener.HttpSessionListenerTest</listener-class>\n    </listener>\n```\n需要删除默认的index.jsp\n因为page里面有一个session=\"true\"默认情况是true\n一访问index就创建一个Session对象，就不是访问时候创建的Session对象了\n\n```java\npackage com.myxq.servlet;\n\n@WebServlet(\"/TestServlet\")\npublic class TestServlet extends HttpServlet {\n    @Override\n    protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        System.out.println(req.getSession().getId());\n    }\n}\n```\n访问TestServlet进行测试：http://localhost/TestServlet\n浏览器关掉Session对象没有销毁，而是浏览器中保存的session id没了，到服务器发现没有响应的session id，就创建新的session id（会调用sessionCreated方法）\n\nTomcat6 开始默认Session持久化，保存起来，然后启动时候复活\n配置在apache-tomcat-7.0.85\\conf\\context.xml\n```xml\n    <!-- Uncomment this to disable session persistence across Tomcat restarts -->\n    <!--\n    <Manager pathname=\"\" />\n    -->\n```\n放开Manager pathname=\"\" / Tomcat就不会持久化\n\n#### ServletRequestListener\n监听ServletRequest域创建与销毁的监听器\n\nServletRequest的生命周期\n创建：每一次请求都会创建request\n销毁：请求结束\n\n因为请求太频繁，开发中没有实际应用场景\n\n#### ServletContextAttributeListener\n属性发生变化的时候执行对应方法\n也需要添加到配置里\n```java\npackage com.myxq.listener;\n\npublic class AtrributeListenerTest implements ServletContextAttributeListener {\n\n    @Override\n    public void attributeAdded(ServletContextAttributeEvent servletContextAttributeEvent) {\n        System.out.println(\"add:\"+servletContextAttributeEvent.getName());\n        System.out.println(\"add:\"+servletContextAttributeEvent.getValue());\n    }\n\n    @Override\n    public void attributeRemoved(ServletContextAttributeEvent servletContextAttributeEvent) {\n        System.out.println(\"remove:\"+servletContextAttributeEvent.getName());\n        System.out.println(\"remove:\"+servletContextAttributeEvent.getValue());\n    }\n\n    @Override\n    public void attributeReplaced(ServletContextAttributeEvent servletContextAttributeEvent) {\n        System.out.println(\"replace:\"+servletContextAttributeEvent.getName());\n        System.out.println(\"replace:\"+servletContextAttributeEvent.getValue());\n    }\n}\n```\n\n```java\n@WebServlet(\"/TestServlet\")\npublic class TestServlet extends HttpServlet {\n    @Override\n    protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        // System.out.println(req.getSession().getId());\n        // this.getServletContext().setAttribute(\"name1\",\"myxq12\");\n         this.getServletContext().removeAttribute(\"name1\");\n    }\n}\n```\n\n\nHttpSessionAttributeListener\nServletRequestAttributeListener\t\n\n\n## Session中对象存储监听\n一个对象存储到session当中的几种状态\n\n绑定状态\n就一个对象被放到session域中\n\n解绑状态\n就是这个对象从session域中移除了\n\n钝化状态\n是将session内存中的对象持久化（序列化）到磁盘\n\n活化状态\n就是将磁盘上的对象再次恢复到session内存中\n\n## 参考资料\n\n[Java零基础到高级JavaWeb与项目](https://study.163.com/course/introduction/1005981003.htm)","source":"_posts/web-server-note-16.md","raw":"---\ntitle: Web服务器笔记-代理\ncategories: Web服务器笔记\ndate: 2020-02-23 15:31:31\n---\n\n## 代理设计模式\n当某一个对象发生某一个事件时，通知另一个对象，让另一个对象做某事\n\n代理设计模式步骤\n1. 定义好协议（写接口）\n2. 遵守协议（代理对象实现接口）\n3. 成为代理（创建代理对象并赋值）\n4. 调用代理方法\n\n保姆婴儿案例\n![保姆婴儿案例](web-server-note-16/1.png)\n\n## 监听器\n能监听某个对象的状态变化的组件，监听域对象的变化\n监听器的内部使用的就是代理模式\n\n#### 监听器相关的概念\n事件源：被监听的对象\n- request\n- session\n- servletContext\n监听器：监听事件源的对象\n- 8个监听器\n注册监听器：监听器与事件源相绑定\n响应行为：监听到事件源变化时，去做什么事情\n\n#### 监听器划分\n三个监听域对象的创建与销毁\n- ServletContextListener\n- HttpSessionListener\n- ServletRequestListener\n三个监听域对象当中属性变化\n- ServletContextAttributeListener\n- HttpSessionAttributeListener\n- ServletRequestAttributeListener\t\n\n## 域监听器\n监听器的编写步骤\n1. 编写一个监听器类去实现监听器接口\n2. 覆盖监听器的方法\n3. 需要在web.xml中进行配置\n\n#### ServletContextListener\n监听ServletContext域的创建与销毁的监听\n    \nServletContext域生命周期\n服务器启动创建\n服务器关闭销毁\n\n作用\n初始化的工作：初始化对象 初始化数据  加载数据库驱动  连接池的初始化\n加载一些初始化的配置文件\n任务调度\n\n\nIDEA新建JavaEE工程\n1. 需要配置Tomcat的部署目录\n2. 依赖需要导入Tomcat jar包（第一次需要导入）\n3. 开启注解\n4. 在使用JRebel之前，在Panel中打勾\n```java\npackage com.myxq.listener;\n\npublic class ServletContextListenerTest implements ServletContextListener {\n    @Override\n    public void contextInitialized(ServletContextEvent servletContextEvent) {\n        // 获取当前监听的对象\n        // ServletContext servletContext = servletContextEvent.getServletContext();\n        // 方法2\n        ServletContext servletContext = (ServletContext) servletContextEvent.getSource();\n        System.out.println(\"服务器启动\");\n    }\n\n    @Override\n    public void contextDestroyed(ServletContextEvent servletContextEvent) {\n        System.out.println(\"服务器关闭\");\n    }\n}\n```\nweb.xml \n用copy Reference\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\"\n         version=\"4.0\">\n    <listener>\n        <listener-class>com.myxq.listener.ServletContextListenerTest</listener-class>\n    </listener>\n</web-app>\n```\n\n\n#### HttpSessionListener\n监听HttpSession域的创建与销毁\n\nHttpSession的生命周期\n第一次调用request.getSession时创建\n服务器关闭 Session过期 手动销毁\n\n运用场景\n记录访问人数\n\n```java\npackage com.myxq.listener;\n\npublic class HttpSessionListenerTest implements HttpSessionListener {\n\n    @Override\n    public void sessionCreated(HttpSessionEvent httpSessionEvent) {\n        // 获取监听对象\n        // HttpSession session = httpSessionEvent.getSession();\n        // 方法2\n        HttpSession session = (HttpSession) httpSessionEvent.getSource();\n        System.out.println(\"session created\");\n    }\n\n    @Override\n    public void sessionDestroyed(HttpSessionEvent httpSessionEvent) {\n        System.out.println(\"session destroyed\");\n    }\n}\n```\n\n```xml\n    <listener>\n        <listener-class>com.myxq.listener.HttpSessionListenerTest</listener-class>\n    </listener>\n```\n需要删除默认的index.jsp\n因为page里面有一个session=\"true\"默认情况是true\n一访问index就创建一个Session对象，就不是访问时候创建的Session对象了\n\n```java\npackage com.myxq.servlet;\n\n@WebServlet(\"/TestServlet\")\npublic class TestServlet extends HttpServlet {\n    @Override\n    protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        System.out.println(req.getSession().getId());\n    }\n}\n```\n访问TestServlet进行测试：http://localhost/TestServlet\n浏览器关掉Session对象没有销毁，而是浏览器中保存的session id没了，到服务器发现没有响应的session id，就创建新的session id（会调用sessionCreated方法）\n\nTomcat6 开始默认Session持久化，保存起来，然后启动时候复活\n配置在apache-tomcat-7.0.85\\conf\\context.xml\n```xml\n    <!-- Uncomment this to disable session persistence across Tomcat restarts -->\n    <!--\n    <Manager pathname=\"\" />\n    -->\n```\n放开Manager pathname=\"\" / Tomcat就不会持久化\n\n#### ServletRequestListener\n监听ServletRequest域创建与销毁的监听器\n\nServletRequest的生命周期\n创建：每一次请求都会创建request\n销毁：请求结束\n\n因为请求太频繁，开发中没有实际应用场景\n\n#### ServletContextAttributeListener\n属性发生变化的时候执行对应方法\n也需要添加到配置里\n```java\npackage com.myxq.listener;\n\npublic class AtrributeListenerTest implements ServletContextAttributeListener {\n\n    @Override\n    public void attributeAdded(ServletContextAttributeEvent servletContextAttributeEvent) {\n        System.out.println(\"add:\"+servletContextAttributeEvent.getName());\n        System.out.println(\"add:\"+servletContextAttributeEvent.getValue());\n    }\n\n    @Override\n    public void attributeRemoved(ServletContextAttributeEvent servletContextAttributeEvent) {\n        System.out.println(\"remove:\"+servletContextAttributeEvent.getName());\n        System.out.println(\"remove:\"+servletContextAttributeEvent.getValue());\n    }\n\n    @Override\n    public void attributeReplaced(ServletContextAttributeEvent servletContextAttributeEvent) {\n        System.out.println(\"replace:\"+servletContextAttributeEvent.getName());\n        System.out.println(\"replace:\"+servletContextAttributeEvent.getValue());\n    }\n}\n```\n\n```java\n@WebServlet(\"/TestServlet\")\npublic class TestServlet extends HttpServlet {\n    @Override\n    protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        // System.out.println(req.getSession().getId());\n        // this.getServletContext().setAttribute(\"name1\",\"myxq12\");\n         this.getServletContext().removeAttribute(\"name1\");\n    }\n}\n```\n\n\nHttpSessionAttributeListener\nServletRequestAttributeListener\t\n\n\n## Session中对象存储监听\n一个对象存储到session当中的几种状态\n\n绑定状态\n就一个对象被放到session域中\n\n解绑状态\n就是这个对象从session域中移除了\n\n钝化状态\n是将session内存中的对象持久化（序列化）到磁盘\n\n活化状态\n就是将磁盘上的对象再次恢复到session内存中\n\n## 参考资料\n\n[Java零基础到高级JavaWeb与项目](https://study.163.com/course/introduction/1005981003.htm)","slug":"web-server-note-16","published":1,"updated":"2020-06-13T02:55:34.868Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke3x9g6x002bzgvu9470f24u","content":"<h2 id=\"代理设计模式\"><a href=\"#代理设计模式\" class=\"headerlink\" title=\"代理设计模式\"></a>代理设计模式</h2><p>当某一个对象发生某一个事件时，通知另一个对象，让另一个对象做某事</p>\n<p>代理设计模式步骤</p>\n<ol>\n<li>定义好协议（写接口）</li>\n<li>遵守协议（代理对象实现接口）</li>\n<li>成为代理（创建代理对象并赋值）</li>\n<li>调用代理方法</li>\n</ol>\n<p>保姆婴儿案例<br><img src=\"/2020/02/23/web-server-note-16/1.png\" alt=\"保姆婴儿案例\"></p>\n<h2 id=\"监听器\"><a href=\"#监听器\" class=\"headerlink\" title=\"监听器\"></a>监听器</h2><p>能监听某个对象的状态变化的组件，监听域对象的变化<br>监听器的内部使用的就是代理模式</p>\n<h4 id=\"监听器相关的概念\"><a href=\"#监听器相关的概念\" class=\"headerlink\" title=\"监听器相关的概念\"></a>监听器相关的概念</h4><p>事件源：被监听的对象</p>\n<ul>\n<li>request</li>\n<li>session</li>\n<li>servletContext<br>监听器：监听事件源的对象</li>\n<li>8个监听器<br>注册监听器：监听器与事件源相绑定<br>响应行为：监听到事件源变化时，去做什么事情</li>\n</ul>\n<h4 id=\"监听器划分\"><a href=\"#监听器划分\" class=\"headerlink\" title=\"监听器划分\"></a>监听器划分</h4><p>三个监听域对象的创建与销毁</p>\n<ul>\n<li>ServletContextListener</li>\n<li>HttpSessionListener</li>\n<li>ServletRequestListener<br>三个监听域对象当中属性变化</li>\n<li>ServletContextAttributeListener</li>\n<li>HttpSessionAttributeListener</li>\n<li>ServletRequestAttributeListener    </li>\n</ul>\n<h2 id=\"域监听器\"><a href=\"#域监听器\" class=\"headerlink\" title=\"域监听器\"></a>域监听器</h2><p>监听器的编写步骤</p>\n<ol>\n<li>编写一个监听器类去实现监听器接口</li>\n<li>覆盖监听器的方法</li>\n<li>需要在web.xml中进行配置</li>\n</ol>\n<h4 id=\"ServletContextListener\"><a href=\"#ServletContextListener\" class=\"headerlink\" title=\"ServletContextListener\"></a>ServletContextListener</h4><p>监听ServletContext域的创建与销毁的监听</p>\n<p>ServletContext域生命周期<br>服务器启动创建<br>服务器关闭销毁</p>\n<p>作用<br>初始化的工作：初始化对象 初始化数据  加载数据库驱动  连接池的初始化<br>加载一些初始化的配置文件<br>任务调度</p>\n<p>IDEA新建JavaEE工程</p>\n<ol>\n<li>需要配置Tomcat的部署目录</li>\n<li>依赖需要导入Tomcat jar包（第一次需要导入）</li>\n<li>开启注解</li>\n<li>在使用JRebel之前，在Panel中打勾<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.listener;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServletContextListenerTest</span> <span class=\"keyword\">implements</span> <span class=\"title\">ServletContextListener</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextInitialized</span><span class=\"params\">(ServletContextEvent servletContextEvent)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取当前监听的对象</span></span><br><span class=\"line\">        <span class=\"comment\">// ServletContext servletContext = servletContextEvent.getServletContext();</span></span><br><span class=\"line\">        <span class=\"comment\">// 方法2</span></span><br><span class=\"line\">        ServletContext servletContext = (ServletContext) servletContextEvent.getSource();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"服务器启动\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextDestroyed</span><span class=\"params\">(ServletContextEvent servletContextEvent)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"服务器关闭\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\nweb.xml<br>用copy Reference<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://xmlns.jcp.org/xml/ns/javaee\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">version</span>=<span class=\"string\">\"4.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>com.myxq.listener.ServletContextListenerTest<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ol>\n<h4 id=\"HttpSessionListener\"><a href=\"#HttpSessionListener\" class=\"headerlink\" title=\"HttpSessionListener\"></a>HttpSessionListener</h4><p>监听HttpSession域的创建与销毁</p>\n<p>HttpSession的生命周期<br>第一次调用request.getSession时创建<br>服务器关闭 Session过期 手动销毁</p>\n<p>运用场景<br>记录访问人数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.listener;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpSessionListenerTest</span> <span class=\"keyword\">implements</span> <span class=\"title\">HttpSessionListener</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sessionCreated</span><span class=\"params\">(HttpSessionEvent httpSessionEvent)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取监听对象</span></span><br><span class=\"line\">        <span class=\"comment\">// HttpSession session = httpSessionEvent.getSession();</span></span><br><span class=\"line\">        <span class=\"comment\">// 方法2</span></span><br><span class=\"line\">        HttpSession session = (HttpSession) httpSessionEvent.getSource();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"session created\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sessionDestroyed</span><span class=\"params\">(HttpSessionEvent httpSessionEvent)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"session destroyed\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>com.myxq.listener.HttpSessionListenerTest<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>需要删除默认的index.jsp<br>因为page里面有一个session=”true”默认情况是true<br>一访问index就创建一个Session对象，就不是访问时候创建的Session对象了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.servlet;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/TestServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        System.out.println(req.getSession().getId());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>访问TestServlet进行测试：<a href=\"http://localhost/TestServlet\" target=\"_blank\" rel=\"noopener\">http://localhost/TestServlet</a><br>浏览器关掉Session对象没有销毁，而是浏览器中保存的session id没了，到服务器发现没有响应的session id，就创建新的session id（会调用sessionCreated方法）</p>\n<p>Tomcat6 开始默认Session持久化，保存起来，然后启动时候复活<br>配置在apache-tomcat-7.0.85\\conf\\context.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Uncomment this to disable session persistence across Tomcat restarts --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">&lt;Manager pathname=\"\" /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br></pre></td></tr></table></figure>\n<p>放开Manager pathname=”” / Tomcat就不会持久化</p>\n<h4 id=\"ServletRequestListener\"><a href=\"#ServletRequestListener\" class=\"headerlink\" title=\"ServletRequestListener\"></a>ServletRequestListener</h4><p>监听ServletRequest域创建与销毁的监听器</p>\n<p>ServletRequest的生命周期<br>创建：每一次请求都会创建request<br>销毁：请求结束</p>\n<p>因为请求太频繁，开发中没有实际应用场景</p>\n<h4 id=\"ServletContextAttributeListener\"><a href=\"#ServletContextAttributeListener\" class=\"headerlink\" title=\"ServletContextAttributeListener\"></a>ServletContextAttributeListener</h4><p>属性发生变化的时候执行对应方法<br>也需要添加到配置里</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.listener;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AtrributeListenerTest</span> <span class=\"keyword\">implements</span> <span class=\"title\">ServletContextAttributeListener</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">attributeAdded</span><span class=\"params\">(ServletContextAttributeEvent servletContextAttributeEvent)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"add:\"</span>+servletContextAttributeEvent.getName());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"add:\"</span>+servletContextAttributeEvent.getValue());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">attributeRemoved</span><span class=\"params\">(ServletContextAttributeEvent servletContextAttributeEvent)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"remove:\"</span>+servletContextAttributeEvent.getName());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"remove:\"</span>+servletContextAttributeEvent.getValue());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">attributeReplaced</span><span class=\"params\">(ServletContextAttributeEvent servletContextAttributeEvent)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"replace:\"</span>+servletContextAttributeEvent.getName());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"replace:\"</span>+servletContextAttributeEvent.getValue());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/TestServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// System.out.println(req.getSession().getId());</span></span><br><span class=\"line\">        <span class=\"comment\">// this.getServletContext().setAttribute(\"name1\",\"myxq12\");</span></span><br><span class=\"line\">         <span class=\"keyword\">this</span>.getServletContext().removeAttribute(<span class=\"string\">\"name1\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>HttpSessionAttributeListener<br>ServletRequestAttributeListener    </p>\n<h2 id=\"Session中对象存储监听\"><a href=\"#Session中对象存储监听\" class=\"headerlink\" title=\"Session中对象存储监听\"></a>Session中对象存储监听</h2><p>一个对象存储到session当中的几种状态</p>\n<p>绑定状态<br>就一个对象被放到session域中</p>\n<p>解绑状态<br>就是这个对象从session域中移除了</p>\n<p>钝化状态<br>是将session内存中的对象持久化（序列化）到磁盘</p>\n<p>活化状态<br>就是将磁盘上的对象再次恢复到session内存中</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005981003.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级JavaWeb与项目</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"代理设计模式\"><a href=\"#代理设计模式\" class=\"headerlink\" title=\"代理设计模式\"></a>代理设计模式</h2><p>当某一个对象发生某一个事件时，通知另一个对象，让另一个对象做某事</p>\n<p>代理设计模式步骤</p>\n<ol>\n<li>定义好协议（写接口）</li>\n<li>遵守协议（代理对象实现接口）</li>\n<li>成为代理（创建代理对象并赋值）</li>\n<li>调用代理方法</li>\n</ol>\n<p>保姆婴儿案例<br><img src=\"/2020/02/23/web-server-note-16/1.png\" alt=\"保姆婴儿案例\"></p>\n<h2 id=\"监听器\"><a href=\"#监听器\" class=\"headerlink\" title=\"监听器\"></a>监听器</h2><p>能监听某个对象的状态变化的组件，监听域对象的变化<br>监听器的内部使用的就是代理模式</p>\n<h4 id=\"监听器相关的概念\"><a href=\"#监听器相关的概念\" class=\"headerlink\" title=\"监听器相关的概念\"></a>监听器相关的概念</h4><p>事件源：被监听的对象</p>\n<ul>\n<li>request</li>\n<li>session</li>\n<li>servletContext<br>监听器：监听事件源的对象</li>\n<li>8个监听器<br>注册监听器：监听器与事件源相绑定<br>响应行为：监听到事件源变化时，去做什么事情</li>\n</ul>\n<h4 id=\"监听器划分\"><a href=\"#监听器划分\" class=\"headerlink\" title=\"监听器划分\"></a>监听器划分</h4><p>三个监听域对象的创建与销毁</p>\n<ul>\n<li>ServletContextListener</li>\n<li>HttpSessionListener</li>\n<li>ServletRequestListener<br>三个监听域对象当中属性变化</li>\n<li>ServletContextAttributeListener</li>\n<li>HttpSessionAttributeListener</li>\n<li>ServletRequestAttributeListener    </li>\n</ul>\n<h2 id=\"域监听器\"><a href=\"#域监听器\" class=\"headerlink\" title=\"域监听器\"></a>域监听器</h2><p>监听器的编写步骤</p>\n<ol>\n<li>编写一个监听器类去实现监听器接口</li>\n<li>覆盖监听器的方法</li>\n<li>需要在web.xml中进行配置</li>\n</ol>\n<h4 id=\"ServletContextListener\"><a href=\"#ServletContextListener\" class=\"headerlink\" title=\"ServletContextListener\"></a>ServletContextListener</h4><p>监听ServletContext域的创建与销毁的监听</p>\n<p>ServletContext域生命周期<br>服务器启动创建<br>服务器关闭销毁</p>\n<p>作用<br>初始化的工作：初始化对象 初始化数据  加载数据库驱动  连接池的初始化<br>加载一些初始化的配置文件<br>任务调度</p>\n<p>IDEA新建JavaEE工程</p>\n<ol>\n<li>需要配置Tomcat的部署目录</li>\n<li>依赖需要导入Tomcat jar包（第一次需要导入）</li>\n<li>开启注解</li>\n<li>在使用JRebel之前，在Panel中打勾<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.listener;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServletContextListenerTest</span> <span class=\"keyword\">implements</span> <span class=\"title\">ServletContextListener</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextInitialized</span><span class=\"params\">(ServletContextEvent servletContextEvent)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取当前监听的对象</span></span><br><span class=\"line\">        <span class=\"comment\">// ServletContext servletContext = servletContextEvent.getServletContext();</span></span><br><span class=\"line\">        <span class=\"comment\">// 方法2</span></span><br><span class=\"line\">        ServletContext servletContext = (ServletContext) servletContextEvent.getSource();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"服务器启动\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">contextDestroyed</span><span class=\"params\">(ServletContextEvent servletContextEvent)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"服务器关闭\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\nweb.xml<br>用copy Reference<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://xmlns.jcp.org/xml/ns/javaee\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\"</span></span></span><br><span class=\"line\"><span class=\"tag\">         <span class=\"attr\">version</span>=<span class=\"string\">\"4.0\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>com.myxq.listener.ServletContextListenerTest<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ol>\n<h4 id=\"HttpSessionListener\"><a href=\"#HttpSessionListener\" class=\"headerlink\" title=\"HttpSessionListener\"></a>HttpSessionListener</h4><p>监听HttpSession域的创建与销毁</p>\n<p>HttpSession的生命周期<br>第一次调用request.getSession时创建<br>服务器关闭 Session过期 手动销毁</p>\n<p>运用场景<br>记录访问人数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.listener;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpSessionListenerTest</span> <span class=\"keyword\">implements</span> <span class=\"title\">HttpSessionListener</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sessionCreated</span><span class=\"params\">(HttpSessionEvent httpSessionEvent)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取监听对象</span></span><br><span class=\"line\">        <span class=\"comment\">// HttpSession session = httpSessionEvent.getSession();</span></span><br><span class=\"line\">        <span class=\"comment\">// 方法2</span></span><br><span class=\"line\">        HttpSession session = (HttpSession) httpSessionEvent.getSource();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"session created\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sessionDestroyed</span><span class=\"params\">(HttpSessionEvent httpSessionEvent)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"session destroyed\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>com.myxq.listener.HttpSessionListenerTest<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>需要删除默认的index.jsp<br>因为page里面有一个session=”true”默认情况是true<br>一访问index就创建一个Session对象，就不是访问时候创建的Session对象了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.servlet;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/TestServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        System.out.println(req.getSession().getId());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>访问TestServlet进行测试：<a href=\"http://localhost/TestServlet\" target=\"_blank\" rel=\"noopener\">http://localhost/TestServlet</a><br>浏览器关掉Session对象没有销毁，而是浏览器中保存的session id没了，到服务器发现没有响应的session id，就创建新的session id（会调用sessionCreated方法）</p>\n<p>Tomcat6 开始默认Session持久化，保存起来，然后启动时候复活<br>配置在apache-tomcat-7.0.85\\conf\\context.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Uncomment this to disable session persistence across Tomcat restarts --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">&lt;Manager pathname=\"\" /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br></pre></td></tr></table></figure>\n<p>放开Manager pathname=”” / Tomcat就不会持久化</p>\n<h4 id=\"ServletRequestListener\"><a href=\"#ServletRequestListener\" class=\"headerlink\" title=\"ServletRequestListener\"></a>ServletRequestListener</h4><p>监听ServletRequest域创建与销毁的监听器</p>\n<p>ServletRequest的生命周期<br>创建：每一次请求都会创建request<br>销毁：请求结束</p>\n<p>因为请求太频繁，开发中没有实际应用场景</p>\n<h4 id=\"ServletContextAttributeListener\"><a href=\"#ServletContextAttributeListener\" class=\"headerlink\" title=\"ServletContextAttributeListener\"></a>ServletContextAttributeListener</h4><p>属性发生变化的时候执行对应方法<br>也需要添加到配置里</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.myxq.listener;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AtrributeListenerTest</span> <span class=\"keyword\">implements</span> <span class=\"title\">ServletContextAttributeListener</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">attributeAdded</span><span class=\"params\">(ServletContextAttributeEvent servletContextAttributeEvent)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"add:\"</span>+servletContextAttributeEvent.getName());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"add:\"</span>+servletContextAttributeEvent.getValue());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">attributeRemoved</span><span class=\"params\">(ServletContextAttributeEvent servletContextAttributeEvent)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"remove:\"</span>+servletContextAttributeEvent.getName());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"remove:\"</span>+servletContextAttributeEvent.getValue());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">attributeReplaced</span><span class=\"params\">(ServletContextAttributeEvent servletContextAttributeEvent)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"replace:\"</span>+servletContextAttributeEvent.getName());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"replace:\"</span>+servletContextAttributeEvent.getValue());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/TestServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// System.out.println(req.getSession().getId());</span></span><br><span class=\"line\">        <span class=\"comment\">// this.getServletContext().setAttribute(\"name1\",\"myxq12\");</span></span><br><span class=\"line\">         <span class=\"keyword\">this</span>.getServletContext().removeAttribute(<span class=\"string\">\"name1\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>HttpSessionAttributeListener<br>ServletRequestAttributeListener    </p>\n<h2 id=\"Session中对象存储监听\"><a href=\"#Session中对象存储监听\" class=\"headerlink\" title=\"Session中对象存储监听\"></a>Session中对象存储监听</h2><p>一个对象存储到session当中的几种状态</p>\n<p>绑定状态<br>就一个对象被放到session域中</p>\n<p>解绑状态<br>就是这个对象从session域中移除了</p>\n<p>钝化状态<br>是将session内存中的对象持久化（序列化）到磁盘</p>\n<p>活化状态<br>就是将磁盘上的对象再次恢复到session内存中</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005981003.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级JavaWeb与项目</a></p>\n"},{"title":"Web服务器笔记-Tomcat服务器","date":"2020-02-07T05:25:32.000Z","_content":"## Java分类\n\n#### JavaSE\nJava的标准版，一般用来开发桌面应用程序，但是在开发桌面应用程序上相对VB，Delphi，VC++并没有什么优势\n\n#### JavaEE\n也就是Java Enterprise Edition，Java的企业版\n开发JavaWeb应用程序，初级的一般是用JSP(Java Server Pages) + Servlet + Javabean来开发的\n大型的网站一般是使用框架来开发: struts , hibernate , spring , Mybatis\n\n#### JavaME\nJavaME,Java Micro Edition,Java的微型版\n诺基亚手机上运行的Java程序就是指用这个版本开发的程序\n\n## JavaEE规范\nJavaEE的共有13个技术规范\nSun公司定义了这么多标准，其它公司的人都可以来去根据这些标准来做JavaEE程序\n\nJDBC\nJava数据连接，是一种用于执行SQL语句的Java API\n\nJNDI\nJava命名和目录接口\n\nEJB\nEJB是sun的JavaEE服务器端组件模型，设计目标与核心应用是部署分布式应用程序\n\nRMI\n远程方法调用，能够让在某个Java虚拟机上的对象调用本地对象一样的\n调用另一个Java虚拟机中高的对象上的方法\n\nJSP\nJava服务器页面，是一个动态内容模板，实现了Html语法中的Java扩展\n\nServlet\nServlet是一种小型的Java程序，它扩展了Web服务器的功能\n\nXML\n是一种可扩展的标记语言\n\nJMS\n是一个Java平台中关于面向消息中间件（MOM）的API\n用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信\n\nJava IDL\nJava IDL支持的是一个瞬间的CORBA对象，即在对象服务器处理过程中有效\n\nJTS\n子主题 1组件事务监视器，TPM 是一个程序，它代表应用程序协调分布式事务的执行\n\nJTA\nJTA允许应用程序执行分布式事务处理——在两个或多个网络计算机资源上访问并且更新数据\n\nJavaMail\n提供给开发者处理电子邮件相关的编程接口\n\nJAF\nJAF是一个专用的数据处理框架，它用于封装数据，并为应用程序提供访问和操作数据的接口\n\n## 常见JavaWeb应用服务器\nWebLogic\noracle公司的大型收费Web服务器 支持全部JavaEE规范\n\nWebSphere\nIBM公司的大型收费Web服务器 支持全部的JavaEE规范\n\nTomcat\nApache开源组织下的开源免费的中小型的Web应用服务器\n支持JavaEE中的Servlet和JSP规范\n\n\n## Tomcat安装\n企业老项目一般使用Tomcat7\n解压到\n\n##### 目录介绍\nbin\n脚本程序\n可执行的命令\n\nconf\n配置目录\n内部有一个server.xml核心配置文件\n\nlib\n依赖库目录 \n\nlogs\n日志目录\n\ntemps\n临时文件目录\n\nwebapps\nweb应用发布目录\n把开发的项目放到该目录当中运行\n\nwork\ntomcat处理jsp的工作目录\n\n\n#### 启动Tomcat\n1. 进入到解压目录\n2. 找到bin目录\n3. 找到startup.bat双击启动脚本\n\n- 没有配置JAVA_HOME\n\n在启动过程当中如果没有配置JAVA_HOME，就会一闪没了\nJAVA_HOME配置的就是JDK bin的上级目录\n        \n- 端口冲突,默认的端口是8080(两种解决方法)\n\n把占用的端口杀死\nnetstat -aov  查看端口占用情况  记下占用端口的pid\n到任务管理器当中查看任务详细信息，把对应pid给关掉\n\n到config目录当中修改核心配置文件server.xml，修改port\n```xml\n<Connector connectionTimeout=\"20000\" port=\"8080\" protocol=\"HTTP/1.1\" redirectPort=\"8443\"/>\n```\n            \n4. 通过浏览器访问：http://localhost:8080\n看到以下界面\n![Tomcat](web-server-note-2/1.png)\n返回的就是一个页面\n这个页面可以在webapps目录当中的ROOT文件夹当中找到\n5. shutdown.bat停止脚本\n\n## 手动创建项目\n1. 在webapps目录下，新建一个文件夹mytest\n2. 在mytest文件夹里放置html、jsp、js文件\n3. 在mytest内新建WEB-INF目录，在WEB-INF目录内新建：classes目录和lib目录、web.xml文件\n\nclasses目录：Java类字节码文件\nlib目录：Java类运行时需要的jar包\nweb.xml文件：当前整个web应用的核心配置文件，可以到ROOT当中复制一个过来\n![项目目录](web-server-note-2/2.png)\n\nWEB-INF目录下当前的资源不能直接通过浏览器访问，是保护的， 外界不能直接访问\n\n## 使用开发工具构建web工程\n#### 创建工程\n创建一个名为myproject的工程\n![创建项目](web-server-note-2/3.png)\n![选择Tomc目录](web-server-note-2/4.png)\n![选择web module版本](web-server-note-2/5.png)\n3.0不会在WEB_INF 里生成xml文件\n\n#### 切换JavaEE视图\n![切换JavaEE视图](web-server-note-2/6.png)\n\n#### 配置服务器\n在创建项目的时候已经添加好了服务器\n![服务器](web-server-note-2/7.png)\n\n在Servers标签创建Server\n右键-new-Server-选择对应Tomcat版本-下面Next-添加已有的项目-Finish\n也可通过右键已创建的Server-Add and Remove-添加已有项目\n\n双击Server，修改配置\n![修改Server配置](web-server-note-2/9.png)\n设置目录，发布时候就会把WebContent和字节码部署到设置好的目录里（我设置的是D:\\Tomcat\\apache-tomcat-7.0.85\\webapps）\n\n#### 发布项目\n新建index.html文件\n![html网页](web-server-note-2/8.png)\n\n右键项目-run Server 或者 是在Server右键-Start\n1. 将未发布的工程，发布到webapps下面\n2. 启动tomcat（如果用startup.bat打开了Tomcat，要先关闭）\n\n在发布时\n会在Tomcat的webapps目录下创建一个名称myproject的目录\n并且把WebContent当中的所有内容放入到webapps目录下当中的myproject目录中\n不会把写的Java代码给放到webapps当中，运行时，只需要字节码就行了\n\n浏览器访问：http://localhost:8080/myproject/\n就可看到刚才写的index.html\n\n## 优化Tomcat启动速度\n1. 删除webApps里面的自带的项目（保留ROOT，ROOT是默认访问的项目），加快启动速度\n2. 复制ROOT里面的xml的web-app标签，替换当前项目的web-app标签（原因是3.0才支持优化）\n```xml\n<web-app xmlns=\"http://java.sun.com/xml/ns/javaee\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee\n                        http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\n    version=\"3.0\"\n    metadata-complete=\"true\">\n```\n添加上这个标签\n```xml\n<absolute-ordering></absolute-ordering> \n省略写法：<absolute-ordering/>\n```\n扫描的jar包，里面为空，就是不扫描 提升速度\n在ROOT的xml也添加这句\n\n新建工程就可以选3.0，把修改好的web.xml复制到WEB-INF里，修改下display-name标签内容\n\n## Tomcat服务器Context\n添加工程就是在conf/server.xml 中添加Context标签，一个项目就是一个Context\n![Context](web-server-note-2/10.png)\n\ndocBase\nweb应用的文件路径，相对路径，相对的是Server设置的目录\n\npath\nURL入口（网页输入的地址）\n\nreloadable\n字节码变化服务器是否重新加载web应用\n#### tomcat服务器体系结构\n\n1. Server：整个Servlet容器组合，可以包含一个或多个Service标签\n2. service：它由一个或者多个Connector组成，以及一个Engine，负责处理所有Connector所获得的客户请求\n3. Connector：客户端与程序交互组件，负责接收请求以及向客户端返回响应\n4. Engine：处理连接器接收到请求\n5. Host：虚拟主机\n6. Context：一个Context对应于一个Web Application\n\n![服务器体系](web-server-note-2/11.png)\n\n#### 虚拟主机\n1. 输入网址时， 就会先到host文件当中查找有没有对应的IP地址，如何有就直接访问该IP地址\n2. 如果没有，就会到外网去找DNS服务器进行域名与IP地址的解析，查找\n3. **多个域名可以访问同一个IP**\n4. 一个IP对应一台电脑\n\n![虚拟主机](web-server-note-2/12.png)\n\n修改本机host文件(C:\\Windows\\System32\\drivers\\etc)\nWin10不能直接修改，复制到桌面修改，然后覆盖host\n```\n127.0.0.1          m.myxq.com\n```\n原来的server.xml\n```xml\n\t\t\t<Host appBase=\"webapps\" autoDeploy=\"true\" name=\"localhost\"\n\t\t\t\tunpackWARs=\"true\">\n\t\t\t\t<Valve className=\"org.apache.catalina.valves.AccessLogValve\"\n\t\t\t\t\tdirectory=\"logs\" pattern=\"%h %l %u %t &quot;%r&quot; %s %b\"\n\t\t\t\t\tprefix=\"localhost_access_log.\" suffix=\".txt\" />\n\n\t\t\t\t<Context docBase=\"myproject2\" path=\"/myp2\"\n\t\t\t\t\treloadable=\"true\" source=\"org.eclipse.jst.jee.server:myproject2\" />\n\t\t\t\t<Context docBase=\"myproject\" path=\"/myproject\"\n\t\t\t\t\treloadable=\"true\" source=\"org.eclipse.jst.jee.server:myproject\" />\n\t\t\t</Host>\n```\n添加虚拟主机：在Host标签后面再添加一个Host标签\n```xml\n\t\t\t<Host appBase=\"webapps\" autoDeploy=\"true\" name=\"m.myxq.com\"\n\t\t\t\tunpackWARs=\"true\">\n\n\t\t\t\t<Context docBase=\"myproject\" path=\"/myp2\"\n\t\t\t\t\treloadable=\"true\" source=\"org.eclipse.jst.jee.server:myproject\" />\n\t\t\t</Host>\n```\n可以在server.xml修改端口，浏览器默认访问80端口，这样就可以免输入端口\n通过 http://m.myxq.com/myp/ 和 http://localhost/myp/ 访问的项目不同，不同域名映射到同一个IP\n\n## Tomcat插件安装\n1. [下载插件](https://jaist.dl.sourceforge.net/project/tomcatplugin/net.sf.eclipse.tomcat.updatesite-2018-03-08.zip)\n2. 到Eclipse当中找到help->install new software\n3. 进入对话框，点击add然后弹出add Repository  选择下载的插件位置，name随便写,点击确定\n4. 在列表框中选中tomcat-plugin直接点击下一步\n5. 接受许可，然后等待，在eclipse右下角会有安装进度。进度完成时，会弹出要求重新启动eclipse\n\n配置插件与Tomcat关联\n1.windon->preferences\n2.找到tomcat\n3.选择对应版本的服务器\n4.找到tomcat服务器存放的根路径\n\nAtl+t 重启服务器        \n\n## 参考资料\n\n[Java零基础到高级JavaWeb与项目](https://study.163.com/course/introduction/1005981003.htm)\n\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\n","source":"_posts/web-server-note-2.md","raw":"---\ntitle: Web服务器笔记-Tomcat服务器\ncategories: Web服务器笔记\ndate: 2020-02-07 13:25:32\n---\n## Java分类\n\n#### JavaSE\nJava的标准版，一般用来开发桌面应用程序，但是在开发桌面应用程序上相对VB，Delphi，VC++并没有什么优势\n\n#### JavaEE\n也就是Java Enterprise Edition，Java的企业版\n开发JavaWeb应用程序，初级的一般是用JSP(Java Server Pages) + Servlet + Javabean来开发的\n大型的网站一般是使用框架来开发: struts , hibernate , spring , Mybatis\n\n#### JavaME\nJavaME,Java Micro Edition,Java的微型版\n诺基亚手机上运行的Java程序就是指用这个版本开发的程序\n\n## JavaEE规范\nJavaEE的共有13个技术规范\nSun公司定义了这么多标准，其它公司的人都可以来去根据这些标准来做JavaEE程序\n\nJDBC\nJava数据连接，是一种用于执行SQL语句的Java API\n\nJNDI\nJava命名和目录接口\n\nEJB\nEJB是sun的JavaEE服务器端组件模型，设计目标与核心应用是部署分布式应用程序\n\nRMI\n远程方法调用，能够让在某个Java虚拟机上的对象调用本地对象一样的\n调用另一个Java虚拟机中高的对象上的方法\n\nJSP\nJava服务器页面，是一个动态内容模板，实现了Html语法中的Java扩展\n\nServlet\nServlet是一种小型的Java程序，它扩展了Web服务器的功能\n\nXML\n是一种可扩展的标记语言\n\nJMS\n是一个Java平台中关于面向消息中间件（MOM）的API\n用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信\n\nJava IDL\nJava IDL支持的是一个瞬间的CORBA对象，即在对象服务器处理过程中有效\n\nJTS\n子主题 1组件事务监视器，TPM 是一个程序，它代表应用程序协调分布式事务的执行\n\nJTA\nJTA允许应用程序执行分布式事务处理——在两个或多个网络计算机资源上访问并且更新数据\n\nJavaMail\n提供给开发者处理电子邮件相关的编程接口\n\nJAF\nJAF是一个专用的数据处理框架，它用于封装数据，并为应用程序提供访问和操作数据的接口\n\n## 常见JavaWeb应用服务器\nWebLogic\noracle公司的大型收费Web服务器 支持全部JavaEE规范\n\nWebSphere\nIBM公司的大型收费Web服务器 支持全部的JavaEE规范\n\nTomcat\nApache开源组织下的开源免费的中小型的Web应用服务器\n支持JavaEE中的Servlet和JSP规范\n\n\n## Tomcat安装\n企业老项目一般使用Tomcat7\n解压到\n\n##### 目录介绍\nbin\n脚本程序\n可执行的命令\n\nconf\n配置目录\n内部有一个server.xml核心配置文件\n\nlib\n依赖库目录 \n\nlogs\n日志目录\n\ntemps\n临时文件目录\n\nwebapps\nweb应用发布目录\n把开发的项目放到该目录当中运行\n\nwork\ntomcat处理jsp的工作目录\n\n\n#### 启动Tomcat\n1. 进入到解压目录\n2. 找到bin目录\n3. 找到startup.bat双击启动脚本\n\n- 没有配置JAVA_HOME\n\n在启动过程当中如果没有配置JAVA_HOME，就会一闪没了\nJAVA_HOME配置的就是JDK bin的上级目录\n        \n- 端口冲突,默认的端口是8080(两种解决方法)\n\n把占用的端口杀死\nnetstat -aov  查看端口占用情况  记下占用端口的pid\n到任务管理器当中查看任务详细信息，把对应pid给关掉\n\n到config目录当中修改核心配置文件server.xml，修改port\n```xml\n<Connector connectionTimeout=\"20000\" port=\"8080\" protocol=\"HTTP/1.1\" redirectPort=\"8443\"/>\n```\n            \n4. 通过浏览器访问：http://localhost:8080\n看到以下界面\n![Tomcat](web-server-note-2/1.png)\n返回的就是一个页面\n这个页面可以在webapps目录当中的ROOT文件夹当中找到\n5. shutdown.bat停止脚本\n\n## 手动创建项目\n1. 在webapps目录下，新建一个文件夹mytest\n2. 在mytest文件夹里放置html、jsp、js文件\n3. 在mytest内新建WEB-INF目录，在WEB-INF目录内新建：classes目录和lib目录、web.xml文件\n\nclasses目录：Java类字节码文件\nlib目录：Java类运行时需要的jar包\nweb.xml文件：当前整个web应用的核心配置文件，可以到ROOT当中复制一个过来\n![项目目录](web-server-note-2/2.png)\n\nWEB-INF目录下当前的资源不能直接通过浏览器访问，是保护的， 外界不能直接访问\n\n## 使用开发工具构建web工程\n#### 创建工程\n创建一个名为myproject的工程\n![创建项目](web-server-note-2/3.png)\n![选择Tomc目录](web-server-note-2/4.png)\n![选择web module版本](web-server-note-2/5.png)\n3.0不会在WEB_INF 里生成xml文件\n\n#### 切换JavaEE视图\n![切换JavaEE视图](web-server-note-2/6.png)\n\n#### 配置服务器\n在创建项目的时候已经添加好了服务器\n![服务器](web-server-note-2/7.png)\n\n在Servers标签创建Server\n右键-new-Server-选择对应Tomcat版本-下面Next-添加已有的项目-Finish\n也可通过右键已创建的Server-Add and Remove-添加已有项目\n\n双击Server，修改配置\n![修改Server配置](web-server-note-2/9.png)\n设置目录，发布时候就会把WebContent和字节码部署到设置好的目录里（我设置的是D:\\Tomcat\\apache-tomcat-7.0.85\\webapps）\n\n#### 发布项目\n新建index.html文件\n![html网页](web-server-note-2/8.png)\n\n右键项目-run Server 或者 是在Server右键-Start\n1. 将未发布的工程，发布到webapps下面\n2. 启动tomcat（如果用startup.bat打开了Tomcat，要先关闭）\n\n在发布时\n会在Tomcat的webapps目录下创建一个名称myproject的目录\n并且把WebContent当中的所有内容放入到webapps目录下当中的myproject目录中\n不会把写的Java代码给放到webapps当中，运行时，只需要字节码就行了\n\n浏览器访问：http://localhost:8080/myproject/\n就可看到刚才写的index.html\n\n## 优化Tomcat启动速度\n1. 删除webApps里面的自带的项目（保留ROOT，ROOT是默认访问的项目），加快启动速度\n2. 复制ROOT里面的xml的web-app标签，替换当前项目的web-app标签（原因是3.0才支持优化）\n```xml\n<web-app xmlns=\"http://java.sun.com/xml/ns/javaee\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee\n                        http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"\n    version=\"3.0\"\n    metadata-complete=\"true\">\n```\n添加上这个标签\n```xml\n<absolute-ordering></absolute-ordering> \n省略写法：<absolute-ordering/>\n```\n扫描的jar包，里面为空，就是不扫描 提升速度\n在ROOT的xml也添加这句\n\n新建工程就可以选3.0，把修改好的web.xml复制到WEB-INF里，修改下display-name标签内容\n\n## Tomcat服务器Context\n添加工程就是在conf/server.xml 中添加Context标签，一个项目就是一个Context\n![Context](web-server-note-2/10.png)\n\ndocBase\nweb应用的文件路径，相对路径，相对的是Server设置的目录\n\npath\nURL入口（网页输入的地址）\n\nreloadable\n字节码变化服务器是否重新加载web应用\n#### tomcat服务器体系结构\n\n1. Server：整个Servlet容器组合，可以包含一个或多个Service标签\n2. service：它由一个或者多个Connector组成，以及一个Engine，负责处理所有Connector所获得的客户请求\n3. Connector：客户端与程序交互组件，负责接收请求以及向客户端返回响应\n4. Engine：处理连接器接收到请求\n5. Host：虚拟主机\n6. Context：一个Context对应于一个Web Application\n\n![服务器体系](web-server-note-2/11.png)\n\n#### 虚拟主机\n1. 输入网址时， 就会先到host文件当中查找有没有对应的IP地址，如何有就直接访问该IP地址\n2. 如果没有，就会到外网去找DNS服务器进行域名与IP地址的解析，查找\n3. **多个域名可以访问同一个IP**\n4. 一个IP对应一台电脑\n\n![虚拟主机](web-server-note-2/12.png)\n\n修改本机host文件(C:\\Windows\\System32\\drivers\\etc)\nWin10不能直接修改，复制到桌面修改，然后覆盖host\n```\n127.0.0.1          m.myxq.com\n```\n原来的server.xml\n```xml\n\t\t\t<Host appBase=\"webapps\" autoDeploy=\"true\" name=\"localhost\"\n\t\t\t\tunpackWARs=\"true\">\n\t\t\t\t<Valve className=\"org.apache.catalina.valves.AccessLogValve\"\n\t\t\t\t\tdirectory=\"logs\" pattern=\"%h %l %u %t &quot;%r&quot; %s %b\"\n\t\t\t\t\tprefix=\"localhost_access_log.\" suffix=\".txt\" />\n\n\t\t\t\t<Context docBase=\"myproject2\" path=\"/myp2\"\n\t\t\t\t\treloadable=\"true\" source=\"org.eclipse.jst.jee.server:myproject2\" />\n\t\t\t\t<Context docBase=\"myproject\" path=\"/myproject\"\n\t\t\t\t\treloadable=\"true\" source=\"org.eclipse.jst.jee.server:myproject\" />\n\t\t\t</Host>\n```\n添加虚拟主机：在Host标签后面再添加一个Host标签\n```xml\n\t\t\t<Host appBase=\"webapps\" autoDeploy=\"true\" name=\"m.myxq.com\"\n\t\t\t\tunpackWARs=\"true\">\n\n\t\t\t\t<Context docBase=\"myproject\" path=\"/myp2\"\n\t\t\t\t\treloadable=\"true\" source=\"org.eclipse.jst.jee.server:myproject\" />\n\t\t\t</Host>\n```\n可以在server.xml修改端口，浏览器默认访问80端口，这样就可以免输入端口\n通过 http://m.myxq.com/myp/ 和 http://localhost/myp/ 访问的项目不同，不同域名映射到同一个IP\n\n## Tomcat插件安装\n1. [下载插件](https://jaist.dl.sourceforge.net/project/tomcatplugin/net.sf.eclipse.tomcat.updatesite-2018-03-08.zip)\n2. 到Eclipse当中找到help->install new software\n3. 进入对话框，点击add然后弹出add Repository  选择下载的插件位置，name随便写,点击确定\n4. 在列表框中选中tomcat-plugin直接点击下一步\n5. 接受许可，然后等待，在eclipse右下角会有安装进度。进度完成时，会弹出要求重新启动eclipse\n\n配置插件与Tomcat关联\n1.windon->preferences\n2.找到tomcat\n3.选择对应版本的服务器\n4.找到tomcat服务器存放的根路径\n\nAtl+t 重启服务器        \n\n## 参考资料\n\n[Java零基础到高级JavaWeb与项目](https://study.163.com/course/introduction/1005981003.htm)\n\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\n","slug":"web-server-note-2","published":1,"updated":"2020-06-13T02:55:34.878Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke3x9g70002czgvu58pmguio","content":"<h2 id=\"Java分类\"><a href=\"#Java分类\" class=\"headerlink\" title=\"Java分类\"></a>Java分类</h2><h4 id=\"JavaSE\"><a href=\"#JavaSE\" class=\"headerlink\" title=\"JavaSE\"></a>JavaSE</h4><p>Java的标准版，一般用来开发桌面应用程序，但是在开发桌面应用程序上相对VB，Delphi，VC++并没有什么优势</p>\n<h4 id=\"JavaEE\"><a href=\"#JavaEE\" class=\"headerlink\" title=\"JavaEE\"></a>JavaEE</h4><p>也就是Java Enterprise Edition，Java的企业版<br>开发JavaWeb应用程序，初级的一般是用JSP(Java Server Pages) + Servlet + Javabean来开发的<br>大型的网站一般是使用框架来开发: struts , hibernate , spring , Mybatis</p>\n<h4 id=\"JavaME\"><a href=\"#JavaME\" class=\"headerlink\" title=\"JavaME\"></a>JavaME</h4><p>JavaME,Java Micro Edition,Java的微型版<br>诺基亚手机上运行的Java程序就是指用这个版本开发的程序</p>\n<h2 id=\"JavaEE规范\"><a href=\"#JavaEE规范\" class=\"headerlink\" title=\"JavaEE规范\"></a>JavaEE规范</h2><p>JavaEE的共有13个技术规范<br>Sun公司定义了这么多标准，其它公司的人都可以来去根据这些标准来做JavaEE程序</p>\n<p>JDBC<br>Java数据连接，是一种用于执行SQL语句的Java API</p>\n<p>JNDI<br>Java命名和目录接口</p>\n<p>EJB<br>EJB是sun的JavaEE服务器端组件模型，设计目标与核心应用是部署分布式应用程序</p>\n<p>RMI<br>远程方法调用，能够让在某个Java虚拟机上的对象调用本地对象一样的<br>调用另一个Java虚拟机中高的对象上的方法</p>\n<p>JSP<br>Java服务器页面，是一个动态内容模板，实现了Html语法中的Java扩展</p>\n<p>Servlet<br>Servlet是一种小型的Java程序，它扩展了Web服务器的功能</p>\n<p>XML<br>是一种可扩展的标记语言</p>\n<p>JMS<br>是一个Java平台中关于面向消息中间件（MOM）的API<br>用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信</p>\n<p>Java IDL<br>Java IDL支持的是一个瞬间的CORBA对象，即在对象服务器处理过程中有效</p>\n<p>JTS<br>子主题 1组件事务监视器，TPM 是一个程序，它代表应用程序协调分布式事务的执行</p>\n<p>JTA<br>JTA允许应用程序执行分布式事务处理——在两个或多个网络计算机资源上访问并且更新数据</p>\n<p>JavaMail<br>提供给开发者处理电子邮件相关的编程接口</p>\n<p>JAF<br>JAF是一个专用的数据处理框架，它用于封装数据，并为应用程序提供访问和操作数据的接口</p>\n<h2 id=\"常见JavaWeb应用服务器\"><a href=\"#常见JavaWeb应用服务器\" class=\"headerlink\" title=\"常见JavaWeb应用服务器\"></a>常见JavaWeb应用服务器</h2><p>WebLogic<br>oracle公司的大型收费Web服务器 支持全部JavaEE规范</p>\n<p>WebSphere<br>IBM公司的大型收费Web服务器 支持全部的JavaEE规范</p>\n<p>Tomcat<br>Apache开源组织下的开源免费的中小型的Web应用服务器<br>支持JavaEE中的Servlet和JSP规范</p>\n<h2 id=\"Tomcat安装\"><a href=\"#Tomcat安装\" class=\"headerlink\" title=\"Tomcat安装\"></a>Tomcat安装</h2><p>企业老项目一般使用Tomcat7<br>解压到</p>\n<h5 id=\"目录介绍\"><a href=\"#目录介绍\" class=\"headerlink\" title=\"目录介绍\"></a>目录介绍</h5><p>bin<br>脚本程序<br>可执行的命令</p>\n<p>conf<br>配置目录<br>内部有一个server.xml核心配置文件</p>\n<p>lib<br>依赖库目录 </p>\n<p>logs<br>日志目录</p>\n<p>temps<br>临时文件目录</p>\n<p>webapps<br>web应用发布目录<br>把开发的项目放到该目录当中运行</p>\n<p>work<br>tomcat处理jsp的工作目录</p>\n<h4 id=\"启动Tomcat\"><a href=\"#启动Tomcat\" class=\"headerlink\" title=\"启动Tomcat\"></a>启动Tomcat</h4><ol>\n<li>进入到解压目录</li>\n<li>找到bin目录</li>\n<li>找到startup.bat双击启动脚本</li>\n</ol>\n<ul>\n<li>没有配置JAVA_HOME</li>\n</ul>\n<p>在启动过程当中如果没有配置JAVA_HOME，就会一闪没了<br>JAVA_HOME配置的就是JDK bin的上级目录</p>\n<ul>\n<li>端口冲突,默认的端口是8080(两种解决方法)</li>\n</ul>\n<p>把占用的端口杀死<br>netstat -aov  查看端口占用情况  记下占用端口的pid<br>到任务管理器当中查看任务详细信息，把对应pid给关掉</p>\n<p>到config目录当中修改核心配置文件server.xml，修改port</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Connector</span> <span class=\"attr\">connectionTimeout</span>=<span class=\"string\">\"20000\"</span> <span class=\"attr\">port</span>=<span class=\"string\">\"8080\"</span> <span class=\"attr\">protocol</span>=<span class=\"string\">\"HTTP/1.1\"</span> <span class=\"attr\">redirectPort</span>=<span class=\"string\">\"8443\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>通过浏览器访问：<a href=\"http://localhost:8080\" target=\"_blank\" rel=\"noopener\">http://localhost:8080</a><br>看到以下界面<br><img src=\"/2020/02/07/web-server-note-2/1.png\" alt=\"Tomcat\"><br>返回的就是一个页面<br>这个页面可以在webapps目录当中的ROOT文件夹当中找到</li>\n<li>shutdown.bat停止脚本</li>\n</ol>\n<h2 id=\"手动创建项目\"><a href=\"#手动创建项目\" class=\"headerlink\" title=\"手动创建项目\"></a>手动创建项目</h2><ol>\n<li>在webapps目录下，新建一个文件夹mytest</li>\n<li>在mytest文件夹里放置html、jsp、js文件</li>\n<li>在mytest内新建WEB-INF目录，在WEB-INF目录内新建：classes目录和lib目录、web.xml文件</li>\n</ol>\n<p>classes目录：Java类字节码文件<br>lib目录：Java类运行时需要的jar包<br>web.xml文件：当前整个web应用的核心配置文件，可以到ROOT当中复制一个过来<br><img src=\"/2020/02/07/web-server-note-2/2.png\" alt=\"项目目录\"></p>\n<p>WEB-INF目录下当前的资源不能直接通过浏览器访问，是保护的， 外界不能直接访问</p>\n<h2 id=\"使用开发工具构建web工程\"><a href=\"#使用开发工具构建web工程\" class=\"headerlink\" title=\"使用开发工具构建web工程\"></a>使用开发工具构建web工程</h2><h4 id=\"创建工程\"><a href=\"#创建工程\" class=\"headerlink\" title=\"创建工程\"></a>创建工程</h4><p>创建一个名为myproject的工程<br><img src=\"/2020/02/07/web-server-note-2/3.png\" alt=\"创建项目\"><br><img src=\"/2020/02/07/web-server-note-2/4.png\" alt=\"选择Tomc目录\"><br><img src=\"/2020/02/07/web-server-note-2/5.png\" alt=\"选择web module版本\"><br>3.0不会在WEB_INF 里生成xml文件</p>\n<h4 id=\"切换JavaEE视图\"><a href=\"#切换JavaEE视图\" class=\"headerlink\" title=\"切换JavaEE视图\"></a>切换JavaEE视图</h4><p><img src=\"/2020/02/07/web-server-note-2/6.png\" alt=\"切换JavaEE视图\"></p>\n<h4 id=\"配置服务器\"><a href=\"#配置服务器\" class=\"headerlink\" title=\"配置服务器\"></a>配置服务器</h4><p>在创建项目的时候已经添加好了服务器<br><img src=\"/2020/02/07/web-server-note-2/7.png\" alt=\"服务器\"></p>\n<p>在Servers标签创建Server<br>右键-new-Server-选择对应Tomcat版本-下面Next-添加已有的项目-Finish<br>也可通过右键已创建的Server-Add and Remove-添加已有项目</p>\n<p>双击Server，修改配置<br><img src=\"/2020/02/07/web-server-note-2/9.png\" alt=\"修改Server配置\"><br>设置目录，发布时候就会把WebContent和字节码部署到设置好的目录里（我设置的是D:\\Tomcat\\apache-tomcat-7.0.85\\webapps）</p>\n<h4 id=\"发布项目\"><a href=\"#发布项目\" class=\"headerlink\" title=\"发布项目\"></a>发布项目</h4><p>新建index.html文件<br><img src=\"/2020/02/07/web-server-note-2/8.png\" alt=\"html网页\"></p>\n<p>右键项目-run Server 或者 是在Server右键-Start</p>\n<ol>\n<li>将未发布的工程，发布到webapps下面</li>\n<li>启动tomcat（如果用startup.bat打开了Tomcat，要先关闭）</li>\n</ol>\n<p>在发布时<br>会在Tomcat的webapps目录下创建一个名称myproject的目录<br>并且把WebContent当中的所有内容放入到webapps目录下当中的myproject目录中<br>不会把写的Java代码给放到webapps当中，运行时，只需要字节码就行了</p>\n<p>浏览器访问：<a href=\"http://localhost:8080/myproject/\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/myproject/</a><br>就可看到刚才写的index.html</p>\n<h2 id=\"优化Tomcat启动速度\"><a href=\"#优化Tomcat启动速度\" class=\"headerlink\" title=\"优化Tomcat启动速度\"></a>优化Tomcat启动速度</h2><ol>\n<li>删除webApps里面的自带的项目（保留ROOT，ROOT是默认访问的项目），加快启动速度</li>\n<li>复制ROOT里面的xml的web-app标签，替换当前项目的web-app标签（原因是3.0才支持优化）<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://java.sun.com/xml/ns/javaee\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://java.sun.com/xml/ns/javaee</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">                        http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">version</span>=<span class=\"string\">\"3.0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">metadata-complete</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n添加上这个标签<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">absolute-ordering</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">absolute-ordering</span>&gt;</span> </span><br><span class=\"line\">省略写法：<span class=\"tag\">&lt;<span class=\"name\">absolute-ordering</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n扫描的jar包，里面为空，就是不扫描 提升速度<br>在ROOT的xml也添加这句</li>\n</ol>\n<p>新建工程就可以选3.0，把修改好的web.xml复制到WEB-INF里，修改下display-name标签内容</p>\n<h2 id=\"Tomcat服务器Context\"><a href=\"#Tomcat服务器Context\" class=\"headerlink\" title=\"Tomcat服务器Context\"></a>Tomcat服务器Context</h2><p>添加工程就是在conf/server.xml 中添加Context标签，一个项目就是一个Context<br><img src=\"/2020/02/07/web-server-note-2/10.png\" alt=\"Context\"></p>\n<p>docBase<br>web应用的文件路径，相对路径，相对的是Server设置的目录</p>\n<p>path<br>URL入口（网页输入的地址）</p>\n<p>reloadable<br>字节码变化服务器是否重新加载web应用</p>\n<h4 id=\"tomcat服务器体系结构\"><a href=\"#tomcat服务器体系结构\" class=\"headerlink\" title=\"tomcat服务器体系结构\"></a>tomcat服务器体系结构</h4><ol>\n<li>Server：整个Servlet容器组合，可以包含一个或多个Service标签</li>\n<li>service：它由一个或者多个Connector组成，以及一个Engine，负责处理所有Connector所获得的客户请求</li>\n<li>Connector：客户端与程序交互组件，负责接收请求以及向客户端返回响应</li>\n<li>Engine：处理连接器接收到请求</li>\n<li>Host：虚拟主机</li>\n<li>Context：一个Context对应于一个Web Application</li>\n</ol>\n<p><img src=\"/2020/02/07/web-server-note-2/11.png\" alt=\"服务器体系\"></p>\n<h4 id=\"虚拟主机\"><a href=\"#虚拟主机\" class=\"headerlink\" title=\"虚拟主机\"></a>虚拟主机</h4><ol>\n<li>输入网址时， 就会先到host文件当中查找有没有对应的IP地址，如何有就直接访问该IP地址</li>\n<li>如果没有，就会到外网去找DNS服务器进行域名与IP地址的解析，查找</li>\n<li><strong>多个域名可以访问同一个IP</strong></li>\n<li>一个IP对应一台电脑</li>\n</ol>\n<p><img src=\"/2020/02/07/web-server-note-2/12.png\" alt=\"虚拟主机\"></p>\n<p>修改本机host文件(C:\\Windows\\System32\\drivers\\etc)<br>Win10不能直接修改，复制到桌面修改，然后覆盖host</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1          m.myxq.com</span><br></pre></td></tr></table></figure>\n<p>原来的server.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Host</span> <span class=\"attr\">appBase</span>=<span class=\"string\">\"webapps\"</span> <span class=\"attr\">autoDeploy</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"localhost\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">unpackWARs</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">Valve</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.valves.AccessLogValve\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">directory</span>=<span class=\"string\">\"logs\"</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"%h %l %u %t &amp;quot;%r&amp;quot; %s %b\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">prefix</span>=<span class=\"string\">\"localhost_access_log.\"</span> <span class=\"attr\">suffix</span>=<span class=\"string\">\".txt\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">Context</span> <span class=\"attr\">docBase</span>=<span class=\"string\">\"myproject2\"</span> <span class=\"attr\">path</span>=<span class=\"string\">\"/myp2\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">reloadable</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">source</span>=<span class=\"string\">\"org.eclipse.jst.jee.server:myproject2\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">Context</span> <span class=\"attr\">docBase</span>=<span class=\"string\">\"myproject\"</span> <span class=\"attr\">path</span>=<span class=\"string\">\"/myproject\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">reloadable</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">source</span>=<span class=\"string\">\"org.eclipse.jst.jee.server:myproject\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Host</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>添加虚拟主机：在Host标签后面再添加一个Host标签</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Host</span> <span class=\"attr\">appBase</span>=<span class=\"string\">\"webapps\"</span> <span class=\"attr\">autoDeploy</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"m.myxq.com\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">unpackWARs</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">Context</span> <span class=\"attr\">docBase</span>=<span class=\"string\">\"myproject\"</span> <span class=\"attr\">path</span>=<span class=\"string\">\"/myp2\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">reloadable</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">source</span>=<span class=\"string\">\"org.eclipse.jst.jee.server:myproject\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Host</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>可以在server.xml修改端口，浏览器默认访问80端口，这样就可以免输入端口<br>通过 <a href=\"http://m.myxq.com/myp/\" target=\"_blank\" rel=\"noopener\">http://m.myxq.com/myp/</a> 和 <a href=\"http://localhost/myp/\" target=\"_blank\" rel=\"noopener\">http://localhost/myp/</a> 访问的项目不同，不同域名映射到同一个IP</p>\n<h2 id=\"Tomcat插件安装\"><a href=\"#Tomcat插件安装\" class=\"headerlink\" title=\"Tomcat插件安装\"></a>Tomcat插件安装</h2><ol>\n<li><a href=\"https://jaist.dl.sourceforge.net/project/tomcatplugin/net.sf.eclipse.tomcat.updatesite-2018-03-08.zip\" target=\"_blank\" rel=\"noopener\">下载插件</a></li>\n<li>到Eclipse当中找到help-&gt;install new software</li>\n<li>进入对话框，点击add然后弹出add Repository  选择下载的插件位置，name随便写,点击确定</li>\n<li>在列表框中选中tomcat-plugin直接点击下一步</li>\n<li>接受许可，然后等待，在eclipse右下角会有安装进度。进度完成时，会弹出要求重新启动eclipse</li>\n</ol>\n<p>配置插件与Tomcat关联<br>1.windon-&gt;preferences<br>2.找到tomcat<br>3.选择对应版本的服务器<br>4.找到tomcat服务器存放的根路径</p>\n<p>Atl+t 重启服务器        </p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005981003.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级JavaWeb与项目</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Java分类\"><a href=\"#Java分类\" class=\"headerlink\" title=\"Java分类\"></a>Java分类</h2><h4 id=\"JavaSE\"><a href=\"#JavaSE\" class=\"headerlink\" title=\"JavaSE\"></a>JavaSE</h4><p>Java的标准版，一般用来开发桌面应用程序，但是在开发桌面应用程序上相对VB，Delphi，VC++并没有什么优势</p>\n<h4 id=\"JavaEE\"><a href=\"#JavaEE\" class=\"headerlink\" title=\"JavaEE\"></a>JavaEE</h4><p>也就是Java Enterprise Edition，Java的企业版<br>开发JavaWeb应用程序，初级的一般是用JSP(Java Server Pages) + Servlet + Javabean来开发的<br>大型的网站一般是使用框架来开发: struts , hibernate , spring , Mybatis</p>\n<h4 id=\"JavaME\"><a href=\"#JavaME\" class=\"headerlink\" title=\"JavaME\"></a>JavaME</h4><p>JavaME,Java Micro Edition,Java的微型版<br>诺基亚手机上运行的Java程序就是指用这个版本开发的程序</p>\n<h2 id=\"JavaEE规范\"><a href=\"#JavaEE规范\" class=\"headerlink\" title=\"JavaEE规范\"></a>JavaEE规范</h2><p>JavaEE的共有13个技术规范<br>Sun公司定义了这么多标准，其它公司的人都可以来去根据这些标准来做JavaEE程序</p>\n<p>JDBC<br>Java数据连接，是一种用于执行SQL语句的Java API</p>\n<p>JNDI<br>Java命名和目录接口</p>\n<p>EJB<br>EJB是sun的JavaEE服务器端组件模型，设计目标与核心应用是部署分布式应用程序</p>\n<p>RMI<br>远程方法调用，能够让在某个Java虚拟机上的对象调用本地对象一样的<br>调用另一个Java虚拟机中高的对象上的方法</p>\n<p>JSP<br>Java服务器页面，是一个动态内容模板，实现了Html语法中的Java扩展</p>\n<p>Servlet<br>Servlet是一种小型的Java程序，它扩展了Web服务器的功能</p>\n<p>XML<br>是一种可扩展的标记语言</p>\n<p>JMS<br>是一个Java平台中关于面向消息中间件（MOM）的API<br>用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信</p>\n<p>Java IDL<br>Java IDL支持的是一个瞬间的CORBA对象，即在对象服务器处理过程中有效</p>\n<p>JTS<br>子主题 1组件事务监视器，TPM 是一个程序，它代表应用程序协调分布式事务的执行</p>\n<p>JTA<br>JTA允许应用程序执行分布式事务处理——在两个或多个网络计算机资源上访问并且更新数据</p>\n<p>JavaMail<br>提供给开发者处理电子邮件相关的编程接口</p>\n<p>JAF<br>JAF是一个专用的数据处理框架，它用于封装数据，并为应用程序提供访问和操作数据的接口</p>\n<h2 id=\"常见JavaWeb应用服务器\"><a href=\"#常见JavaWeb应用服务器\" class=\"headerlink\" title=\"常见JavaWeb应用服务器\"></a>常见JavaWeb应用服务器</h2><p>WebLogic<br>oracle公司的大型收费Web服务器 支持全部JavaEE规范</p>\n<p>WebSphere<br>IBM公司的大型收费Web服务器 支持全部的JavaEE规范</p>\n<p>Tomcat<br>Apache开源组织下的开源免费的中小型的Web应用服务器<br>支持JavaEE中的Servlet和JSP规范</p>\n<h2 id=\"Tomcat安装\"><a href=\"#Tomcat安装\" class=\"headerlink\" title=\"Tomcat安装\"></a>Tomcat安装</h2><p>企业老项目一般使用Tomcat7<br>解压到</p>\n<h5 id=\"目录介绍\"><a href=\"#目录介绍\" class=\"headerlink\" title=\"目录介绍\"></a>目录介绍</h5><p>bin<br>脚本程序<br>可执行的命令</p>\n<p>conf<br>配置目录<br>内部有一个server.xml核心配置文件</p>\n<p>lib<br>依赖库目录 </p>\n<p>logs<br>日志目录</p>\n<p>temps<br>临时文件目录</p>\n<p>webapps<br>web应用发布目录<br>把开发的项目放到该目录当中运行</p>\n<p>work<br>tomcat处理jsp的工作目录</p>\n<h4 id=\"启动Tomcat\"><a href=\"#启动Tomcat\" class=\"headerlink\" title=\"启动Tomcat\"></a>启动Tomcat</h4><ol>\n<li>进入到解压目录</li>\n<li>找到bin目录</li>\n<li>找到startup.bat双击启动脚本</li>\n</ol>\n<ul>\n<li>没有配置JAVA_HOME</li>\n</ul>\n<p>在启动过程当中如果没有配置JAVA_HOME，就会一闪没了<br>JAVA_HOME配置的就是JDK bin的上级目录</p>\n<ul>\n<li>端口冲突,默认的端口是8080(两种解决方法)</li>\n</ul>\n<p>把占用的端口杀死<br>netstat -aov  查看端口占用情况  记下占用端口的pid<br>到任务管理器当中查看任务详细信息，把对应pid给关掉</p>\n<p>到config目录当中修改核心配置文件server.xml，修改port</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Connector</span> <span class=\"attr\">connectionTimeout</span>=<span class=\"string\">\"20000\"</span> <span class=\"attr\">port</span>=<span class=\"string\">\"8080\"</span> <span class=\"attr\">protocol</span>=<span class=\"string\">\"HTTP/1.1\"</span> <span class=\"attr\">redirectPort</span>=<span class=\"string\">\"8443\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>通过浏览器访问：<a href=\"http://localhost:8080\" target=\"_blank\" rel=\"noopener\">http://localhost:8080</a><br>看到以下界面<br><img src=\"/2020/02/07/web-server-note-2/1.png\" alt=\"Tomcat\"><br>返回的就是一个页面<br>这个页面可以在webapps目录当中的ROOT文件夹当中找到</li>\n<li>shutdown.bat停止脚本</li>\n</ol>\n<h2 id=\"手动创建项目\"><a href=\"#手动创建项目\" class=\"headerlink\" title=\"手动创建项目\"></a>手动创建项目</h2><ol>\n<li>在webapps目录下，新建一个文件夹mytest</li>\n<li>在mytest文件夹里放置html、jsp、js文件</li>\n<li>在mytest内新建WEB-INF目录，在WEB-INF目录内新建：classes目录和lib目录、web.xml文件</li>\n</ol>\n<p>classes目录：Java类字节码文件<br>lib目录：Java类运行时需要的jar包<br>web.xml文件：当前整个web应用的核心配置文件，可以到ROOT当中复制一个过来<br><img src=\"/2020/02/07/web-server-note-2/2.png\" alt=\"项目目录\"></p>\n<p>WEB-INF目录下当前的资源不能直接通过浏览器访问，是保护的， 外界不能直接访问</p>\n<h2 id=\"使用开发工具构建web工程\"><a href=\"#使用开发工具构建web工程\" class=\"headerlink\" title=\"使用开发工具构建web工程\"></a>使用开发工具构建web工程</h2><h4 id=\"创建工程\"><a href=\"#创建工程\" class=\"headerlink\" title=\"创建工程\"></a>创建工程</h4><p>创建一个名为myproject的工程<br><img src=\"/2020/02/07/web-server-note-2/3.png\" alt=\"创建项目\"><br><img src=\"/2020/02/07/web-server-note-2/4.png\" alt=\"选择Tomc目录\"><br><img src=\"/2020/02/07/web-server-note-2/5.png\" alt=\"选择web module版本\"><br>3.0不会在WEB_INF 里生成xml文件</p>\n<h4 id=\"切换JavaEE视图\"><a href=\"#切换JavaEE视图\" class=\"headerlink\" title=\"切换JavaEE视图\"></a>切换JavaEE视图</h4><p><img src=\"/2020/02/07/web-server-note-2/6.png\" alt=\"切换JavaEE视图\"></p>\n<h4 id=\"配置服务器\"><a href=\"#配置服务器\" class=\"headerlink\" title=\"配置服务器\"></a>配置服务器</h4><p>在创建项目的时候已经添加好了服务器<br><img src=\"/2020/02/07/web-server-note-2/7.png\" alt=\"服务器\"></p>\n<p>在Servers标签创建Server<br>右键-new-Server-选择对应Tomcat版本-下面Next-添加已有的项目-Finish<br>也可通过右键已创建的Server-Add and Remove-添加已有项目</p>\n<p>双击Server，修改配置<br><img src=\"/2020/02/07/web-server-note-2/9.png\" alt=\"修改Server配置\"><br>设置目录，发布时候就会把WebContent和字节码部署到设置好的目录里（我设置的是D:\\Tomcat\\apache-tomcat-7.0.85\\webapps）</p>\n<h4 id=\"发布项目\"><a href=\"#发布项目\" class=\"headerlink\" title=\"发布项目\"></a>发布项目</h4><p>新建index.html文件<br><img src=\"/2020/02/07/web-server-note-2/8.png\" alt=\"html网页\"></p>\n<p>右键项目-run Server 或者 是在Server右键-Start</p>\n<ol>\n<li>将未发布的工程，发布到webapps下面</li>\n<li>启动tomcat（如果用startup.bat打开了Tomcat，要先关闭）</li>\n</ol>\n<p>在发布时<br>会在Tomcat的webapps目录下创建一个名称myproject的目录<br>并且把WebContent当中的所有内容放入到webapps目录下当中的myproject目录中<br>不会把写的Java代码给放到webapps当中，运行时，只需要字节码就行了</p>\n<p>浏览器访问：<a href=\"http://localhost:8080/myproject/\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/myproject/</a><br>就可看到刚才写的index.html</p>\n<h2 id=\"优化Tomcat启动速度\"><a href=\"#优化Tomcat启动速度\" class=\"headerlink\" title=\"优化Tomcat启动速度\"></a>优化Tomcat启动速度</h2><ol>\n<li>删除webApps里面的自带的项目（保留ROOT，ROOT是默认访问的项目），加快启动速度</li>\n<li>复制ROOT里面的xml的web-app标签，替换当前项目的web-app标签（原因是3.0才支持优化）<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://java.sun.com/xml/ns/javaee\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://java.sun.com/xml/ns/javaee</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">                        http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">version</span>=<span class=\"string\">\"3.0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">metadata-complete</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n添加上这个标签<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">absolute-ordering</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">absolute-ordering</span>&gt;</span> </span><br><span class=\"line\">省略写法：<span class=\"tag\">&lt;<span class=\"name\">absolute-ordering</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n扫描的jar包，里面为空，就是不扫描 提升速度<br>在ROOT的xml也添加这句</li>\n</ol>\n<p>新建工程就可以选3.0，把修改好的web.xml复制到WEB-INF里，修改下display-name标签内容</p>\n<h2 id=\"Tomcat服务器Context\"><a href=\"#Tomcat服务器Context\" class=\"headerlink\" title=\"Tomcat服务器Context\"></a>Tomcat服务器Context</h2><p>添加工程就是在conf/server.xml 中添加Context标签，一个项目就是一个Context<br><img src=\"/2020/02/07/web-server-note-2/10.png\" alt=\"Context\"></p>\n<p>docBase<br>web应用的文件路径，相对路径，相对的是Server设置的目录</p>\n<p>path<br>URL入口（网页输入的地址）</p>\n<p>reloadable<br>字节码变化服务器是否重新加载web应用</p>\n<h4 id=\"tomcat服务器体系结构\"><a href=\"#tomcat服务器体系结构\" class=\"headerlink\" title=\"tomcat服务器体系结构\"></a>tomcat服务器体系结构</h4><ol>\n<li>Server：整个Servlet容器组合，可以包含一个或多个Service标签</li>\n<li>service：它由一个或者多个Connector组成，以及一个Engine，负责处理所有Connector所获得的客户请求</li>\n<li>Connector：客户端与程序交互组件，负责接收请求以及向客户端返回响应</li>\n<li>Engine：处理连接器接收到请求</li>\n<li>Host：虚拟主机</li>\n<li>Context：一个Context对应于一个Web Application</li>\n</ol>\n<p><img src=\"/2020/02/07/web-server-note-2/11.png\" alt=\"服务器体系\"></p>\n<h4 id=\"虚拟主机\"><a href=\"#虚拟主机\" class=\"headerlink\" title=\"虚拟主机\"></a>虚拟主机</h4><ol>\n<li>输入网址时， 就会先到host文件当中查找有没有对应的IP地址，如何有就直接访问该IP地址</li>\n<li>如果没有，就会到外网去找DNS服务器进行域名与IP地址的解析，查找</li>\n<li><strong>多个域名可以访问同一个IP</strong></li>\n<li>一个IP对应一台电脑</li>\n</ol>\n<p><img src=\"/2020/02/07/web-server-note-2/12.png\" alt=\"虚拟主机\"></p>\n<p>修改本机host文件(C:\\Windows\\System32\\drivers\\etc)<br>Win10不能直接修改，复制到桌面修改，然后覆盖host</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1          m.myxq.com</span><br></pre></td></tr></table></figure>\n<p>原来的server.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Host</span> <span class=\"attr\">appBase</span>=<span class=\"string\">\"webapps\"</span> <span class=\"attr\">autoDeploy</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"localhost\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">unpackWARs</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">Valve</span> <span class=\"attr\">className</span>=<span class=\"string\">\"org.apache.catalina.valves.AccessLogValve\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">directory</span>=<span class=\"string\">\"logs\"</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"%h %l %u %t &amp;quot;%r&amp;quot; %s %b\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">prefix</span>=<span class=\"string\">\"localhost_access_log.\"</span> <span class=\"attr\">suffix</span>=<span class=\"string\">\".txt\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">Context</span> <span class=\"attr\">docBase</span>=<span class=\"string\">\"myproject2\"</span> <span class=\"attr\">path</span>=<span class=\"string\">\"/myp2\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">reloadable</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">source</span>=<span class=\"string\">\"org.eclipse.jst.jee.server:myproject2\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">Context</span> <span class=\"attr\">docBase</span>=<span class=\"string\">\"myproject\"</span> <span class=\"attr\">path</span>=<span class=\"string\">\"/myproject\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">reloadable</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">source</span>=<span class=\"string\">\"org.eclipse.jst.jee.server:myproject\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Host</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>添加虚拟主机：在Host标签后面再添加一个Host标签</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Host</span> <span class=\"attr\">appBase</span>=<span class=\"string\">\"webapps\"</span> <span class=\"attr\">autoDeploy</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"m.myxq.com\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">unpackWARs</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">Context</span> <span class=\"attr\">docBase</span>=<span class=\"string\">\"myproject\"</span> <span class=\"attr\">path</span>=<span class=\"string\">\"/myp2\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">reloadable</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">source</span>=<span class=\"string\">\"org.eclipse.jst.jee.server:myproject\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Host</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>可以在server.xml修改端口，浏览器默认访问80端口，这样就可以免输入端口<br>通过 <a href=\"http://m.myxq.com/myp/\" target=\"_blank\" rel=\"noopener\">http://m.myxq.com/myp/</a> 和 <a href=\"http://localhost/myp/\" target=\"_blank\" rel=\"noopener\">http://localhost/myp/</a> 访问的项目不同，不同域名映射到同一个IP</p>\n<h2 id=\"Tomcat插件安装\"><a href=\"#Tomcat插件安装\" class=\"headerlink\" title=\"Tomcat插件安装\"></a>Tomcat插件安装</h2><ol>\n<li><a href=\"https://jaist.dl.sourceforge.net/project/tomcatplugin/net.sf.eclipse.tomcat.updatesite-2018-03-08.zip\" target=\"_blank\" rel=\"noopener\">下载插件</a></li>\n<li>到Eclipse当中找到help-&gt;install new software</li>\n<li>进入对话框，点击add然后弹出add Repository  选择下载的插件位置，name随便写,点击确定</li>\n<li>在列表框中选中tomcat-plugin直接点击下一步</li>\n<li>接受许可，然后等待，在eclipse右下角会有安装进度。进度完成时，会弹出要求重新启动eclipse</li>\n</ol>\n<p>配置插件与Tomcat关联<br>1.windon-&gt;preferences<br>2.找到tomcat<br>3.选择对应版本的服务器<br>4.找到tomcat服务器存放的根路径</p>\n<p>Atl+t 重启服务器        </p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005981003.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级JavaWeb与项目</a></p>\n"},{"title":"Web服务器笔记-Servlet","date":"2020-02-07T11:03:46.000Z","_content":"## Servlet\nServlet 运行在服务端的Java小程序，是sun公司提供一套规范（接口）\n1. servlet接收响应请求\n2. filter过滤器\n3. listener监听器\n\n用来处理客户端请求、响应给浏览器的动态资源\nservlet的实质就是java代码，通过Java的API动态的向客户端输出内容\n以后写的程序就不在是在本地执行了。而是编译成字节码，放到服务器上来去执行。\n编写程序时， 不需要有main函数了。因为写完后，就把编写的程序编译成字节码，放到服务器上面。当前发送就一个请求的时候，服务器就会按照一定规则调用编写的代码\n\n## Servlet快速入门\n1. 创建一个Web工程\n2. 在JavaResource中src下创建一个包名称为com.myxq.servlet\n3. 在创建的servlet包当中创建一个class文件起名为FirstServlet\n4. 进入该class实现一个Servlet接口，实现它未实现的方法，在service方法中写入一句话输出\n5. 在web.xml当中进行配置\n```xml\n\t<display-name>Servlet</display-name>\n    <!-- 在display-name 标签后添加servlet 和 servlet-mapping配置-->\n\t<servlet>\n\t\t<servlet-name>myxq</servlet-name>\n\t\t<servlet-class>com.it666.servlet.FirstServlet</servlet-class>\n\t</servlet>\n\t<servlet-mapping>\n\t\t<servlet-name>myxq</servlet-name>\n\t\t<url-pattern>/firstServlet</url-pattern>\n\t</servlet-mapping>\n```\n\n```java\npackage com.it666.servlet;\n\npublic class FirstServlet implements Servlet {\n\n\t@Override\n\tpublic void service(ServletRequest req, ServletResponse res) throws ServletException, IOException {\n\t\tSystem.out.println(\"Hello Servlet\");\n\t\tHttpServletResponse r = (HttpServletResponse) res;\n\t\tr.getWriter().write(\"getWriter\");\n\t}\n\t@Override\n\tpublic void destroy() {}\n\n\t@Override\n\tpublic ServletConfig getServletConfig() {\n\t\treturn null;\n\t}\n\n\t@Override\n\tpublic String getServletInfo() {\n\t\treturn null;\n\t}\n\n\t@Override\n\tpublic void init(ServletConfig config) throws ServletException {}\n\n}\n```\n\n执行结果\n![执行结果](web-server-note-3/1.png)\n\n修改url路径\n![修改url路径](web-server-note-3/2.png)\n\n## 反射\n#### 类的加载时机\n当程序要使用某个类时，如果该类还未被加载到内存中，系统会通过加载，连接，初始化三步来实现对这个类进行初始化\n\n- 加载 \n就是指将class文件读入内存，并为之创建一个Class对象。任何类被使用时系统都会建立一个Class对象\n- 连接\n验证 是否有正确的内部结构，并和其他类协调一致\n准备 负责为类的静态成员分配内存，并设置默认初始化值\n- 初始化\n初始化成员变量等等\n\n加载时机\n\n- 创建类的实例\n- 访问类的静态变量，或者为静态变量赋值\n- 调用类的静态方法\n- 初始化某个类的子类\n- 使用反射方式来强制创建某个类或接口对应的java.lang.Class对象\n\n#### 类加载器 classLoader\n负责将.class文件加载到内存中，并为之生成对应的Class对象\n\n类加载器分类\n- 根类加载器\n也被称为引导类加载器，负责Java核心类的加载\n比如System,String等。在JDK中JRE的lib目录下rt.jar文件中\n- 扩展类加载器\n负责JRE的扩展目录中jar包的加载\n在JDK中JRE的lib目录下ext目录\n- 系统类加载器\n负责在JVM启动时加载来自Java命令的class文件\n以及classpath环境变量所指定的jar包和类路径\n\n#### 反射\n创建一个对象的三个阶段\n1. 源文件阶段 .java的文件\n2. 字节码阶段 .class\n3. 创建对象阶段  new  对象名称\n\n内省与反射\n- 内省\n在运行时能够获取JavaBean当中的属性名称和get与set方法\n- 反射\nJAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的**所有属性和方法**\n对于任意一个对象，都能够调用它的任意一个方法和属性\n这种**动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制**\n\n\n获取字节码文件：想要使用反射，就必须得要获取字节码文件\n1. Object类的getClass()方法\n判断两个对象是否是同一个字节码文件\n2. 静态属性class\n当作静态方法的锁对象\n3. Class类中静态方法forName()\n读取配置文件\n\n```java\n// 获取字节码\n// 1.类的全限定名称 ClassNotFoundException\nClass clazz = Class.forName(\"com.it666.reflect.Person\");\n// 2.\nClass clazz2 = Person.class;\n// 3.\nPerson p = new Person();\nClass clazz3 = p.getClass();\n```\n#### 通过字节码创建对象\n``` java\n// 1.通过无参构造创建对象\nPerson p2 = (Person)clazz.newInstance();\n\n// 2.通过有参构造创建对象\n// 获取字节码的构造器：\n// 因为在反射阶段操作的都是字节码，不知道具体的类型，只有在创建对象的时候才去给实际参数\nConstructor c = clazz.getConstructor(String.class, Integer.class);\n// 通过构造器创建对象：调用构造器的newInstance方法并传入参数\nPerson p2 = (Person)c.newInstance(\"al\",20);\n```\n#### 获取字段\n```java\n//获取pubic字段(默认修饰符是不可以的获取到的：NoSuchFieldException)\nField f = clazz.getField(\"name\");\nf.set(p2,\"李白\");\n\n//获取private 字段\nField f2 = clazz.getDeclaredField(\"age\");\n//private 去除私有权限\nf2.setAccessible(true);\nf2.set(p2, 11);\n```\n\n#### 获取方法\n```java\n//获取方法\nMethod m1 = clazz.getMethod(\"show\");\nSystem.out.println(m1.getName());//获取名字 \nm1.invoke(p2);\n\n//获取私有方法\nMethod m2 = clazz.getDeclaredMethod(\"eat\",String.class);\n//去除私有权限\nm2.setAccessible(true);\nm2.invoke(p2, \"米饭\"); \n```\n#### 越过数组泛型检测\n数组如果定义好了泛型就不能添加泛型以外的类型\n可以通过反射来去实现添加以外的类型\n在一个Integer泛型的数组当中添加字符串类型\n\n\t\n\n```java\nArrayList<Integer> list = new ArrayList<Integer>();\nlist.add(20);\n// list.add(\"myxq\");\n// 错误检测是Eclipse做的，运行的时候会做一个泛型擦除，编译成字节码，泛型都没了\n\n// 获取ArrayList的字节码\nClass<?> clazz = Class.forName(\"java.util.ArrayList\"); // <?>  ?代表任意类型\nMethod m = clazz.getMethod(\"add\",Object.class);\nm.invoke(list, \"myxq\"); \nSystem.out.println(list); // [20, myxq]\n\n```\n## Tomcat反射加载Servlet\n模拟实现过程\n新建包com.it666.servlet\n```java\n// 1.创建接口\npublic interface IServlet {\n\tpublic void init();\n}\n\n// 2.创建实现类\npublic class FirstServlet implements IServlet {\n\n\t@Override\n\tpublic void init() {\n\t\tSystem.out.println(\"init...\");\n\t}\n\n}\n// 3.复制web.xml文件，修改servlet-class标签为：com.it666.servlet.FirstServlet\n\n// 4.测试类模拟Tomcat反射加载Servlet\npublic class Test {\n\n\tpublic static void main(String[] args) throws DocumentException, ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, SecurityException, IllegalArgumentException, InvocationTargetException {\n\t\t//加载web.xml 使用dom4j\n\t\t// 1.创建SAXReader\n\t\tSAXReader reader = new SAXReader();\n\t\tDocument doc = reader.read(\"src/web.xml\"); // DocumentException\n\t\t// 获取根元素\n\t\tElement rootElement = doc.getRootElement();\n\t\tSystem.out.println(rootElement);\n\t\t\n\t\tList <Element> list = rootElement.elements(\"servlet\");\n\t\tfor (Element ServEle : list) {\n\t\t\tElement classEle = ServEle.element(\"servlet-class\");\n\t\t\tSystem.out.println(classEle.getText());\n\t\t\t//\n\t\t\tClass clazz = Class.forName(classEle.getText()); // ClassNotFoundException\n\t\t\tObject obj = clazz.newInstance();// InstantiationException\n\t\t\t\n\t\t\tMethod m = clazz.getMethod(\"init\");// NoSuchMethodException\n\t\t\tm.invoke(obj); //IllegalArgumentException\n\t\t\t// 输出：init...\n\t\t}\n\t}\n\n}\n```\n## Servlet生命周期\nServlet什么时候被创建\n1. 默认情况下第一次访问的时候创建\n2. 可以通过配置文件设置服务器启动的时候就创建\n\n- init\nservlet对象创建的时候调用\n默认第一次访问时创建\n- service\n每次请求都会执行一次\n- destroy\nservlet对象销毁的时候执行\n默认服务器关闭时销毁\n- load-on-startup标签\n对象在服务器启动时就创建\n值为数字代表优先级：数据越小，优先级越高，不能为负数\n```xml\n<!--load-on-startup在web.xml的servlet标签中-->\n\t<servlet>\n\t\t<servlet-name>myxq</servlet-name>\n\t\t<servlet-class>com.it666.servlet.FirstServlet</servlet-class>\n\t\t<load-on-startup>3</load-on-startup>\n\t</servlet>\n```\n\n## Servlet访问流程\nServletRequest对象和ServletResponse对象是引擎提前创建好的\n每次请求时调用service方法并把这两个对象传入\n![Servlet访问流程](web-server-note-3/3.png)\n\n## Servlet配置信息\ninit-params标签\n```xml\n\t<servlet>\n\t\t<servlet-name>myxq</servlet-name>\n\t\t<servlet-class>com.it666.servlet.FirstServlet</servlet-class>\n\t\t<load-on-startup>3</load-on-startup>\n\t\t<!-- init-params标签 -->\n\t\t<init-param>\n\t\t\t<param-name>my</param-name>\n\t\t\t<param-value>1234</param-value>\n\t\t</init-param>\n\t</servlet>\n```\n```java\n@Override\npublic void init(ServletConfig config) throws ServletException {\n\t// 1.获取web.xml的Servlet名称\n\tSystem.out.println(config.getServletName());// 获取<servlet-name> 输出：myxq\n\t\n\t// 2.获取一些初始化参数 web.xml\n\tString value = config.getInitParameter(\"my\");\n\tSystem.out.println(value);// 输出：1234\n\t// 3.获取ServletContext\n\tServletContext sc = config.getServletContext();\n}\n```\ninit方法的config参数\n1. 该servlert的配置信息\n2. 获得web.xml当中参数\n3. 初始化参数\n4. 获取servletContext对象\n\nurl-patten\n1. 完全匹配\n2. 目录匹配\n3. 扩展名匹配\n```xml\n<servlet-mapping>\n\t<servlet-name>myxq</servlet-name>\n\t<url-pattern>/firstServlet</url-pattern>\n\t<url-pattern>/aaa/bbb/*</url-pattern>\n\t<url-pattern>*.myxq</url-pattern>\n\n</servlet-mapping>\n```\n\n缺省Servlet\n访问的资源不存在时，就会找缺省的地址\n```xml\n<url-patten>/</url-patten>\n```\n\n全局Web.xml\n对于部署在服务器上的所有应用都有效\n先到自己工程当中找web.xml配置\n再到全局web.xml当中去找配置\n如果两个当中有相同的配置，自己当中配置的内容会生效\n\n静态资源加载过程\n在path后面写的静态资源名称index.html或者是其它的.html它都是会找ur-patten当中有没有匹配的内容\n如果有，就加载对应的servlet，如果没有就到自己配置当中找缺省的url-patten\n如果自己配置文件当中没有缺省的，就会找全局配置缺省的url-patten\n在全局配置当中有一个缺省的url-patten 对应的是default的Servlet\ndefaultServlet内部会到当前访问的工程根目录当中去找对应的名称的静态资源，如果有，就把里面的内容逐行读出。响应给浏览器，如果没有，就会报404错误\n\n欢迎页面 Welcome-file-list\n不写任何资源名称的时候，会访问欢迎页面\n默认从上往下找\n## 使用注解创建Servlet\n包名右键-new-Servlet\n![new Servlet](web-server-note-3/4.png)\n![new Servlet2](web-server-note-3/5.png)\n![new Servlet3](web-server-note-3/6.png)\n\n修改web.xml web-app标签中的 metadata-complete=\"false\"\n该属性为true时，web应用将不会加载注解配置的Web组件\n\n从Servlet3.0开始可以直接使用注解的形式来去使用Servlet\n在创建好的Servlet上面有会有一个@WebServlet(\"/myServlet\")\n这个就是一个注解，就相当于在代码上添加了一个小插件\n贴上这个注解后，就不用再去做配置文件，会在内部自动帮你去做\n括号当中的内容就是url-patten的内容，要在地址栏当中path后面跟的内容\n\n\n## HttpServlet\n直接new的Servlet它是一个HttpServlet\n它是GenericServlet的子类\nGenericServlet实现了Servlet接口\nHttpServlet是专门负责处理http请求与响应的\n以后创建Servlet时，直接使用httpServlet\n\n#### HttpServlet方法\n- service\n每一次发送请求的时候就会调用\n当写了service就会不再调用get或post\n- doGet\n当发送get请求时调用\n- doPost\n当发送post请求的时候调用\n\n#### 内部方法调用过程\n当接收到一个请求时， tomcat就会找对应的service方法\n如果当中servlet当中没有存在service方法，就会到它的父类(HttpServlet)当中去找\n![HttpServlet](web-server-note-3/7.png)\n在父类当中找到service是参数为ServletRequest，会在内部把参数转为httpServlet\n转换完毕后会再继续调用参数为httpServletRequest的service方法\n![HttpServlet2](web-server-note-3/8.png)\n在此方法当中会获取参数的类型，根据不同的参数类型再去调用不同的方法\n\n## 参考资料\n\n[Java零基础到高级JavaWeb与项目](https://study.163.com/course/introduction/1005981003.htm)\n","source":"_posts/web-server-note-3.md","raw":"---\ntitle: Web服务器笔记-Servlet\ncategories: Web服务器笔记\ndate: 2020-02-07 19:03:46\n---\n## Servlet\nServlet 运行在服务端的Java小程序，是sun公司提供一套规范（接口）\n1. servlet接收响应请求\n2. filter过滤器\n3. listener监听器\n\n用来处理客户端请求、响应给浏览器的动态资源\nservlet的实质就是java代码，通过Java的API动态的向客户端输出内容\n以后写的程序就不在是在本地执行了。而是编译成字节码，放到服务器上来去执行。\n编写程序时， 不需要有main函数了。因为写完后，就把编写的程序编译成字节码，放到服务器上面。当前发送就一个请求的时候，服务器就会按照一定规则调用编写的代码\n\n## Servlet快速入门\n1. 创建一个Web工程\n2. 在JavaResource中src下创建一个包名称为com.myxq.servlet\n3. 在创建的servlet包当中创建一个class文件起名为FirstServlet\n4. 进入该class实现一个Servlet接口，实现它未实现的方法，在service方法中写入一句话输出\n5. 在web.xml当中进行配置\n```xml\n\t<display-name>Servlet</display-name>\n    <!-- 在display-name 标签后添加servlet 和 servlet-mapping配置-->\n\t<servlet>\n\t\t<servlet-name>myxq</servlet-name>\n\t\t<servlet-class>com.it666.servlet.FirstServlet</servlet-class>\n\t</servlet>\n\t<servlet-mapping>\n\t\t<servlet-name>myxq</servlet-name>\n\t\t<url-pattern>/firstServlet</url-pattern>\n\t</servlet-mapping>\n```\n\n```java\npackage com.it666.servlet;\n\npublic class FirstServlet implements Servlet {\n\n\t@Override\n\tpublic void service(ServletRequest req, ServletResponse res) throws ServletException, IOException {\n\t\tSystem.out.println(\"Hello Servlet\");\n\t\tHttpServletResponse r = (HttpServletResponse) res;\n\t\tr.getWriter().write(\"getWriter\");\n\t}\n\t@Override\n\tpublic void destroy() {}\n\n\t@Override\n\tpublic ServletConfig getServletConfig() {\n\t\treturn null;\n\t}\n\n\t@Override\n\tpublic String getServletInfo() {\n\t\treturn null;\n\t}\n\n\t@Override\n\tpublic void init(ServletConfig config) throws ServletException {}\n\n}\n```\n\n执行结果\n![执行结果](web-server-note-3/1.png)\n\n修改url路径\n![修改url路径](web-server-note-3/2.png)\n\n## 反射\n#### 类的加载时机\n当程序要使用某个类时，如果该类还未被加载到内存中，系统会通过加载，连接，初始化三步来实现对这个类进行初始化\n\n- 加载 \n就是指将class文件读入内存，并为之创建一个Class对象。任何类被使用时系统都会建立一个Class对象\n- 连接\n验证 是否有正确的内部结构，并和其他类协调一致\n准备 负责为类的静态成员分配内存，并设置默认初始化值\n- 初始化\n初始化成员变量等等\n\n加载时机\n\n- 创建类的实例\n- 访问类的静态变量，或者为静态变量赋值\n- 调用类的静态方法\n- 初始化某个类的子类\n- 使用反射方式来强制创建某个类或接口对应的java.lang.Class对象\n\n#### 类加载器 classLoader\n负责将.class文件加载到内存中，并为之生成对应的Class对象\n\n类加载器分类\n- 根类加载器\n也被称为引导类加载器，负责Java核心类的加载\n比如System,String等。在JDK中JRE的lib目录下rt.jar文件中\n- 扩展类加载器\n负责JRE的扩展目录中jar包的加载\n在JDK中JRE的lib目录下ext目录\n- 系统类加载器\n负责在JVM启动时加载来自Java命令的class文件\n以及classpath环境变量所指定的jar包和类路径\n\n#### 反射\n创建一个对象的三个阶段\n1. 源文件阶段 .java的文件\n2. 字节码阶段 .class\n3. 创建对象阶段  new  对象名称\n\n内省与反射\n- 内省\n在运行时能够获取JavaBean当中的属性名称和get与set方法\n- 反射\nJAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的**所有属性和方法**\n对于任意一个对象，都能够调用它的任意一个方法和属性\n这种**动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制**\n\n\n获取字节码文件：想要使用反射，就必须得要获取字节码文件\n1. Object类的getClass()方法\n判断两个对象是否是同一个字节码文件\n2. 静态属性class\n当作静态方法的锁对象\n3. Class类中静态方法forName()\n读取配置文件\n\n```java\n// 获取字节码\n// 1.类的全限定名称 ClassNotFoundException\nClass clazz = Class.forName(\"com.it666.reflect.Person\");\n// 2.\nClass clazz2 = Person.class;\n// 3.\nPerson p = new Person();\nClass clazz3 = p.getClass();\n```\n#### 通过字节码创建对象\n``` java\n// 1.通过无参构造创建对象\nPerson p2 = (Person)clazz.newInstance();\n\n// 2.通过有参构造创建对象\n// 获取字节码的构造器：\n// 因为在反射阶段操作的都是字节码，不知道具体的类型，只有在创建对象的时候才去给实际参数\nConstructor c = clazz.getConstructor(String.class, Integer.class);\n// 通过构造器创建对象：调用构造器的newInstance方法并传入参数\nPerson p2 = (Person)c.newInstance(\"al\",20);\n```\n#### 获取字段\n```java\n//获取pubic字段(默认修饰符是不可以的获取到的：NoSuchFieldException)\nField f = clazz.getField(\"name\");\nf.set(p2,\"李白\");\n\n//获取private 字段\nField f2 = clazz.getDeclaredField(\"age\");\n//private 去除私有权限\nf2.setAccessible(true);\nf2.set(p2, 11);\n```\n\n#### 获取方法\n```java\n//获取方法\nMethod m1 = clazz.getMethod(\"show\");\nSystem.out.println(m1.getName());//获取名字 \nm1.invoke(p2);\n\n//获取私有方法\nMethod m2 = clazz.getDeclaredMethod(\"eat\",String.class);\n//去除私有权限\nm2.setAccessible(true);\nm2.invoke(p2, \"米饭\"); \n```\n#### 越过数组泛型检测\n数组如果定义好了泛型就不能添加泛型以外的类型\n可以通过反射来去实现添加以外的类型\n在一个Integer泛型的数组当中添加字符串类型\n\n\t\n\n```java\nArrayList<Integer> list = new ArrayList<Integer>();\nlist.add(20);\n// list.add(\"myxq\");\n// 错误检测是Eclipse做的，运行的时候会做一个泛型擦除，编译成字节码，泛型都没了\n\n// 获取ArrayList的字节码\nClass<?> clazz = Class.forName(\"java.util.ArrayList\"); // <?>  ?代表任意类型\nMethod m = clazz.getMethod(\"add\",Object.class);\nm.invoke(list, \"myxq\"); \nSystem.out.println(list); // [20, myxq]\n\n```\n## Tomcat反射加载Servlet\n模拟实现过程\n新建包com.it666.servlet\n```java\n// 1.创建接口\npublic interface IServlet {\n\tpublic void init();\n}\n\n// 2.创建实现类\npublic class FirstServlet implements IServlet {\n\n\t@Override\n\tpublic void init() {\n\t\tSystem.out.println(\"init...\");\n\t}\n\n}\n// 3.复制web.xml文件，修改servlet-class标签为：com.it666.servlet.FirstServlet\n\n// 4.测试类模拟Tomcat反射加载Servlet\npublic class Test {\n\n\tpublic static void main(String[] args) throws DocumentException, ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, SecurityException, IllegalArgumentException, InvocationTargetException {\n\t\t//加载web.xml 使用dom4j\n\t\t// 1.创建SAXReader\n\t\tSAXReader reader = new SAXReader();\n\t\tDocument doc = reader.read(\"src/web.xml\"); // DocumentException\n\t\t// 获取根元素\n\t\tElement rootElement = doc.getRootElement();\n\t\tSystem.out.println(rootElement);\n\t\t\n\t\tList <Element> list = rootElement.elements(\"servlet\");\n\t\tfor (Element ServEle : list) {\n\t\t\tElement classEle = ServEle.element(\"servlet-class\");\n\t\t\tSystem.out.println(classEle.getText());\n\t\t\t//\n\t\t\tClass clazz = Class.forName(classEle.getText()); // ClassNotFoundException\n\t\t\tObject obj = clazz.newInstance();// InstantiationException\n\t\t\t\n\t\t\tMethod m = clazz.getMethod(\"init\");// NoSuchMethodException\n\t\t\tm.invoke(obj); //IllegalArgumentException\n\t\t\t// 输出：init...\n\t\t}\n\t}\n\n}\n```\n## Servlet生命周期\nServlet什么时候被创建\n1. 默认情况下第一次访问的时候创建\n2. 可以通过配置文件设置服务器启动的时候就创建\n\n- init\nservlet对象创建的时候调用\n默认第一次访问时创建\n- service\n每次请求都会执行一次\n- destroy\nservlet对象销毁的时候执行\n默认服务器关闭时销毁\n- load-on-startup标签\n对象在服务器启动时就创建\n值为数字代表优先级：数据越小，优先级越高，不能为负数\n```xml\n<!--load-on-startup在web.xml的servlet标签中-->\n\t<servlet>\n\t\t<servlet-name>myxq</servlet-name>\n\t\t<servlet-class>com.it666.servlet.FirstServlet</servlet-class>\n\t\t<load-on-startup>3</load-on-startup>\n\t</servlet>\n```\n\n## Servlet访问流程\nServletRequest对象和ServletResponse对象是引擎提前创建好的\n每次请求时调用service方法并把这两个对象传入\n![Servlet访问流程](web-server-note-3/3.png)\n\n## Servlet配置信息\ninit-params标签\n```xml\n\t<servlet>\n\t\t<servlet-name>myxq</servlet-name>\n\t\t<servlet-class>com.it666.servlet.FirstServlet</servlet-class>\n\t\t<load-on-startup>3</load-on-startup>\n\t\t<!-- init-params标签 -->\n\t\t<init-param>\n\t\t\t<param-name>my</param-name>\n\t\t\t<param-value>1234</param-value>\n\t\t</init-param>\n\t</servlet>\n```\n```java\n@Override\npublic void init(ServletConfig config) throws ServletException {\n\t// 1.获取web.xml的Servlet名称\n\tSystem.out.println(config.getServletName());// 获取<servlet-name> 输出：myxq\n\t\n\t// 2.获取一些初始化参数 web.xml\n\tString value = config.getInitParameter(\"my\");\n\tSystem.out.println(value);// 输出：1234\n\t// 3.获取ServletContext\n\tServletContext sc = config.getServletContext();\n}\n```\ninit方法的config参数\n1. 该servlert的配置信息\n2. 获得web.xml当中参数\n3. 初始化参数\n4. 获取servletContext对象\n\nurl-patten\n1. 完全匹配\n2. 目录匹配\n3. 扩展名匹配\n```xml\n<servlet-mapping>\n\t<servlet-name>myxq</servlet-name>\n\t<url-pattern>/firstServlet</url-pattern>\n\t<url-pattern>/aaa/bbb/*</url-pattern>\n\t<url-pattern>*.myxq</url-pattern>\n\n</servlet-mapping>\n```\n\n缺省Servlet\n访问的资源不存在时，就会找缺省的地址\n```xml\n<url-patten>/</url-patten>\n```\n\n全局Web.xml\n对于部署在服务器上的所有应用都有效\n先到自己工程当中找web.xml配置\n再到全局web.xml当中去找配置\n如果两个当中有相同的配置，自己当中配置的内容会生效\n\n静态资源加载过程\n在path后面写的静态资源名称index.html或者是其它的.html它都是会找ur-patten当中有没有匹配的内容\n如果有，就加载对应的servlet，如果没有就到自己配置当中找缺省的url-patten\n如果自己配置文件当中没有缺省的，就会找全局配置缺省的url-patten\n在全局配置当中有一个缺省的url-patten 对应的是default的Servlet\ndefaultServlet内部会到当前访问的工程根目录当中去找对应的名称的静态资源，如果有，就把里面的内容逐行读出。响应给浏览器，如果没有，就会报404错误\n\n欢迎页面 Welcome-file-list\n不写任何资源名称的时候，会访问欢迎页面\n默认从上往下找\n## 使用注解创建Servlet\n包名右键-new-Servlet\n![new Servlet](web-server-note-3/4.png)\n![new Servlet2](web-server-note-3/5.png)\n![new Servlet3](web-server-note-3/6.png)\n\n修改web.xml web-app标签中的 metadata-complete=\"false\"\n该属性为true时，web应用将不会加载注解配置的Web组件\n\n从Servlet3.0开始可以直接使用注解的形式来去使用Servlet\n在创建好的Servlet上面有会有一个@WebServlet(\"/myServlet\")\n这个就是一个注解，就相当于在代码上添加了一个小插件\n贴上这个注解后，就不用再去做配置文件，会在内部自动帮你去做\n括号当中的内容就是url-patten的内容，要在地址栏当中path后面跟的内容\n\n\n## HttpServlet\n直接new的Servlet它是一个HttpServlet\n它是GenericServlet的子类\nGenericServlet实现了Servlet接口\nHttpServlet是专门负责处理http请求与响应的\n以后创建Servlet时，直接使用httpServlet\n\n#### HttpServlet方法\n- service\n每一次发送请求的时候就会调用\n当写了service就会不再调用get或post\n- doGet\n当发送get请求时调用\n- doPost\n当发送post请求的时候调用\n\n#### 内部方法调用过程\n当接收到一个请求时， tomcat就会找对应的service方法\n如果当中servlet当中没有存在service方法，就会到它的父类(HttpServlet)当中去找\n![HttpServlet](web-server-note-3/7.png)\n在父类当中找到service是参数为ServletRequest，会在内部把参数转为httpServlet\n转换完毕后会再继续调用参数为httpServletRequest的service方法\n![HttpServlet2](web-server-note-3/8.png)\n在此方法当中会获取参数的类型，根据不同的参数类型再去调用不同的方法\n\n## 参考资料\n\n[Java零基础到高级JavaWeb与项目](https://study.163.com/course/introduction/1005981003.htm)\n","slug":"web-server-note-3","published":1,"updated":"2020-06-13T02:55:34.898Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke3x9g73002fzgvueaj2ap47","content":"<h2 id=\"Servlet\"><a href=\"#Servlet\" class=\"headerlink\" title=\"Servlet\"></a>Servlet</h2><p>Servlet 运行在服务端的Java小程序，是sun公司提供一套规范（接口）</p>\n<ol>\n<li>servlet接收响应请求</li>\n<li>filter过滤器</li>\n<li>listener监听器</li>\n</ol>\n<p>用来处理客户端请求、响应给浏览器的动态资源<br>servlet的实质就是java代码，通过Java的API动态的向客户端输出内容<br>以后写的程序就不在是在本地执行了。而是编译成字节码，放到服务器上来去执行。<br>编写程序时， 不需要有main函数了。因为写完后，就把编写的程序编译成字节码，放到服务器上面。当前发送就一个请求的时候，服务器就会按照一定规则调用编写的代码</p>\n<h2 id=\"Servlet快速入门\"><a href=\"#Servlet快速入门\" class=\"headerlink\" title=\"Servlet快速入门\"></a>Servlet快速入门</h2><ol>\n<li>创建一个Web工程</li>\n<li>在JavaResource中src下创建一个包名称为com.myxq.servlet</li>\n<li>在创建的servlet包当中创建一个class文件起名为FirstServlet</li>\n<li>进入该class实现一个Servlet接口，实现它未实现的方法，在service方法中写入一句话输出</li>\n<li>在web.xml当中进行配置<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">display-name</span>&gt;</span>Servlet<span class=\"tag\">&lt;/<span class=\"name\">display-name</span>&gt;</span></span><br><span class=\"line\">   <span class=\"comment\">&lt;!-- 在display-name 标签后添加servlet 和 servlet-mapping配置--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>myxq<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>com.it666.servlet.FirstServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>myxq<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/firstServlet<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.it666.servlet;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FirstServlet</span> <span class=\"keyword\">implements</span> <span class=\"title\">Servlet</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(ServletRequest req, ServletResponse res)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Hello Servlet\"</span>);</span><br><span class=\"line\">\t\tHttpServletResponse r = (HttpServletResponse) res;</span><br><span class=\"line\">\t\tr.getWriter().write(<span class=\"string\">\"getWriter\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> ServletConfig <span class=\"title\">getServletConfig</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getServletInfo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(ServletConfig config)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行结果<br><img src=\"/2020/02/07/web-server-note-3/1.png\" alt=\"执行结果\"></p>\n<p>修改url路径<br><img src=\"/2020/02/07/web-server-note-3/2.png\" alt=\"修改url路径\"></p>\n<h2 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h2><h4 id=\"类的加载时机\"><a href=\"#类的加载时机\" class=\"headerlink\" title=\"类的加载时机\"></a>类的加载时机</h4><p>当程序要使用某个类时，如果该类还未被加载到内存中，系统会通过加载，连接，初始化三步来实现对这个类进行初始化</p>\n<ul>\n<li>加载<br>就是指将class文件读入内存，并为之创建一个Class对象。任何类被使用时系统都会建立一个Class对象</li>\n<li>连接<br>验证 是否有正确的内部结构，并和其他类协调一致<br>准备 负责为类的静态成员分配内存，并设置默认初始化值</li>\n<li>初始化<br>初始化成员变量等等</li>\n</ul>\n<p>加载时机</p>\n<ul>\n<li>创建类的实例</li>\n<li>访问类的静态变量，或者为静态变量赋值</li>\n<li>调用类的静态方法</li>\n<li>初始化某个类的子类</li>\n<li>使用反射方式来强制创建某个类或接口对应的java.lang.Class对象</li>\n</ul>\n<h4 id=\"类加载器-classLoader\"><a href=\"#类加载器-classLoader\" class=\"headerlink\" title=\"类加载器 classLoader\"></a>类加载器 classLoader</h4><p>负责将.class文件加载到内存中，并为之生成对应的Class对象</p>\n<p>类加载器分类</p>\n<ul>\n<li>根类加载器<br>也被称为引导类加载器，负责Java核心类的加载<br>比如System,String等。在JDK中JRE的lib目录下rt.jar文件中</li>\n<li>扩展类加载器<br>负责JRE的扩展目录中jar包的加载<br>在JDK中JRE的lib目录下ext目录</li>\n<li>系统类加载器<br>负责在JVM启动时加载来自Java命令的class文件<br>以及classpath环境变量所指定的jar包和类路径</li>\n</ul>\n<h4 id=\"反射-1\"><a href=\"#反射-1\" class=\"headerlink\" title=\"反射\"></a>反射</h4><p>创建一个对象的三个阶段</p>\n<ol>\n<li>源文件阶段 .java的文件</li>\n<li>字节码阶段 .class</li>\n<li>创建对象阶段  new  对象名称</li>\n</ol>\n<p>内省与反射</p>\n<ul>\n<li>内省<br>在运行时能够获取JavaBean当中的属性名称和get与set方法</li>\n<li>反射<br>JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的<strong>所有属性和方法</strong><br>对于任意一个对象，都能够调用它的任意一个方法和属性<br>这种<strong>动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制</strong></li>\n</ul>\n<p>获取字节码文件：想要使用反射，就必须得要获取字节码文件</p>\n<ol>\n<li>Object类的getClass()方法<br>判断两个对象是否是同一个字节码文件</li>\n<li>静态属性class<br>当作静态方法的锁对象</li>\n<li>Class类中静态方法forName()<br>读取配置文件</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取字节码</span></span><br><span class=\"line\"><span class=\"comment\">// 1.类的全限定名称 ClassNotFoundException</span></span><br><span class=\"line\">Class clazz = Class.forName(<span class=\"string\">\"com.it666.reflect.Person\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 2.</span></span><br><span class=\"line\">Class clazz2 = Person.class;</span><br><span class=\"line\"><span class=\"comment\">// 3.</span></span><br><span class=\"line\">Person p = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">Class clazz3 = p.getClass();</span><br></pre></td></tr></table></figure>\n<h4 id=\"通过字节码创建对象\"><a href=\"#通过字节码创建对象\" class=\"headerlink\" title=\"通过字节码创建对象\"></a>通过字节码创建对象</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.通过无参构造创建对象</span></span><br><span class=\"line\">Person p2 = (Person)clazz.newInstance();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.通过有参构造创建对象</span></span><br><span class=\"line\"><span class=\"comment\">// 获取字节码的构造器：</span></span><br><span class=\"line\"><span class=\"comment\">// 因为在反射阶段操作的都是字节码，不知道具体的类型，只有在创建对象的时候才去给实际参数</span></span><br><span class=\"line\">Constructor c = clazz.getConstructor(String.class, Integer.class);</span><br><span class=\"line\"><span class=\"comment\">// 通过构造器创建对象：调用构造器的newInstance方法并传入参数</span></span><br><span class=\"line\">Person p2 = (Person)c.newInstance(<span class=\"string\">\"al\"</span>,<span class=\"number\">20</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"获取字段\"><a href=\"#获取字段\" class=\"headerlink\" title=\"获取字段\"></a>获取字段</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取pubic字段(默认修饰符是不可以的获取到的：NoSuchFieldException)</span></span><br><span class=\"line\">Field f = clazz.getField(<span class=\"string\">\"name\"</span>);</span><br><span class=\"line\">f.set(p2,<span class=\"string\">\"李白\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取private 字段</span></span><br><span class=\"line\">Field f2 = clazz.getDeclaredField(<span class=\"string\">\"age\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//private 去除私有权限</span></span><br><span class=\"line\">f2.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">f2.set(p2, <span class=\"number\">11</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"获取方法\"><a href=\"#获取方法\" class=\"headerlink\" title=\"获取方法\"></a>获取方法</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取方法</span></span><br><span class=\"line\">Method m1 = clazz.getMethod(<span class=\"string\">\"show\"</span>);</span><br><span class=\"line\">System.out.println(m1.getName());<span class=\"comment\">//获取名字 </span></span><br><span class=\"line\">m1.invoke(p2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取私有方法</span></span><br><span class=\"line\">Method m2 = clazz.getDeclaredMethod(<span class=\"string\">\"eat\"</span>,String.class);</span><br><span class=\"line\"><span class=\"comment\">//去除私有权限</span></span><br><span class=\"line\">m2.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">m2.invoke(p2, <span class=\"string\">\"米饭\"</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"越过数组泛型检测\"><a href=\"#越过数组泛型检测\" class=\"headerlink\" title=\"越过数组泛型检测\"></a>越过数组泛型检测</h4><p>数组如果定义好了泛型就不能添加泛型以外的类型<br>可以通过反射来去实现添加以外的类型<br>在一个Integer泛型的数组当中添加字符串类型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;Integer&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">list.add(<span class=\"number\">20</span>);</span><br><span class=\"line\"><span class=\"comment\">// list.add(\"myxq\");</span></span><br><span class=\"line\"><span class=\"comment\">// 错误检测是Eclipse做的，运行的时候会做一个泛型擦除，编译成字节码，泛型都没了</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取ArrayList的字节码</span></span><br><span class=\"line\">Class&lt;?&gt; clazz = Class.forName(<span class=\"string\">\"java.util.ArrayList\"</span>); <span class=\"comment\">// &lt;?&gt;  ?代表任意类型</span></span><br><span class=\"line\">Method m = clazz.getMethod(<span class=\"string\">\"add\"</span>,Object.class);</span><br><span class=\"line\">m.invoke(list, <span class=\"string\">\"myxq\"</span>); </span><br><span class=\"line\">System.out.println(list); <span class=\"comment\">// [20, myxq]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Tomcat反射加载Servlet\"><a href=\"#Tomcat反射加载Servlet\" class=\"headerlink\" title=\"Tomcat反射加载Servlet\"></a>Tomcat反射加载Servlet</h2><p>模拟实现过程<br>新建包com.it666.servlet</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.创建接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.创建实现类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FirstServlet</span> <span class=\"keyword\">implements</span> <span class=\"title\">IServlet</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"init...\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 3.复制web.xml文件，修改servlet-class标签为：com.it666.servlet.FirstServlet</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4.测试类模拟Tomcat反射加载Servlet</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> DocumentException, ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, SecurityException, IllegalArgumentException, InvocationTargetException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//加载web.xml 使用dom4j</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.创建SAXReader</span></span><br><span class=\"line\">\t\tSAXReader reader = <span class=\"keyword\">new</span> SAXReader();</span><br><span class=\"line\">\t\tDocument doc = reader.read(<span class=\"string\">\"src/web.xml\"</span>); <span class=\"comment\">// DocumentException</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取根元素</span></span><br><span class=\"line\">\t\tElement rootElement = doc.getRootElement();</span><br><span class=\"line\">\t\tSystem.out.println(rootElement);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tList &lt;Element&gt; list = rootElement.elements(<span class=\"string\">\"servlet\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (Element ServEle : list) &#123;</span><br><span class=\"line\">\t\t\tElement classEle = ServEle.element(<span class=\"string\">\"servlet-class\"</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(classEle.getText());</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//</span></span><br><span class=\"line\">\t\t\tClass clazz = Class.forName(classEle.getText()); <span class=\"comment\">// ClassNotFoundException</span></span><br><span class=\"line\">\t\t\tObject obj = clazz.newInstance();<span class=\"comment\">// InstantiationException</span></span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tMethod m = clazz.getMethod(<span class=\"string\">\"init\"</span>);<span class=\"comment\">// NoSuchMethodException</span></span><br><span class=\"line\">\t\t\tm.invoke(obj); <span class=\"comment\">//IllegalArgumentException</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 输出：init...</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Servlet生命周期\"><a href=\"#Servlet生命周期\" class=\"headerlink\" title=\"Servlet生命周期\"></a>Servlet生命周期</h2><p>Servlet什么时候被创建</p>\n<ol>\n<li>默认情况下第一次访问的时候创建</li>\n<li>可以通过配置文件设置服务器启动的时候就创建</li>\n</ol>\n<ul>\n<li>init<br>servlet对象创建的时候调用<br>默认第一次访问时创建</li>\n<li>service<br>每次请求都会执行一次</li>\n<li>destroy<br>servlet对象销毁的时候执行<br>默认服务器关闭时销毁</li>\n<li>load-on-startup标签<br>对象在服务器启动时就创建<br>值为数字代表优先级：数据越小，优先级越高，不能为负数<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--load-on-startup在web.xml的servlet标签中--&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>myxq<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>com.it666.servlet.FirstServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">load-on-startup</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">load-on-startup</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"Servlet访问流程\"><a href=\"#Servlet访问流程\" class=\"headerlink\" title=\"Servlet访问流程\"></a>Servlet访问流程</h2><p>ServletRequest对象和ServletResponse对象是引擎提前创建好的<br>每次请求时调用service方法并把这两个对象传入<br><img src=\"/2020/02/07/web-server-note-3/3.png\" alt=\"Servlet访问流程\"></p>\n<h2 id=\"Servlet配置信息\"><a href=\"#Servlet配置信息\" class=\"headerlink\" title=\"Servlet配置信息\"></a>Servlet配置信息</h2><p>init-params标签</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>myxq<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>com.it666.servlet.FirstServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">load-on-startup</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">load-on-startup</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- init-params标签 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>my<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>1234<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(ServletConfig config)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 1.获取web.xml的Servlet名称</span></span><br><span class=\"line\">\tSystem.out.println(config.getServletName());<span class=\"comment\">// 获取&lt;servlet-name&gt; 输出：myxq</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 2.获取一些初始化参数 web.xml</span></span><br><span class=\"line\">\tString value = config.getInitParameter(<span class=\"string\">\"my\"</span>);</span><br><span class=\"line\">\tSystem.out.println(value);<span class=\"comment\">// 输出：1234</span></span><br><span class=\"line\">\t<span class=\"comment\">// 3.获取ServletContext</span></span><br><span class=\"line\">\tServletContext sc = config.getServletContext();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>init方法的config参数</p>\n<ol>\n<li>该servlert的配置信息</li>\n<li>获得web.xml当中参数</li>\n<li>初始化参数</li>\n<li>获取servletContext对象</li>\n</ol>\n<p>url-patten</p>\n<ol>\n<li>完全匹配</li>\n<li>目录匹配</li>\n<li>扩展名匹配<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>myxq<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/firstServlet<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/aaa/bbb/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>*.myxq<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>缺省Servlet<br>访问的资源不存在时，就会找缺省的地址</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">url-patten</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">url-patten</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>全局Web.xml<br>对于部署在服务器上的所有应用都有效<br>先到自己工程当中找web.xml配置<br>再到全局web.xml当中去找配置<br>如果两个当中有相同的配置，自己当中配置的内容会生效</p>\n<p>静态资源加载过程<br>在path后面写的静态资源名称index.html或者是其它的.html它都是会找ur-patten当中有没有匹配的内容<br>如果有，就加载对应的servlet，如果没有就到自己配置当中找缺省的url-patten<br>如果自己配置文件当中没有缺省的，就会找全局配置缺省的url-patten<br>在全局配置当中有一个缺省的url-patten 对应的是default的Servlet<br>defaultServlet内部会到当前访问的工程根目录当中去找对应的名称的静态资源，如果有，就把里面的内容逐行读出。响应给浏览器，如果没有，就会报404错误</p>\n<p>欢迎页面 Welcome-file-list<br>不写任何资源名称的时候，会访问欢迎页面<br>默认从上往下找</p>\n<h2 id=\"使用注解创建Servlet\"><a href=\"#使用注解创建Servlet\" class=\"headerlink\" title=\"使用注解创建Servlet\"></a>使用注解创建Servlet</h2><p>包名右键-new-Servlet<br><img src=\"/2020/02/07/web-server-note-3/4.png\" alt=\"new Servlet\"><br><img src=\"/2020/02/07/web-server-note-3/5.png\" alt=\"new Servlet2\"><br><img src=\"/2020/02/07/web-server-note-3/6.png\" alt=\"new Servlet3\"></p>\n<p>修改web.xml web-app标签中的 metadata-complete=”false”<br>该属性为true时，web应用将不会加载注解配置的Web组件</p>\n<p>从Servlet3.0开始可以直接使用注解的形式来去使用Servlet<br>在创建好的Servlet上面有会有一个@WebServlet(“/myServlet”)<br>这个就是一个注解，就相当于在代码上添加了一个小插件<br>贴上这个注解后，就不用再去做配置文件，会在内部自动帮你去做<br>括号当中的内容就是url-patten的内容，要在地址栏当中path后面跟的内容</p>\n<h2 id=\"HttpServlet\"><a href=\"#HttpServlet\" class=\"headerlink\" title=\"HttpServlet\"></a>HttpServlet</h2><p>直接new的Servlet它是一个HttpServlet<br>它是GenericServlet的子类<br>GenericServlet实现了Servlet接口<br>HttpServlet是专门负责处理http请求与响应的<br>以后创建Servlet时，直接使用httpServlet</p>\n<h4 id=\"HttpServlet方法\"><a href=\"#HttpServlet方法\" class=\"headerlink\" title=\"HttpServlet方法\"></a>HttpServlet方法</h4><ul>\n<li>service<br>每一次发送请求的时候就会调用<br>当写了service就会不再调用get或post</li>\n<li>doGet<br>当发送get请求时调用</li>\n<li>doPost<br>当发送post请求的时候调用</li>\n</ul>\n<h4 id=\"内部方法调用过程\"><a href=\"#内部方法调用过程\" class=\"headerlink\" title=\"内部方法调用过程\"></a>内部方法调用过程</h4><p>当接收到一个请求时， tomcat就会找对应的service方法<br>如果当中servlet当中没有存在service方法，就会到它的父类(HttpServlet)当中去找<br><img src=\"/2020/02/07/web-server-note-3/7.png\" alt=\"HttpServlet\"><br>在父类当中找到service是参数为ServletRequest，会在内部把参数转为httpServlet<br>转换完毕后会再继续调用参数为httpServletRequest的service方法<br><img src=\"/2020/02/07/web-server-note-3/8.png\" alt=\"HttpServlet2\"><br>在此方法当中会获取参数的类型，根据不同的参数类型再去调用不同的方法</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005981003.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级JavaWeb与项目</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Servlet\"><a href=\"#Servlet\" class=\"headerlink\" title=\"Servlet\"></a>Servlet</h2><p>Servlet 运行在服务端的Java小程序，是sun公司提供一套规范（接口）</p>\n<ol>\n<li>servlet接收响应请求</li>\n<li>filter过滤器</li>\n<li>listener监听器</li>\n</ol>\n<p>用来处理客户端请求、响应给浏览器的动态资源<br>servlet的实质就是java代码，通过Java的API动态的向客户端输出内容<br>以后写的程序就不在是在本地执行了。而是编译成字节码，放到服务器上来去执行。<br>编写程序时， 不需要有main函数了。因为写完后，就把编写的程序编译成字节码，放到服务器上面。当前发送就一个请求的时候，服务器就会按照一定规则调用编写的代码</p>\n<h2 id=\"Servlet快速入门\"><a href=\"#Servlet快速入门\" class=\"headerlink\" title=\"Servlet快速入门\"></a>Servlet快速入门</h2><ol>\n<li>创建一个Web工程</li>\n<li>在JavaResource中src下创建一个包名称为com.myxq.servlet</li>\n<li>在创建的servlet包当中创建一个class文件起名为FirstServlet</li>\n<li>进入该class实现一个Servlet接口，实现它未实现的方法，在service方法中写入一句话输出</li>\n<li>在web.xml当中进行配置<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">display-name</span>&gt;</span>Servlet<span class=\"tag\">&lt;/<span class=\"name\">display-name</span>&gt;</span></span><br><span class=\"line\">   <span class=\"comment\">&lt;!-- 在display-name 标签后添加servlet 和 servlet-mapping配置--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>myxq<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>com.it666.servlet.FirstServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>myxq<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/firstServlet<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.it666.servlet;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FirstServlet</span> <span class=\"keyword\">implements</span> <span class=\"title\">Servlet</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(ServletRequest req, ServletResponse res)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Hello Servlet\"</span>);</span><br><span class=\"line\">\t\tHttpServletResponse r = (HttpServletResponse) res;</span><br><span class=\"line\">\t\tr.getWriter().write(<span class=\"string\">\"getWriter\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> ServletConfig <span class=\"title\">getServletConfig</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getServletInfo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(ServletConfig config)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行结果<br><img src=\"/2020/02/07/web-server-note-3/1.png\" alt=\"执行结果\"></p>\n<p>修改url路径<br><img src=\"/2020/02/07/web-server-note-3/2.png\" alt=\"修改url路径\"></p>\n<h2 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h2><h4 id=\"类的加载时机\"><a href=\"#类的加载时机\" class=\"headerlink\" title=\"类的加载时机\"></a>类的加载时机</h4><p>当程序要使用某个类时，如果该类还未被加载到内存中，系统会通过加载，连接，初始化三步来实现对这个类进行初始化</p>\n<ul>\n<li>加载<br>就是指将class文件读入内存，并为之创建一个Class对象。任何类被使用时系统都会建立一个Class对象</li>\n<li>连接<br>验证 是否有正确的内部结构，并和其他类协调一致<br>准备 负责为类的静态成员分配内存，并设置默认初始化值</li>\n<li>初始化<br>初始化成员变量等等</li>\n</ul>\n<p>加载时机</p>\n<ul>\n<li>创建类的实例</li>\n<li>访问类的静态变量，或者为静态变量赋值</li>\n<li>调用类的静态方法</li>\n<li>初始化某个类的子类</li>\n<li>使用反射方式来强制创建某个类或接口对应的java.lang.Class对象</li>\n</ul>\n<h4 id=\"类加载器-classLoader\"><a href=\"#类加载器-classLoader\" class=\"headerlink\" title=\"类加载器 classLoader\"></a>类加载器 classLoader</h4><p>负责将.class文件加载到内存中，并为之生成对应的Class对象</p>\n<p>类加载器分类</p>\n<ul>\n<li>根类加载器<br>也被称为引导类加载器，负责Java核心类的加载<br>比如System,String等。在JDK中JRE的lib目录下rt.jar文件中</li>\n<li>扩展类加载器<br>负责JRE的扩展目录中jar包的加载<br>在JDK中JRE的lib目录下ext目录</li>\n<li>系统类加载器<br>负责在JVM启动时加载来自Java命令的class文件<br>以及classpath环境变量所指定的jar包和类路径</li>\n</ul>\n<h4 id=\"反射-1\"><a href=\"#反射-1\" class=\"headerlink\" title=\"反射\"></a>反射</h4><p>创建一个对象的三个阶段</p>\n<ol>\n<li>源文件阶段 .java的文件</li>\n<li>字节码阶段 .class</li>\n<li>创建对象阶段  new  对象名称</li>\n</ol>\n<p>内省与反射</p>\n<ul>\n<li>内省<br>在运行时能够获取JavaBean当中的属性名称和get与set方法</li>\n<li>反射<br>JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的<strong>所有属性和方法</strong><br>对于任意一个对象，都能够调用它的任意一个方法和属性<br>这种<strong>动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制</strong></li>\n</ul>\n<p>获取字节码文件：想要使用反射，就必须得要获取字节码文件</p>\n<ol>\n<li>Object类的getClass()方法<br>判断两个对象是否是同一个字节码文件</li>\n<li>静态属性class<br>当作静态方法的锁对象</li>\n<li>Class类中静态方法forName()<br>读取配置文件</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取字节码</span></span><br><span class=\"line\"><span class=\"comment\">// 1.类的全限定名称 ClassNotFoundException</span></span><br><span class=\"line\">Class clazz = Class.forName(<span class=\"string\">\"com.it666.reflect.Person\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 2.</span></span><br><span class=\"line\">Class clazz2 = Person.class;</span><br><span class=\"line\"><span class=\"comment\">// 3.</span></span><br><span class=\"line\">Person p = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">Class clazz3 = p.getClass();</span><br></pre></td></tr></table></figure>\n<h4 id=\"通过字节码创建对象\"><a href=\"#通过字节码创建对象\" class=\"headerlink\" title=\"通过字节码创建对象\"></a>通过字节码创建对象</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.通过无参构造创建对象</span></span><br><span class=\"line\">Person p2 = (Person)clazz.newInstance();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.通过有参构造创建对象</span></span><br><span class=\"line\"><span class=\"comment\">// 获取字节码的构造器：</span></span><br><span class=\"line\"><span class=\"comment\">// 因为在反射阶段操作的都是字节码，不知道具体的类型，只有在创建对象的时候才去给实际参数</span></span><br><span class=\"line\">Constructor c = clazz.getConstructor(String.class, Integer.class);</span><br><span class=\"line\"><span class=\"comment\">// 通过构造器创建对象：调用构造器的newInstance方法并传入参数</span></span><br><span class=\"line\">Person p2 = (Person)c.newInstance(<span class=\"string\">\"al\"</span>,<span class=\"number\">20</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"获取字段\"><a href=\"#获取字段\" class=\"headerlink\" title=\"获取字段\"></a>获取字段</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取pubic字段(默认修饰符是不可以的获取到的：NoSuchFieldException)</span></span><br><span class=\"line\">Field f = clazz.getField(<span class=\"string\">\"name\"</span>);</span><br><span class=\"line\">f.set(p2,<span class=\"string\">\"李白\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取private 字段</span></span><br><span class=\"line\">Field f2 = clazz.getDeclaredField(<span class=\"string\">\"age\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//private 去除私有权限</span></span><br><span class=\"line\">f2.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">f2.set(p2, <span class=\"number\">11</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"获取方法\"><a href=\"#获取方法\" class=\"headerlink\" title=\"获取方法\"></a>获取方法</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取方法</span></span><br><span class=\"line\">Method m1 = clazz.getMethod(<span class=\"string\">\"show\"</span>);</span><br><span class=\"line\">System.out.println(m1.getName());<span class=\"comment\">//获取名字 </span></span><br><span class=\"line\">m1.invoke(p2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取私有方法</span></span><br><span class=\"line\">Method m2 = clazz.getDeclaredMethod(<span class=\"string\">\"eat\"</span>,String.class);</span><br><span class=\"line\"><span class=\"comment\">//去除私有权限</span></span><br><span class=\"line\">m2.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">m2.invoke(p2, <span class=\"string\">\"米饭\"</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"越过数组泛型检测\"><a href=\"#越过数组泛型检测\" class=\"headerlink\" title=\"越过数组泛型检测\"></a>越过数组泛型检测</h4><p>数组如果定义好了泛型就不能添加泛型以外的类型<br>可以通过反射来去实现添加以外的类型<br>在一个Integer泛型的数组当中添加字符串类型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;Integer&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">list.add(<span class=\"number\">20</span>);</span><br><span class=\"line\"><span class=\"comment\">// list.add(\"myxq\");</span></span><br><span class=\"line\"><span class=\"comment\">// 错误检测是Eclipse做的，运行的时候会做一个泛型擦除，编译成字节码，泛型都没了</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取ArrayList的字节码</span></span><br><span class=\"line\">Class&lt;?&gt; clazz = Class.forName(<span class=\"string\">\"java.util.ArrayList\"</span>); <span class=\"comment\">// &lt;?&gt;  ?代表任意类型</span></span><br><span class=\"line\">Method m = clazz.getMethod(<span class=\"string\">\"add\"</span>,Object.class);</span><br><span class=\"line\">m.invoke(list, <span class=\"string\">\"myxq\"</span>); </span><br><span class=\"line\">System.out.println(list); <span class=\"comment\">// [20, myxq]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Tomcat反射加载Servlet\"><a href=\"#Tomcat反射加载Servlet\" class=\"headerlink\" title=\"Tomcat反射加载Servlet\"></a>Tomcat反射加载Servlet</h2><p>模拟实现过程<br>新建包com.it666.servlet</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.创建接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.创建实现类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FirstServlet</span> <span class=\"keyword\">implements</span> <span class=\"title\">IServlet</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"init...\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 3.复制web.xml文件，修改servlet-class标签为：com.it666.servlet.FirstServlet</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4.测试类模拟Tomcat反射加载Servlet</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> DocumentException, ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, SecurityException, IllegalArgumentException, InvocationTargetException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//加载web.xml 使用dom4j</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.创建SAXReader</span></span><br><span class=\"line\">\t\tSAXReader reader = <span class=\"keyword\">new</span> SAXReader();</span><br><span class=\"line\">\t\tDocument doc = reader.read(<span class=\"string\">\"src/web.xml\"</span>); <span class=\"comment\">// DocumentException</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取根元素</span></span><br><span class=\"line\">\t\tElement rootElement = doc.getRootElement();</span><br><span class=\"line\">\t\tSystem.out.println(rootElement);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tList &lt;Element&gt; list = rootElement.elements(<span class=\"string\">\"servlet\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (Element ServEle : list) &#123;</span><br><span class=\"line\">\t\t\tElement classEle = ServEle.element(<span class=\"string\">\"servlet-class\"</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(classEle.getText());</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//</span></span><br><span class=\"line\">\t\t\tClass clazz = Class.forName(classEle.getText()); <span class=\"comment\">// ClassNotFoundException</span></span><br><span class=\"line\">\t\t\tObject obj = clazz.newInstance();<span class=\"comment\">// InstantiationException</span></span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tMethod m = clazz.getMethod(<span class=\"string\">\"init\"</span>);<span class=\"comment\">// NoSuchMethodException</span></span><br><span class=\"line\">\t\t\tm.invoke(obj); <span class=\"comment\">//IllegalArgumentException</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 输出：init...</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Servlet生命周期\"><a href=\"#Servlet生命周期\" class=\"headerlink\" title=\"Servlet生命周期\"></a>Servlet生命周期</h2><p>Servlet什么时候被创建</p>\n<ol>\n<li>默认情况下第一次访问的时候创建</li>\n<li>可以通过配置文件设置服务器启动的时候就创建</li>\n</ol>\n<ul>\n<li>init<br>servlet对象创建的时候调用<br>默认第一次访问时创建</li>\n<li>service<br>每次请求都会执行一次</li>\n<li>destroy<br>servlet对象销毁的时候执行<br>默认服务器关闭时销毁</li>\n<li>load-on-startup标签<br>对象在服务器启动时就创建<br>值为数字代表优先级：数据越小，优先级越高，不能为负数<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--load-on-startup在web.xml的servlet标签中--&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>myxq<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>com.it666.servlet.FirstServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">load-on-startup</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">load-on-startup</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"Servlet访问流程\"><a href=\"#Servlet访问流程\" class=\"headerlink\" title=\"Servlet访问流程\"></a>Servlet访问流程</h2><p>ServletRequest对象和ServletResponse对象是引擎提前创建好的<br>每次请求时调用service方法并把这两个对象传入<br><img src=\"/2020/02/07/web-server-note-3/3.png\" alt=\"Servlet访问流程\"></p>\n<h2 id=\"Servlet配置信息\"><a href=\"#Servlet配置信息\" class=\"headerlink\" title=\"Servlet配置信息\"></a>Servlet配置信息</h2><p>init-params标签</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>myxq<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>com.it666.servlet.FirstServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">load-on-startup</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">load-on-startup</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- init-params标签 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>my<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>1234<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(ServletConfig config)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 1.获取web.xml的Servlet名称</span></span><br><span class=\"line\">\tSystem.out.println(config.getServletName());<span class=\"comment\">// 获取&lt;servlet-name&gt; 输出：myxq</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 2.获取一些初始化参数 web.xml</span></span><br><span class=\"line\">\tString value = config.getInitParameter(<span class=\"string\">\"my\"</span>);</span><br><span class=\"line\">\tSystem.out.println(value);<span class=\"comment\">// 输出：1234</span></span><br><span class=\"line\">\t<span class=\"comment\">// 3.获取ServletContext</span></span><br><span class=\"line\">\tServletContext sc = config.getServletContext();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>init方法的config参数</p>\n<ol>\n<li>该servlert的配置信息</li>\n<li>获得web.xml当中参数</li>\n<li>初始化参数</li>\n<li>获取servletContext对象</li>\n</ol>\n<p>url-patten</p>\n<ol>\n<li>完全匹配</li>\n<li>目录匹配</li>\n<li>扩展名匹配<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>myxq<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/firstServlet<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/aaa/bbb/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>*.myxq<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>缺省Servlet<br>访问的资源不存在时，就会找缺省的地址</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">url-patten</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">url-patten</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>全局Web.xml<br>对于部署在服务器上的所有应用都有效<br>先到自己工程当中找web.xml配置<br>再到全局web.xml当中去找配置<br>如果两个当中有相同的配置，自己当中配置的内容会生效</p>\n<p>静态资源加载过程<br>在path后面写的静态资源名称index.html或者是其它的.html它都是会找ur-patten当中有没有匹配的内容<br>如果有，就加载对应的servlet，如果没有就到自己配置当中找缺省的url-patten<br>如果自己配置文件当中没有缺省的，就会找全局配置缺省的url-patten<br>在全局配置当中有一个缺省的url-patten 对应的是default的Servlet<br>defaultServlet内部会到当前访问的工程根目录当中去找对应的名称的静态资源，如果有，就把里面的内容逐行读出。响应给浏览器，如果没有，就会报404错误</p>\n<p>欢迎页面 Welcome-file-list<br>不写任何资源名称的时候，会访问欢迎页面<br>默认从上往下找</p>\n<h2 id=\"使用注解创建Servlet\"><a href=\"#使用注解创建Servlet\" class=\"headerlink\" title=\"使用注解创建Servlet\"></a>使用注解创建Servlet</h2><p>包名右键-new-Servlet<br><img src=\"/2020/02/07/web-server-note-3/4.png\" alt=\"new Servlet\"><br><img src=\"/2020/02/07/web-server-note-3/5.png\" alt=\"new Servlet2\"><br><img src=\"/2020/02/07/web-server-note-3/6.png\" alt=\"new Servlet3\"></p>\n<p>修改web.xml web-app标签中的 metadata-complete=”false”<br>该属性为true时，web应用将不会加载注解配置的Web组件</p>\n<p>从Servlet3.0开始可以直接使用注解的形式来去使用Servlet<br>在创建好的Servlet上面有会有一个@WebServlet(“/myServlet”)<br>这个就是一个注解，就相当于在代码上添加了一个小插件<br>贴上这个注解后，就不用再去做配置文件，会在内部自动帮你去做<br>括号当中的内容就是url-patten的内容，要在地址栏当中path后面跟的内容</p>\n<h2 id=\"HttpServlet\"><a href=\"#HttpServlet\" class=\"headerlink\" title=\"HttpServlet\"></a>HttpServlet</h2><p>直接new的Servlet它是一个HttpServlet<br>它是GenericServlet的子类<br>GenericServlet实现了Servlet接口<br>HttpServlet是专门负责处理http请求与响应的<br>以后创建Servlet时，直接使用httpServlet</p>\n<h4 id=\"HttpServlet方法\"><a href=\"#HttpServlet方法\" class=\"headerlink\" title=\"HttpServlet方法\"></a>HttpServlet方法</h4><ul>\n<li>service<br>每一次发送请求的时候就会调用<br>当写了service就会不再调用get或post</li>\n<li>doGet<br>当发送get请求时调用</li>\n<li>doPost<br>当发送post请求的时候调用</li>\n</ul>\n<h4 id=\"内部方法调用过程\"><a href=\"#内部方法调用过程\" class=\"headerlink\" title=\"内部方法调用过程\"></a>内部方法调用过程</h4><p>当接收到一个请求时， tomcat就会找对应的service方法<br>如果当中servlet当中没有存在service方法，就会到它的父类(HttpServlet)当中去找<br><img src=\"/2020/02/07/web-server-note-3/7.png\" alt=\"HttpServlet\"><br>在父类当中找到service是参数为ServletRequest，会在内部把参数转为httpServlet<br>转换完毕后会再继续调用参数为httpServletRequest的service方法<br><img src=\"/2020/02/07/web-server-note-3/8.png\" alt=\"HttpServlet2\"><br>在此方法当中会获取参数的类型，根据不同的参数类型再去调用不同的方法</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005981003.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级JavaWeb与项目</a></p>\n"},{"title":"Web服务器笔记-登录功能","date":"2020-02-09T07:53:45.000Z","_content":"## 实现登录功能\n#### 建表\n![数据库](web-server-note-4/1.png)\n添加数据:\nname:zs pwd:1234\n#### domian\nUser类\n```java\npackage com.it666.domain;\npublic class User {\n\tInteger id;\n\tString name;\n\tString pwd;\n\tString email;\n\tpublic Integer getId() {\n\t\treturn id;\n\t}\n\tpublic void setId(Integer id) {\n\t\tthis.id = id;\n\t}\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\tpublic String getPwd() {\n\t\treturn pwd;\n\t}\n\tpublic void setPwd(String pwd) {\n\t\tthis.pwd = pwd;\n\t}\n\tpublic String getEmail() {\n\t\treturn email;\n\t}\n\tpublic void setEmail(String email) {\n\t\tthis.email = email;\n\t}\t\n}\n```\n#### HTML登录界面\n在WebContent目录下新建index.html\n```html\n<body>\n\t<h1>用户登录</h1>\n\t<form action=\"http://localhost/25-Servlet/LoginServlet\" method=\"get\">\n\t用户名：<input type=\"text\" placeholder=\"请输入用户名...\" name=\"username\"> <br/>\n\t密    码：<input type=\"text\" placeholder=\"请输入密码...\" name=\"pwd\"><br/>\n\t<input type=\"submit\" value=\"登录\">\n\t</form>\n\t\n</body>\n```\n#### 创建Servlet\n只需要勾选service方法\n```java\npackage com.it666.login;\n\nimport java.io.IOException;\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\n@WebServlet(\"/LoginServlet\")\npublic class LoginServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tprotected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tSystem.out.println(\"LoginServlet\"); // 测试\n\t}\n\n}\n```\n修改form表的的action为LoginServlet的地址\n重启Server，打开index，点击登录命令行是否输出LoginServlet\n\n输入用户名和密码，get请求：\n![get请求](web-server-note-4/2.png)\n\n#### 数据库\n导入jar包到WebContent/WEB-INF/lib\n- commons-dbutils-1.4.jar\n- druid-1.0.15.jar\n- mysql-connector-java-5.1.40-bin.jar\nbulid path\n\n创建resource文件夹，放入db.properties配置文件，记得修改url为刚创建的数据库\n写JdbcUtil类\n\nProperties配置文件的位置\nresource文件夹会被部署到webapps\\25-Servlet\\WEB-INF\\classes文件里\n解决方法：通过字节码目录任意的类获取类加载器，获取到Properties配置文件的路径\n```java\npackage com.it666.utils;\npublic class JdbcUtil {\n\tpublic static DataSource ds = null;\n\tstatic {\n\t\ttry {\n\t\t\tProperties p = new Properties();\n            // 获取字节码目录：通过字节码目录任意的类获取类加载器，获取到Properties配置文件的路径\n\t\t\tString path = JdbcUtil.class.getClassLoader().getResource(\"db.properties\").getPath();\n\t\t\tSystem.out.println(\"path\"+path);\n\t\t\t\n\t\t\tFileInputStream in = new FileInputStream(path);\n\t\t\tp.load(in);\n\t\t\tds = DruidDataSourceFactory.createDataSource(p);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic static DataSource getDataSource() {\n\t\treturn ds;\n\t}\t\n}\n```\n\n修改Servlet\n```java\npackage com.it666.login;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.apache.commons.dbutils.QueryRunner;\nimport org.apache.commons.dbutils.handlers.BeanHandler;\n\nimport com.it666.domain.User;\nimport com.it666.utils.JdbcUtil;\n\n@WebServlet(\"/LoginServlet\")\npublic class LoginServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tprotected void service(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\tSystem.out.println(\"LoginServlet\");\n\t\t// 1.获取请求参数\n\t\tString name = request.getParameter(\"username\");\n\t\tString pwd = request.getParameter(\"pwd\");\n\t\tSystem.out.println(\">\"+name+ \"<>\" + pwd+\"<\");\n\t\t// 2.使用 mbuti1s连接到数据库当中\n\t\tQueryRunner qr = new QueryRunner(JdbcUtil.getDataSource());\n\t\tString  sql = \"select * from user where name=? and pwd=?\";\n\t\t\n\t\tUser user = null;\n\t\ttry {\n\t\t\tuser = qr.query(sql, new BeanHandler<User>(User.class),name,pwd);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\t// 3.检査用户名与密码是否正确\n\t\tif (user != null) {\n\t\t\t// 4.登录成功，显示用户所有信息\n\t\t\tresponse.getWriter().write(\"login success:\"+name);\n\t\t} else {\n\t\t\t// 5.登录失败给一个错误提示\n\t\t\tresponse.getWriter().write(\"login fail\");\n\t\t}\n\t\t\n\t}\n\n}\n```\n## 参考资料\n\n[Java零基础到高级JavaWeb与项目](https://study.163.com/course/introduction/1005981003.htm)","source":"_posts/web-server-note-4.md","raw":"---\ntitle: Web服务器笔记-登录功能\ncategories: Web服务器笔记\ndate: 2020-02-09 15:53:45\n---\n## 实现登录功能\n#### 建表\n![数据库](web-server-note-4/1.png)\n添加数据:\nname:zs pwd:1234\n#### domian\nUser类\n```java\npackage com.it666.domain;\npublic class User {\n\tInteger id;\n\tString name;\n\tString pwd;\n\tString email;\n\tpublic Integer getId() {\n\t\treturn id;\n\t}\n\tpublic void setId(Integer id) {\n\t\tthis.id = id;\n\t}\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\tpublic String getPwd() {\n\t\treturn pwd;\n\t}\n\tpublic void setPwd(String pwd) {\n\t\tthis.pwd = pwd;\n\t}\n\tpublic String getEmail() {\n\t\treturn email;\n\t}\n\tpublic void setEmail(String email) {\n\t\tthis.email = email;\n\t}\t\n}\n```\n#### HTML登录界面\n在WebContent目录下新建index.html\n```html\n<body>\n\t<h1>用户登录</h1>\n\t<form action=\"http://localhost/25-Servlet/LoginServlet\" method=\"get\">\n\t用户名：<input type=\"text\" placeholder=\"请输入用户名...\" name=\"username\"> <br/>\n\t密    码：<input type=\"text\" placeholder=\"请输入密码...\" name=\"pwd\"><br/>\n\t<input type=\"submit\" value=\"登录\">\n\t</form>\n\t\n</body>\n```\n#### 创建Servlet\n只需要勾选service方法\n```java\npackage com.it666.login;\n\nimport java.io.IOException;\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\n@WebServlet(\"/LoginServlet\")\npublic class LoginServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tprotected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tSystem.out.println(\"LoginServlet\"); // 测试\n\t}\n\n}\n```\n修改form表的的action为LoginServlet的地址\n重启Server，打开index，点击登录命令行是否输出LoginServlet\n\n输入用户名和密码，get请求：\n![get请求](web-server-note-4/2.png)\n\n#### 数据库\n导入jar包到WebContent/WEB-INF/lib\n- commons-dbutils-1.4.jar\n- druid-1.0.15.jar\n- mysql-connector-java-5.1.40-bin.jar\nbulid path\n\n创建resource文件夹，放入db.properties配置文件，记得修改url为刚创建的数据库\n写JdbcUtil类\n\nProperties配置文件的位置\nresource文件夹会被部署到webapps\\25-Servlet\\WEB-INF\\classes文件里\n解决方法：通过字节码目录任意的类获取类加载器，获取到Properties配置文件的路径\n```java\npackage com.it666.utils;\npublic class JdbcUtil {\n\tpublic static DataSource ds = null;\n\tstatic {\n\t\ttry {\n\t\t\tProperties p = new Properties();\n            // 获取字节码目录：通过字节码目录任意的类获取类加载器，获取到Properties配置文件的路径\n\t\t\tString path = JdbcUtil.class.getClassLoader().getResource(\"db.properties\").getPath();\n\t\t\tSystem.out.println(\"path\"+path);\n\t\t\t\n\t\t\tFileInputStream in = new FileInputStream(path);\n\t\t\tp.load(in);\n\t\t\tds = DruidDataSourceFactory.createDataSource(p);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic static DataSource getDataSource() {\n\t\treturn ds;\n\t}\t\n}\n```\n\n修改Servlet\n```java\npackage com.it666.login;\n\nimport java.io.IOException;\nimport java.sql.SQLException;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.apache.commons.dbutils.QueryRunner;\nimport org.apache.commons.dbutils.handlers.BeanHandler;\n\nimport com.it666.domain.User;\nimport com.it666.utils.JdbcUtil;\n\n@WebServlet(\"/LoginServlet\")\npublic class LoginServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tprotected void service(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\tSystem.out.println(\"LoginServlet\");\n\t\t// 1.获取请求参数\n\t\tString name = request.getParameter(\"username\");\n\t\tString pwd = request.getParameter(\"pwd\");\n\t\tSystem.out.println(\">\"+name+ \"<>\" + pwd+\"<\");\n\t\t// 2.使用 mbuti1s连接到数据库当中\n\t\tQueryRunner qr = new QueryRunner(JdbcUtil.getDataSource());\n\t\tString  sql = \"select * from user where name=? and pwd=?\";\n\t\t\n\t\tUser user = null;\n\t\ttry {\n\t\t\tuser = qr.query(sql, new BeanHandler<User>(User.class),name,pwd);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\t// 3.检査用户名与密码是否正确\n\t\tif (user != null) {\n\t\t\t// 4.登录成功，显示用户所有信息\n\t\t\tresponse.getWriter().write(\"login success:\"+name);\n\t\t} else {\n\t\t\t// 5.登录失败给一个错误提示\n\t\t\tresponse.getWriter().write(\"login fail\");\n\t\t}\n\t\t\n\t}\n\n}\n```\n## 参考资料\n\n[Java零基础到高级JavaWeb与项目](https://study.163.com/course/introduction/1005981003.htm)","slug":"web-server-note-4","published":1,"updated":"2020-06-13T02:55:34.909Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke3x9g75002gzgvu544e484e","content":"<h2 id=\"实现登录功能\"><a href=\"#实现登录功能\" class=\"headerlink\" title=\"实现登录功能\"></a>实现登录功能</h2><h4 id=\"建表\"><a href=\"#建表\" class=\"headerlink\" title=\"建表\"></a>建表</h4><p><img src=\"/2020/02/09/web-server-note-4/1.png\" alt=\"数据库\"><br>添加数据:<br>name:zs pwd:1234</p>\n<h4 id=\"domian\"><a href=\"#domian\" class=\"headerlink\" title=\"domian\"></a>domian</h4><p>User类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.it666.domain;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">\tInteger id;</span><br><span class=\"line\">\tString name;</span><br><span class=\"line\">\tString pwd;</span><br><span class=\"line\">\tString email;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(Integer id)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getPwd</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> pwd;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPwd</span><span class=\"params\">(String pwd)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.pwd = pwd;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getEmail</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> email;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setEmail</span><span class=\"params\">(String email)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.email = email;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"HTML登录界面\"><a href=\"#HTML登录界面\" class=\"headerlink\" title=\"HTML登录界面\"></a>HTML登录界面</h4><p>在WebContent目录下新建index.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>用户登录<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"http://localhost/25-Servlet/LoginServlet\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"get\"</span>&gt;</span></span><br><span class=\"line\">\t用户名：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入用户名...\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">\t密    码：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入密码...\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"pwd\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"登录\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"创建Servlet\"><a href=\"#创建Servlet\" class=\"headerlink\" title=\"创建Servlet\"></a>创建Servlet</h4><p>只需要勾选service方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.it666.login;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.annotation.WebServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/LoginServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"LoginServlet\"</span>); <span class=\"comment\">// 测试</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改form表的的action为LoginServlet的地址<br>重启Server，打开index，点击登录命令行是否输出LoginServlet</p>\n<p>输入用户名和密码，get请求：<br><img src=\"/2020/02/09/web-server-note-4/2.png\" alt=\"get请求\"></p>\n<h4 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h4><p>导入jar包到WebContent/WEB-INF/lib</p>\n<ul>\n<li>commons-dbutils-1.4.jar</li>\n<li>druid-1.0.15.jar</li>\n<li>mysql-connector-java-5.1.40-bin.jar<br>bulid path</li>\n</ul>\n<p>创建resource文件夹，放入db.properties配置文件，记得修改url为刚创建的数据库<br>写JdbcUtil类</p>\n<p>Properties配置文件的位置<br>resource文件夹会被部署到webapps\\25-Servlet\\WEB-INF\\classes文件里<br>解决方法：通过字节码目录任意的类获取类加载器，获取到Properties配置文件的路径</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.it666.utils;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JdbcUtil</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> DataSource ds = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tProperties p = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">            <span class=\"comment\">// 获取字节码目录：通过字节码目录任意的类获取类加载器，获取到Properties配置文件的路径</span></span><br><span class=\"line\">\t\t\tString path = JdbcUtil.class.getClassLoader().getResource(<span class=\"string\">\"db.properties\"</span>).getPath();</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"path\"</span>+path);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tFileInputStream in = <span class=\"keyword\">new</span> FileInputStream(path);</span><br><span class=\"line\">\t\t\tp.load(in);</span><br><span class=\"line\">\t\t\tds = DruidDataSourceFactory.createDataSource(p);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> DataSource <span class=\"title\">getDataSource</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ds;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改Servlet</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.it666.login;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.SQLException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.annotation.WebServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.dbutils.QueryRunner;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.dbutils.handlers.BeanHandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.it666.domain.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.it666.utils.JdbcUtil;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/LoginServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"LoginServlet\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.获取请求参数</span></span><br><span class=\"line\">\t\tString name = request.getParameter(<span class=\"string\">\"username\"</span>);</span><br><span class=\"line\">\t\tString pwd = request.getParameter(<span class=\"string\">\"pwd\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"&gt;\"</span>+name+ <span class=\"string\">\"&lt;&gt;\"</span> + pwd+<span class=\"string\">\"&lt;\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 2.使用 mbuti1s连接到数据库当中</span></span><br><span class=\"line\">\t\tQueryRunner qr = <span class=\"keyword\">new</span> QueryRunner(JdbcUtil.getDataSource());</span><br><span class=\"line\">\t\tString  sql = <span class=\"string\">\"select * from user where name=? and pwd=?\"</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tUser user = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tuser = qr.query(sql, <span class=\"keyword\">new</span> BeanHandler&lt;User&gt;(User.class),name,pwd);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 3.检査用户名与密码是否正确</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (user != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 4.登录成功，显示用户所有信息</span></span><br><span class=\"line\">\t\t\tresponse.getWriter().write(<span class=\"string\">\"login success:\"</span>+name);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 5.登录失败给一个错误提示</span></span><br><span class=\"line\">\t\t\tresponse.getWriter().write(<span class=\"string\">\"login fail\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005981003.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级JavaWeb与项目</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"实现登录功能\"><a href=\"#实现登录功能\" class=\"headerlink\" title=\"实现登录功能\"></a>实现登录功能</h2><h4 id=\"建表\"><a href=\"#建表\" class=\"headerlink\" title=\"建表\"></a>建表</h4><p><img src=\"/2020/02/09/web-server-note-4/1.png\" alt=\"数据库\"><br>添加数据:<br>name:zs pwd:1234</p>\n<h4 id=\"domian\"><a href=\"#domian\" class=\"headerlink\" title=\"domian\"></a>domian</h4><p>User类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.it666.domain;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">\tInteger id;</span><br><span class=\"line\">\tString name;</span><br><span class=\"line\">\tString pwd;</span><br><span class=\"line\">\tString email;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(Integer id)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getPwd</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> pwd;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPwd</span><span class=\"params\">(String pwd)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.pwd = pwd;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getEmail</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> email;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setEmail</span><span class=\"params\">(String email)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.email = email;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"HTML登录界面\"><a href=\"#HTML登录界面\" class=\"headerlink\" title=\"HTML登录界面\"></a>HTML登录界面</h4><p>在WebContent目录下新建index.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>用户登录<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"http://localhost/25-Servlet/LoginServlet\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"get\"</span>&gt;</span></span><br><span class=\"line\">\t用户名：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入用户名...\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">\t密    码：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入密码...\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"pwd\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"登录\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"创建Servlet\"><a href=\"#创建Servlet\" class=\"headerlink\" title=\"创建Servlet\"></a>创建Servlet</h4><p>只需要勾选service方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.it666.login;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.annotation.WebServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/LoginServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"LoginServlet\"</span>); <span class=\"comment\">// 测试</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改form表的的action为LoginServlet的地址<br>重启Server，打开index，点击登录命令行是否输出LoginServlet</p>\n<p>输入用户名和密码，get请求：<br><img src=\"/2020/02/09/web-server-note-4/2.png\" alt=\"get请求\"></p>\n<h4 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h4><p>导入jar包到WebContent/WEB-INF/lib</p>\n<ul>\n<li>commons-dbutils-1.4.jar</li>\n<li>druid-1.0.15.jar</li>\n<li>mysql-connector-java-5.1.40-bin.jar<br>bulid path</li>\n</ul>\n<p>创建resource文件夹，放入db.properties配置文件，记得修改url为刚创建的数据库<br>写JdbcUtil类</p>\n<p>Properties配置文件的位置<br>resource文件夹会被部署到webapps\\25-Servlet\\WEB-INF\\classes文件里<br>解决方法：通过字节码目录任意的类获取类加载器，获取到Properties配置文件的路径</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.it666.utils;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JdbcUtil</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> DataSource ds = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tProperties p = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">            <span class=\"comment\">// 获取字节码目录：通过字节码目录任意的类获取类加载器，获取到Properties配置文件的路径</span></span><br><span class=\"line\">\t\t\tString path = JdbcUtil.class.getClassLoader().getResource(<span class=\"string\">\"db.properties\"</span>).getPath();</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"path\"</span>+path);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tFileInputStream in = <span class=\"keyword\">new</span> FileInputStream(path);</span><br><span class=\"line\">\t\t\tp.load(in);</span><br><span class=\"line\">\t\t\tds = DruidDataSourceFactory.createDataSource(p);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> DataSource <span class=\"title\">getDataSource</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ds;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改Servlet</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.it666.login;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.sql.SQLException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.annotation.WebServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.dbutils.QueryRunner;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.dbutils.handlers.BeanHandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.it666.domain.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.it666.utils.JdbcUtil;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/LoginServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"LoginServlet\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.获取请求参数</span></span><br><span class=\"line\">\t\tString name = request.getParameter(<span class=\"string\">\"username\"</span>);</span><br><span class=\"line\">\t\tString pwd = request.getParameter(<span class=\"string\">\"pwd\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"&gt;\"</span>+name+ <span class=\"string\">\"&lt;&gt;\"</span> + pwd+<span class=\"string\">\"&lt;\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 2.使用 mbuti1s连接到数据库当中</span></span><br><span class=\"line\">\t\tQueryRunner qr = <span class=\"keyword\">new</span> QueryRunner(JdbcUtil.getDataSource());</span><br><span class=\"line\">\t\tString  sql = <span class=\"string\">\"select * from user where name=? and pwd=?\"</span>;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tUser user = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tuser = qr.query(sql, <span class=\"keyword\">new</span> BeanHandler&lt;User&gt;(User.class),name,pwd);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 3.检査用户名与密码是否正确</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (user != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 4.登录成功，显示用户所有信息</span></span><br><span class=\"line\">\t\t\tresponse.getWriter().write(<span class=\"string\">\"login success:\"</span>+name);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 5.登录失败给一个错误提示</span></span><br><span class=\"line\">\t\t\tresponse.getWriter().write(<span class=\"string\">\"login fail\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005981003.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级JavaWeb与项目</a></p>\n"},{"title":"Web服务器笔记-lombok和登录注册功能","date":"2020-02-11T11:30:18.000Z","_content":"## lombok\n是一款小巧的代码生成工具\n自动生成getter与setter方法\n提高开发效率，代码简洁，直观，减少大量冗余代码，减少后期的维护成本\n\n#### 安装\n[lombok下载地址](https://projectlombok.org/download)\n1. 让eclipse认识lombok语法\n在lombok.jar所在位置，按住Shift右键运行命令行，运行命令：java -jar lombok.jar\n在弹出的程序中选择指定的Eclipse(没有自动识别就手动选择Eclipse路径)\n选择Install/Update，（Win10可能报错，需要管理员权限，我的解决办法是：右键管理员权限运行Git Bash然后执行命令）\n最好重启一下Eclipse\n\n安装jar包原理\n把jar拷贝到eclipse当中\n在eclipse.ini文件当中做了两行配置\n\n2. lombok导入jar包\n快捷键：Ctrl + O 查看该类所有字段和方法\n\n方式1\n1.直接把lombok.jar拷贝到工程当中\n2.buildPath\n弊端：每一个工程都要拷贝这个jar包\n\n方式2\n把**经常用**的jar放到某一个地方，每一次要用，直接引用就行\n1.右键工程 - Buildd Path - Config Build Path - (如果又Classpath就选这个) - Add Libraries\n2.在弹出的对话框当中选择User Library用户自己的库\n3.进入到添加界面，点击右侧添加，新建一个仓库，给仓库起一个名称\n4.选择刚新建的仓库，点击右侧Add External JARs，找到lombok对应的jar包地址\n以后每次使用只需要 添加User Library中定义好的jar包即可\n\n在类上添加注解\n常用注解\n@Data ：该注解相当于同时加上以下注解@Setter @Getter @ToString @EqualsAndHashCode，作用于类中\n\n@Setter @Getter\n作用于属性上,自动生成get,set方法.\n也可直接作用于类上，全部属性都添加\n\n@ToString\n生成toString方法，默认情况下，会输出类名、所有属性，属性会按照顺序输出，以逗号分割\n@EqualsAndHashCode ： 生成equals和hascode方法\n@NoArgsConstructor ：无参构造器\n@AllArgsConstructor ： 全参构造器\n\n\n## 登录注册功能\n#### 准备\n![登录注册功能分析](web-server-note-7/1.png)\n1. 新建Dynamic Web Project：Mystore\n2. 建表mystore，字符集：utf8\n3. 建表\n![建表](web-server-note-7/2.png)\n4. domain\n```java\npackage com.it666.domain;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Setter@Getter\npublic class User {\n\tprivate String uid; \n\tprivate String username;\n\tprivate String password;\n    private String phone;\n    @Override\n\tpublic String toString() {\n\t\treturn \"User [uid=\" + uid + \", username=\" + username + \", password=\" + password + \", phone=\" + phone + \"]\";\n\t}\n}\n\n```\n5. 把前端代码拿到WebContent里，运行项目测试index打开是否正常\n#### 验证码\n复制CheckCodeServlet到com.it666.servlet\n复制word.txt到WEB-INF\n修改regist.html\n```html\n<div class=\"check_box\">\n    <label >验证码</label>\n    <input type=\"text\" placeholder=\"请输入\">\n\n    <img src=\"/28-Mystore/CheckCodeServlet\" onclick=\"change(this)\">\n</div>\n```\n开发中如果JS不独立，一般把script标签放在最后（还在body内），HTML加载完，再加载JS\n添加JS：\n```html\n<script type=\"text/javascript\">\n    function change(obj){\n        obj.src=\"/28-Mystore/CheckCodeServlet?time=\"+new Date().getTime();\n    }\n</script>\n```\n\n#### 前端验证\n修改submit为buttom，css样式也需要修改，增加conclick\n```html\n<div class=\"submit_button\">\n    \n    <input type=\"button\" value=\"立即注册\" onclick=\"checkDate()\">\n</div>\n```\n\n安装Eclipse插件（对网络有要求）：\nHelp - Eclipse Marketplace... - 搜索\nVue.js(真的好用，但是收费)\n选择Angular IDE CI - Install - 选择前三个 - 一路都Confirm - 安装结束（右下角可以看到安装进度）后重启Eclipse\n可能安装不了（这个插件仅用与自动补全代码）\n\n写JS验证\n\n```html\n\n<!-- 表单内容 -->\n    <form action=\"/28-Mystore/RegistServlet\" id=reg_form method=\"post\">\n\n        <div class=\"userName\">\n            <label>用户名</label> <input id=\"username\" type=\"text\" \n                placeholder=\"请输入\" name = \"username\" >\n        </div>\n        <div>\n            <label>密码</label> <input id=\"pwd\" type=\"password\" placeholder=\"请输入\" name = \"password\">\n        </div>\n        <div>\n            <label>确认密码</label> <input id=\"pwd2\" type=\"password\"\n                placeholder=\"请输入\">\n        </div>\n        <div>\n            <label>电话</label> <input type=\"text\" placeholder=\"请输入\" name = \"phone\">\n        </div>\n        <div class=\"check_box\">\n            <label>验证码</label> <input type=\"text\" placeholder=\"请输入\" name = \"code\"> <img\n                src=\"/28-Mystore/CheckCodeServlet\" onclick=\"change(this)\">\n        </div>\n        <div class=\"submit_button\">\n\n            <input type=\"button\" value=\"立即注册\" onclick=\"checkDate()\">\n        </div>\n    </form>\n</div>\n\n<!--JS部分-->\n<script type=\"text/javascript\">\n    function change(obj) {\n        obj.src = \"/28-Mystore/CheckCodeServlet?time=\"\n                + new Date().getTime();\n    }\n\n    function checkDate() {\n        // 1.获取用户名、密码、确认密码\n        var username = document.getElementById(\"username\");\n        var pwd = document.getElementById(\"pwd\");\n        var pwd2 = document.getElementById(\"pwd2\");\n        // 2.判读输入合法性\n        if (username.value == \"\") {\n            alert(\"请输入用户名\");\n            return;\n        }\n        if (pwd.value == \"\") {\n            alert(\"请输入密码\");\n            return;\n        }\n        if (pwd.value == \"\") {\n            alert(\"请输入密码\");\n            return;\n        }\n        if (pwd.value == \"\") {\n            alert(\"请再次输入密码\");\n            return;\n        }\n        if (pwd.value == pwd2.value) {\n            // 1.获取form表单\n            var form = document.getElementById(\"reg_form\");\n            form.submit();\t\t\t\t\t\t\t\t\t\t\t\t\n        } else {\n            alert(\"两次输入的密码不一样\");\n        }\n    }\n</script>\n```\n\nRegistServlet类\n\n```java\npackage com.it666.servlet;\n@WebServlet(\"/RegistServlet\")\npublic class RegistServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tpublic RegistServlet() {\n\t\tsuper();\n\t}\n\n\tprotected void service(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\tSystem.out.println(\"RegistServlet\");\n\n\t\t// 设置请求编码和响应编码\n\t\trequest.setCharacterEncoding(\"utf-8\");\n\t\tresponse.setContentType(\"text/html;charset=utf-8\");\n\t\t// 1.判断输入的验证码是否正确\n\t\tString code = request.getParameter(\"code\");\n\t\tSystem.out.println(code);\n\n\t\t// 2.接收所有参数\n\t\tObject word = (String) this.getServletContext().getAttribute(\"checkCode\");\n\t\tif (code.equals(word)) {\n\t\t\tresponse.getWriter().write(\"验证码正确\");\n\t\t\t\n\t\t\t// 2.把接收的参数封 装成User对象(导入jar包到lib)\n\t\t\tUser u = new User();\n\t\t\tMap<String, String[]> parameterMap = request.getParameterMap();\n\t\t\ttry {\n\t\t\t\tBeanUtils.populate(u, parameterMap);\n\t\t\t} catch (IllegalAccessException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t} catch (InvocationTargetException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\tSystem.out.println(u);\n\t\t\t// 3.设置uid \n\t\t\tu.setUid(UUID.randomUUID().toString());\n\t\t\t// 4.写入到数据库 导入相关Jar包\n\t\t\t// db.properties 修改数据库 放src里， 写JdbcUtil，修改path\n\t\t\t// String path = JDBCUtil.class.getClassLoader().getResource(\"db.properties\").getPath();\n\t\t\t// FileInputStream in = new FileInputStream(path);\n\t\t\t// p.load(in);\n\t\t\tQueryRunner qr = new QueryRunner(JDBCUtil.getDataSource());\n\t\t\tString sql = \"insert into user value(?,?,?,?)\";\n\t\t\ttry {\n\t\t\t\tqr.update(sql,u.getUid(),u.getUsername(),u.getPassword(),u.getPhone());\n\t\t\t} catch (SQLException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\t\n\t\t\tresponse.setHeader(\"refresh\", \"3;url=/28-Mystore/login.html\");\n\t\t} else {\n\t\t\tresponse.getWriter().write(\"验证码错误\");\n\t\t\tresponse.setHeader(\"refresh\", \"3;url=/28-Mystore/regist.html\");\n\t\t}\n\t}\n}\n```\n## \n```html\n<!-- 可以补充前端验证 -->\n<form action=\"/28-Mystore/LoginServlet\" id=\"login\" method=\"post\">\n    <!-- 用户名 -->\n    <div class=\"userName\" > \n        <span></span>\n        <input type=\"text\" name=\"username\">\n    </div>\n    <!-- 密码 -->\n    <div class=\"password\" >\n        <span></span>\n        <input type=\"password\" name=\"password\">\n    </div>\n    <!-- 登录 -->\n    <div class=\"login_btn\">\n        <input type=\"submit\">\n    </div>\n    <div class=\"forgot_pwd\">\n        <a href=\"#\">忘记密码</a>\n        <a href=\"#\">忘记会员名</a>\n        <a href=\"#\">免费注册</a>\n    </div>\n</form>\n```\n\nLoginServlet 类\n```java\npackage com.it666.servlet;\n\n@WebServlet(\"/LoginServlet\")\npublic class LoginServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tprotected void service(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\t// 获取用户名和密码\n\t\tString name = request.getParameter(\"username\");\n\t\tString pwd = request.getParameter(\"password\");\n\t\tSystem.out.println(name + \" \" + pwd);\n\t\t// 查询数据库\n\t\tQueryRunner qr = new QueryRunner(JDBCUtil.getDataSource());\n\t\tString sql = \"select * from user where username = ? and password = ?\";\n\t\tUser u = null;\n\t\ttry {\n\t\t\tu = qr.query(sql, new BeanHandler<User>(User.class), name, pwd);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t\tresponse.setContentType(\"text/html;charset=utf-8\");\n\t\t\n\t\tSystem.out.println(u);\n\t\tif (u != null) {\n\t\t\tresponse.getWriter().write(\"登录成功\");\n\t\t\tresponse.setHeader(\"refresh\", \"2;url=/28-Mystore/index.html\");\n\t\t} else {\n\t\t\tresponse.getWriter().write(\"登录失败\");\n\t\t\tresponse.setHeader(\"refresh\", \"2;url=/28-Mystore/login.html\");\n\t\t}\n\t}\n}\n```\n\n## 参考资料\n\n[Java零基础到高级JavaWeb与项目](https://study.163.com/course/introduction/1005981003.htm)\n[小白求教：java中modulepath与classpath区别是什么？](https://bbs.csdn.net/topics/392628907)","source":"_posts/web-server-note-7.md","raw":"---\ntitle: Web服务器笔记-lombok和登录注册功能\ncategories: Web服务器笔记\ndate: 2020-02-11 19:30:18\n---\n## lombok\n是一款小巧的代码生成工具\n自动生成getter与setter方法\n提高开发效率，代码简洁，直观，减少大量冗余代码，减少后期的维护成本\n\n#### 安装\n[lombok下载地址](https://projectlombok.org/download)\n1. 让eclipse认识lombok语法\n在lombok.jar所在位置，按住Shift右键运行命令行，运行命令：java -jar lombok.jar\n在弹出的程序中选择指定的Eclipse(没有自动识别就手动选择Eclipse路径)\n选择Install/Update，（Win10可能报错，需要管理员权限，我的解决办法是：右键管理员权限运行Git Bash然后执行命令）\n最好重启一下Eclipse\n\n安装jar包原理\n把jar拷贝到eclipse当中\n在eclipse.ini文件当中做了两行配置\n\n2. lombok导入jar包\n快捷键：Ctrl + O 查看该类所有字段和方法\n\n方式1\n1.直接把lombok.jar拷贝到工程当中\n2.buildPath\n弊端：每一个工程都要拷贝这个jar包\n\n方式2\n把**经常用**的jar放到某一个地方，每一次要用，直接引用就行\n1.右键工程 - Buildd Path - Config Build Path - (如果又Classpath就选这个) - Add Libraries\n2.在弹出的对话框当中选择User Library用户自己的库\n3.进入到添加界面，点击右侧添加，新建一个仓库，给仓库起一个名称\n4.选择刚新建的仓库，点击右侧Add External JARs，找到lombok对应的jar包地址\n以后每次使用只需要 添加User Library中定义好的jar包即可\n\n在类上添加注解\n常用注解\n@Data ：该注解相当于同时加上以下注解@Setter @Getter @ToString @EqualsAndHashCode，作用于类中\n\n@Setter @Getter\n作用于属性上,自动生成get,set方法.\n也可直接作用于类上，全部属性都添加\n\n@ToString\n生成toString方法，默认情况下，会输出类名、所有属性，属性会按照顺序输出，以逗号分割\n@EqualsAndHashCode ： 生成equals和hascode方法\n@NoArgsConstructor ：无参构造器\n@AllArgsConstructor ： 全参构造器\n\n\n## 登录注册功能\n#### 准备\n![登录注册功能分析](web-server-note-7/1.png)\n1. 新建Dynamic Web Project：Mystore\n2. 建表mystore，字符集：utf8\n3. 建表\n![建表](web-server-note-7/2.png)\n4. domain\n```java\npackage com.it666.domain;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Setter@Getter\npublic class User {\n\tprivate String uid; \n\tprivate String username;\n\tprivate String password;\n    private String phone;\n    @Override\n\tpublic String toString() {\n\t\treturn \"User [uid=\" + uid + \", username=\" + username + \", password=\" + password + \", phone=\" + phone + \"]\";\n\t}\n}\n\n```\n5. 把前端代码拿到WebContent里，运行项目测试index打开是否正常\n#### 验证码\n复制CheckCodeServlet到com.it666.servlet\n复制word.txt到WEB-INF\n修改regist.html\n```html\n<div class=\"check_box\">\n    <label >验证码</label>\n    <input type=\"text\" placeholder=\"请输入\">\n\n    <img src=\"/28-Mystore/CheckCodeServlet\" onclick=\"change(this)\">\n</div>\n```\n开发中如果JS不独立，一般把script标签放在最后（还在body内），HTML加载完，再加载JS\n添加JS：\n```html\n<script type=\"text/javascript\">\n    function change(obj){\n        obj.src=\"/28-Mystore/CheckCodeServlet?time=\"+new Date().getTime();\n    }\n</script>\n```\n\n#### 前端验证\n修改submit为buttom，css样式也需要修改，增加conclick\n```html\n<div class=\"submit_button\">\n    \n    <input type=\"button\" value=\"立即注册\" onclick=\"checkDate()\">\n</div>\n```\n\n安装Eclipse插件（对网络有要求）：\nHelp - Eclipse Marketplace... - 搜索\nVue.js(真的好用，但是收费)\n选择Angular IDE CI - Install - 选择前三个 - 一路都Confirm - 安装结束（右下角可以看到安装进度）后重启Eclipse\n可能安装不了（这个插件仅用与自动补全代码）\n\n写JS验证\n\n```html\n\n<!-- 表单内容 -->\n    <form action=\"/28-Mystore/RegistServlet\" id=reg_form method=\"post\">\n\n        <div class=\"userName\">\n            <label>用户名</label> <input id=\"username\" type=\"text\" \n                placeholder=\"请输入\" name = \"username\" >\n        </div>\n        <div>\n            <label>密码</label> <input id=\"pwd\" type=\"password\" placeholder=\"请输入\" name = \"password\">\n        </div>\n        <div>\n            <label>确认密码</label> <input id=\"pwd2\" type=\"password\"\n                placeholder=\"请输入\">\n        </div>\n        <div>\n            <label>电话</label> <input type=\"text\" placeholder=\"请输入\" name = \"phone\">\n        </div>\n        <div class=\"check_box\">\n            <label>验证码</label> <input type=\"text\" placeholder=\"请输入\" name = \"code\"> <img\n                src=\"/28-Mystore/CheckCodeServlet\" onclick=\"change(this)\">\n        </div>\n        <div class=\"submit_button\">\n\n            <input type=\"button\" value=\"立即注册\" onclick=\"checkDate()\">\n        </div>\n    </form>\n</div>\n\n<!--JS部分-->\n<script type=\"text/javascript\">\n    function change(obj) {\n        obj.src = \"/28-Mystore/CheckCodeServlet?time=\"\n                + new Date().getTime();\n    }\n\n    function checkDate() {\n        // 1.获取用户名、密码、确认密码\n        var username = document.getElementById(\"username\");\n        var pwd = document.getElementById(\"pwd\");\n        var pwd2 = document.getElementById(\"pwd2\");\n        // 2.判读输入合法性\n        if (username.value == \"\") {\n            alert(\"请输入用户名\");\n            return;\n        }\n        if (pwd.value == \"\") {\n            alert(\"请输入密码\");\n            return;\n        }\n        if (pwd.value == \"\") {\n            alert(\"请输入密码\");\n            return;\n        }\n        if (pwd.value == \"\") {\n            alert(\"请再次输入密码\");\n            return;\n        }\n        if (pwd.value == pwd2.value) {\n            // 1.获取form表单\n            var form = document.getElementById(\"reg_form\");\n            form.submit();\t\t\t\t\t\t\t\t\t\t\t\t\n        } else {\n            alert(\"两次输入的密码不一样\");\n        }\n    }\n</script>\n```\n\nRegistServlet类\n\n```java\npackage com.it666.servlet;\n@WebServlet(\"/RegistServlet\")\npublic class RegistServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tpublic RegistServlet() {\n\t\tsuper();\n\t}\n\n\tprotected void service(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\tSystem.out.println(\"RegistServlet\");\n\n\t\t// 设置请求编码和响应编码\n\t\trequest.setCharacterEncoding(\"utf-8\");\n\t\tresponse.setContentType(\"text/html;charset=utf-8\");\n\t\t// 1.判断输入的验证码是否正确\n\t\tString code = request.getParameter(\"code\");\n\t\tSystem.out.println(code);\n\n\t\t// 2.接收所有参数\n\t\tObject word = (String) this.getServletContext().getAttribute(\"checkCode\");\n\t\tif (code.equals(word)) {\n\t\t\tresponse.getWriter().write(\"验证码正确\");\n\t\t\t\n\t\t\t// 2.把接收的参数封 装成User对象(导入jar包到lib)\n\t\t\tUser u = new User();\n\t\t\tMap<String, String[]> parameterMap = request.getParameterMap();\n\t\t\ttry {\n\t\t\t\tBeanUtils.populate(u, parameterMap);\n\t\t\t} catch (IllegalAccessException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t} catch (InvocationTargetException e) {\n\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\tSystem.out.println(u);\n\t\t\t// 3.设置uid \n\t\t\tu.setUid(UUID.randomUUID().toString());\n\t\t\t// 4.写入到数据库 导入相关Jar包\n\t\t\t// db.properties 修改数据库 放src里， 写JdbcUtil，修改path\n\t\t\t// String path = JDBCUtil.class.getClassLoader().getResource(\"db.properties\").getPath();\n\t\t\t// FileInputStream in = new FileInputStream(path);\n\t\t\t// p.load(in);\n\t\t\tQueryRunner qr = new QueryRunner(JDBCUtil.getDataSource());\n\t\t\tString sql = \"insert into user value(?,?,?,?)\";\n\t\t\ttry {\n\t\t\t\tqr.update(sql,u.getUid(),u.getUsername(),u.getPassword(),u.getPhone());\n\t\t\t} catch (SQLException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\t\n\t\t\tresponse.setHeader(\"refresh\", \"3;url=/28-Mystore/login.html\");\n\t\t} else {\n\t\t\tresponse.getWriter().write(\"验证码错误\");\n\t\t\tresponse.setHeader(\"refresh\", \"3;url=/28-Mystore/regist.html\");\n\t\t}\n\t}\n}\n```\n## \n```html\n<!-- 可以补充前端验证 -->\n<form action=\"/28-Mystore/LoginServlet\" id=\"login\" method=\"post\">\n    <!-- 用户名 -->\n    <div class=\"userName\" > \n        <span></span>\n        <input type=\"text\" name=\"username\">\n    </div>\n    <!-- 密码 -->\n    <div class=\"password\" >\n        <span></span>\n        <input type=\"password\" name=\"password\">\n    </div>\n    <!-- 登录 -->\n    <div class=\"login_btn\">\n        <input type=\"submit\">\n    </div>\n    <div class=\"forgot_pwd\">\n        <a href=\"#\">忘记密码</a>\n        <a href=\"#\">忘记会员名</a>\n        <a href=\"#\">免费注册</a>\n    </div>\n</form>\n```\n\nLoginServlet 类\n```java\npackage com.it666.servlet;\n\n@WebServlet(\"/LoginServlet\")\npublic class LoginServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tprotected void service(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\t// 获取用户名和密码\n\t\tString name = request.getParameter(\"username\");\n\t\tString pwd = request.getParameter(\"password\");\n\t\tSystem.out.println(name + \" \" + pwd);\n\t\t// 查询数据库\n\t\tQueryRunner qr = new QueryRunner(JDBCUtil.getDataSource());\n\t\tString sql = \"select * from user where username = ? and password = ?\";\n\t\tUser u = null;\n\t\ttry {\n\t\t\tu = qr.query(sql, new BeanHandler<User>(User.class), name, pwd);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t\tresponse.setContentType(\"text/html;charset=utf-8\");\n\t\t\n\t\tSystem.out.println(u);\n\t\tif (u != null) {\n\t\t\tresponse.getWriter().write(\"登录成功\");\n\t\t\tresponse.setHeader(\"refresh\", \"2;url=/28-Mystore/index.html\");\n\t\t} else {\n\t\t\tresponse.getWriter().write(\"登录失败\");\n\t\t\tresponse.setHeader(\"refresh\", \"2;url=/28-Mystore/login.html\");\n\t\t}\n\t}\n}\n```\n\n## 参考资料\n\n[Java零基础到高级JavaWeb与项目](https://study.163.com/course/introduction/1005981003.htm)\n[小白求教：java中modulepath与classpath区别是什么？](https://bbs.csdn.net/topics/392628907)","slug":"web-server-note-7","published":1,"updated":"2020-06-13T02:55:34.918Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke3x9g77002izgvug69pafab","content":"<h2 id=\"lombok\"><a href=\"#lombok\" class=\"headerlink\" title=\"lombok\"></a>lombok</h2><p>是一款小巧的代码生成工具<br>自动生成getter与setter方法<br>提高开发效率，代码简洁，直观，减少大量冗余代码，减少后期的维护成本</p>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p><a href=\"https://projectlombok.org/download\" target=\"_blank\" rel=\"noopener\">lombok下载地址</a></p>\n<ol>\n<li>让eclipse认识lombok语法<br>在lombok.jar所在位置，按住Shift右键运行命令行，运行命令：java -jar lombok.jar<br>在弹出的程序中选择指定的Eclipse(没有自动识别就手动选择Eclipse路径)<br>选择Install/Update，（Win10可能报错，需要管理员权限，我的解决办法是：右键管理员权限运行Git Bash然后执行命令）<br>最好重启一下Eclipse</li>\n</ol>\n<p>安装jar包原理<br>把jar拷贝到eclipse当中<br>在eclipse.ini文件当中做了两行配置</p>\n<ol start=\"2\">\n<li>lombok导入jar包<br>快捷键：Ctrl + O 查看该类所有字段和方法</li>\n</ol>\n<p>方式1<br>1.直接把lombok.jar拷贝到工程当中<br>2.buildPath<br>弊端：每一个工程都要拷贝这个jar包</p>\n<p>方式2<br>把<strong>经常用</strong>的jar放到某一个地方，每一次要用，直接引用就行<br>1.右键工程 - Buildd Path - Config Build Path - (如果又Classpath就选这个) - Add Libraries<br>2.在弹出的对话框当中选择User Library用户自己的库<br>3.进入到添加界面，点击右侧添加，新建一个仓库，给仓库起一个名称<br>4.选择刚新建的仓库，点击右侧Add External JARs，找到lombok对应的jar包地址<br>以后每次使用只需要 添加User Library中定义好的jar包即可</p>\n<p>在类上添加注解<br>常用注解<br>@Data ：该注解相当于同时加上以下注解@Setter @Getter @ToString @EqualsAndHashCode，作用于类中</p>\n<p>@Setter @Getter<br>作用于属性上,自动生成get,set方法.<br>也可直接作用于类上，全部属性都添加</p>\n<p>@ToString<br>生成toString方法，默认情况下，会输出类名、所有属性，属性会按照顺序输出，以逗号分割<br>@EqualsAndHashCode ： 生成equals和hascode方法<br>@NoArgsConstructor ：无参构造器<br>@AllArgsConstructor ： 全参构造器</p>\n<h2 id=\"登录注册功能\"><a href=\"#登录注册功能\" class=\"headerlink\" title=\"登录注册功能\"></a>登录注册功能</h2><h4 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h4><p><img src=\"/2020/02/11/web-server-note-7/1.png\" alt=\"登录注册功能分析\"></p>\n<ol>\n<li>新建Dynamic Web Project：Mystore</li>\n<li>建表mystore，字符集：utf8</li>\n<li>建表<br><img src=\"/2020/02/11/web-server-note-7/2.png\" alt=\"建表\"></li>\n<li>domain<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.it666.domain;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Getter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Setter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Setter</span><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String uid; </span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String password;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String phone;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"User [uid=\"</span> + uid + <span class=\"string\">\", username=\"</span> + username + <span class=\"string\">\", password=\"</span> + password + <span class=\"string\">\", phone=\"</span> + phone + <span class=\"string\">\"]\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>把前端代码拿到WebContent里，运行项目测试index打开是否正常<h4 id=\"验证码\"><a href=\"#验证码\" class=\"headerlink\" title=\"验证码\"></a>验证码</h4>复制CheckCodeServlet到com.it666.servlet<br>复制word.txt到WEB-INF<br>修改regist.html<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"check_box\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> &gt;</span>验证码<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/28-Mystore/CheckCodeServlet\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"change(this)\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n开发中如果JS不独立，一般把script标签放在最后（还在body内），HTML加载完，再加载JS<br>添加JS：<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">change</span><span class=\"params\">(obj)</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        obj.src=<span class=\"string\">\"/28-Mystore/CheckCodeServlet?time=\"</span>+<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h4 id=\"前端验证\"><a href=\"#前端验证\" class=\"headerlink\" title=\"前端验证\"></a>前端验证</h4><p>修改submit为buttom，css样式也需要修改，增加conclick</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"submit_button\"</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"立即注册\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"checkDate()\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>安装Eclipse插件（对网络有要求）：<br>Help - Eclipse Marketplace… - 搜索<br>Vue.js(真的好用，但是收费)<br>选择Angular IDE CI - Install - 选择前三个 - 一路都Confirm - 安装结束（右下角可以看到安装进度）后重启Eclipse<br>可能安装不了（这个插件仅用与自动补全代码）</p>\n<p>写JS验证</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 表单内容 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/28-Mystore/RegistServlet\"</span> <span class=\"attr\">id</span>=<span class=\"string\">reg_form</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"userName\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>用户名<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入\"</span> <span class=\"attr\">name</span> = <span class=\"string\">\"username\"</span> &gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>密码<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"pwd\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入\"</span> <span class=\"attr\">name</span> = <span class=\"string\">\"password\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>确认密码<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"pwd2\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>电话<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入\"</span> <span class=\"attr\">name</span> = <span class=\"string\">\"phone\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"check_box\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>验证码<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入\"</span> <span class=\"attr\">name</span> = <span class=\"string\">\"code\"</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">img</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">src</span>=<span class=\"string\">\"/28-Mystore/CheckCodeServlet\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"change(this)\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"submit_button\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"立即注册\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"checkDate()\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--JS部分--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">change</span><span class=\"params\">(obj)</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        obj.src = <span class=\"string\">\"/28-Mystore/CheckCodeServlet?time=\"</span></span></span><br><span class=\"line\"><span class=\"javascript\">                + <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkDate</span><span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// 1.获取用户名、密码、确认密码</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> username = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"username\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> pwd = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"pwd\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> pwd2 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"pwd2\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// 2.判读输入合法性</span></span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">if</span> (username.value == <span class=\"string\">\"\"</span>) &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            alert(<span class=\"string\">\"请输入用户名\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">return</span>;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">if</span> (pwd.value == <span class=\"string\">\"\"</span>) &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            alert(<span class=\"string\">\"请输入密码\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">return</span>;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">if</span> (pwd.value == <span class=\"string\">\"\"</span>) &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            alert(<span class=\"string\">\"请输入密码\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">return</span>;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">if</span> (pwd.value == <span class=\"string\">\"\"</span>) &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            alert(<span class=\"string\">\"请再次输入密码\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">return</span>;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">if</span> (pwd.value == pwd2.value) &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// 1.获取form表单</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">var</span> form = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"reg_form\"</span>);</span></span><br><span class=\"line\">            form.submit();\t\t\t\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\"><span class=\"actionscript\">        &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            alert(<span class=\"string\">\"两次输入的密码不一样\"</span>);</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>RegistServlet类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.it666.servlet;</span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/RegistServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RegistServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RegistServlet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"RegistServlet\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 设置请求编码和响应编码</span></span><br><span class=\"line\">\t\trequest.setCharacterEncoding(<span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">\t\tresponse.setContentType(<span class=\"string\">\"text/html;charset=utf-8\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.判断输入的验证码是否正确</span></span><br><span class=\"line\">\t\tString code = request.getParameter(<span class=\"string\">\"code\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(code);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 2.接收所有参数</span></span><br><span class=\"line\">\t\tObject word = (String) <span class=\"keyword\">this</span>.getServletContext().getAttribute(<span class=\"string\">\"checkCode\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (code.equals(word)) &#123;</span><br><span class=\"line\">\t\t\tresponse.getWriter().write(<span class=\"string\">\"验证码正确\"</span>);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 2.把接收的参数封 装成User对象(导入jar包到lib)</span></span><br><span class=\"line\">\t\t\tUser u = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">\t\t\tMap&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tBeanUtils.populate(u, parameterMap);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (InvocationTargetException e) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tSystem.out.println(u);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 3.设置uid </span></span><br><span class=\"line\">\t\t\tu.setUid(UUID.randomUUID().toString());</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 4.写入到数据库 导入相关Jar包</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// db.properties 修改数据库 放src里， 写JdbcUtil，修改path</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// String path = JDBCUtil.class.getClassLoader().getResource(\"db.properties\").getPath();</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// FileInputStream in = new FileInputStream(path);</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// p.load(in);</span></span><br><span class=\"line\">\t\t\tQueryRunner qr = <span class=\"keyword\">new</span> QueryRunner(JDBCUtil.getDataSource());</span><br><span class=\"line\">\t\t\tString sql = <span class=\"string\">\"insert into user value(?,?,?,?)\"</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tqr.update(sql,u.getUid(),u.getUsername(),u.getPassword(),u.getPhone());</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tresponse.setHeader(<span class=\"string\">\"refresh\"</span>, <span class=\"string\">\"3;url=/28-Mystore/login.html\"</span>);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tresponse.getWriter().write(<span class=\"string\">\"验证码错误\"</span>);</span><br><span class=\"line\">\t\t\tresponse.setHeader(<span class=\"string\">\"refresh\"</span>, <span class=\"string\">\"3;url=/28-Mystore/regist.html\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id><a href=\"#\" class=\"headerlink\" title></a></h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 可以补充前端验证 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/28-Mystore/LoginServlet\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"login\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 用户名 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"userName\"</span> &gt;</span> </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 密码 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"password\"</span> &gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 登录 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"login_btn\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"forgot_pwd\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span>忘记密码<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span>忘记会员名<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span>免费注册<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>LoginServlet 类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.it666.servlet;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/LoginServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取用户名和密码</span></span><br><span class=\"line\">\t\tString name = request.getParameter(<span class=\"string\">\"username\"</span>);</span><br><span class=\"line\">\t\tString pwd = request.getParameter(<span class=\"string\">\"password\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(name + <span class=\"string\">\" \"</span> + pwd);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 查询数据库</span></span><br><span class=\"line\">\t\tQueryRunner qr = <span class=\"keyword\">new</span> QueryRunner(JDBCUtil.getDataSource());</span><br><span class=\"line\">\t\tString sql = <span class=\"string\">\"select * from user where username = ? and password = ?\"</span>;</span><br><span class=\"line\">\t\tUser u = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tu = qr.query(sql, <span class=\"keyword\">new</span> BeanHandler&lt;User&gt;(User.class), name, pwd);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tresponse.setContentType(<span class=\"string\">\"text/html;charset=utf-8\"</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(u);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (u != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tresponse.getWriter().write(<span class=\"string\">\"登录成功\"</span>);</span><br><span class=\"line\">\t\t\tresponse.setHeader(<span class=\"string\">\"refresh\"</span>, <span class=\"string\">\"2;url=/28-Mystore/index.html\"</span>);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tresponse.getWriter().write(<span class=\"string\">\"登录失败\"</span>);</span><br><span class=\"line\">\t\t\tresponse.setHeader(<span class=\"string\">\"refresh\"</span>, <span class=\"string\">\"2;url=/28-Mystore/login.html\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005981003.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级JavaWeb与项目</a><br><a href=\"https://bbs.csdn.net/topics/392628907\" target=\"_blank\" rel=\"noopener\">小白求教：java中modulepath与classpath区别是什么？</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"lombok\"><a href=\"#lombok\" class=\"headerlink\" title=\"lombok\"></a>lombok</h2><p>是一款小巧的代码生成工具<br>自动生成getter与setter方法<br>提高开发效率，代码简洁，直观，减少大量冗余代码，减少后期的维护成本</p>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p><a href=\"https://projectlombok.org/download\" target=\"_blank\" rel=\"noopener\">lombok下载地址</a></p>\n<ol>\n<li>让eclipse认识lombok语法<br>在lombok.jar所在位置，按住Shift右键运行命令行，运行命令：java -jar lombok.jar<br>在弹出的程序中选择指定的Eclipse(没有自动识别就手动选择Eclipse路径)<br>选择Install/Update，（Win10可能报错，需要管理员权限，我的解决办法是：右键管理员权限运行Git Bash然后执行命令）<br>最好重启一下Eclipse</li>\n</ol>\n<p>安装jar包原理<br>把jar拷贝到eclipse当中<br>在eclipse.ini文件当中做了两行配置</p>\n<ol start=\"2\">\n<li>lombok导入jar包<br>快捷键：Ctrl + O 查看该类所有字段和方法</li>\n</ol>\n<p>方式1<br>1.直接把lombok.jar拷贝到工程当中<br>2.buildPath<br>弊端：每一个工程都要拷贝这个jar包</p>\n<p>方式2<br>把<strong>经常用</strong>的jar放到某一个地方，每一次要用，直接引用就行<br>1.右键工程 - Buildd Path - Config Build Path - (如果又Classpath就选这个) - Add Libraries<br>2.在弹出的对话框当中选择User Library用户自己的库<br>3.进入到添加界面，点击右侧添加，新建一个仓库，给仓库起一个名称<br>4.选择刚新建的仓库，点击右侧Add External JARs，找到lombok对应的jar包地址<br>以后每次使用只需要 添加User Library中定义好的jar包即可</p>\n<p>在类上添加注解<br>常用注解<br>@Data ：该注解相当于同时加上以下注解@Setter @Getter @ToString @EqualsAndHashCode，作用于类中</p>\n<p>@Setter @Getter<br>作用于属性上,自动生成get,set方法.<br>也可直接作用于类上，全部属性都添加</p>\n<p>@ToString<br>生成toString方法，默认情况下，会输出类名、所有属性，属性会按照顺序输出，以逗号分割<br>@EqualsAndHashCode ： 生成equals和hascode方法<br>@NoArgsConstructor ：无参构造器<br>@AllArgsConstructor ： 全参构造器</p>\n<h2 id=\"登录注册功能\"><a href=\"#登录注册功能\" class=\"headerlink\" title=\"登录注册功能\"></a>登录注册功能</h2><h4 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h4><p><img src=\"/2020/02/11/web-server-note-7/1.png\" alt=\"登录注册功能分析\"></p>\n<ol>\n<li>新建Dynamic Web Project：Mystore</li>\n<li>建表mystore，字符集：utf8</li>\n<li>建表<br><img src=\"/2020/02/11/web-server-note-7/2.png\" alt=\"建表\"></li>\n<li>domain<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.it666.domain;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Getter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Setter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Setter</span><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String uid; </span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String password;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String phone;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"User [uid=\"</span> + uid + <span class=\"string\">\", username=\"</span> + username + <span class=\"string\">\", password=\"</span> + password + <span class=\"string\">\", phone=\"</span> + phone + <span class=\"string\">\"]\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>把前端代码拿到WebContent里，运行项目测试index打开是否正常<h4 id=\"验证码\"><a href=\"#验证码\" class=\"headerlink\" title=\"验证码\"></a>验证码</h4>复制CheckCodeServlet到com.it666.servlet<br>复制word.txt到WEB-INF<br>修改regist.html<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"check_box\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">label</span> &gt;</span>验证码<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/28-Mystore/CheckCodeServlet\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"change(this)\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n开发中如果JS不独立，一般把script标签放在最后（还在body内），HTML加载完，再加载JS<br>添加JS：<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">change</span><span class=\"params\">(obj)</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        obj.src=<span class=\"string\">\"/28-Mystore/CheckCodeServlet?time=\"</span>+<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h4 id=\"前端验证\"><a href=\"#前端验证\" class=\"headerlink\" title=\"前端验证\"></a>前端验证</h4><p>修改submit为buttom，css样式也需要修改，增加conclick</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"submit_button\"</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"立即注册\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"checkDate()\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>安装Eclipse插件（对网络有要求）：<br>Help - Eclipse Marketplace… - 搜索<br>Vue.js(真的好用，但是收费)<br>选择Angular IDE CI - Install - 选择前三个 - 一路都Confirm - 安装结束（右下角可以看到安装进度）后重启Eclipse<br>可能安装不了（这个插件仅用与自动补全代码）</p>\n<p>写JS验证</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 表单内容 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/28-Mystore/RegistServlet\"</span> <span class=\"attr\">id</span>=<span class=\"string\">reg_form</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"userName\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>用户名<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入\"</span> <span class=\"attr\">name</span> = <span class=\"string\">\"username\"</span> &gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>密码<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"pwd\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入\"</span> <span class=\"attr\">name</span> = <span class=\"string\">\"password\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>确认密码<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"pwd2\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>电话<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入\"</span> <span class=\"attr\">name</span> = <span class=\"string\">\"phone\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"check_box\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>验证码<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入\"</span> <span class=\"attr\">name</span> = <span class=\"string\">\"code\"</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">img</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">src</span>=<span class=\"string\">\"/28-Mystore/CheckCodeServlet\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"change(this)\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"submit_button\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"立即注册\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"checkDate()\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--JS部分--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">change</span><span class=\"params\">(obj)</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        obj.src = <span class=\"string\">\"/28-Mystore/CheckCodeServlet?time=\"</span></span></span><br><span class=\"line\"><span class=\"javascript\">                + <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkDate</span><span class=\"params\">()</span> </span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// 1.获取用户名、密码、确认密码</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> username = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"username\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> pwd = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"pwd\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> pwd2 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"pwd2\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"comment\">// 2.判读输入合法性</span></span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">if</span> (username.value == <span class=\"string\">\"\"</span>) &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            alert(<span class=\"string\">\"请输入用户名\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">return</span>;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">if</span> (pwd.value == <span class=\"string\">\"\"</span>) &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            alert(<span class=\"string\">\"请输入密码\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">return</span>;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">if</span> (pwd.value == <span class=\"string\">\"\"</span>) &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            alert(<span class=\"string\">\"请输入密码\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">return</span>;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">if</span> (pwd.value == <span class=\"string\">\"\"</span>) &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            alert(<span class=\"string\">\"请再次输入密码\"</span>);</span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">return</span>;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">if</span> (pwd.value == pwd2.value) &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"comment\">// 1.获取form表单</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">var</span> form = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"reg_form\"</span>);</span></span><br><span class=\"line\">            form.submit();\t\t\t\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\"><span class=\"actionscript\">        &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            alert(<span class=\"string\">\"两次输入的密码不一样\"</span>);</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>RegistServlet类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.it666.servlet;</span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/RegistServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RegistServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RegistServlet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"RegistServlet\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 设置请求编码和响应编码</span></span><br><span class=\"line\">\t\trequest.setCharacterEncoding(<span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">\t\tresponse.setContentType(<span class=\"string\">\"text/html;charset=utf-8\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.判断输入的验证码是否正确</span></span><br><span class=\"line\">\t\tString code = request.getParameter(<span class=\"string\">\"code\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(code);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 2.接收所有参数</span></span><br><span class=\"line\">\t\tObject word = (String) <span class=\"keyword\">this</span>.getServletContext().getAttribute(<span class=\"string\">\"checkCode\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (code.equals(word)) &#123;</span><br><span class=\"line\">\t\t\tresponse.getWriter().write(<span class=\"string\">\"验证码正确\"</span>);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 2.把接收的参数封 装成User对象(导入jar包到lib)</span></span><br><span class=\"line\">\t\t\tUser u = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">\t\t\tMap&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tBeanUtils.populate(u, parameterMap);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (InvocationTargetException e) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tSystem.out.println(u);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 3.设置uid </span></span><br><span class=\"line\">\t\t\tu.setUid(UUID.randomUUID().toString());</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 4.写入到数据库 导入相关Jar包</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// db.properties 修改数据库 放src里， 写JdbcUtil，修改path</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// String path = JDBCUtil.class.getClassLoader().getResource(\"db.properties\").getPath();</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// FileInputStream in = new FileInputStream(path);</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// p.load(in);</span></span><br><span class=\"line\">\t\t\tQueryRunner qr = <span class=\"keyword\">new</span> QueryRunner(JDBCUtil.getDataSource());</span><br><span class=\"line\">\t\t\tString sql = <span class=\"string\">\"insert into user value(?,?,?,?)\"</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tqr.update(sql,u.getUid(),u.getUsername(),u.getPassword(),u.getPhone());</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tresponse.setHeader(<span class=\"string\">\"refresh\"</span>, <span class=\"string\">\"3;url=/28-Mystore/login.html\"</span>);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tresponse.getWriter().write(<span class=\"string\">\"验证码错误\"</span>);</span><br><span class=\"line\">\t\t\tresponse.setHeader(<span class=\"string\">\"refresh\"</span>, <span class=\"string\">\"3;url=/28-Mystore/regist.html\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id><a href=\"#\" class=\"headerlink\" title></a></h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 可以补充前端验证 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/28-Mystore/LoginServlet\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"login\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 用户名 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"userName\"</span> &gt;</span> </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 密码 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"password\"</span> &gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 登录 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"login_btn\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"forgot_pwd\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span>忘记密码<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span>忘记会员名<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span>免费注册<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>LoginServlet 类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.it666.servlet;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/LoginServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取用户名和密码</span></span><br><span class=\"line\">\t\tString name = request.getParameter(<span class=\"string\">\"username\"</span>);</span><br><span class=\"line\">\t\tString pwd = request.getParameter(<span class=\"string\">\"password\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(name + <span class=\"string\">\" \"</span> + pwd);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 查询数据库</span></span><br><span class=\"line\">\t\tQueryRunner qr = <span class=\"keyword\">new</span> QueryRunner(JDBCUtil.getDataSource());</span><br><span class=\"line\">\t\tString sql = <span class=\"string\">\"select * from user where username = ? and password = ?\"</span>;</span><br><span class=\"line\">\t\tUser u = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tu = qr.query(sql, <span class=\"keyword\">new</span> BeanHandler&lt;User&gt;(User.class), name, pwd);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (SQLException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tresponse.setContentType(<span class=\"string\">\"text/html;charset=utf-8\"</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(u);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (u != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tresponse.getWriter().write(<span class=\"string\">\"登录成功\"</span>);</span><br><span class=\"line\">\t\t\tresponse.setHeader(<span class=\"string\">\"refresh\"</span>, <span class=\"string\">\"2;url=/28-Mystore/index.html\"</span>);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tresponse.getWriter().write(<span class=\"string\">\"登录失败\"</span>);</span><br><span class=\"line\">\t\t\tresponse.setHeader(<span class=\"string\">\"refresh\"</span>, <span class=\"string\">\"2;url=/28-Mystore/login.html\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005981003.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级JavaWeb与项目</a><br><a href=\"https://bbs.csdn.net/topics/392628907\" target=\"_blank\" rel=\"noopener\">小白求教：java中modulepath与classpath区别是什么？</a></p>\n"},{"title":"Web服务器笔记-Request","date":"2020-02-11T05:56:44.000Z","_content":"## 获取请求行、请求头、请求体\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\">\n<title>Insert title here</title>\n</head>\n<body>\n\t<form action=\"/27-Request/RequestServlet\" method=\"get\">\n\t\n\t<input type=\"text\" placeholder=\"请输入一些信息...\" name=\"username\">\n\t<input type=\"text\" placeholder=\"请输入一些信息...\" name=\"pwd\">\n\t\n\t性别：\n\t<input type=\"radio\" value=\"man\" name=\"gender\">男\n\t<input type=\"radio\" value=\"woman\" name=\"gender\">女 <br/>\n\t爱好：\n\t<input type=\"checkbox\" value=\"running\" name=\"hobby\" > 跑步\n\t<input type=\"checkbox\" value=\"swimming\" name=\"hobby\"> 游泳\n\t<input type=\"checkbox\" value=\"singing\" name=\"hobby\"> 唱歌 <br/>\n\t\n\t<input type=\"submit\" value=\"提交\">\n\t\n\t</form>\n</body>\n</html>\n```\n\n```java\npackage com.it666.request;\n\n@WebServlet(\"/RequestServlet\")\npublic class RequestServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tprotected void service(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\tSystem.out.println(\"RequestServlet\");\n\n\t\t// 获取请求行\n\t\t// 1.获取请求方法\n\t\tSystem.out.println(request.getMethod()); // GET POST\n\t\t// 2. 获取请求资源\n\t\tStringBuffer requestURL = request.getRequestURL();\n\t\tString requestURI = request.getRequestURI();\n\t\tSystem.out.println(requestURL); // http://localhost/27-Request/RequestServlet\n\t\tSystem.out.println(requestURI); // /27-Request/RequestServlet\n\t\t// 3.获取get查询参数\n\t\tSystem.out.println(request.getQueryString()); // username=1111&pwd=1111\n\t\t// 4.获取应用名称\n\t\tString contextPath = request.getContextPath();\n\t\tSystem.out.println(contextPath); // /27-Request\n\n\t\t// 获取请求头\n\t\t// 1.获取所有的请求头名称\n\t\tEnumeration<String> headerNames = request.getHeaderNames();\n\t\twhile (headerNames.hasMoreElements()) {\n\t\t\tSystem.out.println(headerNames.nextElement());\n\t\t}\n\t\t/*\n\t\t * accept \n\t\t * referer \n\t\t * accept-language \n\t\t * ua-cpu \n\t\t * accept-encoding \n\t\t * user-agent \n\t\t * host\n\t\t * connection\n\t\t */\n\n\t\t// 2.获取指定的头信息\n\t\tSystem.out.println(request.getHeader(\"referer\")); // http://localhost/27-Request/\n\n\t\t// 3.打印所有的请求头和请求头内容\n\t\tEnumeration<String> headerNames2 = request.getHeaderNames();\n\t\twhile (headerNames2.hasMoreElements()) {\n\t\t\tString name = headerNames2.nextElement();\n\t\t\tSystem.out.println(request.getHeader(name));\n\t\t}\n\n\t\t// 获取请求体\n\t\t// 1.获取一个值\n\t\t\tSystem.out.println(request.getParameter(\"username\"));\n\t\t\n\t\t// 2. 获取多个值\n\t\t\tString[] parameterValues = request.getParameterValues(\"hobby\");\n\t\t\tSystem.out.println(Arrays.toString(parameterValues));\n\t\t\t\n\t\t// 3.获取所有请求参数名称 返回的是一个枚举 (一般用下面4的方法)\n\t\t\tEnumeration<String> parameterNames = request.getParameterNames();\n\t\t\twhile (parameterNames.hasMoreElements()) {\n\t\t\t\tString string = parameterNames.nextElement();\n\t\t\t\tSystem.out.println(string);\n\t\t\t}\n\t\t\t\t\t\t\n\t\t// 4.获取所有请求参数\n\t\t\tMap<String, String[]> parameterMap = request.getParameterMap();\n\t\t\tfor (Map.Entry<String, String[]> entry:parameterMap.entrySet()) {\n\t\t\t\tSystem.out.println(entry.getKey()+\" \"+Arrays.toString(entry.getValue()));\n\t\t\t}\t\t\n\t}\n}\n```\n\t\t\t\t\t\n请求头referer参数：告诉服务器我是从哪个页面链接过来的\n- 通过以下方式发送请求才会获取\n```html\n直接用<a href=\"\">\n用Submit或<input type=\"image\">提交的表单(POST或GET)\n```\n用JavaScript提交的表单(POST或GET)\n\n- 通过以下方式不会有referer\n从收藏夹链接\n单击主页或自定义的地址\n在浏览器中直接输地址\n\n\n什么时候使用get方式与post方式\n1.发送的参数不需要写到数据库当中使用get\n2.发送的参数需要保存到数据库当中使用post\nform一般提交数据的数据为post\n\n中文乱码的原因\n发送请求时， 会对参数进行编码，编码使用的是ISO8859-1  不支持中文，所以乱码\n获取对应的参数，通过iso8859-1转回二进制位，再以utf-8的形式转成字符串\n存在的问题：每一个参数都必须得要转回二进制位，再转为字符串\n\nrequest方法解决中文乱码\n只适用于post\n```java\nrequest.setCharacterEncoding(\"UTF-8\"); \n```\n\n使用BeanUtils把参数封装成对象\n\n```html\n<body>\n\t<form action=\"/27-Request/RequestServlet2\" method=\"post\">\n\t\n\t<input type=\"text\" placeholder=\"请输入一些信息...\" name=\"username\">\n\t<input type=\"text\" placeholder=\"请输入一些信息...\" name=\"pwd\">\n\t\n\t性别：\n\t<input type=\"radio\" value=\"男\" name=\"gender\">男\n\t<input type=\"radio\" value=\"女\" name=\"gender\">女 <br/>\n\t爱好：\n\t<input type=\"checkbox\" value=\"跑步\" name=\"hobby\" > 跑步\n\t<input type=\"checkbox\" value=\"游泳\" name=\"hobby\"> 游泳\n\t<input type=\"checkbox\" value=\"唱歌\" name=\"hobby\"> 唱歌 <br/>\n\t\n\t<input type=\"submit\" value=\"提交\">\n\t\n\t</form>\n</body>\n``` \nUser类：\n```java\npackage com.it666.request;\n\npublic class User {\n\tprivate String username;\n\tprivate String pwd;\n\tprivate String gender;\n\tprivate String [] hobby;\n\tpublic String getUsername() {\n\t\treturn username;\n\t}\n\tpublic void setUsername(String username) {\n\t\tthis.username = username;\n\t}\n\tpublic String getPwd() {\n\t\treturn pwd;\n\t}\n\tpublic void setPwd(String pwd) {\n\t\tthis.pwd = pwd;\n\t}\n\tpublic String getGender() {\n\t\treturn gender;\n\t}\n\tpublic void setGender(String gender) {\n\t\tthis.gender = gender;\n\t}\n\tpublic String[] getHobby() {\n\t\treturn hobby;\n\t}\n\tpublic void setHobby(String[] hobby) {\n\t\tthis.hobby = hobby;\n\t}\n\t@Override\n\tpublic String toString() {\n\t\treturn \"User [username=\" + username + \", pwd=\" + pwd + \", gender=\" + gender + \", hobby=\"\n\t\t\t\t+ Arrays.toString(hobby) + \"]\";\n\t}\n\t\n}\n```\n\nRequestServlet2类：\n```java\npackage com.it666.request;\nimport org.apache.commons.beanutils.BeanUtils;\n\n\n@WebServlet(\"/RequestServlet2\")\npublic class RequestServlet2 extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tprotected void service(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\trequest.setCharacterEncoding(\"UTF-8\"); // 只能用于post\n\t\tString parameter = request.getParameter(\"username\");\n\t\tSystem.out.println(parameter);\n\n\t\t/*\t转二进制流方式处理中文乱码\n\t\tbyte[] bytes = parameter.getBytes(\"ISO8859-1\");\n\t\tString string = new String(bytes,\"UTF-8\");\n\t\tSystem.out.println(string);\n\t\t*/\n\t\t\n\t\tMap<String, String[]> parameterMap = request.getParameterMap();\n\t\t\n\t\t/* 遍历方式：\n\t\tfor (Map.Entry<String, String[]> entry  : parameterMap.entrySet()) {\n\t\t\tSystem.out.println(entry.getKey()+\" \" +Arrays.toString(entry.getValue()));\n\t\t}\n\t\t*/\n\t\t\n\t\t// 导入beanutils的jar包 build path: commons-beanutils-1.8.3.jar commons-logging-1.1.1.jar\n\t\tUser u = new User();\n\t\ttry {\n\t\t\tBeanUtils.populate(u, parameterMap);\n\t\t\tSystem.out.println(u);\n\t\t} catch (IllegalAccessException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (InvocationTargetException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n}\n```\n## 请求转发\n重定向与请求转发的区别\n- 重定向\n\n找servlet1，通过设置响应，告诉浏览器，再让浏览器发送请求到servlet2\n发两次请求，地址栏会发生变化\n\n- 请求转发\n\n请求转发只需要发送一次直接，找servlet1，在servlet1当中直接转发给servlet2，不要再告诉浏览器\n只发送一次请求，浏览器地址栏当中还是servlet1，不会发生变化\n\n![请求转发](web-server-note-6/1.png)\n\n#### 实现转发\n\nServlet1:\n\n```java\npackage com.it666.dispatcher;\n\n@WebServlet(\"/Servlet1\")\npublic class Servlet1 extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\tprotected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\t// 请求转发\n\t\t// 1.通过请求对象获取一个转发器\n\t\tRequestDispatcher disp = request.getRequestDispatcher(\"/Servlet2\");\n\t\t// 2.通过转发器进行转发\n\t\tdisp.forward(request, response);\n\t\t\n\t}\n\n}\n```\n\nServlet2\n```java\npackage com.it666.dispatcher;\n\n@WebServlet(\"/Servlet2\")\npublic class Servlet2 extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tprotected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tSystem.out.println(\"Servlet2\");\n\t}\n\n}\n```\n\n\n#### request域对象\n在一次请求过程当中\nrequest是共享的。在一个servlet当中设置的参数，转发到另外一个servlet，取出来的是同一个\n\n生命周期\n- 创建：发送一个请求时创建一个request对象\n- 销毁：请求结束，浏览器给出响应时，销毁\n- 作用范围：一次请求当中(如果经历多个Servlet，最后一个也是能获取到设置的参数的)\n\n注意两个Servlet的request不是同一个对象\n\nServlet1\n```java\npackage com.it666.dispatcher;\n\n@WebServlet(\"/Servlet1\")\npublic class Servlet1 extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\tprotected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\t// 请求转发\n\t\t// 1.通过请求对象获取一个转发器\n\t\tRequestDispatcher disp = request.getRequestDispatcher(\"/Servlet2\");\n\t\t// 域 存储数据\n\t\trequest.setAttribute(\"lk\", \"it666\");\n\t\t\n\t\t// 2.通过转发器进行转发\n\t\tdisp.forward(request, response);\n\t\t\n\t}\n\n}\n```\n\nServlet2\n```java\npackage com.it666.dispatcher;\n\n@WebServlet(\"/Servlet2\")\npublic class Servlet2 extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tprotected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tSystem.out.println(\"Servlet2\");\n\t\t// 读取 域的数据\n\t\tSystem.out.println(request.getAttribute(\"lk\"));\n\t}\n\n}\n```\n\n#### 客户端地址与服务器端地址\n- 客户端地址\n客户端访问服务器使用的地址\n服务器外部地址\n在写的时候要写上web应用的名称/应用名称/资源\n```html\n<form action=\"/27-Request/RequestServlet\" method=\"get\">\n```\n- 服务器地址\n在服务内部当中使用的地址\n不需要写web应用名称/资源名称\n```java\nRequestDispatcher disp = request.getRequestDispatcher(\"/Servlet2\");\n```\n\n## 参考资料\n\n[Java零基础到高级JavaWeb与项目](https://study.163.com/course/introduction/1005981003.htm)","source":"_posts/web-server-note-6.md","raw":"---\ntitle: Web服务器笔记-Request\ncategories: Web服务器笔记\ndate: 2020-02-11 13:56:44\n---\n## 获取请求行、请求头、请求体\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\">\n<title>Insert title here</title>\n</head>\n<body>\n\t<form action=\"/27-Request/RequestServlet\" method=\"get\">\n\t\n\t<input type=\"text\" placeholder=\"请输入一些信息...\" name=\"username\">\n\t<input type=\"text\" placeholder=\"请输入一些信息...\" name=\"pwd\">\n\t\n\t性别：\n\t<input type=\"radio\" value=\"man\" name=\"gender\">男\n\t<input type=\"radio\" value=\"woman\" name=\"gender\">女 <br/>\n\t爱好：\n\t<input type=\"checkbox\" value=\"running\" name=\"hobby\" > 跑步\n\t<input type=\"checkbox\" value=\"swimming\" name=\"hobby\"> 游泳\n\t<input type=\"checkbox\" value=\"singing\" name=\"hobby\"> 唱歌 <br/>\n\t\n\t<input type=\"submit\" value=\"提交\">\n\t\n\t</form>\n</body>\n</html>\n```\n\n```java\npackage com.it666.request;\n\n@WebServlet(\"/RequestServlet\")\npublic class RequestServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tprotected void service(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\tSystem.out.println(\"RequestServlet\");\n\n\t\t// 获取请求行\n\t\t// 1.获取请求方法\n\t\tSystem.out.println(request.getMethod()); // GET POST\n\t\t// 2. 获取请求资源\n\t\tStringBuffer requestURL = request.getRequestURL();\n\t\tString requestURI = request.getRequestURI();\n\t\tSystem.out.println(requestURL); // http://localhost/27-Request/RequestServlet\n\t\tSystem.out.println(requestURI); // /27-Request/RequestServlet\n\t\t// 3.获取get查询参数\n\t\tSystem.out.println(request.getQueryString()); // username=1111&pwd=1111\n\t\t// 4.获取应用名称\n\t\tString contextPath = request.getContextPath();\n\t\tSystem.out.println(contextPath); // /27-Request\n\n\t\t// 获取请求头\n\t\t// 1.获取所有的请求头名称\n\t\tEnumeration<String> headerNames = request.getHeaderNames();\n\t\twhile (headerNames.hasMoreElements()) {\n\t\t\tSystem.out.println(headerNames.nextElement());\n\t\t}\n\t\t/*\n\t\t * accept \n\t\t * referer \n\t\t * accept-language \n\t\t * ua-cpu \n\t\t * accept-encoding \n\t\t * user-agent \n\t\t * host\n\t\t * connection\n\t\t */\n\n\t\t// 2.获取指定的头信息\n\t\tSystem.out.println(request.getHeader(\"referer\")); // http://localhost/27-Request/\n\n\t\t// 3.打印所有的请求头和请求头内容\n\t\tEnumeration<String> headerNames2 = request.getHeaderNames();\n\t\twhile (headerNames2.hasMoreElements()) {\n\t\t\tString name = headerNames2.nextElement();\n\t\t\tSystem.out.println(request.getHeader(name));\n\t\t}\n\n\t\t// 获取请求体\n\t\t// 1.获取一个值\n\t\t\tSystem.out.println(request.getParameter(\"username\"));\n\t\t\n\t\t// 2. 获取多个值\n\t\t\tString[] parameterValues = request.getParameterValues(\"hobby\");\n\t\t\tSystem.out.println(Arrays.toString(parameterValues));\n\t\t\t\n\t\t// 3.获取所有请求参数名称 返回的是一个枚举 (一般用下面4的方法)\n\t\t\tEnumeration<String> parameterNames = request.getParameterNames();\n\t\t\twhile (parameterNames.hasMoreElements()) {\n\t\t\t\tString string = parameterNames.nextElement();\n\t\t\t\tSystem.out.println(string);\n\t\t\t}\n\t\t\t\t\t\t\n\t\t// 4.获取所有请求参数\n\t\t\tMap<String, String[]> parameterMap = request.getParameterMap();\n\t\t\tfor (Map.Entry<String, String[]> entry:parameterMap.entrySet()) {\n\t\t\t\tSystem.out.println(entry.getKey()+\" \"+Arrays.toString(entry.getValue()));\n\t\t\t}\t\t\n\t}\n}\n```\n\t\t\t\t\t\n请求头referer参数：告诉服务器我是从哪个页面链接过来的\n- 通过以下方式发送请求才会获取\n```html\n直接用<a href=\"\">\n用Submit或<input type=\"image\">提交的表单(POST或GET)\n```\n用JavaScript提交的表单(POST或GET)\n\n- 通过以下方式不会有referer\n从收藏夹链接\n单击主页或自定义的地址\n在浏览器中直接输地址\n\n\n什么时候使用get方式与post方式\n1.发送的参数不需要写到数据库当中使用get\n2.发送的参数需要保存到数据库当中使用post\nform一般提交数据的数据为post\n\n中文乱码的原因\n发送请求时， 会对参数进行编码，编码使用的是ISO8859-1  不支持中文，所以乱码\n获取对应的参数，通过iso8859-1转回二进制位，再以utf-8的形式转成字符串\n存在的问题：每一个参数都必须得要转回二进制位，再转为字符串\n\nrequest方法解决中文乱码\n只适用于post\n```java\nrequest.setCharacterEncoding(\"UTF-8\"); \n```\n\n使用BeanUtils把参数封装成对象\n\n```html\n<body>\n\t<form action=\"/27-Request/RequestServlet2\" method=\"post\">\n\t\n\t<input type=\"text\" placeholder=\"请输入一些信息...\" name=\"username\">\n\t<input type=\"text\" placeholder=\"请输入一些信息...\" name=\"pwd\">\n\t\n\t性别：\n\t<input type=\"radio\" value=\"男\" name=\"gender\">男\n\t<input type=\"radio\" value=\"女\" name=\"gender\">女 <br/>\n\t爱好：\n\t<input type=\"checkbox\" value=\"跑步\" name=\"hobby\" > 跑步\n\t<input type=\"checkbox\" value=\"游泳\" name=\"hobby\"> 游泳\n\t<input type=\"checkbox\" value=\"唱歌\" name=\"hobby\"> 唱歌 <br/>\n\t\n\t<input type=\"submit\" value=\"提交\">\n\t\n\t</form>\n</body>\n``` \nUser类：\n```java\npackage com.it666.request;\n\npublic class User {\n\tprivate String username;\n\tprivate String pwd;\n\tprivate String gender;\n\tprivate String [] hobby;\n\tpublic String getUsername() {\n\t\treturn username;\n\t}\n\tpublic void setUsername(String username) {\n\t\tthis.username = username;\n\t}\n\tpublic String getPwd() {\n\t\treturn pwd;\n\t}\n\tpublic void setPwd(String pwd) {\n\t\tthis.pwd = pwd;\n\t}\n\tpublic String getGender() {\n\t\treturn gender;\n\t}\n\tpublic void setGender(String gender) {\n\t\tthis.gender = gender;\n\t}\n\tpublic String[] getHobby() {\n\t\treturn hobby;\n\t}\n\tpublic void setHobby(String[] hobby) {\n\t\tthis.hobby = hobby;\n\t}\n\t@Override\n\tpublic String toString() {\n\t\treturn \"User [username=\" + username + \", pwd=\" + pwd + \", gender=\" + gender + \", hobby=\"\n\t\t\t\t+ Arrays.toString(hobby) + \"]\";\n\t}\n\t\n}\n```\n\nRequestServlet2类：\n```java\npackage com.it666.request;\nimport org.apache.commons.beanutils.BeanUtils;\n\n\n@WebServlet(\"/RequestServlet2\")\npublic class RequestServlet2 extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tprotected void service(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\trequest.setCharacterEncoding(\"UTF-8\"); // 只能用于post\n\t\tString parameter = request.getParameter(\"username\");\n\t\tSystem.out.println(parameter);\n\n\t\t/*\t转二进制流方式处理中文乱码\n\t\tbyte[] bytes = parameter.getBytes(\"ISO8859-1\");\n\t\tString string = new String(bytes,\"UTF-8\");\n\t\tSystem.out.println(string);\n\t\t*/\n\t\t\n\t\tMap<String, String[]> parameterMap = request.getParameterMap();\n\t\t\n\t\t/* 遍历方式：\n\t\tfor (Map.Entry<String, String[]> entry  : parameterMap.entrySet()) {\n\t\t\tSystem.out.println(entry.getKey()+\" \" +Arrays.toString(entry.getValue()));\n\t\t}\n\t\t*/\n\t\t\n\t\t// 导入beanutils的jar包 build path: commons-beanutils-1.8.3.jar commons-logging-1.1.1.jar\n\t\tUser u = new User();\n\t\ttry {\n\t\t\tBeanUtils.populate(u, parameterMap);\n\t\t\tSystem.out.println(u);\n\t\t} catch (IllegalAccessException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (InvocationTargetException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n}\n```\n## 请求转发\n重定向与请求转发的区别\n- 重定向\n\n找servlet1，通过设置响应，告诉浏览器，再让浏览器发送请求到servlet2\n发两次请求，地址栏会发生变化\n\n- 请求转发\n\n请求转发只需要发送一次直接，找servlet1，在servlet1当中直接转发给servlet2，不要再告诉浏览器\n只发送一次请求，浏览器地址栏当中还是servlet1，不会发生变化\n\n![请求转发](web-server-note-6/1.png)\n\n#### 实现转发\n\nServlet1:\n\n```java\npackage com.it666.dispatcher;\n\n@WebServlet(\"/Servlet1\")\npublic class Servlet1 extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\tprotected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\t// 请求转发\n\t\t// 1.通过请求对象获取一个转发器\n\t\tRequestDispatcher disp = request.getRequestDispatcher(\"/Servlet2\");\n\t\t// 2.通过转发器进行转发\n\t\tdisp.forward(request, response);\n\t\t\n\t}\n\n}\n```\n\nServlet2\n```java\npackage com.it666.dispatcher;\n\n@WebServlet(\"/Servlet2\")\npublic class Servlet2 extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tprotected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tSystem.out.println(\"Servlet2\");\n\t}\n\n}\n```\n\n\n#### request域对象\n在一次请求过程当中\nrequest是共享的。在一个servlet当中设置的参数，转发到另外一个servlet，取出来的是同一个\n\n生命周期\n- 创建：发送一个请求时创建一个request对象\n- 销毁：请求结束，浏览器给出响应时，销毁\n- 作用范围：一次请求当中(如果经历多个Servlet，最后一个也是能获取到设置的参数的)\n\n注意两个Servlet的request不是同一个对象\n\nServlet1\n```java\npackage com.it666.dispatcher;\n\n@WebServlet(\"/Servlet1\")\npublic class Servlet1 extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\tprotected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\t// 请求转发\n\t\t// 1.通过请求对象获取一个转发器\n\t\tRequestDispatcher disp = request.getRequestDispatcher(\"/Servlet2\");\n\t\t// 域 存储数据\n\t\trequest.setAttribute(\"lk\", \"it666\");\n\t\t\n\t\t// 2.通过转发器进行转发\n\t\tdisp.forward(request, response);\n\t\t\n\t}\n\n}\n```\n\nServlet2\n```java\npackage com.it666.dispatcher;\n\n@WebServlet(\"/Servlet2\")\npublic class Servlet2 extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tprotected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tSystem.out.println(\"Servlet2\");\n\t\t// 读取 域的数据\n\t\tSystem.out.println(request.getAttribute(\"lk\"));\n\t}\n\n}\n```\n\n#### 客户端地址与服务器端地址\n- 客户端地址\n客户端访问服务器使用的地址\n服务器外部地址\n在写的时候要写上web应用的名称/应用名称/资源\n```html\n<form action=\"/27-Request/RequestServlet\" method=\"get\">\n```\n- 服务器地址\n在服务内部当中使用的地址\n不需要写web应用名称/资源名称\n```java\nRequestDispatcher disp = request.getRequestDispatcher(\"/Servlet2\");\n```\n\n## 参考资料\n\n[Java零基础到高级JavaWeb与项目](https://study.163.com/course/introduction/1005981003.htm)","slug":"web-server-note-6","published":1,"updated":"2020-06-13T02:55:34.915Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke3x9g79002kzgvucsju9r0r","content":"<h2 id=\"获取请求行、请求头、请求体\"><a href=\"#获取请求行、请求头、请求体\" class=\"headerlink\" title=\"获取请求行、请求头、请求体\"></a>获取请求行、请求头、请求体</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Insert title here<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/27-Request/RequestServlet\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"get\"</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入一些信息...\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入一些信息...\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"pwd\"</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t性别：</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"man\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"gender\"</span>&gt;</span>男</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"woman\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"gender\"</span>&gt;</span>女 <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">\t爱好：</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"running\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hobby\"</span> &gt;</span> 跑步</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"swimming\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hobby\"</span>&gt;</span> 游泳</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"singing\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hobby\"</span>&gt;</span> 唱歌 <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"提交\"</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.it666.request;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/RequestServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RequestServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"RequestServlet\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取请求行</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.获取请求方法</span></span><br><span class=\"line\">\t\tSystem.out.println(request.getMethod()); <span class=\"comment\">// GET POST</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 2. 获取请求资源</span></span><br><span class=\"line\">\t\tStringBuffer requestURL = request.getRequestURL();</span><br><span class=\"line\">\t\tString requestURI = request.getRequestURI();</span><br><span class=\"line\">\t\tSystem.out.println(requestURL); <span class=\"comment\">// http://localhost/27-Request/RequestServlet</span></span><br><span class=\"line\">\t\tSystem.out.println(requestURI); <span class=\"comment\">// /27-Request/RequestServlet</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 3.获取get查询参数</span></span><br><span class=\"line\">\t\tSystem.out.println(request.getQueryString()); <span class=\"comment\">// username=1111&amp;pwd=1111</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 4.获取应用名称</span></span><br><span class=\"line\">\t\tString contextPath = request.getContextPath();</span><br><span class=\"line\">\t\tSystem.out.println(contextPath); <span class=\"comment\">// /27-Request</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取请求头</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.获取所有的请求头名称</span></span><br><span class=\"line\">\t\tEnumeration&lt;String&gt; headerNames = request.getHeaderNames();</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (headerNames.hasMoreElements()) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(headerNames.nextElement());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * accept </span></span><br><span class=\"line\"><span class=\"comment\">\t\t * referer </span></span><br><span class=\"line\"><span class=\"comment\">\t\t * accept-language </span></span><br><span class=\"line\"><span class=\"comment\">\t\t * ua-cpu </span></span><br><span class=\"line\"><span class=\"comment\">\t\t * accept-encoding </span></span><br><span class=\"line\"><span class=\"comment\">\t\t * user-agent </span></span><br><span class=\"line\"><span class=\"comment\">\t\t * host</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * connection</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 2.获取指定的头信息</span></span><br><span class=\"line\">\t\tSystem.out.println(request.getHeader(<span class=\"string\">\"referer\"</span>)); <span class=\"comment\">// http://localhost/27-Request/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 3.打印所有的请求头和请求头内容</span></span><br><span class=\"line\">\t\tEnumeration&lt;String&gt; headerNames2 = request.getHeaderNames();</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (headerNames2.hasMoreElements()) &#123;</span><br><span class=\"line\">\t\t\tString name = headerNames2.nextElement();</span><br><span class=\"line\">\t\t\tSystem.out.println(request.getHeader(name));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取请求体</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.获取一个值</span></span><br><span class=\"line\">\t\t\tSystem.out.println(request.getParameter(<span class=\"string\">\"username\"</span>));</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 2. 获取多个值</span></span><br><span class=\"line\">\t\t\tString[] parameterValues = request.getParameterValues(<span class=\"string\">\"hobby\"</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(Arrays.toString(parameterValues));</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 3.获取所有请求参数名称 返回的是一个枚举 (一般用下面4的方法)</span></span><br><span class=\"line\">\t\t\tEnumeration&lt;String&gt; parameterNames = request.getParameterNames();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (parameterNames.hasMoreElements()) &#123;</span><br><span class=\"line\">\t\t\t\tString string = parameterNames.nextElement();</span><br><span class=\"line\">\t\t\t\tSystem.out.println(string);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 4.获取所有请求参数</span></span><br><span class=\"line\">\t\t\tMap&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (Map.Entry&lt;String, String[]&gt; entry:parameterMap.entrySet()) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(entry.getKey()+<span class=\"string\">\" \"</span>+Arrays.toString(entry.getValue()));</span><br><span class=\"line\">\t\t\t&#125;\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>请求头referer参数：告诉服务器我是从哪个页面链接过来的</p>\n<ul>\n<li><p>通过以下方式发送请求才会获取</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">直接用<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">用Submit或<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"image\"</span>&gt;</span>提交的表单(POST或GET)</span><br></pre></td></tr></table></figure>\n<p>用JavaScript提交的表单(POST或GET)</p>\n</li>\n<li><p>通过以下方式不会有referer<br>从收藏夹链接<br>单击主页或自定义的地址<br>在浏览器中直接输地址</p>\n</li>\n</ul>\n<p>什么时候使用get方式与post方式<br>1.发送的参数不需要写到数据库当中使用get<br>2.发送的参数需要保存到数据库当中使用post<br>form一般提交数据的数据为post</p>\n<p>中文乱码的原因<br>发送请求时， 会对参数进行编码，编码使用的是ISO8859-1  不支持中文，所以乱码<br>获取对应的参数，通过iso8859-1转回二进制位，再以utf-8的形式转成字符串<br>存在的问题：每一个参数都必须得要转回二进制位，再转为字符串</p>\n<p>request方法解决中文乱码<br>只适用于post</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request.setCharacterEncoding(<span class=\"string\">\"UTF-8\"</span>);</span><br></pre></td></tr></table></figure>\n\n<p>使用BeanUtils把参数封装成对象</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/27-Request/RequestServlet2\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入一些信息...\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入一些信息...\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"pwd\"</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t性别：</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"男\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"gender\"</span>&gt;</span>男</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"女\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"gender\"</span>&gt;</span>女 <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">\t爱好：</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"跑步\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hobby\"</span> &gt;</span> 跑步</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"游泳\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hobby\"</span>&gt;</span> 游泳</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"唱歌\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hobby\"</span>&gt;</span> 唱歌 <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"提交\"</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">``` </span><br><span class=\"line\">User类：</span><br><span class=\"line\">```java</span><br><span class=\"line\">package com.it666.request;</span><br><span class=\"line\"></span><br><span class=\"line\">public class User &#123;</span><br><span class=\"line\">\tprivate String username;</span><br><span class=\"line\">\tprivate String pwd;</span><br><span class=\"line\">\tprivate String gender;</span><br><span class=\"line\">\tprivate String [] hobby;</span><br><span class=\"line\">\tpublic String getUsername() &#123;</span><br><span class=\"line\">\t\treturn username;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setUsername(String username) &#123;</span><br><span class=\"line\">\t\tthis.username = username;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic String getPwd() &#123;</span><br><span class=\"line\">\t\treturn pwd;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setPwd(String pwd) &#123;</span><br><span class=\"line\">\t\tthis.pwd = pwd;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic String getGender() &#123;</span><br><span class=\"line\">\t\treturn gender;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setGender(String gender) &#123;</span><br><span class=\"line\">\t\tthis.gender = gender;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic String[] getHobby() &#123;</span><br><span class=\"line\">\t\treturn hobby;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setHobby(String[] hobby) &#123;</span><br><span class=\"line\">\t\tthis.hobby = hobby;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic String toString() &#123;</span><br><span class=\"line\">\t\treturn \"User [username=\" + username + \", pwd=\" + pwd + \", gender=\" + gender + \", hobby=\"</span><br><span class=\"line\">\t\t\t\t+ Arrays.toString(hobby) + \"]\";</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>RequestServlet2类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.it666.request;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.beanutils.BeanUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/RequestServlet2\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RequestServlet2</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\trequest.setCharacterEncoding(<span class=\"string\">\"UTF-8\"</span>); <span class=\"comment\">// 只能用于post</span></span><br><span class=\"line\">\t\tString parameter = request.getParameter(<span class=\"string\">\"username\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(parameter);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">/*\t转二进制流方式处理中文乱码</span></span><br><span class=\"line\"><span class=\"comment\">\t\tbyte[] bytes = parameter.getBytes(\"ISO8859-1\");</span></span><br><span class=\"line\"><span class=\"comment\">\t\tString string = new String(bytes,\"UTF-8\");</span></span><br><span class=\"line\"><span class=\"comment\">\t\tSystem.out.println(string);</span></span><br><span class=\"line\"><span class=\"comment\">\t\t*/</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tMap&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">/* 遍历方式：</span></span><br><span class=\"line\"><span class=\"comment\">\t\tfor (Map.Entry&lt;String, String[]&gt; entry  : parameterMap.entrySet()) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\tSystem.out.println(entry.getKey()+\" \" +Arrays.toString(entry.getValue()));</span></span><br><span class=\"line\"><span class=\"comment\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t*/</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 导入beanutils的jar包 build path: commons-beanutils-1.8.3.jar commons-logging-1.1.1.jar</span></span><br><span class=\"line\">\t\tUser u = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tBeanUtils.populate(u, parameterMap);</span><br><span class=\"line\">\t\t\tSystem.out.println(u);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (InvocationTargetException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"请求转发\"><a href=\"#请求转发\" class=\"headerlink\" title=\"请求转发\"></a>请求转发</h2><p>重定向与请求转发的区别</p>\n<ul>\n<li>重定向</li>\n</ul>\n<p>找servlet1，通过设置响应，告诉浏览器，再让浏览器发送请求到servlet2<br>发两次请求，地址栏会发生变化</p>\n<ul>\n<li>请求转发</li>\n</ul>\n<p>请求转发只需要发送一次直接，找servlet1，在servlet1当中直接转发给servlet2，不要再告诉浏览器<br>只发送一次请求，浏览器地址栏当中还是servlet1，不会发生变化</p>\n<p><img src=\"/2020/02/11/web-server-note-6/1.png\" alt=\"请求转发\"></p>\n<h4 id=\"实现转发\"><a href=\"#实现转发\" class=\"headerlink\" title=\"实现转发\"></a>实现转发</h4><p>Servlet1:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.it666.dispatcher;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/Servlet1\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Servlet1</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 请求转发</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.通过请求对象获取一个转发器</span></span><br><span class=\"line\">\t\tRequestDispatcher disp = request.getRequestDispatcher(<span class=\"string\">\"/Servlet2\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 2.通过转发器进行转发</span></span><br><span class=\"line\">\t\tdisp.forward(request, response);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Servlet2</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.it666.dispatcher;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/Servlet2\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Servlet2</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Servlet2\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"request域对象\"><a href=\"#request域对象\" class=\"headerlink\" title=\"request域对象\"></a>request域对象</h4><p>在一次请求过程当中<br>request是共享的。在一个servlet当中设置的参数，转发到另外一个servlet，取出来的是同一个</p>\n<p>生命周期</p>\n<ul>\n<li>创建：发送一个请求时创建一个request对象</li>\n<li>销毁：请求结束，浏览器给出响应时，销毁</li>\n<li>作用范围：一次请求当中(如果经历多个Servlet，最后一个也是能获取到设置的参数的)</li>\n</ul>\n<p>注意两个Servlet的request不是同一个对象</p>\n<p>Servlet1</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.it666.dispatcher;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/Servlet1\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Servlet1</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 请求转发</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.通过请求对象获取一个转发器</span></span><br><span class=\"line\">\t\tRequestDispatcher disp = request.getRequestDispatcher(<span class=\"string\">\"/Servlet2\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 域 存储数据</span></span><br><span class=\"line\">\t\trequest.setAttribute(<span class=\"string\">\"lk\"</span>, <span class=\"string\">\"it666\"</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 2.通过转发器进行转发</span></span><br><span class=\"line\">\t\tdisp.forward(request, response);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Servlet2</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.it666.dispatcher;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/Servlet2\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Servlet2</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Servlet2\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 读取 域的数据</span></span><br><span class=\"line\">\t\tSystem.out.println(request.getAttribute(<span class=\"string\">\"lk\"</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"客户端地址与服务器端地址\"><a href=\"#客户端地址与服务器端地址\" class=\"headerlink\" title=\"客户端地址与服务器端地址\"></a>客户端地址与服务器端地址</h4><ul>\n<li>客户端地址<br>客户端访问服务器使用的地址<br>服务器外部地址<br>在写的时候要写上web应用的名称/应用名称/资源<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/27-Request/RequestServlet\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"get\"</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>服务器地址<br>在服务内部当中使用的地址<br>不需要写web应用名称/资源名称<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RequestDispatcher disp = request.getRequestDispatcher(<span class=\"string\">\"/Servlet2\"</span>);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005981003.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级JavaWeb与项目</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"获取请求行、请求头、请求体\"><a href=\"#获取请求行、请求头、请求体\" class=\"headerlink\" title=\"获取请求行、请求头、请求体\"></a>获取请求行、请求头、请求体</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Insert title here<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/27-Request/RequestServlet\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"get\"</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入一些信息...\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入一些信息...\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"pwd\"</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t性别：</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"man\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"gender\"</span>&gt;</span>男</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"woman\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"gender\"</span>&gt;</span>女 <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">\t爱好：</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"running\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hobby\"</span> &gt;</span> 跑步</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"swimming\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hobby\"</span>&gt;</span> 游泳</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"singing\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hobby\"</span>&gt;</span> 唱歌 <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"提交\"</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.it666.request;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/RequestServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RequestServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"RequestServlet\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取请求行</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.获取请求方法</span></span><br><span class=\"line\">\t\tSystem.out.println(request.getMethod()); <span class=\"comment\">// GET POST</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 2. 获取请求资源</span></span><br><span class=\"line\">\t\tStringBuffer requestURL = request.getRequestURL();</span><br><span class=\"line\">\t\tString requestURI = request.getRequestURI();</span><br><span class=\"line\">\t\tSystem.out.println(requestURL); <span class=\"comment\">// http://localhost/27-Request/RequestServlet</span></span><br><span class=\"line\">\t\tSystem.out.println(requestURI); <span class=\"comment\">// /27-Request/RequestServlet</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 3.获取get查询参数</span></span><br><span class=\"line\">\t\tSystem.out.println(request.getQueryString()); <span class=\"comment\">// username=1111&amp;pwd=1111</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 4.获取应用名称</span></span><br><span class=\"line\">\t\tString contextPath = request.getContextPath();</span><br><span class=\"line\">\t\tSystem.out.println(contextPath); <span class=\"comment\">// /27-Request</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取请求头</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.获取所有的请求头名称</span></span><br><span class=\"line\">\t\tEnumeration&lt;String&gt; headerNames = request.getHeaderNames();</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (headerNames.hasMoreElements()) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(headerNames.nextElement());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * accept </span></span><br><span class=\"line\"><span class=\"comment\">\t\t * referer </span></span><br><span class=\"line\"><span class=\"comment\">\t\t * accept-language </span></span><br><span class=\"line\"><span class=\"comment\">\t\t * ua-cpu </span></span><br><span class=\"line\"><span class=\"comment\">\t\t * accept-encoding </span></span><br><span class=\"line\"><span class=\"comment\">\t\t * user-agent </span></span><br><span class=\"line\"><span class=\"comment\">\t\t * host</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * connection</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 2.获取指定的头信息</span></span><br><span class=\"line\">\t\tSystem.out.println(request.getHeader(<span class=\"string\">\"referer\"</span>)); <span class=\"comment\">// http://localhost/27-Request/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 3.打印所有的请求头和请求头内容</span></span><br><span class=\"line\">\t\tEnumeration&lt;String&gt; headerNames2 = request.getHeaderNames();</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (headerNames2.hasMoreElements()) &#123;</span><br><span class=\"line\">\t\t\tString name = headerNames2.nextElement();</span><br><span class=\"line\">\t\t\tSystem.out.println(request.getHeader(name));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取请求体</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.获取一个值</span></span><br><span class=\"line\">\t\t\tSystem.out.println(request.getParameter(<span class=\"string\">\"username\"</span>));</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 2. 获取多个值</span></span><br><span class=\"line\">\t\t\tString[] parameterValues = request.getParameterValues(<span class=\"string\">\"hobby\"</span>);</span><br><span class=\"line\">\t\t\tSystem.out.println(Arrays.toString(parameterValues));</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 3.获取所有请求参数名称 返回的是一个枚举 (一般用下面4的方法)</span></span><br><span class=\"line\">\t\t\tEnumeration&lt;String&gt; parameterNames = request.getParameterNames();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (parameterNames.hasMoreElements()) &#123;</span><br><span class=\"line\">\t\t\t\tString string = parameterNames.nextElement();</span><br><span class=\"line\">\t\t\t\tSystem.out.println(string);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 4.获取所有请求参数</span></span><br><span class=\"line\">\t\t\tMap&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (Map.Entry&lt;String, String[]&gt; entry:parameterMap.entrySet()) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(entry.getKey()+<span class=\"string\">\" \"</span>+Arrays.toString(entry.getValue()));</span><br><span class=\"line\">\t\t\t&#125;\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>请求头referer参数：告诉服务器我是从哪个页面链接过来的</p>\n<ul>\n<li><p>通过以下方式发送请求才会获取</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">直接用<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span></span><br><span class=\"line\">用Submit或<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"image\"</span>&gt;</span>提交的表单(POST或GET)</span><br></pre></td></tr></table></figure>\n<p>用JavaScript提交的表单(POST或GET)</p>\n</li>\n<li><p>通过以下方式不会有referer<br>从收藏夹链接<br>单击主页或自定义的地址<br>在浏览器中直接输地址</p>\n</li>\n</ul>\n<p>什么时候使用get方式与post方式<br>1.发送的参数不需要写到数据库当中使用get<br>2.发送的参数需要保存到数据库当中使用post<br>form一般提交数据的数据为post</p>\n<p>中文乱码的原因<br>发送请求时， 会对参数进行编码，编码使用的是ISO8859-1  不支持中文，所以乱码<br>获取对应的参数，通过iso8859-1转回二进制位，再以utf-8的形式转成字符串<br>存在的问题：每一个参数都必须得要转回二进制位，再转为字符串</p>\n<p>request方法解决中文乱码<br>只适用于post</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request.setCharacterEncoding(<span class=\"string\">\"UTF-8\"</span>);</span><br></pre></td></tr></table></figure>\n\n<p>使用BeanUtils把参数封装成对象</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/27-Request/RequestServlet2\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入一些信息...\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入一些信息...\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"pwd\"</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t性别：</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"男\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"gender\"</span>&gt;</span>男</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"radio\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"女\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"gender\"</span>&gt;</span>女 <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">\t爱好：</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"跑步\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hobby\"</span> &gt;</span> 跑步</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"游泳\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hobby\"</span>&gt;</span> 游泳</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"唱歌\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"hobby\"</span>&gt;</span> 唱歌 <span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"提交\"</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">``` </span><br><span class=\"line\">User类：</span><br><span class=\"line\">```java</span><br><span class=\"line\">package com.it666.request;</span><br><span class=\"line\"></span><br><span class=\"line\">public class User &#123;</span><br><span class=\"line\">\tprivate String username;</span><br><span class=\"line\">\tprivate String pwd;</span><br><span class=\"line\">\tprivate String gender;</span><br><span class=\"line\">\tprivate String [] hobby;</span><br><span class=\"line\">\tpublic String getUsername() &#123;</span><br><span class=\"line\">\t\treturn username;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setUsername(String username) &#123;</span><br><span class=\"line\">\t\tthis.username = username;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic String getPwd() &#123;</span><br><span class=\"line\">\t\treturn pwd;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setPwd(String pwd) &#123;</span><br><span class=\"line\">\t\tthis.pwd = pwd;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic String getGender() &#123;</span><br><span class=\"line\">\t\treturn gender;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setGender(String gender) &#123;</span><br><span class=\"line\">\t\tthis.gender = gender;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic String[] getHobby() &#123;</span><br><span class=\"line\">\t\treturn hobby;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void setHobby(String[] hobby) &#123;</span><br><span class=\"line\">\t\tthis.hobby = hobby;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t@Override</span><br><span class=\"line\">\tpublic String toString() &#123;</span><br><span class=\"line\">\t\treturn \"User [username=\" + username + \", pwd=\" + pwd + \", gender=\" + gender + \", hobby=\"</span><br><span class=\"line\">\t\t\t\t+ Arrays.toString(hobby) + \"]\";</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>RequestServlet2类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.it666.request;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.beanutils.BeanUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/RequestServlet2\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RequestServlet2</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\trequest.setCharacterEncoding(<span class=\"string\">\"UTF-8\"</span>); <span class=\"comment\">// 只能用于post</span></span><br><span class=\"line\">\t\tString parameter = request.getParameter(<span class=\"string\">\"username\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(parameter);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">/*\t转二进制流方式处理中文乱码</span></span><br><span class=\"line\"><span class=\"comment\">\t\tbyte[] bytes = parameter.getBytes(\"ISO8859-1\");</span></span><br><span class=\"line\"><span class=\"comment\">\t\tString string = new String(bytes,\"UTF-8\");</span></span><br><span class=\"line\"><span class=\"comment\">\t\tSystem.out.println(string);</span></span><br><span class=\"line\"><span class=\"comment\">\t\t*/</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tMap&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">/* 遍历方式：</span></span><br><span class=\"line\"><span class=\"comment\">\t\tfor (Map.Entry&lt;String, String[]&gt; entry  : parameterMap.entrySet()) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\tSystem.out.println(entry.getKey()+\" \" +Arrays.toString(entry.getValue()));</span></span><br><span class=\"line\"><span class=\"comment\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t*/</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 导入beanutils的jar包 build path: commons-beanutils-1.8.3.jar commons-logging-1.1.1.jar</span></span><br><span class=\"line\">\t\tUser u = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tBeanUtils.populate(u, parameterMap);</span><br><span class=\"line\">\t\t\tSystem.out.println(u);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IllegalAccessException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (InvocationTargetException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"请求转发\"><a href=\"#请求转发\" class=\"headerlink\" title=\"请求转发\"></a>请求转发</h2><p>重定向与请求转发的区别</p>\n<ul>\n<li>重定向</li>\n</ul>\n<p>找servlet1，通过设置响应，告诉浏览器，再让浏览器发送请求到servlet2<br>发两次请求，地址栏会发生变化</p>\n<ul>\n<li>请求转发</li>\n</ul>\n<p>请求转发只需要发送一次直接，找servlet1，在servlet1当中直接转发给servlet2，不要再告诉浏览器<br>只发送一次请求，浏览器地址栏当中还是servlet1，不会发生变化</p>\n<p><img src=\"/2020/02/11/web-server-note-6/1.png\" alt=\"请求转发\"></p>\n<h4 id=\"实现转发\"><a href=\"#实现转发\" class=\"headerlink\" title=\"实现转发\"></a>实现转发</h4><p>Servlet1:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.it666.dispatcher;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/Servlet1\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Servlet1</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 请求转发</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.通过请求对象获取一个转发器</span></span><br><span class=\"line\">\t\tRequestDispatcher disp = request.getRequestDispatcher(<span class=\"string\">\"/Servlet2\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 2.通过转发器进行转发</span></span><br><span class=\"line\">\t\tdisp.forward(request, response);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Servlet2</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.it666.dispatcher;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/Servlet2\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Servlet2</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Servlet2\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"request域对象\"><a href=\"#request域对象\" class=\"headerlink\" title=\"request域对象\"></a>request域对象</h4><p>在一次请求过程当中<br>request是共享的。在一个servlet当中设置的参数，转发到另外一个servlet，取出来的是同一个</p>\n<p>生命周期</p>\n<ul>\n<li>创建：发送一个请求时创建一个request对象</li>\n<li>销毁：请求结束，浏览器给出响应时，销毁</li>\n<li>作用范围：一次请求当中(如果经历多个Servlet，最后一个也是能获取到设置的参数的)</li>\n</ul>\n<p>注意两个Servlet的request不是同一个对象</p>\n<p>Servlet1</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.it666.dispatcher;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/Servlet1\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Servlet1</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 请求转发</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 1.通过请求对象获取一个转发器</span></span><br><span class=\"line\">\t\tRequestDispatcher disp = request.getRequestDispatcher(<span class=\"string\">\"/Servlet2\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 域 存储数据</span></span><br><span class=\"line\">\t\trequest.setAttribute(<span class=\"string\">\"lk\"</span>, <span class=\"string\">\"it666\"</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 2.通过转发器进行转发</span></span><br><span class=\"line\">\t\tdisp.forward(request, response);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Servlet2</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.it666.dispatcher;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/Servlet2\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Servlet2</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"Servlet2\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 读取 域的数据</span></span><br><span class=\"line\">\t\tSystem.out.println(request.getAttribute(<span class=\"string\">\"lk\"</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"客户端地址与服务器端地址\"><a href=\"#客户端地址与服务器端地址\" class=\"headerlink\" title=\"客户端地址与服务器端地址\"></a>客户端地址与服务器端地址</h4><ul>\n<li>客户端地址<br>客户端访问服务器使用的地址<br>服务器外部地址<br>在写的时候要写上web应用的名称/应用名称/资源<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/27-Request/RequestServlet\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"get\"</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n<li>服务器地址<br>在服务内部当中使用的地址<br>不需要写web应用名称/资源名称<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RequestDispatcher disp = request.getRequestDispatcher(<span class=\"string\">\"/Servlet2\"</span>);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005981003.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级JavaWeb与项目</a></p>\n"},{"title":"Web服务器笔记-Cookie与Session","date":"2020-02-13T08:15:43.000Z","_content":"## 会话技术\n用户开一个浏览器，点击多个超链接，访问服务器多个web资源，然后关闭浏览器，整个过程称之为一个会话\n\n会话技术解决什么问题\n\n保持各个客户端自己的数据\n每个用户在使用浏览器与服务器进行会话的过程中，不可避免各自会产生一些数据，程序要想办法为每个用户保存这些数据\n\n使用Request域存在的问题\nRequest域的生命周期为请求开始时创建，请求结束时销毁没有办法办到同时多个商品\n\n使用ServletContext存在的问题\nServletContext生命周期比较长，服务器启动时创建，服务器关闭时销毁存放在这里，容易导致不同用户的各个浏览器之间的数据混淆浪费服务器存储空间\n\n使用Session会话\nSession域：当一个浏览器访问服务器时创建，关闭服务器或过期时，销毁Session域对象\n\n使用Cookie会话\n1. 请求时在Servlet当中主动把商品保存到Cookie当中，Cookie是浏览器当中的一个缓存区域\n2. 在结算请求时，把浏览器缓存中存放的数据发送给服务器\n\n## Cookie \n#### 服务器怎样把Cookie写给客户端\n创建Cookie\n```java\nCookie cookie = new Cookie(String cookieName,String cookieValue);\n```\ncookie会以响应头的形式发送给客户端，Cookie只能存储非中文的字符串\n\n向客户端发送cookie\n```java\nresponse.addCookie(cookie名称);\n```\n\n访问\n第一次访问时， 请求头当中没有cookie，响应当中会看到set-cookie\n再一次访问时， 请求头当中就能够看到cookie信息\n访问服务器的任何资源，一般情况下都会把cookie带去过\n\n#### Cookie默认存储时间\n默认cookie：会话级别\n打开浏览器、关闭浏览器为一次会话\n如果不设置持久化时间，cookie会存储在浏览器的内存中，浏览器关闭\tcookie信息销毁\n\n设置Cookie在客户端的存储时间\n```java\ncookie.setMaxAge(int seconds);\n```\n设置的时间为秒\n如果设置持久化时间，cookie信息会被持久化到浏览器的磁盘文件里\n过期会自动删除\n\n#### 设置Cookie的携带路径\n访问某一个资源时，要不要带cookie信息\n    如何每一外资源都携带，会影响传输速度 \n如果不设置携带路径\n默认情况下会在访问创建cookie的web资源相同的路径（相同目录下）都携带cookie信息\n```\n当前Servlet路径：http://localhost/29-Cookie-Session/CookieServlet\nweb资源相同的路径：http://localhost/29-Cookie-Session/CookieServlet2\n```\n在myxq/CookieServlet下创建的cookie，在myxq/下的index.jsp访问时会携带cookie，不是在myxq下，不会携带cookie\n\n设置携带路径\n```java\ncookie.setPath(String path);\n\n// 只有访问cookieServlet才携带cookie信息\ncookie.setPath(“/29-Cookie-Session/cookieServlet”);\n\n// 访问指定的工程时， 都会携带cookie信息\ncookie.setPath(“/29-Cookie-Session”);\n\n// 访问服务器下部署的所有工程时都会携带cookie\ncookie.setPath(“/”);\n```\n\n\n#### 删除Cookie\n如果想删除客户端的已经存储的cookie信息\n使用同名同路径的持久化时间为0的cookie进行覆盖即可\n```java\nCookie cookie = new Cookie(\"lk\",\"it666\");\ncookie.setMaxAge(0);\nresponse.addCookie(cookie);\n```\n\n#### 服务器如何获取客户端携带的cookie\n通过Request对象的getCookies()方法，获取的是所有的cookie，要进行遍历\n```java\n// 获取所有cookie对象\nCookie[] cookies = request.getCookies();\nif (cookies != null) {\n    for (Cookie cookie : cookies) {\n        String name = cookie.getName();\n        if (name.equals(\"lk\")) {\n            response.getWriter().write(cookie.getValue());\n        }\n    }\n}\n```\n\t\t\n#### 记录上次登录时间\n1.第一次访问时，获取当前的时间，并把它写到cookie当中，响应给浏览器\n2.第一次访问，告诉用户是第一次访问\n3.用户下次访问时，获取用户携带的cookie,把日期在浏览器当中显示，记录最新的cookie\n```java\n// 获取当前日期\nDate date = new Date();\nSimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\nString formatDate = sdf.format(date);\nSystem.out.println(formatDate);\n\n// 写入cookie\nCookie cookie = new Cookie(\"lastTime\", formatDate);\nresponse.addCookie(cookie);\n\n//\nString lastTime = null;\n// 取cookie\nCookie[] cookies = request.getCookies();\nif (cookies != null) {\n    for (Cookie c : cookies) {\n        if (c.getName().equals(\"lastTime\")) {\n            lastTime = c.getValue();\n        }\n    }\n}\n\n\nresponse.setContentType(\"text/html;charset=utf-8\");\nif (lastTime != null) {\n    response.getWriter().write(\"上次登录时间为：\"+lastTime);\n}else {\n    response.getWriter().write(\"您是第一次登录\");\n}\n```\n\n\n## session\nSession技术是将数据存储在服务器端的技术\n会为每个客户端都创建一块**内存空间**存储客户的数据\n客户端需要每次都携带一个标识ID去服务器中寻找属于自己的内存空间\nSession需要借助于Cookie存储客户的唯一性标识SESSIONID\n\n![Session](web-server-note-8/1.png)\nSession如何办到在一个Servlet当中存数据，在另一个Servlet中取出当初存储的数据\n每一个用户访问服务器时，会给该用户分配他自己对应的存储空间\n并且创建的存储空间有一个编号我们称为SessionID\n第一次访问时， 会把对应的sessionID以Cookie的形式写给浏览器\n下次再访问时， 会携带sessionID，到当初创建的那个存储空间中取出数据\n\n#### 获取Session对象\n获得专属于当前会话的Session对象\n```java\n    HttpSession session = request.getSession();\n```\n如果服务器端没有该会话的Session对象，会创建一个新的Session返回\n如果已经有了属于该会话的Session直接将已有的Session返回\n本质就是根据SESSIONID判断该客户端是否在服务器上已经存在Session\n\n#### 向Session当中存取数据\n已经学习的其它两个域对象：ServletContext域、Request域\n\nSession对象也是一个域对象\n```java\nsession.setAttribute(String name,Object obj);\nsession.getAttribute(String name);\nsession.removeAttribute(String name);\n```\n\nSessionServlet\n```java\nHttpSession session = request.getSession();\nsession.setAttribute(\"lk\", \"it666\");\n\n```\nSessionServlet2\n```java\nHttpSession session = request.getSession();\nSystem.out.println(session.getAttribute(\"lk\"));// it666\n```\n#### Session的生命周期\n- 创建\n第一次执行request.getSession()时创建\n- 销毁\n1.服务器关闭时\n2.Session过期/失效（默认30分钟，默认配置在Servers的web.xml里session-timeout，也可在工程web.xml中定义）是从最后一次操作结束时计时\n3.手动销毁对象\n```java\nsession.invadate();\n```\n浏览器关闭，session就销毁，这句话是不正确的\n作用范围：默认在一次会话中，也就是说在一次会话中任何资源公用一个Session对象\n\n#### JsessioID持久化\n默认情况下，第一次获取session对象时，会帮你创建一个Session，可以获取该Session的ID，会自动的把id写到Cookie中\n\n存在的问题\n第一次访问Sevlet1时存储一些数据，在第二个Servlet当中直接取数据，可以直接取到\n再把浏览器关闭，直接到第二个Servlet中取数据，发现取不到数据了\n\n原因\n因为访问的时候要求带着JsessionID.由于默认情况下，存储cookie是会话级别的，关闭浏览器，就没有了\n所以再次打开浏览器，访问资源时，没有jsessionID.  就会创建一个新的Session，就取不到数据\n\n解决办法\n在写数据时，自己手动去把SessionID写到cookie当中\n写的时候，设置持久化时间\n注意，key值一定是和它自动生成的key值是一样的\n\nSessionServlet\n```java\nHttpSession session = request.getSession();\n\nCookie cookie = new Cookie(\"JSESSIONID\", session.getId());\ncookie.setPath(\"/29-Cookie-Session\");\ncookie.setMaxAge(60*2);// 2分钟\nresponse.addCookie(cookie);\n\nsession.setAttribute(\"lk\", \"it666\");\n```\nSessionServlet2\n```java\nHttpSession session = request.getSession();\nSystem.out.println(session.getAttribute(\"lk\"));// it666\n```\n\n## 参考资料\n\n[Java零基础到高级JavaWeb与项目](https://study.163.com/course/introduction/1005981003.htm)","source":"_posts/web-server-note-8.md","raw":"---\ntitle: Web服务器笔记-Cookie与Session\ncategories: Web服务器笔记\ndate: 2020-02-13 16:15:43\n---\n## 会话技术\n用户开一个浏览器，点击多个超链接，访问服务器多个web资源，然后关闭浏览器，整个过程称之为一个会话\n\n会话技术解决什么问题\n\n保持各个客户端自己的数据\n每个用户在使用浏览器与服务器进行会话的过程中，不可避免各自会产生一些数据，程序要想办法为每个用户保存这些数据\n\n使用Request域存在的问题\nRequest域的生命周期为请求开始时创建，请求结束时销毁没有办法办到同时多个商品\n\n使用ServletContext存在的问题\nServletContext生命周期比较长，服务器启动时创建，服务器关闭时销毁存放在这里，容易导致不同用户的各个浏览器之间的数据混淆浪费服务器存储空间\n\n使用Session会话\nSession域：当一个浏览器访问服务器时创建，关闭服务器或过期时，销毁Session域对象\n\n使用Cookie会话\n1. 请求时在Servlet当中主动把商品保存到Cookie当中，Cookie是浏览器当中的一个缓存区域\n2. 在结算请求时，把浏览器缓存中存放的数据发送给服务器\n\n## Cookie \n#### 服务器怎样把Cookie写给客户端\n创建Cookie\n```java\nCookie cookie = new Cookie(String cookieName,String cookieValue);\n```\ncookie会以响应头的形式发送给客户端，Cookie只能存储非中文的字符串\n\n向客户端发送cookie\n```java\nresponse.addCookie(cookie名称);\n```\n\n访问\n第一次访问时， 请求头当中没有cookie，响应当中会看到set-cookie\n再一次访问时， 请求头当中就能够看到cookie信息\n访问服务器的任何资源，一般情况下都会把cookie带去过\n\n#### Cookie默认存储时间\n默认cookie：会话级别\n打开浏览器、关闭浏览器为一次会话\n如果不设置持久化时间，cookie会存储在浏览器的内存中，浏览器关闭\tcookie信息销毁\n\n设置Cookie在客户端的存储时间\n```java\ncookie.setMaxAge(int seconds);\n```\n设置的时间为秒\n如果设置持久化时间，cookie信息会被持久化到浏览器的磁盘文件里\n过期会自动删除\n\n#### 设置Cookie的携带路径\n访问某一个资源时，要不要带cookie信息\n    如何每一外资源都携带，会影响传输速度 \n如果不设置携带路径\n默认情况下会在访问创建cookie的web资源相同的路径（相同目录下）都携带cookie信息\n```\n当前Servlet路径：http://localhost/29-Cookie-Session/CookieServlet\nweb资源相同的路径：http://localhost/29-Cookie-Session/CookieServlet2\n```\n在myxq/CookieServlet下创建的cookie，在myxq/下的index.jsp访问时会携带cookie，不是在myxq下，不会携带cookie\n\n设置携带路径\n```java\ncookie.setPath(String path);\n\n// 只有访问cookieServlet才携带cookie信息\ncookie.setPath(“/29-Cookie-Session/cookieServlet”);\n\n// 访问指定的工程时， 都会携带cookie信息\ncookie.setPath(“/29-Cookie-Session”);\n\n// 访问服务器下部署的所有工程时都会携带cookie\ncookie.setPath(“/”);\n```\n\n\n#### 删除Cookie\n如果想删除客户端的已经存储的cookie信息\n使用同名同路径的持久化时间为0的cookie进行覆盖即可\n```java\nCookie cookie = new Cookie(\"lk\",\"it666\");\ncookie.setMaxAge(0);\nresponse.addCookie(cookie);\n```\n\n#### 服务器如何获取客户端携带的cookie\n通过Request对象的getCookies()方法，获取的是所有的cookie，要进行遍历\n```java\n// 获取所有cookie对象\nCookie[] cookies = request.getCookies();\nif (cookies != null) {\n    for (Cookie cookie : cookies) {\n        String name = cookie.getName();\n        if (name.equals(\"lk\")) {\n            response.getWriter().write(cookie.getValue());\n        }\n    }\n}\n```\n\t\t\n#### 记录上次登录时间\n1.第一次访问时，获取当前的时间，并把它写到cookie当中，响应给浏览器\n2.第一次访问，告诉用户是第一次访问\n3.用户下次访问时，获取用户携带的cookie,把日期在浏览器当中显示，记录最新的cookie\n```java\n// 获取当前日期\nDate date = new Date();\nSimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\nString formatDate = sdf.format(date);\nSystem.out.println(formatDate);\n\n// 写入cookie\nCookie cookie = new Cookie(\"lastTime\", formatDate);\nresponse.addCookie(cookie);\n\n//\nString lastTime = null;\n// 取cookie\nCookie[] cookies = request.getCookies();\nif (cookies != null) {\n    for (Cookie c : cookies) {\n        if (c.getName().equals(\"lastTime\")) {\n            lastTime = c.getValue();\n        }\n    }\n}\n\n\nresponse.setContentType(\"text/html;charset=utf-8\");\nif (lastTime != null) {\n    response.getWriter().write(\"上次登录时间为：\"+lastTime);\n}else {\n    response.getWriter().write(\"您是第一次登录\");\n}\n```\n\n\n## session\nSession技术是将数据存储在服务器端的技术\n会为每个客户端都创建一块**内存空间**存储客户的数据\n客户端需要每次都携带一个标识ID去服务器中寻找属于自己的内存空间\nSession需要借助于Cookie存储客户的唯一性标识SESSIONID\n\n![Session](web-server-note-8/1.png)\nSession如何办到在一个Servlet当中存数据，在另一个Servlet中取出当初存储的数据\n每一个用户访问服务器时，会给该用户分配他自己对应的存储空间\n并且创建的存储空间有一个编号我们称为SessionID\n第一次访问时， 会把对应的sessionID以Cookie的形式写给浏览器\n下次再访问时， 会携带sessionID，到当初创建的那个存储空间中取出数据\n\n#### 获取Session对象\n获得专属于当前会话的Session对象\n```java\n    HttpSession session = request.getSession();\n```\n如果服务器端没有该会话的Session对象，会创建一个新的Session返回\n如果已经有了属于该会话的Session直接将已有的Session返回\n本质就是根据SESSIONID判断该客户端是否在服务器上已经存在Session\n\n#### 向Session当中存取数据\n已经学习的其它两个域对象：ServletContext域、Request域\n\nSession对象也是一个域对象\n```java\nsession.setAttribute(String name,Object obj);\nsession.getAttribute(String name);\nsession.removeAttribute(String name);\n```\n\nSessionServlet\n```java\nHttpSession session = request.getSession();\nsession.setAttribute(\"lk\", \"it666\");\n\n```\nSessionServlet2\n```java\nHttpSession session = request.getSession();\nSystem.out.println(session.getAttribute(\"lk\"));// it666\n```\n#### Session的生命周期\n- 创建\n第一次执行request.getSession()时创建\n- 销毁\n1.服务器关闭时\n2.Session过期/失效（默认30分钟，默认配置在Servers的web.xml里session-timeout，也可在工程web.xml中定义）是从最后一次操作结束时计时\n3.手动销毁对象\n```java\nsession.invadate();\n```\n浏览器关闭，session就销毁，这句话是不正确的\n作用范围：默认在一次会话中，也就是说在一次会话中任何资源公用一个Session对象\n\n#### JsessioID持久化\n默认情况下，第一次获取session对象时，会帮你创建一个Session，可以获取该Session的ID，会自动的把id写到Cookie中\n\n存在的问题\n第一次访问Sevlet1时存储一些数据，在第二个Servlet当中直接取数据，可以直接取到\n再把浏览器关闭，直接到第二个Servlet中取数据，发现取不到数据了\n\n原因\n因为访问的时候要求带着JsessionID.由于默认情况下，存储cookie是会话级别的，关闭浏览器，就没有了\n所以再次打开浏览器，访问资源时，没有jsessionID.  就会创建一个新的Session，就取不到数据\n\n解决办法\n在写数据时，自己手动去把SessionID写到cookie当中\n写的时候，设置持久化时间\n注意，key值一定是和它自动生成的key值是一样的\n\nSessionServlet\n```java\nHttpSession session = request.getSession();\n\nCookie cookie = new Cookie(\"JSESSIONID\", session.getId());\ncookie.setPath(\"/29-Cookie-Session\");\ncookie.setMaxAge(60*2);// 2分钟\nresponse.addCookie(cookie);\n\nsession.setAttribute(\"lk\", \"it666\");\n```\nSessionServlet2\n```java\nHttpSession session = request.getSession();\nSystem.out.println(session.getAttribute(\"lk\"));// it666\n```\n\n## 参考资料\n\n[Java零基础到高级JavaWeb与项目](https://study.163.com/course/introduction/1005981003.htm)","slug":"web-server-note-8","published":1,"updated":"2020-06-13T02:55:34.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke3x9g7a002lzgvuc8cm46oz","content":"<h2 id=\"会话技术\"><a href=\"#会话技术\" class=\"headerlink\" title=\"会话技术\"></a>会话技术</h2><p>用户开一个浏览器，点击多个超链接，访问服务器多个web资源，然后关闭浏览器，整个过程称之为一个会话</p>\n<p>会话技术解决什么问题</p>\n<p>保持各个客户端自己的数据<br>每个用户在使用浏览器与服务器进行会话的过程中，不可避免各自会产生一些数据，程序要想办法为每个用户保存这些数据</p>\n<p>使用Request域存在的问题<br>Request域的生命周期为请求开始时创建，请求结束时销毁没有办法办到同时多个商品</p>\n<p>使用ServletContext存在的问题<br>ServletContext生命周期比较长，服务器启动时创建，服务器关闭时销毁存放在这里，容易导致不同用户的各个浏览器之间的数据混淆浪费服务器存储空间</p>\n<p>使用Session会话<br>Session域：当一个浏览器访问服务器时创建，关闭服务器或过期时，销毁Session域对象</p>\n<p>使用Cookie会话</p>\n<ol>\n<li>请求时在Servlet当中主动把商品保存到Cookie当中，Cookie是浏览器当中的一个缓存区域</li>\n<li>在结算请求时，把浏览器缓存中存放的数据发送给服务器</li>\n</ol>\n<h2 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h2><h4 id=\"服务器怎样把Cookie写给客户端\"><a href=\"#服务器怎样把Cookie写给客户端\" class=\"headerlink\" title=\"服务器怎样把Cookie写给客户端\"></a>服务器怎样把Cookie写给客户端</h4><p>创建Cookie</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cookie cookie = <span class=\"keyword\">new</span> Cookie(String cookieName,String cookieValue);</span><br></pre></td></tr></table></figure>\n<p>cookie会以响应头的形式发送给客户端，Cookie只能存储非中文的字符串</p>\n<p>向客户端发送cookie</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.addCookie(cookie名称);</span><br></pre></td></tr></table></figure>\n\n<p>访问<br>第一次访问时， 请求头当中没有cookie，响应当中会看到set-cookie<br>再一次访问时， 请求头当中就能够看到cookie信息<br>访问服务器的任何资源，一般情况下都会把cookie带去过</p>\n<h4 id=\"Cookie默认存储时间\"><a href=\"#Cookie默认存储时间\" class=\"headerlink\" title=\"Cookie默认存储时间\"></a>Cookie默认存储时间</h4><p>默认cookie：会话级别<br>打开浏览器、关闭浏览器为一次会话<br>如果不设置持久化时间，cookie会存储在浏览器的内存中，浏览器关闭    cookie信息销毁</p>\n<p>设置Cookie在客户端的存储时间</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cookie.setMaxAge(<span class=\"keyword\">int</span> seconds);</span><br></pre></td></tr></table></figure>\n<p>设置的时间为秒<br>如果设置持久化时间，cookie信息会被持久化到浏览器的磁盘文件里<br>过期会自动删除</p>\n<h4 id=\"设置Cookie的携带路径\"><a href=\"#设置Cookie的携带路径\" class=\"headerlink\" title=\"设置Cookie的携带路径\"></a>设置Cookie的携带路径</h4><p>访问某一个资源时，要不要带cookie信息<br>    如何每一外资源都携带，会影响传输速度<br>如果不设置携带路径<br>默认情况下会在访问创建cookie的web资源相同的路径（相同目录下）都携带cookie信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当前Servlet路径：http://localhost/29-Cookie-Session/CookieServlet</span><br><span class=\"line\">web资源相同的路径：http://localhost/29-Cookie-Session/CookieServlet2</span><br></pre></td></tr></table></figure>\n<p>在myxq/CookieServlet下创建的cookie，在myxq/下的index.jsp访问时会携带cookie，不是在myxq下，不会携带cookie</p>\n<p>设置携带路径</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cookie.setPath(String path);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 只有访问cookieServlet才携带cookie信息</span></span><br><span class=\"line\">cookie.setPath(“/<span class=\"number\">29</span>-Cookie-Session/cookieServlet”);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 访问指定的工程时， 都会携带cookie信息</span></span><br><span class=\"line\">cookie.setPath(“/<span class=\"number\">29</span>-Cookie-Session”);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 访问服务器下部署的所有工程时都会携带cookie</span></span><br><span class=\"line\">cookie.setPath(“/”);</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"删除Cookie\"><a href=\"#删除Cookie\" class=\"headerlink\" title=\"删除Cookie\"></a>删除Cookie</h4><p>如果想删除客户端的已经存储的cookie信息<br>使用同名同路径的持久化时间为0的cookie进行覆盖即可</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cookie cookie = <span class=\"keyword\">new</span> Cookie(<span class=\"string\">\"lk\"</span>,<span class=\"string\">\"it666\"</span>);</span><br><span class=\"line\">cookie.setMaxAge(<span class=\"number\">0</span>);</span><br><span class=\"line\">response.addCookie(cookie);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"服务器如何获取客户端携带的cookie\"><a href=\"#服务器如何获取客户端携带的cookie\" class=\"headerlink\" title=\"服务器如何获取客户端携带的cookie\"></a>服务器如何获取客户端携带的cookie</h4><p>通过Request对象的getCookies()方法，获取的是所有的cookie，要进行遍历</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取所有cookie对象</span></span><br><span class=\"line\">Cookie[] cookies = request.getCookies();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (cookies != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Cookie cookie : cookies) &#123;</span><br><span class=\"line\">        String name = cookie.getName();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (name.equals(<span class=\"string\">\"lk\"</span>)) &#123;</span><br><span class=\"line\">            response.getWriter().write(cookie.getValue());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"记录上次登录时间\"><a href=\"#记录上次登录时间\" class=\"headerlink\" title=\"记录上次登录时间\"></a>记录上次登录时间</h4><p>1.第一次访问时，获取当前的时间，并把它写到cookie当中，响应给浏览器<br>2.第一次访问，告诉用户是第一次访问<br>3.用户下次访问时，获取用户携带的cookie,把日期在浏览器当中显示，记录最新的cookie</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取当前日期</span></span><br><span class=\"line\">Date date = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">SimpleDateFormat sdf = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>);</span><br><span class=\"line\">String formatDate = sdf.format(date);</span><br><span class=\"line\">System.out.println(formatDate);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 写入cookie</span></span><br><span class=\"line\">Cookie cookie = <span class=\"keyword\">new</span> Cookie(<span class=\"string\">\"lastTime\"</span>, formatDate);</span><br><span class=\"line\">response.addCookie(cookie);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">String lastTime = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"><span class=\"comment\">// 取cookie</span></span><br><span class=\"line\">Cookie[] cookies = request.getCookies();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (cookies != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Cookie c : cookies) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c.getName().equals(<span class=\"string\">\"lastTime\"</span>)) &#123;</span><br><span class=\"line\">            lastTime = c.getValue();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">response.setContentType(<span class=\"string\">\"text/html;charset=utf-8\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (lastTime != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    response.getWriter().write(<span class=\"string\">\"上次登录时间为：\"</span>+lastTime);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    response.getWriter().write(<span class=\"string\">\"您是第一次登录\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"session\"><a href=\"#session\" class=\"headerlink\" title=\"session\"></a>session</h2><p>Session技术是将数据存储在服务器端的技术<br>会为每个客户端都创建一块<strong>内存空间</strong>存储客户的数据<br>客户端需要每次都携带一个标识ID去服务器中寻找属于自己的内存空间<br>Session需要借助于Cookie存储客户的唯一性标识SESSIONID</p>\n<p><img src=\"/2020/02/13/web-server-note-8/1.png\" alt=\"Session\"><br>Session如何办到在一个Servlet当中存数据，在另一个Servlet中取出当初存储的数据<br>每一个用户访问服务器时，会给该用户分配他自己对应的存储空间<br>并且创建的存储空间有一个编号我们称为SessionID<br>第一次访问时， 会把对应的sessionID以Cookie的形式写给浏览器<br>下次再访问时， 会携带sessionID，到当初创建的那个存储空间中取出数据</p>\n<h4 id=\"获取Session对象\"><a href=\"#获取Session对象\" class=\"headerlink\" title=\"获取Session对象\"></a>获取Session对象</h4><p>获得专属于当前会话的Session对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HttpSession session = request.getSession();</span><br></pre></td></tr></table></figure>\n<p>如果服务器端没有该会话的Session对象，会创建一个新的Session返回<br>如果已经有了属于该会话的Session直接将已有的Session返回<br>本质就是根据SESSIONID判断该客户端是否在服务器上已经存在Session</p>\n<h4 id=\"向Session当中存取数据\"><a href=\"#向Session当中存取数据\" class=\"headerlink\" title=\"向Session当中存取数据\"></a>向Session当中存取数据</h4><p>已经学习的其它两个域对象：ServletContext域、Request域</p>\n<p>Session对象也是一个域对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">session.setAttribute(String name,Object obj);</span><br><span class=\"line\">session.getAttribute(String name);</span><br><span class=\"line\">session.removeAttribute(String name);</span><br></pre></td></tr></table></figure>\n\n<p>SessionServlet</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HttpSession session = request.getSession();</span><br><span class=\"line\">session.setAttribute(<span class=\"string\">\"lk\"</span>, <span class=\"string\">\"it666\"</span>);</span><br></pre></td></tr></table></figure>\n<p>SessionServlet2</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HttpSession session = request.getSession();</span><br><span class=\"line\">System.out.println(session.getAttribute(<span class=\"string\">\"lk\"</span>));<span class=\"comment\">// it666</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Session的生命周期\"><a href=\"#Session的生命周期\" class=\"headerlink\" title=\"Session的生命周期\"></a>Session的生命周期</h4><ul>\n<li>创建<br>第一次执行request.getSession()时创建</li>\n<li>销毁</li>\n</ul>\n<p>1.服务器关闭时<br>2.Session过期/失效（默认30分钟，默认配置在Servers的web.xml里session-timeout，也可在工程web.xml中定义）是从最后一次操作结束时计时<br>3.手动销毁对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">session.invadate();</span><br></pre></td></tr></table></figure>\n<p>浏览器关闭，session就销毁，这句话是不正确的<br>作用范围：默认在一次会话中，也就是说在一次会话中任何资源公用一个Session对象</p>\n<h4 id=\"JsessioID持久化\"><a href=\"#JsessioID持久化\" class=\"headerlink\" title=\"JsessioID持久化\"></a>JsessioID持久化</h4><p>默认情况下，第一次获取session对象时，会帮你创建一个Session，可以获取该Session的ID，会自动的把id写到Cookie中</p>\n<p>存在的问题<br>第一次访问Sevlet1时存储一些数据，在第二个Servlet当中直接取数据，可以直接取到<br>再把浏览器关闭，直接到第二个Servlet中取数据，发现取不到数据了</p>\n<p>原因<br>因为访问的时候要求带着JsessionID.由于默认情况下，存储cookie是会话级别的，关闭浏览器，就没有了<br>所以再次打开浏览器，访问资源时，没有jsessionID.  就会创建一个新的Session，就取不到数据</p>\n<p>解决办法<br>在写数据时，自己手动去把SessionID写到cookie当中<br>写的时候，设置持久化时间<br>注意，key值一定是和它自动生成的key值是一样的</p>\n<p>SessionServlet</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HttpSession session = request.getSession();</span><br><span class=\"line\"></span><br><span class=\"line\">Cookie cookie = <span class=\"keyword\">new</span> Cookie(<span class=\"string\">\"JSESSIONID\"</span>, session.getId());</span><br><span class=\"line\">cookie.setPath(<span class=\"string\">\"/29-Cookie-Session\"</span>);</span><br><span class=\"line\">cookie.setMaxAge(<span class=\"number\">60</span>*<span class=\"number\">2</span>);<span class=\"comment\">// 2分钟</span></span><br><span class=\"line\">response.addCookie(cookie);</span><br><span class=\"line\"></span><br><span class=\"line\">session.setAttribute(<span class=\"string\">\"lk\"</span>, <span class=\"string\">\"it666\"</span>);</span><br></pre></td></tr></table></figure>\n<p>SessionServlet2</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HttpSession session = request.getSession();</span><br><span class=\"line\">System.out.println(session.getAttribute(<span class=\"string\">\"lk\"</span>));<span class=\"comment\">// it666</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005981003.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级JavaWeb与项目</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"会话技术\"><a href=\"#会话技术\" class=\"headerlink\" title=\"会话技术\"></a>会话技术</h2><p>用户开一个浏览器，点击多个超链接，访问服务器多个web资源，然后关闭浏览器，整个过程称之为一个会话</p>\n<p>会话技术解决什么问题</p>\n<p>保持各个客户端自己的数据<br>每个用户在使用浏览器与服务器进行会话的过程中，不可避免各自会产生一些数据，程序要想办法为每个用户保存这些数据</p>\n<p>使用Request域存在的问题<br>Request域的生命周期为请求开始时创建，请求结束时销毁没有办法办到同时多个商品</p>\n<p>使用ServletContext存在的问题<br>ServletContext生命周期比较长，服务器启动时创建，服务器关闭时销毁存放在这里，容易导致不同用户的各个浏览器之间的数据混淆浪费服务器存储空间</p>\n<p>使用Session会话<br>Session域：当一个浏览器访问服务器时创建，关闭服务器或过期时，销毁Session域对象</p>\n<p>使用Cookie会话</p>\n<ol>\n<li>请求时在Servlet当中主动把商品保存到Cookie当中，Cookie是浏览器当中的一个缓存区域</li>\n<li>在结算请求时，把浏览器缓存中存放的数据发送给服务器</li>\n</ol>\n<h2 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h2><h4 id=\"服务器怎样把Cookie写给客户端\"><a href=\"#服务器怎样把Cookie写给客户端\" class=\"headerlink\" title=\"服务器怎样把Cookie写给客户端\"></a>服务器怎样把Cookie写给客户端</h4><p>创建Cookie</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cookie cookie = <span class=\"keyword\">new</span> Cookie(String cookieName,String cookieValue);</span><br></pre></td></tr></table></figure>\n<p>cookie会以响应头的形式发送给客户端，Cookie只能存储非中文的字符串</p>\n<p>向客户端发送cookie</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.addCookie(cookie名称);</span><br></pre></td></tr></table></figure>\n\n<p>访问<br>第一次访问时， 请求头当中没有cookie，响应当中会看到set-cookie<br>再一次访问时， 请求头当中就能够看到cookie信息<br>访问服务器的任何资源，一般情况下都会把cookie带去过</p>\n<h4 id=\"Cookie默认存储时间\"><a href=\"#Cookie默认存储时间\" class=\"headerlink\" title=\"Cookie默认存储时间\"></a>Cookie默认存储时间</h4><p>默认cookie：会话级别<br>打开浏览器、关闭浏览器为一次会话<br>如果不设置持久化时间，cookie会存储在浏览器的内存中，浏览器关闭    cookie信息销毁</p>\n<p>设置Cookie在客户端的存储时间</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cookie.setMaxAge(<span class=\"keyword\">int</span> seconds);</span><br></pre></td></tr></table></figure>\n<p>设置的时间为秒<br>如果设置持久化时间，cookie信息会被持久化到浏览器的磁盘文件里<br>过期会自动删除</p>\n<h4 id=\"设置Cookie的携带路径\"><a href=\"#设置Cookie的携带路径\" class=\"headerlink\" title=\"设置Cookie的携带路径\"></a>设置Cookie的携带路径</h4><p>访问某一个资源时，要不要带cookie信息<br>    如何每一外资源都携带，会影响传输速度<br>如果不设置携带路径<br>默认情况下会在访问创建cookie的web资源相同的路径（相同目录下）都携带cookie信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当前Servlet路径：http://localhost/29-Cookie-Session/CookieServlet</span><br><span class=\"line\">web资源相同的路径：http://localhost/29-Cookie-Session/CookieServlet2</span><br></pre></td></tr></table></figure>\n<p>在myxq/CookieServlet下创建的cookie，在myxq/下的index.jsp访问时会携带cookie，不是在myxq下，不会携带cookie</p>\n<p>设置携带路径</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cookie.setPath(String path);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 只有访问cookieServlet才携带cookie信息</span></span><br><span class=\"line\">cookie.setPath(“/<span class=\"number\">29</span>-Cookie-Session/cookieServlet”);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 访问指定的工程时， 都会携带cookie信息</span></span><br><span class=\"line\">cookie.setPath(“/<span class=\"number\">29</span>-Cookie-Session”);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 访问服务器下部署的所有工程时都会携带cookie</span></span><br><span class=\"line\">cookie.setPath(“/”);</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"删除Cookie\"><a href=\"#删除Cookie\" class=\"headerlink\" title=\"删除Cookie\"></a>删除Cookie</h4><p>如果想删除客户端的已经存储的cookie信息<br>使用同名同路径的持久化时间为0的cookie进行覆盖即可</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cookie cookie = <span class=\"keyword\">new</span> Cookie(<span class=\"string\">\"lk\"</span>,<span class=\"string\">\"it666\"</span>);</span><br><span class=\"line\">cookie.setMaxAge(<span class=\"number\">0</span>);</span><br><span class=\"line\">response.addCookie(cookie);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"服务器如何获取客户端携带的cookie\"><a href=\"#服务器如何获取客户端携带的cookie\" class=\"headerlink\" title=\"服务器如何获取客户端携带的cookie\"></a>服务器如何获取客户端携带的cookie</h4><p>通过Request对象的getCookies()方法，获取的是所有的cookie，要进行遍历</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取所有cookie对象</span></span><br><span class=\"line\">Cookie[] cookies = request.getCookies();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (cookies != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Cookie cookie : cookies) &#123;</span><br><span class=\"line\">        String name = cookie.getName();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (name.equals(<span class=\"string\">\"lk\"</span>)) &#123;</span><br><span class=\"line\">            response.getWriter().write(cookie.getValue());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"记录上次登录时间\"><a href=\"#记录上次登录时间\" class=\"headerlink\" title=\"记录上次登录时间\"></a>记录上次登录时间</h4><p>1.第一次访问时，获取当前的时间，并把它写到cookie当中，响应给浏览器<br>2.第一次访问，告诉用户是第一次访问<br>3.用户下次访问时，获取用户携带的cookie,把日期在浏览器当中显示，记录最新的cookie</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取当前日期</span></span><br><span class=\"line\">Date date = <span class=\"keyword\">new</span> Date();</span><br><span class=\"line\">SimpleDateFormat sdf = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>);</span><br><span class=\"line\">String formatDate = sdf.format(date);</span><br><span class=\"line\">System.out.println(formatDate);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 写入cookie</span></span><br><span class=\"line\">Cookie cookie = <span class=\"keyword\">new</span> Cookie(<span class=\"string\">\"lastTime\"</span>, formatDate);</span><br><span class=\"line\">response.addCookie(cookie);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">String lastTime = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"><span class=\"comment\">// 取cookie</span></span><br><span class=\"line\">Cookie[] cookies = request.getCookies();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (cookies != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Cookie c : cookies) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c.getName().equals(<span class=\"string\">\"lastTime\"</span>)) &#123;</span><br><span class=\"line\">            lastTime = c.getValue();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">response.setContentType(<span class=\"string\">\"text/html;charset=utf-8\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (lastTime != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    response.getWriter().write(<span class=\"string\">\"上次登录时间为：\"</span>+lastTime);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    response.getWriter().write(<span class=\"string\">\"您是第一次登录\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"session\"><a href=\"#session\" class=\"headerlink\" title=\"session\"></a>session</h2><p>Session技术是将数据存储在服务器端的技术<br>会为每个客户端都创建一块<strong>内存空间</strong>存储客户的数据<br>客户端需要每次都携带一个标识ID去服务器中寻找属于自己的内存空间<br>Session需要借助于Cookie存储客户的唯一性标识SESSIONID</p>\n<p><img src=\"/2020/02/13/web-server-note-8/1.png\" alt=\"Session\"><br>Session如何办到在一个Servlet当中存数据，在另一个Servlet中取出当初存储的数据<br>每一个用户访问服务器时，会给该用户分配他自己对应的存储空间<br>并且创建的存储空间有一个编号我们称为SessionID<br>第一次访问时， 会把对应的sessionID以Cookie的形式写给浏览器<br>下次再访问时， 会携带sessionID，到当初创建的那个存储空间中取出数据</p>\n<h4 id=\"获取Session对象\"><a href=\"#获取Session对象\" class=\"headerlink\" title=\"获取Session对象\"></a>获取Session对象</h4><p>获得专属于当前会话的Session对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HttpSession session = request.getSession();</span><br></pre></td></tr></table></figure>\n<p>如果服务器端没有该会话的Session对象，会创建一个新的Session返回<br>如果已经有了属于该会话的Session直接将已有的Session返回<br>本质就是根据SESSIONID判断该客户端是否在服务器上已经存在Session</p>\n<h4 id=\"向Session当中存取数据\"><a href=\"#向Session当中存取数据\" class=\"headerlink\" title=\"向Session当中存取数据\"></a>向Session当中存取数据</h4><p>已经学习的其它两个域对象：ServletContext域、Request域</p>\n<p>Session对象也是一个域对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">session.setAttribute(String name,Object obj);</span><br><span class=\"line\">session.getAttribute(String name);</span><br><span class=\"line\">session.removeAttribute(String name);</span><br></pre></td></tr></table></figure>\n\n<p>SessionServlet</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HttpSession session = request.getSession();</span><br><span class=\"line\">session.setAttribute(<span class=\"string\">\"lk\"</span>, <span class=\"string\">\"it666\"</span>);</span><br></pre></td></tr></table></figure>\n<p>SessionServlet2</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HttpSession session = request.getSession();</span><br><span class=\"line\">System.out.println(session.getAttribute(<span class=\"string\">\"lk\"</span>));<span class=\"comment\">// it666</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Session的生命周期\"><a href=\"#Session的生命周期\" class=\"headerlink\" title=\"Session的生命周期\"></a>Session的生命周期</h4><ul>\n<li>创建<br>第一次执行request.getSession()时创建</li>\n<li>销毁</li>\n</ul>\n<p>1.服务器关闭时<br>2.Session过期/失效（默认30分钟，默认配置在Servers的web.xml里session-timeout，也可在工程web.xml中定义）是从最后一次操作结束时计时<br>3.手动销毁对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">session.invadate();</span><br></pre></td></tr></table></figure>\n<p>浏览器关闭，session就销毁，这句话是不正确的<br>作用范围：默认在一次会话中，也就是说在一次会话中任何资源公用一个Session对象</p>\n<h4 id=\"JsessioID持久化\"><a href=\"#JsessioID持久化\" class=\"headerlink\" title=\"JsessioID持久化\"></a>JsessioID持久化</h4><p>默认情况下，第一次获取session对象时，会帮你创建一个Session，可以获取该Session的ID，会自动的把id写到Cookie中</p>\n<p>存在的问题<br>第一次访问Sevlet1时存储一些数据，在第二个Servlet当中直接取数据，可以直接取到<br>再把浏览器关闭，直接到第二个Servlet中取数据，发现取不到数据了</p>\n<p>原因<br>因为访问的时候要求带着JsessionID.由于默认情况下，存储cookie是会话级别的，关闭浏览器，就没有了<br>所以再次打开浏览器，访问资源时，没有jsessionID.  就会创建一个新的Session，就取不到数据</p>\n<p>解决办法<br>在写数据时，自己手动去把SessionID写到cookie当中<br>写的时候，设置持久化时间<br>注意，key值一定是和它自动生成的key值是一样的</p>\n<p>SessionServlet</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HttpSession session = request.getSession();</span><br><span class=\"line\"></span><br><span class=\"line\">Cookie cookie = <span class=\"keyword\">new</span> Cookie(<span class=\"string\">\"JSESSIONID\"</span>, session.getId());</span><br><span class=\"line\">cookie.setPath(<span class=\"string\">\"/29-Cookie-Session\"</span>);</span><br><span class=\"line\">cookie.setMaxAge(<span class=\"number\">60</span>*<span class=\"number\">2</span>);<span class=\"comment\">// 2分钟</span></span><br><span class=\"line\">response.addCookie(cookie);</span><br><span class=\"line\"></span><br><span class=\"line\">session.setAttribute(<span class=\"string\">\"lk\"</span>, <span class=\"string\">\"it666\"</span>);</span><br></pre></td></tr></table></figure>\n<p>SessionServlet2</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HttpSession session = request.getSession();</span><br><span class=\"line\">System.out.println(session.getAttribute(<span class=\"string\">\"lk\"</span>));<span class=\"comment\">// it666</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005981003.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级JavaWeb与项目</a></p>\n"},{"title":"Web服务器笔记-Response","date":"2020-02-09T09:25:02.000Z","_content":"## ServletContext\nServletContext代表是一个web应用的上下文对象（web应用对象）\n里面封装的都是web应用信息\n一个ServletContext对应一个应用\n\nServletContext的生命周期\n在服务器一启动的时候就会创建\n在服务器关闭的时候销毁\n\n如何获得上下文\n1.通过init方法当中一个参数ServletConfig来获取\n2.直接在HttpServlet当中获取，this.getServletContext，这种方法本质还是通过config来去获取的\n\n子类在覆盖父类init方法的时候最好调用父类的初始化参数super.init(config); \n不传入config，父类就没有config参数\n```java\n@WebServlet(\"/OneServlet\")\npublic class OneServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\tpublic void init(ServletConfig config) throws ServletException {\n\t\tsuper.init(config);\n\t\tServletContext sc1 = config.getServletContext();\n\t\tSystem.out.println(sc1);\n\t}\n\tprotected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tSystem.out.println(\"OneServlet\");\n\t\tServletContext context = this.getServletContext();\n\t\t// 这种方法本质还是通过config获取\n\t\t// 重写了init方法，用这种方法调用空指针异常\n\t\t// 原因是子类覆盖了父类init方法\n\t\t/*\n\t\t@Override\n    \tpublic void init(ServletConfig config) throws ServletException {\n        this.config = config;\n        this.init();\n    \t}\n\t\t */\n\t\t// 解决：在init方法添加super.init(config);\n\t}\n\n}\n```\n                     \n获取全局的初始化参数\n初始化参数不能再某一个Servlet当中来去配置。在最外层来去配置\n获取全局初始化参数\n        \n获得Web应用中某一个资源的资源的绝对路径\ncontext.getRealPath(\"文件\")\n相对的是web应有根目录\ncontext.getRealPath(\"index.html\")\nD:\\Java\\Tomcat\\apache-tomcat-7.0.85\\webapps\\bei\\index.html\n在文件名称前面自动拼接上当前工程的绝对地址\n\n```java\nString  realPath = context.getRealPath(\"WEB-INF/a.txt\"); // a.txt 在WEB-INF里\nSystem.out.println(realPath);// D:\\Tomcat\\apache-tomcat-7.0.85\\webapps\\26-Servlet\\WEB-INF\\a.txt\nSystem.out.println();\n\n// 通过类加载器，获取字节码路径\nString path = OneServlet.class.getClassLoader().getResource(\"c.txt\").getPath(); // c.txt 在src下\nSystem.out.println(path);\t// /D:/Tomcat/apache-tomcat-7.0.85/webapps/26-Servlet/WEB-INF/classes/c.txt\n\n// 如果在包内，路径就要加上包路径\n```\n\nServletContext是一个域对象\n域：能够存储数据\n域对象：能够存取数据数据就的对象\n\nServletContext域对象的作用范围\n整个web应用\n所有的web资源都可以进行存取数据\n数据是可以共享的\n只要是一个域对象上，基本上里面都有这几个方法:\n获取完ServletContext之后向里面写数据：context.setAttribute(String name,Object value);\n获取完ServletContext之后，通过name取出存放的数据：context.getAttribute(String name);\n获取完ServletContext之后，删除指定名称的值：context.removeAttribute(String name);\n\n```java\nServletContext context = config.getServletContext();\nsc1.setAttribute(\"lk\", \"lks\");\nString value =(String) context.getAttribute(\"lk\");// 其他Servlet也可以get到\nSystem.out.println(value);\n```\n\n\n## Response响应过程\n![Response响应过程](web-server-note-5/1.png)\n\n在去发送一个请求时， 会找到tomcat引擎\n引擎会找到对应的web应用，并且会创建request对象和response对象\n找到应用后， 会执行应用的web.xml再去根据url-patten的内容创建Servlet对象\n并且会调用Servlet对象的service方法，并且把创建的request对象和response对象传入到方法当中\n拿到response对象后，  自己可以往响应当中写入一些自己给客户端的内容，通过response.getwrite().wirte(\"写的内容\")方法进行写入\n写的内容，是存到一个response缓冲区当中\n当方法执行结束之后， tomcat就会从response缓冲区当中取出数据，取出你的数据同时，它自己还会自动的往里面添加一些服务器相关的信息进去，所以响应给浏览器时， 可以看到除了自己写的内容， 还会有一些服务器相关的信息\n\n## response\n通过response设置响应行，响应头 ，响应体\n\n#### 设置响应行\nresponse.setState(Int code)\n#### 设置响应头 \nadd：代表添加新的内容\naddHeader(String name,String value)\naddIntHeader(String name,int value)\naddDateHeader(String name,date)\n    \nset：代表设置，已经存在的内容（可以修改自己add，也可以修改默认的）\nsetHeader(String name,String value)\nsetIntHeader(String name,int value)\nsetDateHeader(String name,Date value)\n\n```java\n\t\tresponse.setStatus(302);\n\t\t// add\n\t\tresponse.addHeader(\"name\", \"it666\");\n\t\tresponse.addIntHeader(\"age\", 10);\n\t\tresponse.addDateHeader(\"my-Date\", new Date().getTime());// 获取当前毫秒值\n\t\t// set\n\n```\n\t\t\t\t\n#### 重定向\n到服务器当中去找servlet1，servlet1当中没有这个资源，告诉你去找servlet2，再去发送一个请求到servlet2\n\n状态码：302\n\n特点：要访问两次服务器\n第一次访问是人为的去访问\n第二次是自动的访问\n浏览器地址栏已经发生变化\n\n设置重定向\n```java\n// 1.设置响应码302\nresponse.setStatus(302);\n// 2.设置重定向 /项目名/Servlet名\nresponse.setHeader(\"location\", \"/26-Servlet/LocationServlet\");\n```\n        \n封装的重写向\n每次都要写状态码，和location比较麻烦\n就给封装了一个方法\nresponse.sendRedirect(\"/26-Servlet/LocationServlet\");\n            \n定时刷新重定向\nresponse.setHeader(\"refresh\",\"5;url=http://www.baidu.com\")\n5代表5秒\nurl的值为5秒后要去跳转的地址\n\t\t\t\t\t\t\n##### 设置响应体\n1. 通过write方法来写\nresponse.getwrite().wirte(\"要写的内容或HTML代码\");\n\n默认情况下写的中文内容会乱码\n写的内容存到缓存区中使用的是ISO8859，ISO8859不支持中文，所以会乱码\n\n解决中文乱码：\n在存之前设置可以设置存放的编码\nresponse.setCharacterEncoding(\"UTF-8\")\n告知浏览器使用的是utf-8编码\nresponse.setHeader(\"Content-Type\", \"text/html;charset=UTF-8\");\n\n只需要设置Content-Type就可以了，Tomcat看到设置了为utf-8的编码，它在存的时候也会使用utf-8的编码\n使用封装写法：response.setContentType(\"text/html;charset=UTF-8\");\n\n2. 通过OutPutStream来写\n\nFileInputSteam\nread方法读取一个字节\n    \nread(byte[] b)\n    一次读取多个字节,并存放到数组b中\n    上面是一次一滴一滴给你，这种是一次装一水桶再给你\n        \n读取全部的数据\n        \nFileOutputSteam\nwrite()\n    一次性写一个字符\nwrite(buffer)\n    一个性写多个字符\nwrite(buffer,0,len)\n    一次性写指定个数的字符\n\nresponse注意点\n    getWrite()和getOutputSteam不能同时调用\n\n```java\n// read 读一个字符 完毕返回-1\n// System.out.println(in.read());\nbyte[] buffer = new byte[5];\nSystem.out.println(Arrays.toString(buffer));// [0,0,0,0,0]\n// 当前读取了几个字符 ，读到最后返回-1\nint len = 0;\nwhile ((len = in.read(buffer)) != -1) {\n    System.out.println(new String (buffer,0,len));\n    \n}\n// 关闭文件\nin.close();\n```\n\n写入图片案例\n```java\npackage com.it666.response;\n\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletOutputStream;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\n@WebServlet(\"/ResImgServlet\")\npublic class ResImgServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tprotected void service(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\t// 向浏览器写一张图片\n\t\tString path = this.getServletContext().getRealPath(\"8.png\");\n\t\t// 加载图片\n\t\tFileInputStream in = new FileInputStream(path);\n\n\t\t// 获取输出流\n\t\tServletOutputStream out = response.getOutputStream();\n\t\t\n\t\tbyte[] buffer = new byte[1024];\n\t\tint len = 0;\n\t\twhile ((len = in.read(buffer)) != -1) {\n\t\t\tout.write(buffer,0,len);\n\t\t}\n\t}\n\n}\n```\n\n#### 下载功能\n把服务器当中的文件直接下载到电脑当中\n\n1.直接使用a标签来去下载\n有些内容会浏览器自动解析\n浏览器不能解析的文件才会被下载\n```html\n<body>\n    <!-- 8.png路径：WebContent/download -->\n\t<a href=\"/26-Servlet/download/8.png\">8.png</a>\n</body>\n```\n        \n2.通过发送Servlet请求来去下载\n\n通过发送一个Servlet请求，把文件名发送给服务器\n发送给服务器后，接收到文件名参数，获取文件的绝对地址\n通过流的形式来去写到浏览器\n还得要告诉文件是什么类型\n\n浏览器是以MIME的类型来识别类型\nthis.getServletContext().getMimeType(“文件名称”)\n\n设置响应的类型\nres.setContentType(\"MIME类型\")\n\n设置响应头，告诉浏览器不要去解析，是以附件的形式打开，\nres.setHeader(\"Content-Disposition\",\"attachment;filename=\"+文件名)\n\n步骤\n1.接收文件名参数\n2.获取mime类型\n3.设置浏览器响应类型\n4.告诉浏览器以附件形式下载\n5.获取文件的绝对路径\n6.读取文件流\n7.获取输出流\n8.把内容写出到输出流\n\n```html\n<body>\n\t<!-- ?后面跟参数，多个参数用&隔开 -->\n\t<a href=\"/26-Servlet/DownloadServlet?filename=8.png\">8.png</a>\n</body>\n```\n\n``` java\n// 写在service里\nString name = request.getParameter(\"filename\");\n\t\tSystem.out.println(name);// 8.png\n\t\t\n\t\t//根据文件名获取mime类型\n\t\tString mimeType = this.getServletContext().getMimeType(name);\n\t\tSystem.out.println(\"mimeType:\"+mimeType);// mimeType:image/png\n\t\t\n\t\t//设置mimeType\n\t\tresponse.setContentType(mimeType);\n\t\t\n\t\t// 告诉浏览器以附件形式打开 \n\t\tresponse.setHeader(\"Content-Disposition\", \"attachment;filename=\"+name);\n\t\t\n\t\t// 拼接文件路径\n\t\tString path = this.getServletContext().getRealPath(\"download/\"+name);\n\n\t\t//加载文件\n\t\tFileInputStream in =  new FileInputStream(path);\n\t\t\n\t\t//获取响应的输出\n\t\tServletOutputStream out = response.getOutputStream();\n\t\t\n\t\tbyte [] buffer = new byte[1024];\n\t\tint len =0;\n\t\twhile ((len = in.read(buffer)) != -1) {\n\t\t\tout.write(buffer,0,len);\n\t\t}\n\t\t\n\t\tin.close();\n\n```\n\n\n获取中文参数报错问题\n高版本tomcat中的新特性：就是严格按照 RFC 3986规范进行访问解析，而 RFC 3986规范定义了Url中只允许包含英文字母（a-zA-Z）、数字（0-9）、-_.~4个特殊字符以及所有保留字符(RFC3986中指定了以下字符为保留字符：! * ’ ( ) ; : @ & = + $ , / ? # [ ])\n\n```\n.../conf/catalina.properties中，找到最后注释掉的一行 \n#tomcat.util.http.parser.HttpParser.requestTargetAllow=| 去掉#，在最后加上 {} 表示把{}放行\ntomcat.util.http.parser.HttpParser.requestTargetAllow=|{}\n```\n\n1.把获取的字符串参数的字节码获取，再重新使用utf-8编码\n2.在设置以附件形式打开时， 不同的浏览器会对默认的名字进行解码\n所以根据不同的浏览器，要对名称进行编码之后，再放入文件名\n对文件名进行编码\n不同的浏览器编码不一样，要先获取agent，取出浏览器的类型，根据不同的浏览器类型进行编码\n\n步骤\n\t1.接收文件名称\n\t2.获取mimeType\n\t3.设置浏览器响应类型\n\t4.先对传入的参数转成二进制流，再使用UTF-8进行编码\n\t5.获取浏览器的信息\n\t6.判断是哪一种浏览器，根据不同的浏览器获取一个编码的文件名\n\t7.设置以附件形式下载，传的名称是编码过的名称 \n\t8.获取文件的绝对路径\n\t9.读取文件流\n\t10.获取输出流\n\t11.把文件写到响应当中\n```java\t\t\n\t// 获取客户端信息\n\tString agent = request.getHeader(\"User-Agent\");\n\t// 定义一个变量记录编码之后的名字\n\tString filenameEncoder = \"\";\n\tif (agent.contains(\"MSIE\")) {\n\t\t// IE编码\n\t\tfilenameEncoder = URLEncoder.encode(filename, \"utf-8\");\n\t\tfilenameEncoder = filenameEncoder.replace(\"+\", \" \");\n\t} else if (agent.contains(\"Firefox\")) {\n\t\t// 火狐编码\n\t\tBASE64Encoder base64Encoder = new BASE64Encoder();\n\t\tfilenameEncoder = \"=?utf-8?B?\" + base64Encoder.encode(filename.getBytes(\"utf-8\")) + \"?=\";\n\t} else {\n\t\t// 浏览器编码\n\t\tfilenameEncoder = URLEncoder.encode(filename, \"utf-8\");\n\t}\n\n```\n```java\n// DK中的/lib/tool.jar和/lib/rt.jar已经从Java SE 9中删除\n// JDK9 及以后要用下面的方式导包和创建对象\nimport java.util.Base64;\nimport java.util.Base64.Encoder;\n// 修改代码\nEncoder base64Encoder = Base64.getEncoder();\n```\n\n\n#### 注册验证码功能\n验证码可以防止：恶意批量注册、恶意破解密码、刷票、论坛灌水\n有效防止某个黑客对某一个特定注册用户用特定程序暴力破解方式进行不断的登陆尝试\n确保当前访问是来自一个人而非机器\n\n1. 把别人写好的验证码Servlet拿到程序当中\n\n```java\npackage com.it666.code;\n\nimport java.awt.Color;\nimport java.awt.Font;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.image.BufferedImage;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Random;\n\nimport javax.imageio.ImageIO;\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\n\n@WebServlet(\"/CheckCodeServlet\")\npublic class CheckCodeServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\t// 集合中保存所有成语\n\tprivate List<String> words = new ArrayList<String>();\n\n\t@Override\n\tpublic void init() throws ServletException {\n\t\t// 初始化阶段，读取new_words.txt\n\t\t// web工程中读取 文件,必须使用绝对磁盘路径\n\t\tString path = getServletContext().getRealPath(\"/WEB-INF/words.txt\");\n\t\ttry {\n\t\t\tBufferedReader reader = new BufferedReader(new FileReader(path));\n\t\t\tString line;\n\t\t\t//把读的成语全部添加到一个集合当中\n\t\t\twhile ((line = reader.readLine()) != null) {\n\t\t\t\twords.add(line);\n\t\t\t}\n\t\t\treader.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic void doGet(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\t// 禁止缓存\n\t\tint width = 120;\n\t\tint height = 30;\n\t\t// 步骤一 绘制一张内存中图片\n\t\tBufferedImage bufferedImage = new BufferedImage(width, height,\n\t\t\t\tBufferedImage.TYPE_INT_RGB);\n\t\t// 步骤二 图片绘制背景颜色 ---通过绘图对象\n\t\tGraphics graphics = bufferedImage.getGraphics();// 得到画图对象 --- 画笔\n\t\t// 绘制任何图形之前 都必须指定一个颜色\n\t\tgraphics.setColor(getRandColor(200, 250));\n\t\tgraphics.fillRect(0, 0, width, height);\n\t\t// 步骤三 绘制边框\n\t\tgraphics.setColor(Color.WHITE);\n\t\tgraphics.drawRect(0, 0, width - 1, height - 1);\n\t\t// 步骤四 四个随机数字\n\t\tGraphics2D graphics2d = (Graphics2D) graphics;\n\t\t// 设置输出字体\n\t\tgraphics2d.setFont(new Font(\"宋体\", Font.BOLD, 18));\n\t\tRandom random = new Random();// 生成随机数\n\t\tint index = random.nextInt(words.size());\n\t\tString word = words.get(index);// 获得成语\n\t\t// 定义x坐标\n\t\tint x = 10;\n\t\tfor (int i = 0; i < word.length(); i++) {\n\t\t\t// 随机颜色\n\t\t\tgraphics2d.setColor(new Color(20 + random.nextInt(110), 20 + random\n\t\t\t\t\t.nextInt(110), 20 + random.nextInt(110)));\n\t\t\t// 旋转 -30 --- 30度\n\t\t\tint jiaodu = random.nextInt(60) - 30;\n\t\t\t// 换算弧度\n\t\t\tdouble theta = jiaodu * Math.PI / 180;\n\n\t\t\t// 获得字母数字\n\t\t\tchar c = word.charAt(i);\n\n\t\t\t// 将c 输出到图片\n\t\t\tgraphics2d.rotate(theta, x, 20);\n\t\t\tgraphics2d.drawString(String.valueOf(c), x, 20);\n\t\t\tgraphics2d.rotate(-theta, x, 20);\n\t\t\tx += 30;\n\t\t}\n\n\t\t// 将验证码内容保存session\n\t\trequest.getSession().setAttribute(\"checkcode_session\", word);\n\t\t//把生成的验证码存放到全局域对象当中\n\t\tthis.getServletContext().setAttribute(\"checkCode\", word);\n\t\t// 步骤五 绘制干扰线\n\t\tgraphics.setColor(getRandColor(160, 200));\n\t\tint x1;\n\t\tint x2;\n\t\tint y1;\n\t\tint y2;\n\t\tfor (int i = 0; i < 30; i++) {\n\t\t\tx1 = random.nextInt(width);\n\t\t\tx2 = random.nextInt(12);\n\t\t\ty1 = random.nextInt(height);\n\t\t\ty2 = random.nextInt(12);\n\t\t\tgraphics.drawLine(x1, y1, x1 + x2, x2 + y2);\n\t\t}\n\t\t// 将上面图片输出到浏览器 ImageIO\n\t\tgraphics.dispose();// 释放资源\n\t\t//将图片写到response.getOutputStream()中\n\t\tImageIO.write(bufferedImage, \"jpg\", response.getOutputStream());\n\t}\n\n\tpublic void doPost(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\tdoGet(request, response);\n\t}\n\n\t/**\n\t * 取其某一范围的color\n\t * \n\t * @param fc\n\t *            int 范围参数1\n\t * @param bc\n\t *            int 范围参数2\n\t * @return Color\n\t */\n\tprivate Color getRandColor(int fc, int bc) {\n\t\t// 取其随机颜色\n\t\tRandom random = new Random();\n\t\tif (fc > 255) {\n\t\t\tfc = 255;\n\t\t}\n\t\tif (bc > 255) {\n\t\t\tbc = 255;\n\t\t}\n\t\tint r = fc + random.nextInt(bc - fc);\n\t\tint g = fc + random.nextInt(bc - fc);\n\t\tint b = fc + random.nextInt(bc - fc);\n\t\treturn new Color(r, g, b);\n\t}\n\n}\n```\n\n2. 编写静态页面\n\n```html\n<script type=\"text/javascript\">\n\tfunction change(obj){\n\t\t// alert(obj);\n\t\t// 浏览器加载同样地址使用的是缓存\n\t\tobj.src = \"/26-Servlet/CheckCodeServlet?time\"+new Date().getTime();\n\t}\n</script>\n\n</head>\n<body>\n\t<form action=\"/26-Servlet/RegisterServlet\">\n\t\t\t<img alt=\"\" src=\"/26-Servlet/CheckCodeServlet\" onclick=\"change(this)\"><br/>\n\t\t<!-- this 指的就是这个img -->\n\t\t<input type=\"text\" placeholder=\"请输入验证码...\" name=\"code\"><br/>\n\t\t<input type=\"submit\" value=\"注册\">\n\t</form>\n</body>\n```\n3. 编写判断验证码是否正确Servlet\n\n```java\npackage com.it666.code;\n\nimport java.io.IOException;\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\n@WebServlet(\"/RegisterServlet\")\npublic class RegisterServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tprotected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tString code = request.getParameter(\"code\");\n\t\tSystem.out.println(code); // 中文乱码\n\t\t\n\t\tbyte[] bytes = code.getBytes(\"ISO8859-1\");\n\t\tcode = new String (bytes,\"UTF-8\");\n\t\tSystem.out.println(code);\n\t\t\n\t\t// 取出生成的字符串\n\t\tString  word = (String) this.getServletContext().getAttribute(\"checkCode\");\n\t\t\n\t\t// 设置字符集，不然 下面的字会乱码\n\t\tresponse.setContentType(\"text/html;charset=UTF-8\");\n\t\t\n\t\tif (code.equals(word)) {\n\t\t\tresponse.getWriter().write(\"注册成功\");\n\t\t}else {\n\t\t\tresponse.getWriter().write(\"验证码错误\");\n\t\t\t// 重新跳转到原界面\n\t\t\tresponse.setHeader(\"refresh\", \"1;url=/26-Servlet/code.html\");\n\t\t}\n\t\t\n\t}\n\n}\n\n```\n1.设置响应编码\n2.从ServletContext当中获取验证码\n3.获取传入的请求参数\n4.从servletContext当中取出存放的验证码\n5.把接收的验证码与取出的验证码时行比较\n6.相同时，显示成功\n7.不同时， 显示失败，隔3秒钟跳转到输入验证码界面\n\n\t\t\t\t\t\n\n## 参考资料\n\n[Java零基础到高级JavaWeb与项目](https://study.163.com/course/introduction/1005981003.htm)\n[Java 9版本之后Base64Encoder和Base64Decoder无法继续使用解决办法](https://blog.csdn.net/xie_sining/article/details/80777164)","source":"_posts/web-server-note-5.md","raw":"---\ntitle: Web服务器笔记-Response\ncategories: Web服务器笔记\ndate: 2020-02-09 17:25:02\n---\n## ServletContext\nServletContext代表是一个web应用的上下文对象（web应用对象）\n里面封装的都是web应用信息\n一个ServletContext对应一个应用\n\nServletContext的生命周期\n在服务器一启动的时候就会创建\n在服务器关闭的时候销毁\n\n如何获得上下文\n1.通过init方法当中一个参数ServletConfig来获取\n2.直接在HttpServlet当中获取，this.getServletContext，这种方法本质还是通过config来去获取的\n\n子类在覆盖父类init方法的时候最好调用父类的初始化参数super.init(config); \n不传入config，父类就没有config参数\n```java\n@WebServlet(\"/OneServlet\")\npublic class OneServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\tpublic void init(ServletConfig config) throws ServletException {\n\t\tsuper.init(config);\n\t\tServletContext sc1 = config.getServletContext();\n\t\tSystem.out.println(sc1);\n\t}\n\tprotected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tSystem.out.println(\"OneServlet\");\n\t\tServletContext context = this.getServletContext();\n\t\t// 这种方法本质还是通过config获取\n\t\t// 重写了init方法，用这种方法调用空指针异常\n\t\t// 原因是子类覆盖了父类init方法\n\t\t/*\n\t\t@Override\n    \tpublic void init(ServletConfig config) throws ServletException {\n        this.config = config;\n        this.init();\n    \t}\n\t\t */\n\t\t// 解决：在init方法添加super.init(config);\n\t}\n\n}\n```\n                     \n获取全局的初始化参数\n初始化参数不能再某一个Servlet当中来去配置。在最外层来去配置\n获取全局初始化参数\n        \n获得Web应用中某一个资源的资源的绝对路径\ncontext.getRealPath(\"文件\")\n相对的是web应有根目录\ncontext.getRealPath(\"index.html\")\nD:\\Java\\Tomcat\\apache-tomcat-7.0.85\\webapps\\bei\\index.html\n在文件名称前面自动拼接上当前工程的绝对地址\n\n```java\nString  realPath = context.getRealPath(\"WEB-INF/a.txt\"); // a.txt 在WEB-INF里\nSystem.out.println(realPath);// D:\\Tomcat\\apache-tomcat-7.0.85\\webapps\\26-Servlet\\WEB-INF\\a.txt\nSystem.out.println();\n\n// 通过类加载器，获取字节码路径\nString path = OneServlet.class.getClassLoader().getResource(\"c.txt\").getPath(); // c.txt 在src下\nSystem.out.println(path);\t// /D:/Tomcat/apache-tomcat-7.0.85/webapps/26-Servlet/WEB-INF/classes/c.txt\n\n// 如果在包内，路径就要加上包路径\n```\n\nServletContext是一个域对象\n域：能够存储数据\n域对象：能够存取数据数据就的对象\n\nServletContext域对象的作用范围\n整个web应用\n所有的web资源都可以进行存取数据\n数据是可以共享的\n只要是一个域对象上，基本上里面都有这几个方法:\n获取完ServletContext之后向里面写数据：context.setAttribute(String name,Object value);\n获取完ServletContext之后，通过name取出存放的数据：context.getAttribute(String name);\n获取完ServletContext之后，删除指定名称的值：context.removeAttribute(String name);\n\n```java\nServletContext context = config.getServletContext();\nsc1.setAttribute(\"lk\", \"lks\");\nString value =(String) context.getAttribute(\"lk\");// 其他Servlet也可以get到\nSystem.out.println(value);\n```\n\n\n## Response响应过程\n![Response响应过程](web-server-note-5/1.png)\n\n在去发送一个请求时， 会找到tomcat引擎\n引擎会找到对应的web应用，并且会创建request对象和response对象\n找到应用后， 会执行应用的web.xml再去根据url-patten的内容创建Servlet对象\n并且会调用Servlet对象的service方法，并且把创建的request对象和response对象传入到方法当中\n拿到response对象后，  自己可以往响应当中写入一些自己给客户端的内容，通过response.getwrite().wirte(\"写的内容\")方法进行写入\n写的内容，是存到一个response缓冲区当中\n当方法执行结束之后， tomcat就会从response缓冲区当中取出数据，取出你的数据同时，它自己还会自动的往里面添加一些服务器相关的信息进去，所以响应给浏览器时， 可以看到除了自己写的内容， 还会有一些服务器相关的信息\n\n## response\n通过response设置响应行，响应头 ，响应体\n\n#### 设置响应行\nresponse.setState(Int code)\n#### 设置响应头 \nadd：代表添加新的内容\naddHeader(String name,String value)\naddIntHeader(String name,int value)\naddDateHeader(String name,date)\n    \nset：代表设置，已经存在的内容（可以修改自己add，也可以修改默认的）\nsetHeader(String name,String value)\nsetIntHeader(String name,int value)\nsetDateHeader(String name,Date value)\n\n```java\n\t\tresponse.setStatus(302);\n\t\t// add\n\t\tresponse.addHeader(\"name\", \"it666\");\n\t\tresponse.addIntHeader(\"age\", 10);\n\t\tresponse.addDateHeader(\"my-Date\", new Date().getTime());// 获取当前毫秒值\n\t\t// set\n\n```\n\t\t\t\t\n#### 重定向\n到服务器当中去找servlet1，servlet1当中没有这个资源，告诉你去找servlet2，再去发送一个请求到servlet2\n\n状态码：302\n\n特点：要访问两次服务器\n第一次访问是人为的去访问\n第二次是自动的访问\n浏览器地址栏已经发生变化\n\n设置重定向\n```java\n// 1.设置响应码302\nresponse.setStatus(302);\n// 2.设置重定向 /项目名/Servlet名\nresponse.setHeader(\"location\", \"/26-Servlet/LocationServlet\");\n```\n        \n封装的重写向\n每次都要写状态码，和location比较麻烦\n就给封装了一个方法\nresponse.sendRedirect(\"/26-Servlet/LocationServlet\");\n            \n定时刷新重定向\nresponse.setHeader(\"refresh\",\"5;url=http://www.baidu.com\")\n5代表5秒\nurl的值为5秒后要去跳转的地址\n\t\t\t\t\t\t\n##### 设置响应体\n1. 通过write方法来写\nresponse.getwrite().wirte(\"要写的内容或HTML代码\");\n\n默认情况下写的中文内容会乱码\n写的内容存到缓存区中使用的是ISO8859，ISO8859不支持中文，所以会乱码\n\n解决中文乱码：\n在存之前设置可以设置存放的编码\nresponse.setCharacterEncoding(\"UTF-8\")\n告知浏览器使用的是utf-8编码\nresponse.setHeader(\"Content-Type\", \"text/html;charset=UTF-8\");\n\n只需要设置Content-Type就可以了，Tomcat看到设置了为utf-8的编码，它在存的时候也会使用utf-8的编码\n使用封装写法：response.setContentType(\"text/html;charset=UTF-8\");\n\n2. 通过OutPutStream来写\n\nFileInputSteam\nread方法读取一个字节\n    \nread(byte[] b)\n    一次读取多个字节,并存放到数组b中\n    上面是一次一滴一滴给你，这种是一次装一水桶再给你\n        \n读取全部的数据\n        \nFileOutputSteam\nwrite()\n    一次性写一个字符\nwrite(buffer)\n    一个性写多个字符\nwrite(buffer,0,len)\n    一次性写指定个数的字符\n\nresponse注意点\n    getWrite()和getOutputSteam不能同时调用\n\n```java\n// read 读一个字符 完毕返回-1\n// System.out.println(in.read());\nbyte[] buffer = new byte[5];\nSystem.out.println(Arrays.toString(buffer));// [0,0,0,0,0]\n// 当前读取了几个字符 ，读到最后返回-1\nint len = 0;\nwhile ((len = in.read(buffer)) != -1) {\n    System.out.println(new String (buffer,0,len));\n    \n}\n// 关闭文件\nin.close();\n```\n\n写入图片案例\n```java\npackage com.it666.response;\n\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletOutputStream;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\n@WebServlet(\"/ResImgServlet\")\npublic class ResImgServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tprotected void service(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\t// 向浏览器写一张图片\n\t\tString path = this.getServletContext().getRealPath(\"8.png\");\n\t\t// 加载图片\n\t\tFileInputStream in = new FileInputStream(path);\n\n\t\t// 获取输出流\n\t\tServletOutputStream out = response.getOutputStream();\n\t\t\n\t\tbyte[] buffer = new byte[1024];\n\t\tint len = 0;\n\t\twhile ((len = in.read(buffer)) != -1) {\n\t\t\tout.write(buffer,0,len);\n\t\t}\n\t}\n\n}\n```\n\n#### 下载功能\n把服务器当中的文件直接下载到电脑当中\n\n1.直接使用a标签来去下载\n有些内容会浏览器自动解析\n浏览器不能解析的文件才会被下载\n```html\n<body>\n    <!-- 8.png路径：WebContent/download -->\n\t<a href=\"/26-Servlet/download/8.png\">8.png</a>\n</body>\n```\n        \n2.通过发送Servlet请求来去下载\n\n通过发送一个Servlet请求，把文件名发送给服务器\n发送给服务器后，接收到文件名参数，获取文件的绝对地址\n通过流的形式来去写到浏览器\n还得要告诉文件是什么类型\n\n浏览器是以MIME的类型来识别类型\nthis.getServletContext().getMimeType(“文件名称”)\n\n设置响应的类型\nres.setContentType(\"MIME类型\")\n\n设置响应头，告诉浏览器不要去解析，是以附件的形式打开，\nres.setHeader(\"Content-Disposition\",\"attachment;filename=\"+文件名)\n\n步骤\n1.接收文件名参数\n2.获取mime类型\n3.设置浏览器响应类型\n4.告诉浏览器以附件形式下载\n5.获取文件的绝对路径\n6.读取文件流\n7.获取输出流\n8.把内容写出到输出流\n\n```html\n<body>\n\t<!-- ?后面跟参数，多个参数用&隔开 -->\n\t<a href=\"/26-Servlet/DownloadServlet?filename=8.png\">8.png</a>\n</body>\n```\n\n``` java\n// 写在service里\nString name = request.getParameter(\"filename\");\n\t\tSystem.out.println(name);// 8.png\n\t\t\n\t\t//根据文件名获取mime类型\n\t\tString mimeType = this.getServletContext().getMimeType(name);\n\t\tSystem.out.println(\"mimeType:\"+mimeType);// mimeType:image/png\n\t\t\n\t\t//设置mimeType\n\t\tresponse.setContentType(mimeType);\n\t\t\n\t\t// 告诉浏览器以附件形式打开 \n\t\tresponse.setHeader(\"Content-Disposition\", \"attachment;filename=\"+name);\n\t\t\n\t\t// 拼接文件路径\n\t\tString path = this.getServletContext().getRealPath(\"download/\"+name);\n\n\t\t//加载文件\n\t\tFileInputStream in =  new FileInputStream(path);\n\t\t\n\t\t//获取响应的输出\n\t\tServletOutputStream out = response.getOutputStream();\n\t\t\n\t\tbyte [] buffer = new byte[1024];\n\t\tint len =0;\n\t\twhile ((len = in.read(buffer)) != -1) {\n\t\t\tout.write(buffer,0,len);\n\t\t}\n\t\t\n\t\tin.close();\n\n```\n\n\n获取中文参数报错问题\n高版本tomcat中的新特性：就是严格按照 RFC 3986规范进行访问解析，而 RFC 3986规范定义了Url中只允许包含英文字母（a-zA-Z）、数字（0-9）、-_.~4个特殊字符以及所有保留字符(RFC3986中指定了以下字符为保留字符：! * ’ ( ) ; : @ & = + $ , / ? # [ ])\n\n```\n.../conf/catalina.properties中，找到最后注释掉的一行 \n#tomcat.util.http.parser.HttpParser.requestTargetAllow=| 去掉#，在最后加上 {} 表示把{}放行\ntomcat.util.http.parser.HttpParser.requestTargetAllow=|{}\n```\n\n1.把获取的字符串参数的字节码获取，再重新使用utf-8编码\n2.在设置以附件形式打开时， 不同的浏览器会对默认的名字进行解码\n所以根据不同的浏览器，要对名称进行编码之后，再放入文件名\n对文件名进行编码\n不同的浏览器编码不一样，要先获取agent，取出浏览器的类型，根据不同的浏览器类型进行编码\n\n步骤\n\t1.接收文件名称\n\t2.获取mimeType\n\t3.设置浏览器响应类型\n\t4.先对传入的参数转成二进制流，再使用UTF-8进行编码\n\t5.获取浏览器的信息\n\t6.判断是哪一种浏览器，根据不同的浏览器获取一个编码的文件名\n\t7.设置以附件形式下载，传的名称是编码过的名称 \n\t8.获取文件的绝对路径\n\t9.读取文件流\n\t10.获取输出流\n\t11.把文件写到响应当中\n```java\t\t\n\t// 获取客户端信息\n\tString agent = request.getHeader(\"User-Agent\");\n\t// 定义一个变量记录编码之后的名字\n\tString filenameEncoder = \"\";\n\tif (agent.contains(\"MSIE\")) {\n\t\t// IE编码\n\t\tfilenameEncoder = URLEncoder.encode(filename, \"utf-8\");\n\t\tfilenameEncoder = filenameEncoder.replace(\"+\", \" \");\n\t} else if (agent.contains(\"Firefox\")) {\n\t\t// 火狐编码\n\t\tBASE64Encoder base64Encoder = new BASE64Encoder();\n\t\tfilenameEncoder = \"=?utf-8?B?\" + base64Encoder.encode(filename.getBytes(\"utf-8\")) + \"?=\";\n\t} else {\n\t\t// 浏览器编码\n\t\tfilenameEncoder = URLEncoder.encode(filename, \"utf-8\");\n\t}\n\n```\n```java\n// DK中的/lib/tool.jar和/lib/rt.jar已经从Java SE 9中删除\n// JDK9 及以后要用下面的方式导包和创建对象\nimport java.util.Base64;\nimport java.util.Base64.Encoder;\n// 修改代码\nEncoder base64Encoder = Base64.getEncoder();\n```\n\n\n#### 注册验证码功能\n验证码可以防止：恶意批量注册、恶意破解密码、刷票、论坛灌水\n有效防止某个黑客对某一个特定注册用户用特定程序暴力破解方式进行不断的登陆尝试\n确保当前访问是来自一个人而非机器\n\n1. 把别人写好的验证码Servlet拿到程序当中\n\n```java\npackage com.it666.code;\n\nimport java.awt.Color;\nimport java.awt.Font;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.image.BufferedImage;\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Random;\n\nimport javax.imageio.ImageIO;\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\n\n@WebServlet(\"/CheckCodeServlet\")\npublic class CheckCodeServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\t// 集合中保存所有成语\n\tprivate List<String> words = new ArrayList<String>();\n\n\t@Override\n\tpublic void init() throws ServletException {\n\t\t// 初始化阶段，读取new_words.txt\n\t\t// web工程中读取 文件,必须使用绝对磁盘路径\n\t\tString path = getServletContext().getRealPath(\"/WEB-INF/words.txt\");\n\t\ttry {\n\t\t\tBufferedReader reader = new BufferedReader(new FileReader(path));\n\t\t\tString line;\n\t\t\t//把读的成语全部添加到一个集合当中\n\t\t\twhile ((line = reader.readLine()) != null) {\n\t\t\t\twords.add(line);\n\t\t\t}\n\t\t\treader.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic void doGet(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\t// 禁止缓存\n\t\tint width = 120;\n\t\tint height = 30;\n\t\t// 步骤一 绘制一张内存中图片\n\t\tBufferedImage bufferedImage = new BufferedImage(width, height,\n\t\t\t\tBufferedImage.TYPE_INT_RGB);\n\t\t// 步骤二 图片绘制背景颜色 ---通过绘图对象\n\t\tGraphics graphics = bufferedImage.getGraphics();// 得到画图对象 --- 画笔\n\t\t// 绘制任何图形之前 都必须指定一个颜色\n\t\tgraphics.setColor(getRandColor(200, 250));\n\t\tgraphics.fillRect(0, 0, width, height);\n\t\t// 步骤三 绘制边框\n\t\tgraphics.setColor(Color.WHITE);\n\t\tgraphics.drawRect(0, 0, width - 1, height - 1);\n\t\t// 步骤四 四个随机数字\n\t\tGraphics2D graphics2d = (Graphics2D) graphics;\n\t\t// 设置输出字体\n\t\tgraphics2d.setFont(new Font(\"宋体\", Font.BOLD, 18));\n\t\tRandom random = new Random();// 生成随机数\n\t\tint index = random.nextInt(words.size());\n\t\tString word = words.get(index);// 获得成语\n\t\t// 定义x坐标\n\t\tint x = 10;\n\t\tfor (int i = 0; i < word.length(); i++) {\n\t\t\t// 随机颜色\n\t\t\tgraphics2d.setColor(new Color(20 + random.nextInt(110), 20 + random\n\t\t\t\t\t.nextInt(110), 20 + random.nextInt(110)));\n\t\t\t// 旋转 -30 --- 30度\n\t\t\tint jiaodu = random.nextInt(60) - 30;\n\t\t\t// 换算弧度\n\t\t\tdouble theta = jiaodu * Math.PI / 180;\n\n\t\t\t// 获得字母数字\n\t\t\tchar c = word.charAt(i);\n\n\t\t\t// 将c 输出到图片\n\t\t\tgraphics2d.rotate(theta, x, 20);\n\t\t\tgraphics2d.drawString(String.valueOf(c), x, 20);\n\t\t\tgraphics2d.rotate(-theta, x, 20);\n\t\t\tx += 30;\n\t\t}\n\n\t\t// 将验证码内容保存session\n\t\trequest.getSession().setAttribute(\"checkcode_session\", word);\n\t\t//把生成的验证码存放到全局域对象当中\n\t\tthis.getServletContext().setAttribute(\"checkCode\", word);\n\t\t// 步骤五 绘制干扰线\n\t\tgraphics.setColor(getRandColor(160, 200));\n\t\tint x1;\n\t\tint x2;\n\t\tint y1;\n\t\tint y2;\n\t\tfor (int i = 0; i < 30; i++) {\n\t\t\tx1 = random.nextInt(width);\n\t\t\tx2 = random.nextInt(12);\n\t\t\ty1 = random.nextInt(height);\n\t\t\ty2 = random.nextInt(12);\n\t\t\tgraphics.drawLine(x1, y1, x1 + x2, x2 + y2);\n\t\t}\n\t\t// 将上面图片输出到浏览器 ImageIO\n\t\tgraphics.dispose();// 释放资源\n\t\t//将图片写到response.getOutputStream()中\n\t\tImageIO.write(bufferedImage, \"jpg\", response.getOutputStream());\n\t}\n\n\tpublic void doPost(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\t\tdoGet(request, response);\n\t}\n\n\t/**\n\t * 取其某一范围的color\n\t * \n\t * @param fc\n\t *            int 范围参数1\n\t * @param bc\n\t *            int 范围参数2\n\t * @return Color\n\t */\n\tprivate Color getRandColor(int fc, int bc) {\n\t\t// 取其随机颜色\n\t\tRandom random = new Random();\n\t\tif (fc > 255) {\n\t\t\tfc = 255;\n\t\t}\n\t\tif (bc > 255) {\n\t\t\tbc = 255;\n\t\t}\n\t\tint r = fc + random.nextInt(bc - fc);\n\t\tint g = fc + random.nextInt(bc - fc);\n\t\tint b = fc + random.nextInt(bc - fc);\n\t\treturn new Color(r, g, b);\n\t}\n\n}\n```\n\n2. 编写静态页面\n\n```html\n<script type=\"text/javascript\">\n\tfunction change(obj){\n\t\t// alert(obj);\n\t\t// 浏览器加载同样地址使用的是缓存\n\t\tobj.src = \"/26-Servlet/CheckCodeServlet?time\"+new Date().getTime();\n\t}\n</script>\n\n</head>\n<body>\n\t<form action=\"/26-Servlet/RegisterServlet\">\n\t\t\t<img alt=\"\" src=\"/26-Servlet/CheckCodeServlet\" onclick=\"change(this)\"><br/>\n\t\t<!-- this 指的就是这个img -->\n\t\t<input type=\"text\" placeholder=\"请输入验证码...\" name=\"code\"><br/>\n\t\t<input type=\"submit\" value=\"注册\">\n\t</form>\n</body>\n```\n3. 编写判断验证码是否正确Servlet\n\n```java\npackage com.it666.code;\n\nimport java.io.IOException;\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\n@WebServlet(\"/RegisterServlet\")\npublic class RegisterServlet extends HttpServlet {\n\tprivate static final long serialVersionUID = 1L;\n\n\tprotected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tString code = request.getParameter(\"code\");\n\t\tSystem.out.println(code); // 中文乱码\n\t\t\n\t\tbyte[] bytes = code.getBytes(\"ISO8859-1\");\n\t\tcode = new String (bytes,\"UTF-8\");\n\t\tSystem.out.println(code);\n\t\t\n\t\t// 取出生成的字符串\n\t\tString  word = (String) this.getServletContext().getAttribute(\"checkCode\");\n\t\t\n\t\t// 设置字符集，不然 下面的字会乱码\n\t\tresponse.setContentType(\"text/html;charset=UTF-8\");\n\t\t\n\t\tif (code.equals(word)) {\n\t\t\tresponse.getWriter().write(\"注册成功\");\n\t\t}else {\n\t\t\tresponse.getWriter().write(\"验证码错误\");\n\t\t\t// 重新跳转到原界面\n\t\t\tresponse.setHeader(\"refresh\", \"1;url=/26-Servlet/code.html\");\n\t\t}\n\t\t\n\t}\n\n}\n\n```\n1.设置响应编码\n2.从ServletContext当中获取验证码\n3.获取传入的请求参数\n4.从servletContext当中取出存放的验证码\n5.把接收的验证码与取出的验证码时行比较\n6.相同时，显示成功\n7.不同时， 显示失败，隔3秒钟跳转到输入验证码界面\n\n\t\t\t\t\t\n\n## 参考资料\n\n[Java零基础到高级JavaWeb与项目](https://study.163.com/course/introduction/1005981003.htm)\n[Java 9版本之后Base64Encoder和Base64Decoder无法继续使用解决办法](https://blog.csdn.net/xie_sining/article/details/80777164)","slug":"web-server-note-5","published":1,"updated":"2020-06-13T02:55:34.912Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke3x9g7e002ozgvu6dpgagkq","content":"<h2 id=\"ServletContext\"><a href=\"#ServletContext\" class=\"headerlink\" title=\"ServletContext\"></a>ServletContext</h2><p>ServletContext代表是一个web应用的上下文对象（web应用对象）<br>里面封装的都是web应用信息<br>一个ServletContext对应一个应用</p>\n<p>ServletContext的生命周期<br>在服务器一启动的时候就会创建<br>在服务器关闭的时候销毁</p>\n<p>如何获得上下文<br>1.通过init方法当中一个参数ServletConfig来获取<br>2.直接在HttpServlet当中获取，this.getServletContext，这种方法本质还是通过config来去获取的</p>\n<p>子类在覆盖父类init方法的时候最好调用父类的初始化参数super.init(config);<br>不传入config，父类就没有config参数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/OneServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OneServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(ServletConfig config)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>.init(config);</span><br><span class=\"line\">\t\tServletContext sc1 = config.getServletContext();</span><br><span class=\"line\">\t\tSystem.out.println(sc1);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"OneServlet\"</span>);</span><br><span class=\"line\">\t\tServletContext context = <span class=\"keyword\">this</span>.getServletContext();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 这种方法本质还是通过config获取</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 重写了init方法，用这种方法调用空指针异常</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 原因是子类覆盖了父类init方法</span></span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t@Override</span></span><br><span class=\"line\"><span class=\"comment\">    \tpublic void init(ServletConfig config) throws ServletException &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        this.config = config;</span></span><br><span class=\"line\"><span class=\"comment\">        this.init();</span></span><br><span class=\"line\"><span class=\"comment\">    \t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 解决：在init方法添加super.init(config);</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>获取全局的初始化参数<br>初始化参数不能再某一个Servlet当中来去配置。在最外层来去配置<br>获取全局初始化参数</p>\n<p>获得Web应用中某一个资源的资源的绝对路径<br>context.getRealPath(“文件”)<br>相对的是web应有根目录<br>context.getRealPath(“index.html”)<br>D:\\Java\\Tomcat\\apache-tomcat-7.0.85\\webapps\\bei\\index.html<br>在文件名称前面自动拼接上当前工程的绝对地址</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String  realPath = context.getRealPath(<span class=\"string\">\"WEB-INF/a.txt\"</span>); <span class=\"comment\">// a.txt 在WEB-INF里</span></span><br><span class=\"line\">System.out.println(realPath);<span class=\"comment\">// D:\\Tomcat\\apache-tomcat-7.0.85\\webapps\\26-Servlet\\WEB-INF\\a.txt</span></span><br><span class=\"line\">System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过类加载器，获取字节码路径</span></span><br><span class=\"line\">String path = OneServlet.class.getClassLoader().getResource(<span class=\"string\">\"c.txt\"</span>).getPath(); <span class=\"comment\">// c.txt 在src下</span></span><br><span class=\"line\">System.out.println(path);\t<span class=\"comment\">// /D:/Tomcat/apache-tomcat-7.0.85/webapps/26-Servlet/WEB-INF/classes/c.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果在包内，路径就要加上包路径</span></span><br></pre></td></tr></table></figure>\n\n<p>ServletContext是一个域对象<br>域：能够存储数据<br>域对象：能够存取数据数据就的对象</p>\n<p>ServletContext域对象的作用范围<br>整个web应用<br>所有的web资源都可以进行存取数据<br>数据是可以共享的<br>只要是一个域对象上，基本上里面都有这几个方法:<br>获取完ServletContext之后向里面写数据：context.setAttribute(String name,Object value);<br>获取完ServletContext之后，通过name取出存放的数据：context.getAttribute(String name);<br>获取完ServletContext之后，删除指定名称的值：context.removeAttribute(String name);</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ServletContext context = config.getServletContext();</span><br><span class=\"line\">sc1.setAttribute(<span class=\"string\">\"lk\"</span>, <span class=\"string\">\"lks\"</span>);</span><br><span class=\"line\">String value =(String) context.getAttribute(<span class=\"string\">\"lk\"</span>);<span class=\"comment\">// 其他Servlet也可以get到</span></span><br><span class=\"line\">System.out.println(value);</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"Response响应过程\"><a href=\"#Response响应过程\" class=\"headerlink\" title=\"Response响应过程\"></a>Response响应过程</h2><p><img src=\"/2020/02/09/web-server-note-5/1.png\" alt=\"Response响应过程\"></p>\n<p>在去发送一个请求时， 会找到tomcat引擎<br>引擎会找到对应的web应用，并且会创建request对象和response对象<br>找到应用后， 会执行应用的web.xml再去根据url-patten的内容创建Servlet对象<br>并且会调用Servlet对象的service方法，并且把创建的request对象和response对象传入到方法当中<br>拿到response对象后，  自己可以往响应当中写入一些自己给客户端的内容，通过response.getwrite().wirte(“写的内容”)方法进行写入<br>写的内容，是存到一个response缓冲区当中<br>当方法执行结束之后， tomcat就会从response缓冲区当中取出数据，取出你的数据同时，它自己还会自动的往里面添加一些服务器相关的信息进去，所以响应给浏览器时， 可以看到除了自己写的内容， 还会有一些服务器相关的信息</p>\n<h2 id=\"response\"><a href=\"#response\" class=\"headerlink\" title=\"response\"></a>response</h2><p>通过response设置响应行，响应头 ，响应体</p>\n<h4 id=\"设置响应行\"><a href=\"#设置响应行\" class=\"headerlink\" title=\"设置响应行\"></a>设置响应行</h4><p>response.setState(Int code)</p>\n<h4 id=\"设置响应头\"><a href=\"#设置响应头\" class=\"headerlink\" title=\"设置响应头\"></a>设置响应头</h4><p>add：代表添加新的内容<br>addHeader(String name,String value)<br>addIntHeader(String name,int value)<br>addDateHeader(String name,date)</p>\n<p>set：代表设置，已经存在的内容（可以修改自己add，也可以修改默认的）<br>setHeader(String name,String value)<br>setIntHeader(String name,int value)<br>setDateHeader(String name,Date value)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.setStatus(<span class=\"number\">302</span>);</span><br><span class=\"line\"><span class=\"comment\">// add</span></span><br><span class=\"line\">response.addHeader(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"it666\"</span>);</span><br><span class=\"line\">response.addIntHeader(<span class=\"string\">\"age\"</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">response.addDateHeader(<span class=\"string\">\"my-Date\"</span>, <span class=\"keyword\">new</span> Date().getTime());<span class=\"comment\">// 获取当前毫秒值</span></span><br><span class=\"line\"><span class=\"comment\">// set</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"重定向\"><a href=\"#重定向\" class=\"headerlink\" title=\"重定向\"></a>重定向</h4><p>到服务器当中去找servlet1，servlet1当中没有这个资源，告诉你去找servlet2，再去发送一个请求到servlet2</p>\n<p>状态码：302</p>\n<p>特点：要访问两次服务器<br>第一次访问是人为的去访问<br>第二次是自动的访问<br>浏览器地址栏已经发生变化</p>\n<p>设置重定向</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.设置响应码302</span></span><br><span class=\"line\">response.setStatus(<span class=\"number\">302</span>);</span><br><span class=\"line\"><span class=\"comment\">// 2.设置重定向 /项目名/Servlet名</span></span><br><span class=\"line\">response.setHeader(<span class=\"string\">\"location\"</span>, <span class=\"string\">\"/26-Servlet/LocationServlet\"</span>);</span><br></pre></td></tr></table></figure>\n\n<p>封装的重写向<br>每次都要写状态码，和location比较麻烦<br>就给封装了一个方法<br>response.sendRedirect(“/26-Servlet/LocationServlet”);</p>\n<p>定时刷新重定向<br>response.setHeader(“refresh”,”5;url=<a href=\"http://www.baidu.com&quot;\" target=\"_blank\" rel=\"noopener\">http://www.baidu.com&quot;</a>)<br>5代表5秒<br>url的值为5秒后要去跳转的地址</p>\n<h5 id=\"设置响应体\"><a href=\"#设置响应体\" class=\"headerlink\" title=\"设置响应体\"></a>设置响应体</h5><ol>\n<li>通过write方法来写<br>response.getwrite().wirte(“要写的内容或HTML代码”);</li>\n</ol>\n<p>默认情况下写的中文内容会乱码<br>写的内容存到缓存区中使用的是ISO8859，ISO8859不支持中文，所以会乱码</p>\n<p>解决中文乱码：<br>在存之前设置可以设置存放的编码<br>response.setCharacterEncoding(“UTF-8”)<br>告知浏览器使用的是utf-8编码<br>response.setHeader(“Content-Type”, “text/html;charset=UTF-8”);</p>\n<p>只需要设置Content-Type就可以了，Tomcat看到设置了为utf-8的编码，它在存的时候也会使用utf-8的编码<br>使用封装写法：response.setContentType(“text/html;charset=UTF-8”);</p>\n<ol start=\"2\">\n<li>通过OutPutStream来写</li>\n</ol>\n<p>FileInputSteam<br>read方法读取一个字节</p>\n<p>read(byte[] b)<br>    一次读取多个字节,并存放到数组b中<br>    上面是一次一滴一滴给你，这种是一次装一水桶再给你</p>\n<p>读取全部的数据</p>\n<p>FileOutputSteam<br>write()<br>    一次性写一个字符<br>write(buffer)<br>    一个性写多个字符<br>write(buffer,0,len)<br>    一次性写指定个数的字符</p>\n<p>response注意点<br>    getWrite()和getOutputSteam不能同时调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// read 读一个字符 完毕返回-1</span></span><br><span class=\"line\"><span class=\"comment\">// System.out.println(in.read());</span></span><br><span class=\"line\"><span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">5</span>];</span><br><span class=\"line\">System.out.println(Arrays.toString(buffer));<span class=\"comment\">// [0,0,0,0,0]</span></span><br><span class=\"line\"><span class=\"comment\">// 当前读取了几个字符 ，读到最后返回-1</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> ((len = in.read(buffer)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"keyword\">new</span> String (buffer,<span class=\"number\">0</span>,len));</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 关闭文件</span></span><br><span class=\"line\">in.close();</span><br></pre></td></tr></table></figure>\n\n<p>写入图片案例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.it666.response;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.annotation.WebServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/ResImgServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResImgServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 向浏览器写一张图片</span></span><br><span class=\"line\">\t\tString path = <span class=\"keyword\">this</span>.getServletContext().getRealPath(<span class=\"string\">\"8.png\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 加载图片</span></span><br><span class=\"line\">\t\tFileInputStream in = <span class=\"keyword\">new</span> FileInputStream(path);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取输出流</span></span><br><span class=\"line\">\t\tServletOutputStream out = response.getOutputStream();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> ((len = in.read(buffer)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\tout.write(buffer,<span class=\"number\">0</span>,len);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"下载功能\"><a href=\"#下载功能\" class=\"headerlink\" title=\"下载功能\"></a>下载功能</h4><p>把服务器当中的文件直接下载到电脑当中</p>\n<p>1.直接使用a标签来去下载<br>有些内容会浏览器自动解析<br>浏览器不能解析的文件才会被下载</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 8.png路径：WebContent/download --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/26-Servlet/download/8.png\"</span>&gt;</span>8.png<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2.通过发送Servlet请求来去下载</p>\n<p>通过发送一个Servlet请求，把文件名发送给服务器<br>发送给服务器后，接收到文件名参数，获取文件的绝对地址<br>通过流的形式来去写到浏览器<br>还得要告诉文件是什么类型</p>\n<p>浏览器是以MIME的类型来识别类型<br>this.getServletContext().getMimeType(“文件名称”)</p>\n<p>设置响应的类型<br>res.setContentType(“MIME类型”)</p>\n<p>设置响应头，告诉浏览器不要去解析，是以附件的形式打开，<br>res.setHeader(“Content-Disposition”,”attachment;filename=”+文件名)</p>\n<p>步骤<br>1.接收文件名参数<br>2.获取mime类型<br>3.设置浏览器响应类型<br>4.告诉浏览器以附件形式下载<br>5.获取文件的绝对路径<br>6.读取文件流<br>7.获取输出流<br>8.把内容写出到输出流</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- ?后面跟参数，多个参数用&amp;隔开 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/26-Servlet/DownloadServlet?filename=8.png\"</span>&gt;</span>8.png<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 写在service里</span></span><br><span class=\"line\">String name = request.getParameter(<span class=\"string\">\"filename\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(name);<span class=\"comment\">// 8.png</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//根据文件名获取mime类型</span></span><br><span class=\"line\">\t\tString mimeType = <span class=\"keyword\">this</span>.getServletContext().getMimeType(name);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"mimeType:\"</span>+mimeType);<span class=\"comment\">// mimeType:image/png</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//设置mimeType</span></span><br><span class=\"line\">\t\tresponse.setContentType(mimeType);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 告诉浏览器以附件形式打开 </span></span><br><span class=\"line\">\t\tresponse.setHeader(<span class=\"string\">\"Content-Disposition\"</span>, <span class=\"string\">\"attachment;filename=\"</span>+name);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 拼接文件路径</span></span><br><span class=\"line\">\t\tString path = <span class=\"keyword\">this</span>.getServletContext().getRealPath(<span class=\"string\">\"download/\"</span>+name);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//加载文件</span></span><br><span class=\"line\">\t\tFileInputStream in =  <span class=\"keyword\">new</span> FileInputStream(path);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//获取响应的输出</span></span><br><span class=\"line\">\t\tServletOutputStream out = response.getOutputStream();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span> [] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> len =<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> ((len = in.read(buffer)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\tout.write(buffer,<span class=\"number\">0</span>,len);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tin.close();</span><br></pre></td></tr></table></figure>\n\n\n<p>获取中文参数报错问题<br>高版本tomcat中的新特性：就是严格按照 RFC 3986规范进行访问解析，而 RFC 3986规范定义了Url中只允许包含英文字母（a-zA-Z）、数字（0-9）、-_.~4个特殊字符以及所有保留字符(RFC3986中指定了以下字符为保留字符：! * ’ ( ) ; : @ &amp; = + $ , / ? # [ ])</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.../conf/catalina.properties中，找到最后注释掉的一行 </span><br><span class=\"line\">#tomcat.util.http.parser.HttpParser.requestTargetAllow=| 去掉#，在最后加上 &#123;&#125; 表示把&#123;&#125;放行</span><br><span class=\"line\">tomcat.util.http.parser.HttpParser.requestTargetAllow=|&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>1.把获取的字符串参数的字节码获取，再重新使用utf-8编码<br>2.在设置以附件形式打开时， 不同的浏览器会对默认的名字进行解码<br>所以根据不同的浏览器，要对名称进行编码之后，再放入文件名<br>对文件名进行编码<br>不同的浏览器编码不一样，要先获取agent，取出浏览器的类型，根据不同的浏览器类型进行编码</p>\n<p>步骤<br>    1.接收文件名称<br>    2.获取mimeType<br>    3.设置浏览器响应类型<br>    4.先对传入的参数转成二进制流，再使用UTF-8进行编码<br>    5.获取浏览器的信息<br>    6.判断是哪一种浏览器，根据不同的浏览器获取一个编码的文件名<br>    7.设置以附件形式下载，传的名称是编码过的名称<br>    8.获取文件的绝对路径<br>    9.读取文件流<br>    10.获取输出流<br>    11.把文件写到响应当中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取客户端信息</span></span><br><span class=\"line\">String agent = request.getHeader(<span class=\"string\">\"User-Agent\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 定义一个变量记录编码之后的名字</span></span><br><span class=\"line\">String filenameEncoder = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (agent.contains(<span class=\"string\">\"MSIE\"</span>)) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// IE编码</span></span><br><span class=\"line\">\tfilenameEncoder = URLEncoder.encode(filename, <span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">\tfilenameEncoder = filenameEncoder.replace(<span class=\"string\">\"+\"</span>, <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (agent.contains(<span class=\"string\">\"Firefox\"</span>)) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 火狐编码</span></span><br><span class=\"line\">\tBASE64Encoder base64Encoder = <span class=\"keyword\">new</span> BASE64Encoder();</span><br><span class=\"line\">\tfilenameEncoder = <span class=\"string\">\"=?utf-8?B?\"</span> + base64Encoder.encode(filename.getBytes(<span class=\"string\">\"utf-8\"</span>)) + <span class=\"string\">\"?=\"</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 浏览器编码</span></span><br><span class=\"line\">\tfilenameEncoder = URLEncoder.encode(filename, <span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// DK中的/lib/tool.jar和/lib/rt.jar已经从Java SE 9中删除</span></span><br><span class=\"line\"><span class=\"comment\">// JDK9 及以后要用下面的方式导包和创建对象</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Base64;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Base64.Encoder;</span><br><span class=\"line\"><span class=\"comment\">// 修改代码</span></span><br><span class=\"line\">Encoder base64Encoder = Base64.getEncoder();</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"注册验证码功能\"><a href=\"#注册验证码功能\" class=\"headerlink\" title=\"注册验证码功能\"></a>注册验证码功能</h4><p>验证码可以防止：恶意批量注册、恶意破解密码、刷票、论坛灌水<br>有效防止某个黑客对某一个特定注册用户用特定程序暴力破解方式进行不断的登陆尝试<br>确保当前访问是来自一个人而非机器</p>\n<ol>\n<li>把别人写好的验证码Servlet拿到程序当中</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.it666.code;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.Color;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.Font;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.Graphics;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.Graphics2D;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.image.BufferedImage;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.imageio.ImageIO;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.annotation.WebServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/CheckCodeServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CheckCodeServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 集合中保存所有成语</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> List&lt;String&gt; words = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 初始化阶段，读取new_words.txt</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// web工程中读取 文件,必须使用绝对磁盘路径</span></span><br><span class=\"line\">\t\tString path = getServletContext().getRealPath(<span class=\"string\">\"/WEB-INF/words.txt\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tBufferedReader reader = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> FileReader(path));</span><br><span class=\"line\">\t\t\tString line;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//把读的成语全部添加到一个集合当中</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> ((line = reader.readLine()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\twords.add(line);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\treader.close();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 禁止缓存</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> width = <span class=\"number\">120</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> height = <span class=\"number\">30</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 步骤一 绘制一张内存中图片</span></span><br><span class=\"line\">\t\tBufferedImage bufferedImage = <span class=\"keyword\">new</span> BufferedImage(width, height,</span><br><span class=\"line\">\t\t\t\tBufferedImage.TYPE_INT_RGB);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 步骤二 图片绘制背景颜色 ---通过绘图对象</span></span><br><span class=\"line\">\t\tGraphics graphics = bufferedImage.getGraphics();<span class=\"comment\">// 得到画图对象 --- 画笔</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 绘制任何图形之前 都必须指定一个颜色</span></span><br><span class=\"line\">\t\tgraphics.setColor(getRandColor(<span class=\"number\">200</span>, <span class=\"number\">250</span>));</span><br><span class=\"line\">\t\tgraphics.fillRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, width, height);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 步骤三 绘制边框</span></span><br><span class=\"line\">\t\tgraphics.setColor(Color.WHITE);</span><br><span class=\"line\">\t\tgraphics.drawRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, width - <span class=\"number\">1</span>, height - <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 步骤四 四个随机数字</span></span><br><span class=\"line\">\t\tGraphics2D graphics2d = (Graphics2D) graphics;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 设置输出字体</span></span><br><span class=\"line\">\t\tgraphics2d.setFont(<span class=\"keyword\">new</span> Font(<span class=\"string\">\"宋体\"</span>, Font.BOLD, <span class=\"number\">18</span>));</span><br><span class=\"line\">\t\tRandom random = <span class=\"keyword\">new</span> Random();<span class=\"comment\">// 生成随机数</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> index = random.nextInt(words.size());</span><br><span class=\"line\">\t\tString word = words.get(index);<span class=\"comment\">// 获得成语</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 定义x坐标</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 随机颜色</span></span><br><span class=\"line\">\t\t\tgraphics2d.setColor(<span class=\"keyword\">new</span> Color(<span class=\"number\">20</span> + random.nextInt(<span class=\"number\">110</span>), <span class=\"number\">20</span> + random</span><br><span class=\"line\">\t\t\t\t\t.nextInt(<span class=\"number\">110</span>), <span class=\"number\">20</span> + random.nextInt(<span class=\"number\">110</span>)));</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 旋转 -30 --- 30度</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> jiaodu = random.nextInt(<span class=\"number\">60</span>) - <span class=\"number\">30</span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 换算弧度</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">double</span> theta = jiaodu * Math.PI / <span class=\"number\">180</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 获得字母数字</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">char</span> c = word.charAt(i);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 将c 输出到图片</span></span><br><span class=\"line\">\t\t\tgraphics2d.rotate(theta, x, <span class=\"number\">20</span>);</span><br><span class=\"line\">\t\t\tgraphics2d.drawString(String.valueOf(c), x, <span class=\"number\">20</span>);</span><br><span class=\"line\">\t\t\tgraphics2d.rotate(-theta, x, <span class=\"number\">20</span>);</span><br><span class=\"line\">\t\t\tx += <span class=\"number\">30</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 将验证码内容保存session</span></span><br><span class=\"line\">\t\trequest.getSession().setAttribute(<span class=\"string\">\"checkcode_session\"</span>, word);</span><br><span class=\"line\">\t\t<span class=\"comment\">//把生成的验证码存放到全局域对象当中</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.getServletContext().setAttribute(<span class=\"string\">\"checkCode\"</span>, word);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 步骤五 绘制干扰线</span></span><br><span class=\"line\">\t\tgraphics.setColor(getRandColor(<span class=\"number\">160</span>, <span class=\"number\">200</span>));</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x1;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x2;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> y1;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> y2;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">30</span>; i++) &#123;</span><br><span class=\"line\">\t\t\tx1 = random.nextInt(width);</span><br><span class=\"line\">\t\t\tx2 = random.nextInt(<span class=\"number\">12</span>);</span><br><span class=\"line\">\t\t\ty1 = random.nextInt(height);</span><br><span class=\"line\">\t\t\ty2 = random.nextInt(<span class=\"number\">12</span>);</span><br><span class=\"line\">\t\t\tgraphics.drawLine(x1, y1, x1 + x2, x2 + y2);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 将上面图片输出到浏览器 ImageIO</span></span><br><span class=\"line\">\t\tgraphics.dispose();<span class=\"comment\">// 释放资源</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//将图片写到response.getOutputStream()中</span></span><br><span class=\"line\">\t\tImageIO.write(bufferedImage, <span class=\"string\">\"jpg\"</span>, response.getOutputStream());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tdoGet(request, response);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 取其某一范围的color</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> fc</span></span><br><span class=\"line\"><span class=\"comment\">\t *            int 范围参数1</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> bc</span></span><br><span class=\"line\"><span class=\"comment\">\t *            int 范围参数2</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> Color</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Color <span class=\"title\">getRandColor</span><span class=\"params\">(<span class=\"keyword\">int</span> fc, <span class=\"keyword\">int</span> bc)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 取其随机颜色</span></span><br><span class=\"line\">\t\tRandom random = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (fc &gt; <span class=\"number\">255</span>) &#123;</span><br><span class=\"line\">\t\t\tfc = <span class=\"number\">255</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (bc &gt; <span class=\"number\">255</span>) &#123;</span><br><span class=\"line\">\t\t\tbc = <span class=\"number\">255</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> r = fc + random.nextInt(bc - fc);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> g = fc + random.nextInt(bc - fc);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> b = fc + random.nextInt(bc - fc);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Color(r, g, b);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>编写静态页面</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">change</span><span class=\"params\">(obj)</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"comment\">// alert(obj);</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"comment\">// 浏览器加载同样地址使用的是缓存</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\tobj.src = <span class=\"string\">\"/26-Servlet/CheckCodeServlet?time\"</span>+<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/26-Servlet/RegisterServlet\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/26-Servlet/CheckCodeServlet\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"change(this)\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- this 指的就是这个img --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入验证码...\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"code\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"注册\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>编写判断验证码是否正确Servlet</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.it666.code;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.annotation.WebServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/RegisterServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RegisterServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tString code = request.getParameter(<span class=\"string\">\"code\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(code); <span class=\"comment\">// 中文乱码</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] bytes = code.getBytes(<span class=\"string\">\"ISO8859-1\"</span>);</span><br><span class=\"line\">\t\tcode = <span class=\"keyword\">new</span> String (bytes,<span class=\"string\">\"UTF-8\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(code);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 取出生成的字符串</span></span><br><span class=\"line\">\t\tString  word = (String) <span class=\"keyword\">this</span>.getServletContext().getAttribute(<span class=\"string\">\"checkCode\"</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 设置字符集，不然 下面的字会乱码</span></span><br><span class=\"line\">\t\tresponse.setContentType(<span class=\"string\">\"text/html;charset=UTF-8\"</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (code.equals(word)) &#123;</span><br><span class=\"line\">\t\t\tresponse.getWriter().write(<span class=\"string\">\"注册成功\"</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tresponse.getWriter().write(<span class=\"string\">\"验证码错误\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 重新跳转到原界面</span></span><br><span class=\"line\">\t\t\tresponse.setHeader(<span class=\"string\">\"refresh\"</span>, <span class=\"string\">\"1;url=/26-Servlet/code.html\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>1.设置响应编码<br>2.从ServletContext当中获取验证码<br>3.获取传入的请求参数<br>4.从servletContext当中取出存放的验证码<br>5.把接收的验证码与取出的验证码时行比较<br>6.相同时，显示成功<br>7.不同时， 显示失败，隔3秒钟跳转到输入验证码界面</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005981003.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级JavaWeb与项目</a><br><a href=\"https://blog.csdn.net/xie_sining/article/details/80777164\" target=\"_blank\" rel=\"noopener\">Java 9版本之后Base64Encoder和Base64Decoder无法继续使用解决办法</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"ServletContext\"><a href=\"#ServletContext\" class=\"headerlink\" title=\"ServletContext\"></a>ServletContext</h2><p>ServletContext代表是一个web应用的上下文对象（web应用对象）<br>里面封装的都是web应用信息<br>一个ServletContext对应一个应用</p>\n<p>ServletContext的生命周期<br>在服务器一启动的时候就会创建<br>在服务器关闭的时候销毁</p>\n<p>如何获得上下文<br>1.通过init方法当中一个参数ServletConfig来获取<br>2.直接在HttpServlet当中获取，this.getServletContext，这种方法本质还是通过config来去获取的</p>\n<p>子类在覆盖父类init方法的时候最好调用父类的初始化参数super.init(config);<br>不传入config，父类就没有config参数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/OneServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OneServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(ServletConfig config)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>.init(config);</span><br><span class=\"line\">\t\tServletContext sc1 = config.getServletContext();</span><br><span class=\"line\">\t\tSystem.out.println(sc1);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"OneServlet\"</span>);</span><br><span class=\"line\">\t\tServletContext context = <span class=\"keyword\">this</span>.getServletContext();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 这种方法本质还是通过config获取</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 重写了init方法，用这种方法调用空指针异常</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 原因是子类覆盖了父类init方法</span></span><br><span class=\"line\">\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t@Override</span></span><br><span class=\"line\"><span class=\"comment\">    \tpublic void init(ServletConfig config) throws ServletException &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        this.config = config;</span></span><br><span class=\"line\"><span class=\"comment\">        this.init();</span></span><br><span class=\"line\"><span class=\"comment\">    \t&#125;</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 解决：在init方法添加super.init(config);</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>获取全局的初始化参数<br>初始化参数不能再某一个Servlet当中来去配置。在最外层来去配置<br>获取全局初始化参数</p>\n<p>获得Web应用中某一个资源的资源的绝对路径<br>context.getRealPath(“文件”)<br>相对的是web应有根目录<br>context.getRealPath(“index.html”)<br>D:\\Java\\Tomcat\\apache-tomcat-7.0.85\\webapps\\bei\\index.html<br>在文件名称前面自动拼接上当前工程的绝对地址</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String  realPath = context.getRealPath(<span class=\"string\">\"WEB-INF/a.txt\"</span>); <span class=\"comment\">// a.txt 在WEB-INF里</span></span><br><span class=\"line\">System.out.println(realPath);<span class=\"comment\">// D:\\Tomcat\\apache-tomcat-7.0.85\\webapps\\26-Servlet\\WEB-INF\\a.txt</span></span><br><span class=\"line\">System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过类加载器，获取字节码路径</span></span><br><span class=\"line\">String path = OneServlet.class.getClassLoader().getResource(<span class=\"string\">\"c.txt\"</span>).getPath(); <span class=\"comment\">// c.txt 在src下</span></span><br><span class=\"line\">System.out.println(path);\t<span class=\"comment\">// /D:/Tomcat/apache-tomcat-7.0.85/webapps/26-Servlet/WEB-INF/classes/c.txt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果在包内，路径就要加上包路径</span></span><br></pre></td></tr></table></figure>\n\n<p>ServletContext是一个域对象<br>域：能够存储数据<br>域对象：能够存取数据数据就的对象</p>\n<p>ServletContext域对象的作用范围<br>整个web应用<br>所有的web资源都可以进行存取数据<br>数据是可以共享的<br>只要是一个域对象上，基本上里面都有这几个方法:<br>获取完ServletContext之后向里面写数据：context.setAttribute(String name,Object value);<br>获取完ServletContext之后，通过name取出存放的数据：context.getAttribute(String name);<br>获取完ServletContext之后，删除指定名称的值：context.removeAttribute(String name);</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ServletContext context = config.getServletContext();</span><br><span class=\"line\">sc1.setAttribute(<span class=\"string\">\"lk\"</span>, <span class=\"string\">\"lks\"</span>);</span><br><span class=\"line\">String value =(String) context.getAttribute(<span class=\"string\">\"lk\"</span>);<span class=\"comment\">// 其他Servlet也可以get到</span></span><br><span class=\"line\">System.out.println(value);</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"Response响应过程\"><a href=\"#Response响应过程\" class=\"headerlink\" title=\"Response响应过程\"></a>Response响应过程</h2><p><img src=\"/2020/02/09/web-server-note-5/1.png\" alt=\"Response响应过程\"></p>\n<p>在去发送一个请求时， 会找到tomcat引擎<br>引擎会找到对应的web应用，并且会创建request对象和response对象<br>找到应用后， 会执行应用的web.xml再去根据url-patten的内容创建Servlet对象<br>并且会调用Servlet对象的service方法，并且把创建的request对象和response对象传入到方法当中<br>拿到response对象后，  自己可以往响应当中写入一些自己给客户端的内容，通过response.getwrite().wirte(“写的内容”)方法进行写入<br>写的内容，是存到一个response缓冲区当中<br>当方法执行结束之后， tomcat就会从response缓冲区当中取出数据，取出你的数据同时，它自己还会自动的往里面添加一些服务器相关的信息进去，所以响应给浏览器时， 可以看到除了自己写的内容， 还会有一些服务器相关的信息</p>\n<h2 id=\"response\"><a href=\"#response\" class=\"headerlink\" title=\"response\"></a>response</h2><p>通过response设置响应行，响应头 ，响应体</p>\n<h4 id=\"设置响应行\"><a href=\"#设置响应行\" class=\"headerlink\" title=\"设置响应行\"></a>设置响应行</h4><p>response.setState(Int code)</p>\n<h4 id=\"设置响应头\"><a href=\"#设置响应头\" class=\"headerlink\" title=\"设置响应头\"></a>设置响应头</h4><p>add：代表添加新的内容<br>addHeader(String name,String value)<br>addIntHeader(String name,int value)<br>addDateHeader(String name,date)</p>\n<p>set：代表设置，已经存在的内容（可以修改自己add，也可以修改默认的）<br>setHeader(String name,String value)<br>setIntHeader(String name,int value)<br>setDateHeader(String name,Date value)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.setStatus(<span class=\"number\">302</span>);</span><br><span class=\"line\"><span class=\"comment\">// add</span></span><br><span class=\"line\">response.addHeader(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"it666\"</span>);</span><br><span class=\"line\">response.addIntHeader(<span class=\"string\">\"age\"</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">response.addDateHeader(<span class=\"string\">\"my-Date\"</span>, <span class=\"keyword\">new</span> Date().getTime());<span class=\"comment\">// 获取当前毫秒值</span></span><br><span class=\"line\"><span class=\"comment\">// set</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"重定向\"><a href=\"#重定向\" class=\"headerlink\" title=\"重定向\"></a>重定向</h4><p>到服务器当中去找servlet1，servlet1当中没有这个资源，告诉你去找servlet2，再去发送一个请求到servlet2</p>\n<p>状态码：302</p>\n<p>特点：要访问两次服务器<br>第一次访问是人为的去访问<br>第二次是自动的访问<br>浏览器地址栏已经发生变化</p>\n<p>设置重定向</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.设置响应码302</span></span><br><span class=\"line\">response.setStatus(<span class=\"number\">302</span>);</span><br><span class=\"line\"><span class=\"comment\">// 2.设置重定向 /项目名/Servlet名</span></span><br><span class=\"line\">response.setHeader(<span class=\"string\">\"location\"</span>, <span class=\"string\">\"/26-Servlet/LocationServlet\"</span>);</span><br></pre></td></tr></table></figure>\n\n<p>封装的重写向<br>每次都要写状态码，和location比较麻烦<br>就给封装了一个方法<br>response.sendRedirect(“/26-Servlet/LocationServlet”);</p>\n<p>定时刷新重定向<br>response.setHeader(“refresh”,”5;url=<a href=\"http://www.baidu.com&quot;\" target=\"_blank\" rel=\"noopener\">http://www.baidu.com&quot;</a>)<br>5代表5秒<br>url的值为5秒后要去跳转的地址</p>\n<h5 id=\"设置响应体\"><a href=\"#设置响应体\" class=\"headerlink\" title=\"设置响应体\"></a>设置响应体</h5><ol>\n<li>通过write方法来写<br>response.getwrite().wirte(“要写的内容或HTML代码”);</li>\n</ol>\n<p>默认情况下写的中文内容会乱码<br>写的内容存到缓存区中使用的是ISO8859，ISO8859不支持中文，所以会乱码</p>\n<p>解决中文乱码：<br>在存之前设置可以设置存放的编码<br>response.setCharacterEncoding(“UTF-8”)<br>告知浏览器使用的是utf-8编码<br>response.setHeader(“Content-Type”, “text/html;charset=UTF-8”);</p>\n<p>只需要设置Content-Type就可以了，Tomcat看到设置了为utf-8的编码，它在存的时候也会使用utf-8的编码<br>使用封装写法：response.setContentType(“text/html;charset=UTF-8”);</p>\n<ol start=\"2\">\n<li>通过OutPutStream来写</li>\n</ol>\n<p>FileInputSteam<br>read方法读取一个字节</p>\n<p>read(byte[] b)<br>    一次读取多个字节,并存放到数组b中<br>    上面是一次一滴一滴给你，这种是一次装一水桶再给你</p>\n<p>读取全部的数据</p>\n<p>FileOutputSteam<br>write()<br>    一次性写一个字符<br>write(buffer)<br>    一个性写多个字符<br>write(buffer,0,len)<br>    一次性写指定个数的字符</p>\n<p>response注意点<br>    getWrite()和getOutputSteam不能同时调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// read 读一个字符 完毕返回-1</span></span><br><span class=\"line\"><span class=\"comment\">// System.out.println(in.read());</span></span><br><span class=\"line\"><span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">5</span>];</span><br><span class=\"line\">System.out.println(Arrays.toString(buffer));<span class=\"comment\">// [0,0,0,0,0]</span></span><br><span class=\"line\"><span class=\"comment\">// 当前读取了几个字符 ，读到最后返回-1</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> ((len = in.read(buffer)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"keyword\">new</span> String (buffer,<span class=\"number\">0</span>,len));</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 关闭文件</span></span><br><span class=\"line\">in.close();</span><br></pre></td></tr></table></figure>\n\n<p>写入图片案例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.it666.response;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.annotation.WebServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/ResImgServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResImgServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 向浏览器写一张图片</span></span><br><span class=\"line\">\t\tString path = <span class=\"keyword\">this</span>.getServletContext().getRealPath(<span class=\"string\">\"8.png\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 加载图片</span></span><br><span class=\"line\">\t\tFileInputStream in = <span class=\"keyword\">new</span> FileInputStream(path);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取输出流</span></span><br><span class=\"line\">\t\tServletOutputStream out = response.getOutputStream();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> len = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> ((len = in.read(buffer)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\tout.write(buffer,<span class=\"number\">0</span>,len);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"下载功能\"><a href=\"#下载功能\" class=\"headerlink\" title=\"下载功能\"></a>下载功能</h4><p>把服务器当中的文件直接下载到电脑当中</p>\n<p>1.直接使用a标签来去下载<br>有些内容会浏览器自动解析<br>浏览器不能解析的文件才会被下载</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 8.png路径：WebContent/download --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/26-Servlet/download/8.png\"</span>&gt;</span>8.png<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>2.通过发送Servlet请求来去下载</p>\n<p>通过发送一个Servlet请求，把文件名发送给服务器<br>发送给服务器后，接收到文件名参数，获取文件的绝对地址<br>通过流的形式来去写到浏览器<br>还得要告诉文件是什么类型</p>\n<p>浏览器是以MIME的类型来识别类型<br>this.getServletContext().getMimeType(“文件名称”)</p>\n<p>设置响应的类型<br>res.setContentType(“MIME类型”)</p>\n<p>设置响应头，告诉浏览器不要去解析，是以附件的形式打开，<br>res.setHeader(“Content-Disposition”,”attachment;filename=”+文件名)</p>\n<p>步骤<br>1.接收文件名参数<br>2.获取mime类型<br>3.设置浏览器响应类型<br>4.告诉浏览器以附件形式下载<br>5.获取文件的绝对路径<br>6.读取文件流<br>7.获取输出流<br>8.把内容写出到输出流</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- ?后面跟参数，多个参数用&amp;隔开 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/26-Servlet/DownloadServlet?filename=8.png\"</span>&gt;</span>8.png<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 写在service里</span></span><br><span class=\"line\">String name = request.getParameter(<span class=\"string\">\"filename\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(name);<span class=\"comment\">// 8.png</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//根据文件名获取mime类型</span></span><br><span class=\"line\">\t\tString mimeType = <span class=\"keyword\">this</span>.getServletContext().getMimeType(name);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"mimeType:\"</span>+mimeType);<span class=\"comment\">// mimeType:image/png</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//设置mimeType</span></span><br><span class=\"line\">\t\tresponse.setContentType(mimeType);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 告诉浏览器以附件形式打开 </span></span><br><span class=\"line\">\t\tresponse.setHeader(<span class=\"string\">\"Content-Disposition\"</span>, <span class=\"string\">\"attachment;filename=\"</span>+name);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 拼接文件路径</span></span><br><span class=\"line\">\t\tString path = <span class=\"keyword\">this</span>.getServletContext().getRealPath(<span class=\"string\">\"download/\"</span>+name);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//加载文件</span></span><br><span class=\"line\">\t\tFileInputStream in =  <span class=\"keyword\">new</span> FileInputStream(path);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//获取响应的输出</span></span><br><span class=\"line\">\t\tServletOutputStream out = response.getOutputStream();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span> [] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> len =<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> ((len = in.read(buffer)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\tout.write(buffer,<span class=\"number\">0</span>,len);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tin.close();</span><br></pre></td></tr></table></figure>\n\n\n<p>获取中文参数报错问题<br>高版本tomcat中的新特性：就是严格按照 RFC 3986规范进行访问解析，而 RFC 3986规范定义了Url中只允许包含英文字母（a-zA-Z）、数字（0-9）、-_.~4个特殊字符以及所有保留字符(RFC3986中指定了以下字符为保留字符：! * ’ ( ) ; : @ &amp; = + $ , / ? # [ ])</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.../conf/catalina.properties中，找到最后注释掉的一行 </span><br><span class=\"line\">#tomcat.util.http.parser.HttpParser.requestTargetAllow=| 去掉#，在最后加上 &#123;&#125; 表示把&#123;&#125;放行</span><br><span class=\"line\">tomcat.util.http.parser.HttpParser.requestTargetAllow=|&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>1.把获取的字符串参数的字节码获取，再重新使用utf-8编码<br>2.在设置以附件形式打开时， 不同的浏览器会对默认的名字进行解码<br>所以根据不同的浏览器，要对名称进行编码之后，再放入文件名<br>对文件名进行编码<br>不同的浏览器编码不一样，要先获取agent，取出浏览器的类型，根据不同的浏览器类型进行编码</p>\n<p>步骤<br>    1.接收文件名称<br>    2.获取mimeType<br>    3.设置浏览器响应类型<br>    4.先对传入的参数转成二进制流，再使用UTF-8进行编码<br>    5.获取浏览器的信息<br>    6.判断是哪一种浏览器，根据不同的浏览器获取一个编码的文件名<br>    7.设置以附件形式下载，传的名称是编码过的名称<br>    8.获取文件的绝对路径<br>    9.读取文件流<br>    10.获取输出流<br>    11.把文件写到响应当中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取客户端信息</span></span><br><span class=\"line\">String agent = request.getHeader(<span class=\"string\">\"User-Agent\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 定义一个变量记录编码之后的名字</span></span><br><span class=\"line\">String filenameEncoder = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (agent.contains(<span class=\"string\">\"MSIE\"</span>)) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// IE编码</span></span><br><span class=\"line\">\tfilenameEncoder = URLEncoder.encode(filename, <span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">\tfilenameEncoder = filenameEncoder.replace(<span class=\"string\">\"+\"</span>, <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (agent.contains(<span class=\"string\">\"Firefox\"</span>)) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 火狐编码</span></span><br><span class=\"line\">\tBASE64Encoder base64Encoder = <span class=\"keyword\">new</span> BASE64Encoder();</span><br><span class=\"line\">\tfilenameEncoder = <span class=\"string\">\"=?utf-8?B?\"</span> + base64Encoder.encode(filename.getBytes(<span class=\"string\">\"utf-8\"</span>)) + <span class=\"string\">\"?=\"</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 浏览器编码</span></span><br><span class=\"line\">\tfilenameEncoder = URLEncoder.encode(filename, <span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// DK中的/lib/tool.jar和/lib/rt.jar已经从Java SE 9中删除</span></span><br><span class=\"line\"><span class=\"comment\">// JDK9 及以后要用下面的方式导包和创建对象</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Base64;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Base64.Encoder;</span><br><span class=\"line\"><span class=\"comment\">// 修改代码</span></span><br><span class=\"line\">Encoder base64Encoder = Base64.getEncoder();</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"注册验证码功能\"><a href=\"#注册验证码功能\" class=\"headerlink\" title=\"注册验证码功能\"></a>注册验证码功能</h4><p>验证码可以防止：恶意批量注册、恶意破解密码、刷票、论坛灌水<br>有效防止某个黑客对某一个特定注册用户用特定程序暴力破解方式进行不断的登陆尝试<br>确保当前访问是来自一个人而非机器</p>\n<ol>\n<li>把别人写好的验证码Servlet拿到程序当中</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.it666.code;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.Color;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.Font;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.Graphics;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.Graphics2D;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.image.BufferedImage;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.imageio.ImageIO;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.annotation.WebServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/CheckCodeServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CheckCodeServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 集合中保存所有成语</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> List&lt;String&gt; words = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 初始化阶段，读取new_words.txt</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// web工程中读取 文件,必须使用绝对磁盘路径</span></span><br><span class=\"line\">\t\tString path = getServletContext().getRealPath(<span class=\"string\">\"/WEB-INF/words.txt\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tBufferedReader reader = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> FileReader(path));</span><br><span class=\"line\">\t\t\tString line;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//把读的成语全部添加到一个集合当中</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> ((line = reader.readLine()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\twords.add(line);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\treader.close();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 禁止缓存</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> width = <span class=\"number\">120</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> height = <span class=\"number\">30</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 步骤一 绘制一张内存中图片</span></span><br><span class=\"line\">\t\tBufferedImage bufferedImage = <span class=\"keyword\">new</span> BufferedImage(width, height,</span><br><span class=\"line\">\t\t\t\tBufferedImage.TYPE_INT_RGB);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 步骤二 图片绘制背景颜色 ---通过绘图对象</span></span><br><span class=\"line\">\t\tGraphics graphics = bufferedImage.getGraphics();<span class=\"comment\">// 得到画图对象 --- 画笔</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 绘制任何图形之前 都必须指定一个颜色</span></span><br><span class=\"line\">\t\tgraphics.setColor(getRandColor(<span class=\"number\">200</span>, <span class=\"number\">250</span>));</span><br><span class=\"line\">\t\tgraphics.fillRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, width, height);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 步骤三 绘制边框</span></span><br><span class=\"line\">\t\tgraphics.setColor(Color.WHITE);</span><br><span class=\"line\">\t\tgraphics.drawRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, width - <span class=\"number\">1</span>, height - <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 步骤四 四个随机数字</span></span><br><span class=\"line\">\t\tGraphics2D graphics2d = (Graphics2D) graphics;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 设置输出字体</span></span><br><span class=\"line\">\t\tgraphics2d.setFont(<span class=\"keyword\">new</span> Font(<span class=\"string\">\"宋体\"</span>, Font.BOLD, <span class=\"number\">18</span>));</span><br><span class=\"line\">\t\tRandom random = <span class=\"keyword\">new</span> Random();<span class=\"comment\">// 生成随机数</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> index = random.nextInt(words.size());</span><br><span class=\"line\">\t\tString word = words.get(index);<span class=\"comment\">// 获得成语</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 定义x坐标</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 随机颜色</span></span><br><span class=\"line\">\t\t\tgraphics2d.setColor(<span class=\"keyword\">new</span> Color(<span class=\"number\">20</span> + random.nextInt(<span class=\"number\">110</span>), <span class=\"number\">20</span> + random</span><br><span class=\"line\">\t\t\t\t\t.nextInt(<span class=\"number\">110</span>), <span class=\"number\">20</span> + random.nextInt(<span class=\"number\">110</span>)));</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 旋转 -30 --- 30度</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> jiaodu = random.nextInt(<span class=\"number\">60</span>) - <span class=\"number\">30</span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 换算弧度</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">double</span> theta = jiaodu * Math.PI / <span class=\"number\">180</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 获得字母数字</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">char</span> c = word.charAt(i);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 将c 输出到图片</span></span><br><span class=\"line\">\t\t\tgraphics2d.rotate(theta, x, <span class=\"number\">20</span>);</span><br><span class=\"line\">\t\t\tgraphics2d.drawString(String.valueOf(c), x, <span class=\"number\">20</span>);</span><br><span class=\"line\">\t\t\tgraphics2d.rotate(-theta, x, <span class=\"number\">20</span>);</span><br><span class=\"line\">\t\t\tx += <span class=\"number\">30</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 将验证码内容保存session</span></span><br><span class=\"line\">\t\trequest.getSession().setAttribute(<span class=\"string\">\"checkcode_session\"</span>, word);</span><br><span class=\"line\">\t\t<span class=\"comment\">//把生成的验证码存放到全局域对象当中</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.getServletContext().setAttribute(<span class=\"string\">\"checkCode\"</span>, word);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 步骤五 绘制干扰线</span></span><br><span class=\"line\">\t\tgraphics.setColor(getRandColor(<span class=\"number\">160</span>, <span class=\"number\">200</span>));</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x1;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x2;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> y1;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> y2;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">30</span>; i++) &#123;</span><br><span class=\"line\">\t\t\tx1 = random.nextInt(width);</span><br><span class=\"line\">\t\t\tx2 = random.nextInt(<span class=\"number\">12</span>);</span><br><span class=\"line\">\t\t\ty1 = random.nextInt(height);</span><br><span class=\"line\">\t\t\ty2 = random.nextInt(<span class=\"number\">12</span>);</span><br><span class=\"line\">\t\t\tgraphics.drawLine(x1, y1, x1 + x2, x2 + y2);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 将上面图片输出到浏览器 ImageIO</span></span><br><span class=\"line\">\t\tgraphics.dispose();<span class=\"comment\">// 释放资源</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//将图片写到response.getOutputStream()中</span></span><br><span class=\"line\">\t\tImageIO.write(bufferedImage, <span class=\"string\">\"jpg\"</span>, response.getOutputStream());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tdoGet(request, response);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 取其某一范围的color</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> fc</span></span><br><span class=\"line\"><span class=\"comment\">\t *            int 范围参数1</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> bc</span></span><br><span class=\"line\"><span class=\"comment\">\t *            int 范围参数2</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> Color</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> Color <span class=\"title\">getRandColor</span><span class=\"params\">(<span class=\"keyword\">int</span> fc, <span class=\"keyword\">int</span> bc)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 取其随机颜色</span></span><br><span class=\"line\">\t\tRandom random = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (fc &gt; <span class=\"number\">255</span>) &#123;</span><br><span class=\"line\">\t\t\tfc = <span class=\"number\">255</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (bc &gt; <span class=\"number\">255</span>) &#123;</span><br><span class=\"line\">\t\t\tbc = <span class=\"number\">255</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> r = fc + random.nextInt(bc - fc);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> g = fc + random.nextInt(bc - fc);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> b = fc + random.nextInt(bc - fc);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Color(r, g, b);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>编写静态页面</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">change</span><span class=\"params\">(obj)</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"comment\">// alert(obj);</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t<span class=\"comment\">// 浏览器加载同样地址使用的是缓存</span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\tobj.src = <span class=\"string\">\"/26-Servlet/CheckCodeServlet?time\"</span>+<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/26-Servlet/RegisterServlet\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"/26-Servlet/CheckCodeServlet\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"change(this)\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- this 指的就是这个img --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入验证码...\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"code\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"注册\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>编写判断验证码是否正确Servlet</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.it666.code;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.annotation.WebServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@WebServlet</span>(<span class=\"string\">\"/RegisterServlet\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RegisterServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">1L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">\t\tString code = request.getParameter(<span class=\"string\">\"code\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(code); <span class=\"comment\">// 中文乱码</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">byte</span>[] bytes = code.getBytes(<span class=\"string\">\"ISO8859-1\"</span>);</span><br><span class=\"line\">\t\tcode = <span class=\"keyword\">new</span> String (bytes,<span class=\"string\">\"UTF-8\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(code);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 取出生成的字符串</span></span><br><span class=\"line\">\t\tString  word = (String) <span class=\"keyword\">this</span>.getServletContext().getAttribute(<span class=\"string\">\"checkCode\"</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 设置字符集，不然 下面的字会乱码</span></span><br><span class=\"line\">\t\tresponse.setContentType(<span class=\"string\">\"text/html;charset=UTF-8\"</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (code.equals(word)) &#123;</span><br><span class=\"line\">\t\t\tresponse.getWriter().write(<span class=\"string\">\"注册成功\"</span>);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tresponse.getWriter().write(<span class=\"string\">\"验证码错误\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 重新跳转到原界面</span></span><br><span class=\"line\">\t\t\tresponse.setHeader(<span class=\"string\">\"refresh\"</span>, <span class=\"string\">\"1;url=/26-Servlet/code.html\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>1.设置响应编码<br>2.从ServletContext当中获取验证码<br>3.获取传入的请求参数<br>4.从servletContext当中取出存放的验证码<br>5.把接收的验证码与取出的验证码时行比较<br>6.相同时，显示成功<br>7.不同时， 显示失败，隔3秒钟跳转到输入验证码界面</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005981003.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级JavaWeb与项目</a><br><a href=\"https://blog.csdn.net/xie_sining/article/details/80777164\" target=\"_blank\" rel=\"noopener\">Java 9版本之后Base64Encoder和Base64Decoder无法继续使用解决办法</a></p>\n"},{"title":"Web服务器笔记-JSP","date":"2020-02-13T11:21:00.000Z","_content":"#### Java Server Pages  (Java服务器页面)\n在传统的网页HTML文件(*.htm,*.html)中插入Java程序段和JSP标记，后缀名为(*.jsp)\n其根本是一个简化的Servlet设计\n\n为什么要有JSP\n直接使用html文件是没有办法输出Java当中的信息\n使用Servlet来去输出一个网页非常的麻烦\n于是就出现了JSP，又能写html，又能写Java代码\n\n修改JSP编码\n![修改JSP编码](web-server-note-9/1.png)\n\n```jsp\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"ISO-8859-1\">\n<title>Insert title here</title>\n</head>\n<body>\n<%\n\tString name = \"蚂蚁小强\";\n%>\n<h1>\n<%=name %>\n</h1>\n\n</body>\n</html>\n```\n\n\n#### JSP的工作原理\n本质就是一个servlet\n\nJSP在第一次被访问时会被Web容器翻译成Servlet\n- 第一次访问index.jsp，自动翻译成index_jsp.java（本质就是把标签一行一行write出来）\n\n![index_jsp.java](web-server-note-9/2.png)\n\n- 编译成index_jsp.class运行\n- 可以在Tomcat的work目录中可以找到(test_jsp.class和test_jsp.java)\n- 下次一次访问时， 会看一下里面的内容有没有发生变化，如果变化了， 重新翻译加载\n\n![index_jsp.java](web-server-note-9/3.png)\n\n全局web.xml中有一个配置，所有JSP的翻译由JspServlet来做\n\n## JSP的组成部分\n- 静态数据，如HTML\n- JSP脚本元素和变量\n- JSP指令，如include指令\n- JSP标签动作\n- 用户自定义标签\n\n## JSP脚本元素和变量\n<%java代码%>\n内部的java代码翻译到Service方法的内部\n\n<%=java变量或表达式>\n会被翻译成Service方法内部out.print()\n\n<%!java代码%>\n会被翻译成Servlet的**成员**\n\nJSP注释\nHTML注释：\n```html\n<!--注释内容-->\n```\n可见范围JSP源码、翻译后的Servlet、页面\n\nJava注释\n//单行注释  /*多行注释*/\n可见范围JSP源码、翻译后的Servlet，页面中看不到\n\nJSP注释\n<%--注释内容--%>\n仅JSP源码可见\n\n## JSP指令\n用于设置整个JSP页面的相关信息\n以及用于JSP页面与其它容器之间的通信\n\n#### include指令\n表示在JSP编译时插入一个包含文件或者代码的文件\ninclude指令所包含的文件名不能是一个变量url，只能是静态的文件名\n静态包含：将两个JSP页面接着到一起，然后再翻译成Servlet\n\n```jsp\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\">\n<title>Insert title here</title>\n</head>\n<body>\n\n\t<%@ include file=\"/header.jsp\" %>\n\t<h1>主体</h1>\n\t<%@ include file=\"/footer.jsp\" %>\n\t\n</body>\n</html>\n```\n\n#### page指令\n用于设定整个JSP页面的属性和相关功能，多个属性之间使用空格隔开\npage指令共有11个属性\n\n- contentType\n指定JSP页面的MIME和编码格式\n- pageEncoding\n指定JSP文件的编码格式\n- import\n在JSP中引入Java的包和类，多个包之间以逗号隔开\n（Ctrl+Shift+O 导包无效，写java.util. 再Alt+/导包）\n- session\n指定当前页面是否能获得当前用户的session对象，缺省是true\n如果指定为false，那么在该页面中无法使用session，使用的话会提示500错误\n- errorPage\n如果当前页面发生异常\n网页会重定向到errorPage所指定的页面进行处理\n- isErrorPage\n允许指定的JSP页面为错误处理页面\n- language属性\n指定页面中使用的脚本语言种类\n目前只支持Java\n- extends\n用于指定该JSP生成的Servlet继承自哪个父类\n必须指定包名加类名\n- buffer\n用来设置输出流缓冲区\n缓冲区的作用就是为了提高IO性能\n也就是说减少write的次数\n- autoFlush\n用来指定当输出流缓冲区满了的时候，是否自动刷新缓冲区\n- isThreadSafe\n缺省值为true\n指定该JSP文件是否支持多线程访问\n- info\n用来设置该JSP文件的介绍信息\n- isELIgnored\n用来标示是否支持EL表达式\n\n#### taglib指令\n声明JSP文件使用哪些标签库\n\n有哪些标签库\n- JSP标准标签库\n- 第三方标签库\n- 自定义标签库\n\n## 标签动作\n\n页面包含\n```jsp\n<jsp:include page=\"被包含的页面\"></jsp:include>\n<jsp:include page=\"/header.jsp\"></jsp:include>\n```\n动态包含：各自翻译自己的页面，然后再引入\n与include对比\n![与include对比](web-server-note-9/4.png)\n\n请求转发（地址栏不会发生变化）\n<jsp:forward page=\"要转发的资源\"></jsp:forward>\n<jsp:forward page=\"/test.jsp\"></jsp:forward>\n\n\n## 隐式对象\nJSP被翻译成servlet之后，service方法中有9个对象定义并初始化完毕\n![隐式对象](web-server-note-9/5.png)\n还有一个是异常的对象\n\n#### 可以直接使用这9个对象\n\n- request\n得到用户请求信息对象\n- response\n服务器向客户端的响应对象\n- config\n服务器配置，可以取得初始化参数\n- session\n用来保存用户会话的信息\n- application\n所有用户的共享信息，就是servletContext\n- page\n指当前页面转换后的Servlet类的实例\n- out\n```jsp\naaa\n<%=\"bbb\" %>\n<%\n\tout.write(\"ccc\");\n\tresponse.getWriter().write(\"ddd\");\n\t\n%>\n打印顺序：ddd aaa bbb ccc \n```\nout的类型：JspWriter\nout作用就是向客户端输出内容 out.write()\nout缓冲区默认8kb\n可以设置成0 代表关闭out缓冲区内容直接写到respons缓冲区\nout写的内容写到out缓冲区当中\n最后再把out缓冲区当中的内容合并到response缓冲区中（拼接到后面）\n![out](web-server-note-9/6.png)\n- pageContext\nJSP页面的上下文对象\n是一个域对象\n```java\nsetAttribute(String name,Object obj)\ngetAttribute(String name)\nremoveAttrbute(String name)\n```\n可以向指定的其他域中存取数据\n自动到所有的域当中找数据\n从小到大的范围搜索数据\n依次从pageContext域，request域，session域，application域中获取属性\n在某个域中获取后将不在向后寻找\n```java\nsetAttribute(String name,Object obj,int scope)\nsetAttribute(“name”,\"lk\",PageContext.REQUEST_SCOPE);\ngetAttribute(String name,int scope)\ngetAttribute(\"lk\",PageContext.REQUEST_SCOPE)\nremoveAttrbute(String name,int scope)\nfindAttribute(String name)\n```\n\n可以获得其他8大隐式对象\n```java\npageContext.getRequest()\npageContext.getSession()\n```\n- exception\n表示JSP页面所发生的异常，在错误页中才起作用\n只有是错误页面的时候，才会有该对象\n\n## 参考资料\n\n[Java零基础到高级JavaWeb与项目](https://study.163.com/course/introduction/1005981003.htm)","source":"_posts/web-server-note-9.md","raw":"---\ntitle: Web服务器笔记-JSP\ncategories: Web服务器笔记\ndate: 2020-02-13 19:21:00\n---\n#### Java Server Pages  (Java服务器页面)\n在传统的网页HTML文件(*.htm,*.html)中插入Java程序段和JSP标记，后缀名为(*.jsp)\n其根本是一个简化的Servlet设计\n\n为什么要有JSP\n直接使用html文件是没有办法输出Java当中的信息\n使用Servlet来去输出一个网页非常的麻烦\n于是就出现了JSP，又能写html，又能写Java代码\n\n修改JSP编码\n![修改JSP编码](web-server-note-9/1.png)\n\n```jsp\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"ISO-8859-1\">\n<title>Insert title here</title>\n</head>\n<body>\n<%\n\tString name = \"蚂蚁小强\";\n%>\n<h1>\n<%=name %>\n</h1>\n\n</body>\n</html>\n```\n\n\n#### JSP的工作原理\n本质就是一个servlet\n\nJSP在第一次被访问时会被Web容器翻译成Servlet\n- 第一次访问index.jsp，自动翻译成index_jsp.java（本质就是把标签一行一行write出来）\n\n![index_jsp.java](web-server-note-9/2.png)\n\n- 编译成index_jsp.class运行\n- 可以在Tomcat的work目录中可以找到(test_jsp.class和test_jsp.java)\n- 下次一次访问时， 会看一下里面的内容有没有发生变化，如果变化了， 重新翻译加载\n\n![index_jsp.java](web-server-note-9/3.png)\n\n全局web.xml中有一个配置，所有JSP的翻译由JspServlet来做\n\n## JSP的组成部分\n- 静态数据，如HTML\n- JSP脚本元素和变量\n- JSP指令，如include指令\n- JSP标签动作\n- 用户自定义标签\n\n## JSP脚本元素和变量\n<%java代码%>\n内部的java代码翻译到Service方法的内部\n\n<%=java变量或表达式>\n会被翻译成Service方法内部out.print()\n\n<%!java代码%>\n会被翻译成Servlet的**成员**\n\nJSP注释\nHTML注释：\n```html\n<!--注释内容-->\n```\n可见范围JSP源码、翻译后的Servlet、页面\n\nJava注释\n//单行注释  /*多行注释*/\n可见范围JSP源码、翻译后的Servlet，页面中看不到\n\nJSP注释\n<%--注释内容--%>\n仅JSP源码可见\n\n## JSP指令\n用于设置整个JSP页面的相关信息\n以及用于JSP页面与其它容器之间的通信\n\n#### include指令\n表示在JSP编译时插入一个包含文件或者代码的文件\ninclude指令所包含的文件名不能是一个变量url，只能是静态的文件名\n静态包含：将两个JSP页面接着到一起，然后再翻译成Servlet\n\n```jsp\n<%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"\n    pageEncoding=\"UTF-8\"%>\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"UTF-8\">\n<title>Insert title here</title>\n</head>\n<body>\n\n\t<%@ include file=\"/header.jsp\" %>\n\t<h1>主体</h1>\n\t<%@ include file=\"/footer.jsp\" %>\n\t\n</body>\n</html>\n```\n\n#### page指令\n用于设定整个JSP页面的属性和相关功能，多个属性之间使用空格隔开\npage指令共有11个属性\n\n- contentType\n指定JSP页面的MIME和编码格式\n- pageEncoding\n指定JSP文件的编码格式\n- import\n在JSP中引入Java的包和类，多个包之间以逗号隔开\n（Ctrl+Shift+O 导包无效，写java.util. 再Alt+/导包）\n- session\n指定当前页面是否能获得当前用户的session对象，缺省是true\n如果指定为false，那么在该页面中无法使用session，使用的话会提示500错误\n- errorPage\n如果当前页面发生异常\n网页会重定向到errorPage所指定的页面进行处理\n- isErrorPage\n允许指定的JSP页面为错误处理页面\n- language属性\n指定页面中使用的脚本语言种类\n目前只支持Java\n- extends\n用于指定该JSP生成的Servlet继承自哪个父类\n必须指定包名加类名\n- buffer\n用来设置输出流缓冲区\n缓冲区的作用就是为了提高IO性能\n也就是说减少write的次数\n- autoFlush\n用来指定当输出流缓冲区满了的时候，是否自动刷新缓冲区\n- isThreadSafe\n缺省值为true\n指定该JSP文件是否支持多线程访问\n- info\n用来设置该JSP文件的介绍信息\n- isELIgnored\n用来标示是否支持EL表达式\n\n#### taglib指令\n声明JSP文件使用哪些标签库\n\n有哪些标签库\n- JSP标准标签库\n- 第三方标签库\n- 自定义标签库\n\n## 标签动作\n\n页面包含\n```jsp\n<jsp:include page=\"被包含的页面\"></jsp:include>\n<jsp:include page=\"/header.jsp\"></jsp:include>\n```\n动态包含：各自翻译自己的页面，然后再引入\n与include对比\n![与include对比](web-server-note-9/4.png)\n\n请求转发（地址栏不会发生变化）\n<jsp:forward page=\"要转发的资源\"></jsp:forward>\n<jsp:forward page=\"/test.jsp\"></jsp:forward>\n\n\n## 隐式对象\nJSP被翻译成servlet之后，service方法中有9个对象定义并初始化完毕\n![隐式对象](web-server-note-9/5.png)\n还有一个是异常的对象\n\n#### 可以直接使用这9个对象\n\n- request\n得到用户请求信息对象\n- response\n服务器向客户端的响应对象\n- config\n服务器配置，可以取得初始化参数\n- session\n用来保存用户会话的信息\n- application\n所有用户的共享信息，就是servletContext\n- page\n指当前页面转换后的Servlet类的实例\n- out\n```jsp\naaa\n<%=\"bbb\" %>\n<%\n\tout.write(\"ccc\");\n\tresponse.getWriter().write(\"ddd\");\n\t\n%>\n打印顺序：ddd aaa bbb ccc \n```\nout的类型：JspWriter\nout作用就是向客户端输出内容 out.write()\nout缓冲区默认8kb\n可以设置成0 代表关闭out缓冲区内容直接写到respons缓冲区\nout写的内容写到out缓冲区当中\n最后再把out缓冲区当中的内容合并到response缓冲区中（拼接到后面）\n![out](web-server-note-9/6.png)\n- pageContext\nJSP页面的上下文对象\n是一个域对象\n```java\nsetAttribute(String name,Object obj)\ngetAttribute(String name)\nremoveAttrbute(String name)\n```\n可以向指定的其他域中存取数据\n自动到所有的域当中找数据\n从小到大的范围搜索数据\n依次从pageContext域，request域，session域，application域中获取属性\n在某个域中获取后将不在向后寻找\n```java\nsetAttribute(String name,Object obj,int scope)\nsetAttribute(“name”,\"lk\",PageContext.REQUEST_SCOPE);\ngetAttribute(String name,int scope)\ngetAttribute(\"lk\",PageContext.REQUEST_SCOPE)\nremoveAttrbute(String name,int scope)\nfindAttribute(String name)\n```\n\n可以获得其他8大隐式对象\n```java\npageContext.getRequest()\npageContext.getSession()\n```\n- exception\n表示JSP页面所发生的异常，在错误页中才起作用\n只有是错误页面的时候，才会有该对象\n\n## 参考资料\n\n[Java零基础到高级JavaWeb与项目](https://study.163.com/course/introduction/1005981003.htm)","slug":"web-server-note-9","published":1,"updated":"2020-06-13T02:55:34.926Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cke3x9g7f002pzgvu30d5dk73","content":"<h4 id=\"Java-Server-Pages-Java服务器页面\"><a href=\"#Java-Server-Pages-Java服务器页面\" class=\"headerlink\" title=\"Java Server Pages  (Java服务器页面)\"></a>Java Server Pages  (Java服务器页面)</h4><p>在传统的网页HTML文件(<em>.htm,</em>.html)中插入Java程序段和JSP标记，后缀名为(*.jsp)<br>其根本是一个简化的Servlet设计</p>\n<p>为什么要有JSP<br>直接使用html文件是没有办法输出Java当中的信息<br>使用Servlet来去输出一个网页非常的麻烦<br>于是就出现了JSP，又能写html，又能写Java代码</p>\n<p>修改JSP编码<br><img src=\"/2020/02/13/web-server-note-9/1.png\" alt=\"修改JSP编码\"></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=<span class=\"string\">\"java\"</span> contentType=<span class=\"string\">\"text/html; charset=UTF-8\"</span></span><br><span class=\"line\">    pageEncoding=<span class=\"string\">\"UTF-8\"</span>%&gt;</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta charset=<span class=\"string\">\"ISO-8859-1\"</span>&gt;</span><br><span class=\"line\">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">\tString name = <span class=\"string\">\"蚂蚁小强\"</span>;</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\">&lt;h1&gt;</span><br><span class=\"line\">&lt;%=name %&gt;</span><br><span class=\"line\">&lt;/h1&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"JSP的工作原理\"><a href=\"#JSP的工作原理\" class=\"headerlink\" title=\"JSP的工作原理\"></a>JSP的工作原理</h4><p>本质就是一个servlet</p>\n<p>JSP在第一次被访问时会被Web容器翻译成Servlet</p>\n<ul>\n<li>第一次访问index.jsp，自动翻译成index_jsp.java（本质就是把标签一行一行write出来）</li>\n</ul>\n<p><img src=\"/2020/02/13/web-server-note-9/2.png\" alt=\"index_jsp.java\"></p>\n<ul>\n<li>编译成index_jsp.class运行</li>\n<li>可以在Tomcat的work目录中可以找到(test_jsp.class和test_jsp.java)</li>\n<li>下次一次访问时， 会看一下里面的内容有没有发生变化，如果变化了， 重新翻译加载</li>\n</ul>\n<p><img src=\"/2020/02/13/web-server-note-9/3.png\" alt=\"index_jsp.java\"></p>\n<p>全局web.xml中有一个配置，所有JSP的翻译由JspServlet来做</p>\n<h2 id=\"JSP的组成部分\"><a href=\"#JSP的组成部分\" class=\"headerlink\" title=\"JSP的组成部分\"></a>JSP的组成部分</h2><ul>\n<li>静态数据，如HTML</li>\n<li>JSP脚本元素和变量</li>\n<li>JSP指令，如include指令</li>\n<li>JSP标签动作</li>\n<li>用户自定义标签</li>\n</ul>\n<h2 id=\"JSP脚本元素和变量\"><a href=\"#JSP脚本元素和变量\" class=\"headerlink\" title=\"JSP脚本元素和变量\"></a>JSP脚本元素和变量</h2><p>&lt;%java代码%&gt;<br>内部的java代码翻译到Service方法的内部</p>\n<p>&lt;%=java变量或表达式&gt;<br>会被翻译成Service方法内部out.print()</p>\n<p>&lt;%!java代码%&gt;<br>会被翻译成Servlet的<strong>成员</strong></p>\n<p>JSP注释<br>HTML注释：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--注释内容--&gt;</span></span><br></pre></td></tr></table></figure>\n<p>可见范围JSP源码、翻译后的Servlet、页面</p>\n<p>Java注释<br>//单行注释  /<em>多行注释</em>/<br>可见范围JSP源码、翻译后的Servlet，页面中看不到</p>\n<p>JSP注释<br>&lt;%–注释内容–%&gt;<br>仅JSP源码可见</p>\n<h2 id=\"JSP指令\"><a href=\"#JSP指令\" class=\"headerlink\" title=\"JSP指令\"></a>JSP指令</h2><p>用于设置整个JSP页面的相关信息<br>以及用于JSP页面与其它容器之间的通信</p>\n<h4 id=\"include指令\"><a href=\"#include指令\" class=\"headerlink\" title=\"include指令\"></a>include指令</h4><p>表示在JSP编译时插入一个包含文件或者代码的文件<br>include指令所包含的文件名不能是一个变量url，只能是静态的文件名<br>静态包含：将两个JSP页面接着到一起，然后再翻译成Servlet</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=<span class=\"string\">\"java\"</span> contentType=<span class=\"string\">\"text/html; charset=UTF-8\"</span></span><br><span class=\"line\">    pageEncoding=<span class=\"string\">\"UTF-8\"</span>%&gt;</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;%@ include file=<span class=\"string\">\"/header.jsp\"</span> %&gt;</span><br><span class=\"line\">\t&lt;h1&gt;主体&lt;/h1&gt;</span><br><span class=\"line\">\t&lt;%@ include file=<span class=\"string\">\"/footer.jsp\"</span> %&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"page指令\"><a href=\"#page指令\" class=\"headerlink\" title=\"page指令\"></a>page指令</h4><p>用于设定整个JSP页面的属性和相关功能，多个属性之间使用空格隔开<br>page指令共有11个属性</p>\n<ul>\n<li>contentType<br>指定JSP页面的MIME和编码格式</li>\n<li>pageEncoding<br>指定JSP文件的编码格式</li>\n<li>import<br>在JSP中引入Java的包和类，多个包之间以逗号隔开<br>（Ctrl+Shift+O 导包无效，写java.util. 再Alt+/导包）</li>\n<li>session<br>指定当前页面是否能获得当前用户的session对象，缺省是true<br>如果指定为false，那么在该页面中无法使用session，使用的话会提示500错误</li>\n<li>errorPage<br>如果当前页面发生异常<br>网页会重定向到errorPage所指定的页面进行处理</li>\n<li>isErrorPage<br>允许指定的JSP页面为错误处理页面</li>\n<li>language属性<br>指定页面中使用的脚本语言种类<br>目前只支持Java</li>\n<li>extends<br>用于指定该JSP生成的Servlet继承自哪个父类<br>必须指定包名加类名</li>\n<li>buffer<br>用来设置输出流缓冲区<br>缓冲区的作用就是为了提高IO性能<br>也就是说减少write的次数</li>\n<li>autoFlush<br>用来指定当输出流缓冲区满了的时候，是否自动刷新缓冲区</li>\n<li>isThreadSafe<br>缺省值为true<br>指定该JSP文件是否支持多线程访问</li>\n<li>info<br>用来设置该JSP文件的介绍信息</li>\n<li>isELIgnored<br>用来标示是否支持EL表达式</li>\n</ul>\n<h4 id=\"taglib指令\"><a href=\"#taglib指令\" class=\"headerlink\" title=\"taglib指令\"></a>taglib指令</h4><p>声明JSP文件使用哪些标签库</p>\n<p>有哪些标签库</p>\n<ul>\n<li>JSP标准标签库</li>\n<li>第三方标签库</li>\n<li>自定义标签库</li>\n</ul>\n<h2 id=\"标签动作\"><a href=\"#标签动作\" class=\"headerlink\" title=\"标签动作\"></a>标签动作</h2><p>页面包含</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;jsp:include page=\"被包含的页面\"&gt;&lt;/jsp:include&gt;</span><br><span class=\"line\">&lt;jsp:include page=\"/header.jsp\"&gt;&lt;/jsp:include&gt;</span><br></pre></td></tr></table></figure>\n<p>动态包含：各自翻译自己的页面，然后再引入<br>与include对比<br><img src=\"/2020/02/13/web-server-note-9/4.png\" alt=\"与include对比\"></p>\n<p>请求转发（地址栏不会发生变化）<br>&lt;jsp:forward page=”要转发的资源”&gt;<br>&lt;jsp:forward page=”/test.jsp”&gt;</p>\n<h2 id=\"隐式对象\"><a href=\"#隐式对象\" class=\"headerlink\" title=\"隐式对象\"></a>隐式对象</h2><p>JSP被翻译成servlet之后，service方法中有9个对象定义并初始化完毕<br><img src=\"/2020/02/13/web-server-note-9/5.png\" alt=\"隐式对象\"><br>还有一个是异常的对象</p>\n<h4 id=\"可以直接使用这9个对象\"><a href=\"#可以直接使用这9个对象\" class=\"headerlink\" title=\"可以直接使用这9个对象\"></a>可以直接使用这9个对象</h4><ul>\n<li>request<br>得到用户请求信息对象</li>\n<li>response<br>服务器向客户端的响应对象</li>\n<li>config<br>服务器配置，可以取得初始化参数</li>\n<li>session<br>用来保存用户会话的信息</li>\n<li>application<br>所有用户的共享信息，就是servletContext</li>\n<li>page<br>指当前页面转换后的Servlet类的实例</li>\n<li>out<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aaa</span><br><span class=\"line\">&lt;%=<span class=\"string\">\"bbb\"</span> %&gt;</span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">\tout.write(<span class=\"string\">\"ccc\"</span>);</span><br><span class=\"line\">\tresponse.getWriter().write(<span class=\"string\">\"ddd\"</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\">打印顺序：ddd aaa bbb ccc</span><br></pre></td></tr></table></figure>\nout的类型：JspWriter<br>out作用就是向客户端输出内容 out.write()<br>out缓冲区默认8kb<br>可以设置成0 代表关闭out缓冲区内容直接写到respons缓冲区<br>out写的内容写到out缓冲区当中<br>最后再把out缓冲区当中的内容合并到response缓冲区中（拼接到后面）<br><img src=\"/2020/02/13/web-server-note-9/6.png\" alt=\"out\"></li>\n<li>pageContext<br>JSP页面的上下文对象<br>是一个域对象<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setAttribute(String name,Object obj)</span><br><span class=\"line\">getAttribute(String name)</span><br><span class=\"line\">removeAttrbute(String name)</span><br></pre></td></tr></table></figure>\n可以向指定的其他域中存取数据<br>自动到所有的域当中找数据<br>从小到大的范围搜索数据<br>依次从pageContext域，request域，session域，application域中获取属性<br>在某个域中获取后将不在向后寻找<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setAttribute(String name,Object obj,<span class=\"keyword\">int</span> scope)</span><br><span class=\"line\">setAttribute(“name”,<span class=\"string\">\"lk\"</span>,PageContext.REQUEST_SCOPE);</span><br><span class=\"line\">getAttribute(String name,<span class=\"keyword\">int</span> scope)</span><br><span class=\"line\">getAttribute(<span class=\"string\">\"lk\"</span>,PageContext.REQUEST_SCOPE)</span><br><span class=\"line\">removeAttrbute(String name,<span class=\"keyword\">int</span> scope)</span><br><span class=\"line\">findAttribute(String name)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>可以获得其他8大隐式对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pageContext.getRequest()</span><br><span class=\"line\">pageContext.getSession()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>exception<br>表示JSP页面所发生的异常，在错误页中才起作用<br>只有是错误页面的时候，才会有该对象</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005981003.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级JavaWeb与项目</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Java-Server-Pages-Java服务器页面\"><a href=\"#Java-Server-Pages-Java服务器页面\" class=\"headerlink\" title=\"Java Server Pages  (Java服务器页面)\"></a>Java Server Pages  (Java服务器页面)</h4><p>在传统的网页HTML文件(<em>.htm,</em>.html)中插入Java程序段和JSP标记，后缀名为(*.jsp)<br>其根本是一个简化的Servlet设计</p>\n<p>为什么要有JSP<br>直接使用html文件是没有办法输出Java当中的信息<br>使用Servlet来去输出一个网页非常的麻烦<br>于是就出现了JSP，又能写html，又能写Java代码</p>\n<p>修改JSP编码<br><img src=\"/2020/02/13/web-server-note-9/1.png\" alt=\"修改JSP编码\"></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=<span class=\"string\">\"java\"</span> contentType=<span class=\"string\">\"text/html; charset=UTF-8\"</span></span><br><span class=\"line\">    pageEncoding=<span class=\"string\">\"UTF-8\"</span>%&gt;</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta charset=<span class=\"string\">\"ISO-8859-1\"</span>&gt;</span><br><span class=\"line\">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">\tString name = <span class=\"string\">\"蚂蚁小强\"</span>;</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\">&lt;h1&gt;</span><br><span class=\"line\">&lt;%=name %&gt;</span><br><span class=\"line\">&lt;/h1&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"JSP的工作原理\"><a href=\"#JSP的工作原理\" class=\"headerlink\" title=\"JSP的工作原理\"></a>JSP的工作原理</h4><p>本质就是一个servlet</p>\n<p>JSP在第一次被访问时会被Web容器翻译成Servlet</p>\n<ul>\n<li>第一次访问index.jsp，自动翻译成index_jsp.java（本质就是把标签一行一行write出来）</li>\n</ul>\n<p><img src=\"/2020/02/13/web-server-note-9/2.png\" alt=\"index_jsp.java\"></p>\n<ul>\n<li>编译成index_jsp.class运行</li>\n<li>可以在Tomcat的work目录中可以找到(test_jsp.class和test_jsp.java)</li>\n<li>下次一次访问时， 会看一下里面的内容有没有发生变化，如果变化了， 重新翻译加载</li>\n</ul>\n<p><img src=\"/2020/02/13/web-server-note-9/3.png\" alt=\"index_jsp.java\"></p>\n<p>全局web.xml中有一个配置，所有JSP的翻译由JspServlet来做</p>\n<h2 id=\"JSP的组成部分\"><a href=\"#JSP的组成部分\" class=\"headerlink\" title=\"JSP的组成部分\"></a>JSP的组成部分</h2><ul>\n<li>静态数据，如HTML</li>\n<li>JSP脚本元素和变量</li>\n<li>JSP指令，如include指令</li>\n<li>JSP标签动作</li>\n<li>用户自定义标签</li>\n</ul>\n<h2 id=\"JSP脚本元素和变量\"><a href=\"#JSP脚本元素和变量\" class=\"headerlink\" title=\"JSP脚本元素和变量\"></a>JSP脚本元素和变量</h2><p>&lt;%java代码%&gt;<br>内部的java代码翻译到Service方法的内部</p>\n<p>&lt;%=java变量或表达式&gt;<br>会被翻译成Service方法内部out.print()</p>\n<p>&lt;%!java代码%&gt;<br>会被翻译成Servlet的<strong>成员</strong></p>\n<p>JSP注释<br>HTML注释：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--注释内容--&gt;</span></span><br></pre></td></tr></table></figure>\n<p>可见范围JSP源码、翻译后的Servlet、页面</p>\n<p>Java注释<br>//单行注释  /<em>多行注释</em>/<br>可见范围JSP源码、翻译后的Servlet，页面中看不到</p>\n<p>JSP注释<br>&lt;%–注释内容–%&gt;<br>仅JSP源码可见</p>\n<h2 id=\"JSP指令\"><a href=\"#JSP指令\" class=\"headerlink\" title=\"JSP指令\"></a>JSP指令</h2><p>用于设置整个JSP页面的相关信息<br>以及用于JSP页面与其它容器之间的通信</p>\n<h4 id=\"include指令\"><a href=\"#include指令\" class=\"headerlink\" title=\"include指令\"></a>include指令</h4><p>表示在JSP编译时插入一个包含文件或者代码的文件<br>include指令所包含的文件名不能是一个变量url，只能是静态的文件名<br>静态包含：将两个JSP页面接着到一起，然后再翻译成Servlet</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=<span class=\"string\">\"java\"</span> contentType=<span class=\"string\">\"text/html; charset=UTF-8\"</span></span><br><span class=\"line\">    pageEncoding=<span class=\"string\">\"UTF-8\"</span>%&gt;</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</span><br><span class=\"line\">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;%@ include file=<span class=\"string\">\"/header.jsp\"</span> %&gt;</span><br><span class=\"line\">\t&lt;h1&gt;主体&lt;/h1&gt;</span><br><span class=\"line\">\t&lt;%@ include file=<span class=\"string\">\"/footer.jsp\"</span> %&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"page指令\"><a href=\"#page指令\" class=\"headerlink\" title=\"page指令\"></a>page指令</h4><p>用于设定整个JSP页面的属性和相关功能，多个属性之间使用空格隔开<br>page指令共有11个属性</p>\n<ul>\n<li>contentType<br>指定JSP页面的MIME和编码格式</li>\n<li>pageEncoding<br>指定JSP文件的编码格式</li>\n<li>import<br>在JSP中引入Java的包和类，多个包之间以逗号隔开<br>（Ctrl+Shift+O 导包无效，写java.util. 再Alt+/导包）</li>\n<li>session<br>指定当前页面是否能获得当前用户的session对象，缺省是true<br>如果指定为false，那么在该页面中无法使用session，使用的话会提示500错误</li>\n<li>errorPage<br>如果当前页面发生异常<br>网页会重定向到errorPage所指定的页面进行处理</li>\n<li>isErrorPage<br>允许指定的JSP页面为错误处理页面</li>\n<li>language属性<br>指定页面中使用的脚本语言种类<br>目前只支持Java</li>\n<li>extends<br>用于指定该JSP生成的Servlet继承自哪个父类<br>必须指定包名加类名</li>\n<li>buffer<br>用来设置输出流缓冲区<br>缓冲区的作用就是为了提高IO性能<br>也就是说减少write的次数</li>\n<li>autoFlush<br>用来指定当输出流缓冲区满了的时候，是否自动刷新缓冲区</li>\n<li>isThreadSafe<br>缺省值为true<br>指定该JSP文件是否支持多线程访问</li>\n<li>info<br>用来设置该JSP文件的介绍信息</li>\n<li>isELIgnored<br>用来标示是否支持EL表达式</li>\n</ul>\n<h4 id=\"taglib指令\"><a href=\"#taglib指令\" class=\"headerlink\" title=\"taglib指令\"></a>taglib指令</h4><p>声明JSP文件使用哪些标签库</p>\n<p>有哪些标签库</p>\n<ul>\n<li>JSP标准标签库</li>\n<li>第三方标签库</li>\n<li>自定义标签库</li>\n</ul>\n<h2 id=\"标签动作\"><a href=\"#标签动作\" class=\"headerlink\" title=\"标签动作\"></a>标签动作</h2><p>页面包含</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;jsp:include page=\"被包含的页面\"&gt;&lt;/jsp:include&gt;</span><br><span class=\"line\">&lt;jsp:include page=\"/header.jsp\"&gt;&lt;/jsp:include&gt;</span><br></pre></td></tr></table></figure>\n<p>动态包含：各自翻译自己的页面，然后再引入<br>与include对比<br><img src=\"/2020/02/13/web-server-note-9/4.png\" alt=\"与include对比\"></p>\n<p>请求转发（地址栏不会发生变化）<br>&lt;jsp:forward page=”要转发的资源”&gt;<br>&lt;jsp:forward page=”/test.jsp”&gt;</p>\n<h2 id=\"隐式对象\"><a href=\"#隐式对象\" class=\"headerlink\" title=\"隐式对象\"></a>隐式对象</h2><p>JSP被翻译成servlet之后，service方法中有9个对象定义并初始化完毕<br><img src=\"/2020/02/13/web-server-note-9/5.png\" alt=\"隐式对象\"><br>还有一个是异常的对象</p>\n<h4 id=\"可以直接使用这9个对象\"><a href=\"#可以直接使用这9个对象\" class=\"headerlink\" title=\"可以直接使用这9个对象\"></a>可以直接使用这9个对象</h4><ul>\n<li>request<br>得到用户请求信息对象</li>\n<li>response<br>服务器向客户端的响应对象</li>\n<li>config<br>服务器配置，可以取得初始化参数</li>\n<li>session<br>用来保存用户会话的信息</li>\n<li>application<br>所有用户的共享信息，就是servletContext</li>\n<li>page<br>指当前页面转换后的Servlet类的实例</li>\n<li>out<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aaa</span><br><span class=\"line\">&lt;%=<span class=\"string\">\"bbb\"</span> %&gt;</span><br><span class=\"line\">&lt;%</span><br><span class=\"line\">\tout.write(<span class=\"string\">\"ccc\"</span>);</span><br><span class=\"line\">\tresponse.getWriter().write(<span class=\"string\">\"ddd\"</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">%&gt;</span><br><span class=\"line\">打印顺序：ddd aaa bbb ccc</span><br></pre></td></tr></table></figure>\nout的类型：JspWriter<br>out作用就是向客户端输出内容 out.write()<br>out缓冲区默认8kb<br>可以设置成0 代表关闭out缓冲区内容直接写到respons缓冲区<br>out写的内容写到out缓冲区当中<br>最后再把out缓冲区当中的内容合并到response缓冲区中（拼接到后面）<br><img src=\"/2020/02/13/web-server-note-9/6.png\" alt=\"out\"></li>\n<li>pageContext<br>JSP页面的上下文对象<br>是一个域对象<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setAttribute(String name,Object obj)</span><br><span class=\"line\">getAttribute(String name)</span><br><span class=\"line\">removeAttrbute(String name)</span><br></pre></td></tr></table></figure>\n可以向指定的其他域中存取数据<br>自动到所有的域当中找数据<br>从小到大的范围搜索数据<br>依次从pageContext域，request域，session域，application域中获取属性<br>在某个域中获取后将不在向后寻找<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setAttribute(String name,Object obj,<span class=\"keyword\">int</span> scope)</span><br><span class=\"line\">setAttribute(“name”,<span class=\"string\">\"lk\"</span>,PageContext.REQUEST_SCOPE);</span><br><span class=\"line\">getAttribute(String name,<span class=\"keyword\">int</span> scope)</span><br><span class=\"line\">getAttribute(<span class=\"string\">\"lk\"</span>,PageContext.REQUEST_SCOPE)</span><br><span class=\"line\">removeAttrbute(String name,<span class=\"keyword\">int</span> scope)</span><br><span class=\"line\">findAttribute(String name)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>可以获得其他8大隐式对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pageContext.getRequest()</span><br><span class=\"line\">pageContext.getSession()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>exception<br>表示JSP页面所发生的异常，在错误页中才起作用<br>只有是错误页面的时候，才会有该对象</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://study.163.com/course/introduction/1005981003.htm\" target=\"_blank\" rel=\"noopener\">Java零基础到高级JavaWeb与项目</a></p>\n"}],"PostAsset":[{"_id":"source/_posts/big-data/1.jpg","slug":"1.jpg","post":"cke3x9g330002zgvu2q6y2b9h","modified":0,"renderable":0},{"_id":"source/_posts/front-end/2.png","slug":"2.png","post":"cke3x9g360003zgvuclyk9ulc","modified":0,"renderable":0},{"_id":"source/_posts/front-end/6.png","slug":"6.png","post":"cke3x9g360003zgvuclyk9ulc","modified":0,"renderable":0},{"_id":"source/_posts/jdbc-note-2/3.png","slug":"3.png","post":"cke3x9g5g000uzgvu7e3behua","modified":0,"renderable":0},{"_id":"source/_posts/jdbc-note-4/10.png","slug":"10.png","post":"cke3x9g5j000yzgvubgcs7jtu","modified":0,"renderable":0},{"_id":"source/_posts/jdbc-note-4/15.png","slug":"15.png","post":"cke3x9g5j000yzgvubgcs7jtu","modified":0,"renderable":0},{"_id":"source/_posts/jdbc-note-4/16.png","slug":"16.png","post":"cke3x9g5j000yzgvubgcs7jtu","modified":0,"renderable":0},{"_id":"source/_posts/web-server-note-10/1.png","slug":"1.png","post":"cke3x9g6f001tzgvu1d4h3t9h","modified":0,"renderable":0},{"_id":"source/_posts/web-server-note-8/2.png","slug":"2.png","post":"cke3x9g7a002lzgvuc8cm46oz","modified":0,"renderable":0},{"_id":"source/_posts/java-note-3/1.png","slug":"1.png","post":"cke3x9g4y000lzgvug8z461ta","modified":0,"renderable":0},{"_id":"source/_posts/jdbc-note-1/8.png","slug":"8.png","post":"cke3x9g5e000tzgvu2pclfpw0","modified":0,"renderable":0},{"_id":"source/_posts/web-server-note-12/1.png","slug":"1.png","post":"cke3x9g6n0023zgvu7n95bee4","modified":0,"renderable":0},{"_id":"source/_posts/web-server-note-12/5.png","slug":"5.png","post":"cke3x9g6n0023zgvu7n95bee4","modified":0,"renderable":0},{"_id":"source/_posts/web-server-note-12/2.png","slug":"2.png","post":"cke3x9g6n0023zgvu7n95bee4","modified":0,"renderable":0},{"_id":"source/_posts/web-server-note-12/3.png","slug":"3.png","post":"cke3x9g6n0023zgvu7n95bee4","modified":0,"renderable":0},{"_id":"source/_posts/web-server-note-17/1.png","slug":"1.png","post":"cke3x9g6j001yzgvueopx38rj","modified":0,"renderable":0},{"_id":"source/_posts/web-server-note-17/2.png","slug":"2.png","post":"cke3x9g6j001yzgvueopx38rj","modified":0,"renderable":0},{"_id":"source/_posts/web-server-note-2/1.png","slug":"1.png","post":"cke3x9g70002czgvu58pmguio","modified":0,"renderable":0},{"_id":"source/_posts/web-server-note-2/3.png","slug":"3.png","post":"cke3x9g70002czgvu58pmguio","modified":0,"renderable":0},{"_id":"source/_posts/web-server-note-9/4.png","slug":"4.png","post":"cke3x9g7f002pzgvu30d5dk73","modified":0,"renderable":0},{"_id":"source/_posts/centos7-initial-configuration/01.png","slug":"01.png","post":"cke3x9g3b0005zgvubymu0olr","modified":0,"renderable":0},{"_id":"source/_posts/java-note-2/1.png","slug":"1.png","post":"cke3x9g4s000izgvu1j8kf5wr","modified":0,"renderable":0},{"_id":"source/_posts/jdbc-note-5/1.png","slug":"1.png","post":"cke3x9g5t0013zgvubazlgmp6","modified":0,"renderable":0},{"_id":"source/_posts/mysql-note-1/2.png","slug":"2.png","post":"cke3x9g5v0016zgvu2tmjag04","modified":0,"renderable":0},{"_id":"source/_posts/web-server-note-16/1.png","slug":"1.png","post":"cke3x9g6x002bzgvu9470f24u","modified":0,"renderable":0},{"_id":"source/_posts/web-server-note-6/1.png","slug":"1.png","post":"cke3x9g79002kzgvucsju9r0r","modified":0,"renderable":0},{"_id":"source/_posts/web-server-note-5/1.png","slug":"1.png","post":"cke3x9g7e002ozgvu6dpgagkq","modified":0,"renderable":0},{"_id":"source/_posts/android-note/01_android_web.png","slug":"01_android_web.png","post":"cke3x9g46000azgvu9jxgfwr0","modified":0,"renderable":0},{"_id":"source/_posts/android-note/02_coolapk.png","slug":"02_coolapk.png","post":"cke3x9g46000azgvu9jxgfwr0","modified":0,"renderable":0},{"_id":"source/_posts/web-server-note-4/1.png","slug":"1.png","post":"cke3x9g75002gzgvu544e484e","modified":0,"renderable":0},{"_id":"source/_posts/web-server-note-4/2.png","slug":"2.png","post":"cke3x9g75002gzgvu544e484e","modified":0,"renderable":0},{"_id":"source/_posts/web-server-note-7/1.png","slug":"1.png","post":"cke3x9g77002izgvug69pafab","modified":0,"renderable":0},{"_id":"source/_posts/web-server-note-7/2.png","slug":"2.png","post":"cke3x9g77002izgvug69pafab","modified":0,"renderable":0},{"_id":"source/_posts/big-data/2.png","slug":"2.png","post":"cke3x9g330002zgvu2q6y2b9h","modified":0,"renderable":0},{"_id":"source/_posts/big-data/3.png","slug":"3.png","post":"cke3x9g330002zgvu2q6y2b9h","modified":0,"renderable":0},{"_id":"source/_posts/git-note/1.png","slug":"1.png","post":"cke3x9g3t0007zgvuglzf3wx5","modified":0,"renderable":0},{"_id":"source/_posts/git-note/2.png","slug":"2.png","post":"cke3x9g3t0007zgvuglzf3wx5","modified":0,"renderable":0},{"_id":"source/_posts/git-note/3.png","slug":"3.png","post":"cke3x9g3t0007zgvuglzf3wx5","modified":0,"renderable":0},{"_id":"source/_posts/java-note-5/1.png","slug":"1.png","post":"cke3x9g5b000pzgvu33echb35","modified":0,"renderable":0},{"_id":"source/_posts/java-note-5/2.png","slug":"2.png","post":"cke3x9g5b000pzgvu33echb35","modified":0,"renderable":0},{"_id":"source/_posts/java-note-5/3.png","slug":"3.png","post":"cke3x9g5b000pzgvu33echb35","modified":0,"renderable":0},{"_id":"source/_posts/mysql-note-2/1.png","slug":"1.png","post":"cke3x9g63001hzgvu0vsr3hzl","modified":0,"renderable":0},{"_id":"source/_posts/mysql-note-2/2.png","slug":"2.png","post":"cke3x9g63001hzgvu0vsr3hzl","modified":0,"renderable":0},{"_id":"source/_posts/mysql-note-2/3.png","slug":"3.png","post":"cke3x9g63001hzgvu0vsr3hzl","modified":0,"renderable":0},{"_id":"source/_posts/web-server-note-1/1.png","slug":"1.png","post":"cke3x9g6g001vzgvu2eza92yx","modified":0,"renderable":0},{"_id":"source/_posts/web-server-note-1/2.png","slug":"2.png","post":"cke3x9g6g001vzgvu2eza92yx","modified":0,"renderable":0},{"_id":"source/_posts/web-server-note-1/3.png","slug":"3.png","post":"cke3x9g6g001vzgvu2eza92yx","modified":0,"renderable":0},{"_id":"source/_posts/web-server-note-1/4.png","slug":"4.png","post":"cke3x9g6g001vzgvu2eza92yx","modified":0,"renderable":0},{"_id":"source/_posts/web-server-note-12/4.png","slug":"4.png","post":"cke3x9g6n0023zgvu7n95bee4","modified":0,"renderable":0},{"_id":"source/_posts/linux-centos7/01.gif","slug":"01.gif","post":"cke3x9g5y001bzgvu9q949ysv","modified":0,"renderable":0},{"_id":"source/_posts/linux-centos7/02.gif","slug":"02.gif","post":"cke3x9g5y001bzgvu9q949ysv","modified":0,"renderable":0},{"_id":"source/_posts/linux-centos7/03.gif","slug":"03.gif","post":"cke3x9g5y001bzgvu9q949ysv","modified":0,"renderable":0},{"_id":"source/_posts/linux-centos7/04.png","slug":"04.png","post":"cke3x9g5y001bzgvu9q949ysv","modified":0,"renderable":0},{"_id":"source/_posts/linux-centos7/05.gif","slug":"05.gif","post":"cke3x9g5y001bzgvu9q949ysv","modified":0,"renderable":0},{"_id":"source/_posts/linux-centos7/06.png","slug":"06.png","post":"cke3x9g5y001bzgvu9q949ysv","modified":0,"renderable":0},{"_id":"source/_posts/web-server-note-9/1.png","slug":"1.png","post":"cke3x9g7f002pzgvu30d5dk73","modified":0,"renderable":0},{"_id":"source/_posts/web-server-note-9/2.png","slug":"2.png","post":"cke3x9g7f002pzgvu30d5dk73","modified":0,"renderable":0},{"_id":"source/_posts/web-server-note-9/3.png","slug":"3.png","post":"cke3x9g7f002pzgvu30d5dk73","modified":0,"renderable":0},{"_id":"source/_posts/web-server-note-9/5.png","slug":"5.png","post":"cke3x9g7f002pzgvu30d5dk73","modified":0,"renderable":0},{"_id":"source/_posts/web-server-note-9/6.png","slug":"6.png","post":"cke3x9g7f002pzgvu30d5dk73","modified":0,"renderable":0},{"_id":"source/_posts/web-server-note-13/1.png","slug":"1.png","post":"cke3x9g6v0028zgvu2hxp7k0l","modified":0,"renderable":0},{"_id":"source/_posts/web-server-note-13/2.png","slug":"2.png","post":"cke3x9g6v0028zgvu2hxp7k0l","modified":0,"renderable":0},{"_id":"source/_posts/web-server-note-13/3.png","slug":"3.png","post":"cke3x9g6v0028zgvu2hxp7k0l","modified":0,"renderable":0},{"_id":"source/_posts/web-server-note-13/4.png","slug":"4.png","post":"cke3x9g6v0028zgvu2hxp7k0l","modified":0,"renderable":0},{"_id":"source/_posts/web-server-note-13/5.png","slug":"5.png","post":"cke3x9g6v0028zgvu2hxp7k0l","modified":0,"renderable":0},{"_id":"source/_posts/web-server-note-13/6.png","slug":"6.png","post":"cke3x9g6v0028zgvu2hxp7k0l","modified":0,"renderable":0},{"_id":"source/_posts/web-server-note-13/7.png","slug":"7.png","post":"cke3x9g6v0028zgvu2hxp7k0l","modified":0,"renderable":0},{"_id":"source/_posts/jdbc-note-1/1.png","slug":"1.png","post":"cke3x9g5e000tzgvu2pclfpw0","modified":0,"renderable":0},{"_id":"source/_posts/jdbc-note-1/2.png","slug":"2.png","post":"cke3x9g5e000tzgvu2pclfpw0","modified":0,"renderable":0},{"_id":"source/_posts/jdbc-note-1/3.png","slug":"3.png","post":"cke3x9g5e000tzgvu2pclfpw0","modified":0,"renderable":0},{"_id":"source/_posts/jdbc-note-1/4.png","slug":"4.png","post":"cke3x9g5e000tzgvu2pclfpw0","modified":0,"renderable":0},{"_id":"source/_posts/jdbc-note-1/5.png","slug":"5.png","post":"cke3x9g5e000tzgvu2pclfpw0","modified":0,"renderable":0},{"_id":"source/_posts/jdbc-note-1/6.png","slug":"6.png","post":"cke3x9g5e000tzgvu2pclfpw0","modified":0,"renderable":0},{"_id":"source/_posts/jdbc-note-1/7.png","slug":"7.png","post":"cke3x9g5e000tzgvu2pclfpw0","modified":0,"renderable":0},{"_id":"source/_posts/jdbc-note-2/1.png","slug":"1.png","post":"cke3x9g5g000uzgvu7e3behua","modified":0,"renderable":0},{"_id":"source/_posts/jdbc-note-2/2.png","slug":"2.png","post":"cke3x9g5g000uzgvu7e3behua","modified":0,"renderable":0},{"_id":"source/_posts/jdbc-note-2/4.png","slug":"4.png","post":"cke3x9g5g000uzgvu7e3behua","modified":0,"renderable":0},{"_id":"source/_posts/jdbc-note-2/5.png","slug":"5.png","post":"cke3x9g5g000uzgvu7e3behua","modified":0,"renderable":0},{"_id":"source/_posts/jdbc-note-2/6.png","slug":"6.png","post":"cke3x9g5g000uzgvu7e3behua","modified":0,"renderable":0},{"_id":"source/_posts/jdbc-note-2/7.png","slug":"7.png","post":"cke3x9g5g000uzgvu7e3behua","modified":0,"renderable":0},{"_id":"source/_posts/jdbc-note-2/8.png","slug":"8.png","post":"cke3x9g5g000uzgvu7e3behua","modified":0,"renderable":0},{"_id":"source/_posts/python-web-spider/1.png","slug":"1.png","post":"cke3x9g68001mzgvue1nm44ed","modified":0,"renderable":0},{"_id":"source/_posts/python-web-spider/2.png","slug":"2.png","post":"cke3x9g68001mzgvue1nm44ed","modified":0,"renderable":0},{"_id":"source/_posts/python-web-spider/3.png","slug":"3.png","post":"cke3x9g68001mzgvue1nm44ed","modified":0,"renderable":0},{"_id":"source/_posts/python-web-spider/4.png","slug":"4.png","post":"cke3x9g68001mzgvue1nm44ed","modified":0,"renderable":0},{"_id":"source/_posts/python-web-spider/5.png","slug":"5.png","post":"cke3x9g68001mzgvue1nm44ed","modified":0,"renderable":0},{"_id":"source/_posts/python-web-spider/6.png","slug":"6.png","post":"cke3x9g68001mzgvue1nm44ed","modified":0,"renderable":0},{"_id":"source/_posts/python-web-spider/7.png","slug":"7.png","post":"cke3x9g68001mzgvue1nm44ed","modified":0,"renderable":0},{"_id":"source/_posts/python-web-spider/8.png","slug":"8.png","post":"cke3x9g68001mzgvue1nm44ed","modified":0,"renderable":0},{"_id":"source/_posts/web-server-note-3/1.png","slug":"1.png","post":"cke3x9g73002fzgvueaj2ap47","modified":0,"renderable":0},{"_id":"source/_posts/web-server-note-3/2.png","slug":"2.png","post":"cke3x9g73002fzgvueaj2ap47","modified":0,"renderable":0},{"_id":"source/_posts/web-server-note-3/3.png","slug":"3.png","post":"cke3x9g73002fzgvueaj2ap47","modified":0,"renderable":0},{"_id":"source/_posts/web-server-note-3/4.png","slug":"4.png","post":"cke3x9g73002fzgvueaj2ap47","modified":0,"renderable":0},{"_id":"source/_posts/web-server-note-3/5.png","slug":"5.png","post":"cke3x9g73002fzgvueaj2ap47","modified":0,"renderable":0},{"_id":"source/_posts/web-server-note-3/6.png","slug":"6.png","post":"cke3x9g73002fzgvueaj2ap47","modified":0,"renderable":0},{"_id":"source/_posts/web-server-note-3/7.png","slug":"7.png","post":"cke3x9g73002fzgvueaj2ap47","modified":0,"renderable":0},{"_id":"source/_posts/web-server-note-3/8.png","slug":"8.png","post":"cke3x9g73002fzgvueaj2ap47","modified":0,"renderable":0},{"_id":"source/_posts/front-end/7.png","slug":"7.png","post":"cke3x9g360003zgvuclyk9ulc","modified":0,"renderable":0},{"_id":"source/_posts/jdbc-note-3/1.png","slug":"1.png","post":"cke3x9g5i000xzgvu5z44cwwb","modified":0,"renderable":0},{"_id":"source/_posts/jdbc-note-3/10.png","slug":"10.png","post":"cke3x9g5i000xzgvu5z44cwwb","modified":0,"renderable":0},{"_id":"source/_posts/jdbc-note-3/11.png","slug":"11.png","post":"cke3x9g5i000xzgvu5z44cwwb","modified":0,"renderable":0},{"_id":"source/_posts/jdbc-note-3/2.png","slug":"2.png","post":"cke3x9g5i000xzgvu5z44cwwb","modified":0,"renderable":0},{"_id":"source/_posts/jdbc-note-3/3.png","slug":"3.png","post":"cke3x9g5i000xzgvu5z44cwwb","modified":0,"renderable":0},{"_id":"source/_posts/jdbc-note-3/4.png","slug":"4.png","post":"cke3x9g5i000xzgvu5z44cwwb","modified":0,"renderable":0},{"_id":"source/_posts/jdbc-note-3/5.png","slug":"5.png","post":"cke3x9g5i000xzgvu5z44cwwb","modified":0,"renderable":0},{"_id":"source/_posts/jdbc-note-3/6.png","slug":"6.png","post":"cke3x9g5i000xzgvu5z44cwwb","modified":0,"renderable":0},{"_id":"source/_posts/jdbc-note-3/7.png","slug":"7.png","post":"cke3x9g5i000xzgvu5z44cwwb","modified":0,"renderable":0},{"_id":"source/_posts/jdbc-note-3/8.png","slug":"8.png","post":"cke3x9g5i000xzgvu5z44cwwb","modified":0,"renderable":0},{"_id":"source/_posts/jdbc-note-3/9.png","slug":"9.png","post":"cke3x9g5i000xzgvu5z44cwwb","modified":0,"renderable":0},{"_id":"source/_posts/web-server-note-2/10.png","slug":"10.png","post":"cke3x9g70002czgvu58pmguio","modified":0,"renderable":0},{"_id":"source/_posts/web-server-note-2/11.png","slug":"11.png","post":"cke3x9g70002czgvu58pmguio","modified":0,"renderable":0},{"_id":"source/_posts/web-server-note-2/12.png","slug":"12.png","post":"cke3x9g70002czgvu58pmguio","modified":0,"renderable":0},{"_id":"source/_posts/web-server-note-2/2.png","slug":"2.png","post":"cke3x9g70002czgvu58pmguio","modified":0,"renderable":0},{"_id":"source/_posts/web-server-note-2/4.png","slug":"4.png","post":"cke3x9g70002czgvu58pmguio","modified":0,"renderable":0},{"_id":"source/_posts/web-server-note-2/5.png","slug":"5.png","post":"cke3x9g70002czgvu58pmguio","modified":0,"renderable":0},{"_id":"source/_posts/web-server-note-2/6.png","slug":"6.png","post":"cke3x9g70002czgvu58pmguio","modified":0,"renderable":0},{"_id":"source/_posts/web-server-note-2/7.png","slug":"7.png","post":"cke3x9g70002czgvu58pmguio","modified":0,"renderable":0},{"_id":"source/_posts/web-server-note-2/8.png","slug":"8.png","post":"cke3x9g70002czgvu58pmguio","modified":0,"renderable":0},{"_id":"source/_posts/web-server-note-2/9.png","slug":"9.png","post":"cke3x9g70002czgvu58pmguio","modified":0,"renderable":0},{"_id":"source/_posts/jdbc-note-4/1.png","slug":"1.png","post":"cke3x9g5j000yzgvubgcs7jtu","modified":0,"renderable":0},{"_id":"source/_posts/jdbc-note-4/11.png","slug":"11.png","post":"cke3x9g5j000yzgvubgcs7jtu","modified":0,"renderable":0},{"_id":"source/_posts/jdbc-note-4/12.png","slug":"12.png","post":"cke3x9g5j000yzgvubgcs7jtu","modified":0,"renderable":0},{"_id":"source/_posts/jdbc-note-4/13.png","slug":"13.png","post":"cke3x9g5j000yzgvubgcs7jtu","modified":0,"renderable":0},{"_id":"source/_posts/jdbc-note-4/14.png","slug":"14.png","post":"cke3x9g5j000yzgvubgcs7jtu","modified":0,"renderable":0},{"_id":"source/_posts/jdbc-note-4/17.png","slug":"17.png","post":"cke3x9g5j000yzgvubgcs7jtu","modified":0,"renderable":0},{"_id":"source/_posts/jdbc-note-4/18.png","slug":"18.png","post":"cke3x9g5j000yzgvubgcs7jtu","modified":0,"renderable":0},{"_id":"source/_posts/jdbc-note-4/19.png","slug":"19.png","post":"cke3x9g5j000yzgvubgcs7jtu","modified":0,"renderable":0},{"_id":"source/_posts/jdbc-note-4/2.png","slug":"2.png","post":"cke3x9g5j000yzgvubgcs7jtu","modified":0,"renderable":0},{"_id":"source/_posts/jdbc-note-4/20.png","slug":"20.png","post":"cke3x9g5j000yzgvubgcs7jtu","modified":0,"renderable":0},{"_id":"source/_posts/jdbc-note-4/21.png","slug":"21.png","post":"cke3x9g5j000yzgvubgcs7jtu","modified":0,"renderable":0},{"_id":"source/_posts/jdbc-note-4/22.png","slug":"22.png","post":"cke3x9g5j000yzgvubgcs7jtu","modified":0,"renderable":0},{"_id":"source/_posts/jdbc-note-4/3.png","slug":"3.png","post":"cke3x9g5j000yzgvubgcs7jtu","modified":0,"renderable":0},{"_id":"source/_posts/jdbc-note-4/4.png","slug":"4.png","post":"cke3x9g5j000yzgvubgcs7jtu","modified":0,"renderable":0},{"_id":"source/_posts/jdbc-note-4/5.png","slug":"5.png","post":"cke3x9g5j000yzgvubgcs7jtu","modified":0,"renderable":0},{"_id":"source/_posts/jdbc-note-4/6.png","slug":"6.png","post":"cke3x9g5j000yzgvubgcs7jtu","modified":0,"renderable":0},{"_id":"source/_posts/jdbc-note-4/7.png","slug":"7.png","post":"cke3x9g5j000yzgvubgcs7jtu","modified":0,"renderable":0},{"_id":"source/_posts/jdbc-note-4/8.png","slug":"8.png","post":"cke3x9g5j000yzgvubgcs7jtu","modified":0,"renderable":0},{"_id":"source/_posts/jdbc-note-4/9.png","slug":"9.png","post":"cke3x9g5j000yzgvubgcs7jtu","modified":0,"renderable":0},{"_id":"source/_posts/front-end/1.png","slug":"1.png","post":"cke3x9g360003zgvuclyk9ulc","modified":0,"renderable":0},{"_id":"source/_posts/front-end/3.png","slug":"3.png","post":"cke3x9g360003zgvuclyk9ulc","modified":0,"renderable":0},{"_id":"source/_posts/front-end/4.png","slug":"4.png","post":"cke3x9g360003zgvuclyk9ulc","modified":0,"renderable":0},{"_id":"source/_posts/front-end/5.png","slug":"5.png","post":"cke3x9g360003zgvuclyk9ulc","modified":0,"renderable":0},{"_id":"source/_posts/semantic-ui/01.png","slug":"01.png","post":"cke3x9g67001kzgvu7n6o08o4","modified":1,"renderable":0},{"_id":"source/_posts/semantic-ui/02.png","slug":"02.png","post":"cke3x9g67001kzgvu7n6o08o4","modified":1,"renderable":0},{"_id":"source/_posts/semantic-ui/03.png","slug":"03.png","post":"cke3x9g67001kzgvu7n6o08o4","modified":1,"renderable":0},{"_id":"source/_posts/semantic-ui/04.png","slug":"04.png","post":"cke3x9g67001kzgvu7n6o08o4","modified":1,"renderable":0},{"_id":"source/_posts/semantic-ui/05.png","slug":"05.png","post":"cke3x9g67001kzgvu7n6o08o4","modified":1,"renderable":0}],"PostCategory":[{"post_id":"cke3x9g330002zgvu2q6y2b9h","category_id":"cke3x9g390004zgvuam85di9h","_id":"cke3x9g47000bzgvu4wgx545f"},{"post_id":"cke3x9g360003zgvuclyk9ulc","category_id":"cke3x9g3v0008zgvue7kh8q8o","_id":"cke3x9g4h000fzgvu2mtobax9"},{"post_id":"cke3x9g3b0005zgvubymu0olr","category_id":"cke3x9g47000czgvu20qhg53z","_id":"cke3x9g4x000jzgvu791o9da3"},{"post_id":"cke3x9g3i0006zgvuaqh7hrby","category_id":"cke3x9g4m000gzgvu185zcqnh","_id":"cke3x9g5b000ozgvu1twe742t"},{"post_id":"cke3x9g3t0007zgvuglzf3wx5","category_id":"cke3x9g4m000gzgvu185zcqnh","_id":"cke3x9g5e000szgvu34g88mg6"},{"post_id":"cke3x9g420009zgvub2bg95ys","category_id":"cke3x9g4m000gzgvu185zcqnh","_id":"cke3x9g5i000wzgvu9mh96ff9"},{"post_id":"cke3x9g46000azgvu9jxgfwr0","category_id":"cke3x9g4m000gzgvu185zcqnh","_id":"cke3x9g5m000zzgvud4tr60iv"},{"post_id":"cke3x9g4b000dzgvudima6vex","category_id":"cke3x9g5i000vzgvu5aww39pl","_id":"cke3x9g5u0014zgvu7vne5eln"},{"post_id":"cke3x9g5m0010zgvucreubhbk","category_id":"cke3x9g47000czgvu20qhg53z","_id":"cke3x9g5v0017zgvu3bj19afw"},{"post_id":"cke3x9g4g000ezgvu89182apo","category_id":"cke3x9g5o0011zgvudzsf1dct","_id":"cke3x9g5x0019zgvu3cehevws"},{"post_id":"cke3x9g4n000hzgvuemmyf19s","category_id":"cke3x9g5u0015zgvu43rd1glz","_id":"cke3x9g61001ezgvu69fq48nq"},{"post_id":"cke3x9g5w0018zgvu6g1s1w2x","category_id":"cke3x9g47000czgvu20qhg53z","_id":"cke3x9g63001gzgvuglc1bp0x"},{"post_id":"cke3x9g5y001bzgvu9q949ysv","category_id":"cke3x9g47000czgvu20qhg53z","_id":"cke3x9g65001jzgvu5sy8emj0"},{"post_id":"cke3x9g4s000izgvu1j8kf5wr","category_id":"cke3x9g5o0011zgvudzsf1dct","_id":"cke3x9g68001lzgvu2ymx4m95"},{"post_id":"cke3x9g4y000lzgvug8z461ta","category_id":"cke3x9g5o0011zgvudzsf1dct","_id":"cke3x9g69001ozgvu4sv4bxki"},{"post_id":"cke3x9g55000mzgvu65x1a40b","category_id":"cke3x9g5o0011zgvudzsf1dct","_id":"cke3x9g6f001uzgvu02pudseh"},{"post_id":"cke3x9g5b000pzgvu33echb35","category_id":"cke3x9g5o0011zgvudzsf1dct","_id":"cke3x9g6i001xzgvu6est7dok"},{"post_id":"cke3x9g6c001qzgvu47mk95nq","category_id":"cke3x9g5i000vzgvu5aww39pl","_id":"cke3x9g6k001zzgvu0v4a60ki"},{"post_id":"cke3x9g5c000qzgvu5xnp5dv9","category_id":"cke3x9g5o0011zgvudzsf1dct","_id":"cke3x9g6n0021zgvubvlddftl"},{"post_id":"cke3x9g5e000tzgvu2pclfpw0","category_id":"cke3x9g6h001wzgvugkp76nqj","_id":"cke3x9g6s0026zgvu6emw8twi"},{"post_id":"cke3x9g5g000uzgvu7e3behua","category_id":"cke3x9g6h001wzgvugkp76nqj","_id":"cke3x9g6x002azgvu25yk6j0i"},{"post_id":"cke3x9g5i000xzgvu5z44cwwb","category_id":"cke3x9g6h001wzgvugkp76nqj","_id":"cke3x9g72002ezgvugkphbsi1"},{"post_id":"cke3x9g5j000yzgvubgcs7jtu","category_id":"cke3x9g6h001wzgvugkp76nqj","_id":"cke3x9g77002hzgvuemdndefk"},{"post_id":"cke3x9g5s0012zgvu7zhb54kg","category_id":"cke3x9g72002dzgvu7pzoecuf","_id":"cke3x9g7c002nzgvu1m8hd5d7"},{"post_id":"cke3x9g5t0013zgvubazlgmp6","category_id":"cke3x9g6h001wzgvugkp76nqj","_id":"cke3x9g7g002qzgvu72tq3lj3"},{"post_id":"cke3x9g5v0016zgvu2tmjag04","category_id":"cke3x9g7c002mzgvufkk97zjh","_id":"cke3x9g7i002tzgvu0ng09wqz"},{"post_id":"cke3x9g5z001czgvudcg6bhfq","category_id":"cke3x9g7c002mzgvufkk97zjh","_id":"cke3x9g7j002vzgvu76p2dhc7"},{"post_id":"cke3x9g61001fzgvu89bg6t9y","category_id":"cke3x9g7c002mzgvufkk97zjh","_id":"cke3x9g7k002xzgvuh4h6hqbg"},{"post_id":"cke3x9g63001hzgvu0vsr3hzl","category_id":"cke3x9g7c002mzgvufkk97zjh","_id":"cke3x9g7l002yzgvuetyfggtj"},{"post_id":"cke3x9g68001mzgvue1nm44ed","category_id":"cke3x9g7k002wzgvu9qxu363z","_id":"cke3x9g7m0030zgvufaiaaq93"},{"post_id":"cke3x9g6a001pzgvucrdlfhbx","category_id":"cke3x9g7l002zzgvudbp89rwg","_id":"cke3x9g7n0032zgvue91u0c5u"},{"post_id":"cke3x9g6f001tzgvu1d4h3t9h","category_id":"cke3x9g7n0031zgvu3osth7zt","_id":"cke3x9g7p0035zgvu4d4q5b97"},{"post_id":"cke3x9g6g001vzgvu2eza92yx","category_id":"cke3x9g7n0031zgvu3osth7zt","_id":"cke3x9g7r0037zgvu67ungyg8"},{"post_id":"cke3x9g6j001yzgvueopx38rj","category_id":"cke3x9g7n0031zgvu3osth7zt","_id":"cke3x9g7s0039zgvu7t2c1rrn"},{"post_id":"cke3x9g6l0020zgvuco85c5im","category_id":"cke3x9g7n0031zgvu3osth7zt","_id":"cke3x9g7u003bzgvu7it6cayq"},{"post_id":"cke3x9g6n0023zgvu7n95bee4","category_id":"cke3x9g7n0031zgvu3osth7zt","_id":"cke3x9g7v003dzgvu5x633bcm"},{"post_id":"cke3x9g6p0024zgvueoymcp82","category_id":"cke3x9g7n0031zgvu3osth7zt","_id":"cke3x9g7w003fzgvu665v9bv0"},{"post_id":"cke3x9g6t0027zgvu3qnt3vep","category_id":"cke3x9g7n0031zgvu3osth7zt","_id":"cke3x9g7x003hzgvufsyj7gr3"},{"post_id":"cke3x9g6v0028zgvu2hxp7k0l","category_id":"cke3x9g7n0031zgvu3osth7zt","_id":"cke3x9g7z003jzgvu80zq6pbz"},{"post_id":"cke3x9g6x002bzgvu9470f24u","category_id":"cke3x9g7n0031zgvu3osth7zt","_id":"cke3x9g80003lzgvu45ep2mjt"},{"post_id":"cke3x9g70002czgvu58pmguio","category_id":"cke3x9g7n0031zgvu3osth7zt","_id":"cke3x9g82003nzgvu12u4drxs"},{"post_id":"cke3x9g73002fzgvueaj2ap47","category_id":"cke3x9g7n0031zgvu3osth7zt","_id":"cke3x9g83003pzgvuebxf5nou"},{"post_id":"cke3x9g75002gzgvu544e484e","category_id":"cke3x9g7n0031zgvu3osth7zt","_id":"cke3x9g84003rzgvu9aro686q"},{"post_id":"cke3x9g77002izgvug69pafab","category_id":"cke3x9g7n0031zgvu3osth7zt","_id":"cke3x9g85003tzgvu008agbba"},{"post_id":"cke3x9g79002kzgvucsju9r0r","category_id":"cke3x9g7n0031zgvu3osth7zt","_id":"cke3x9g89003vzgvuhrcc7fe6"},{"post_id":"cke3x9g7a002lzgvuc8cm46oz","category_id":"cke3x9g7n0031zgvu3osth7zt","_id":"cke3x9g8a003xzgvud37eh70m"},{"post_id":"cke3x9g7e002ozgvu6dpgagkq","category_id":"cke3x9g7n0031zgvu3osth7zt","_id":"cke3x9g8b003yzgvufbhi26cn"},{"post_id":"cke3x9g7f002pzgvu30d5dk73","category_id":"cke3x9g7n0031zgvu3osth7zt","_id":"cke3x9g8d003zzgvu38tn24ji"},{"post_id":"cke3x9g67001kzgvu7n6o08o4","category_id":"cke3x9g3v0008zgvue7kh8q8o","_id":"cke4qvmpl000040vu2k571xp3"}],"PostTag":[],"Tag":[]}}