<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>安全 on Aaron Lin</title>
    <link>https://aaronlinv.github.io/categories/%E5%AE%89%E5%85%A8/</link>
    <description>Recent content in 安全 on Aaron Lin</description>
    <image>
      <title>Aaron Lin</title>
      <url>https://aaronlinv.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://aaronlinv.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.144.2</generator>
    <language>en</language>
    <lastBuildDate>Tue, 25 Feb 2025 21:02:50 +0800</lastBuildDate>
    <atom:link href="https://aaronlinv.github.io/categories/%E5%AE%89%E5%85%A8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>永远不要相信用户的输入：从 SQL 注入攻防看输入验证的重要性</title>
      <link>https://aaronlinv.github.io/posts/sql-injection/</link>
      <pubDate>Tue, 25 Feb 2025 21:02:50 +0800</pubDate>
      <guid>https://aaronlinv.github.io/posts/sql-injection/</guid>
      <description>&lt;p&gt;学习编程之初就常被告诫：“永远不要相信用户的输入”，但实际编码中，可能因为各种原因而忽略这点，本文尝试以 SQL 注入的角度探寻校验输入的重要性&lt;/p&gt;
&lt;p&gt;以下实验均以 &lt;a href=&#34;https://github.com/Audi-1/sqli-labs&#34;&gt;SQLI labs&lt;/a&gt; 靶场为例&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;1-联合注入union-based&#34;&gt;1. 联合注入（Union-Based）&lt;/h4&gt;
&lt;p&gt;来自：&lt;a href=&#34;https://github.com/Audi-1/sqli-labs/tree/master/Less-1&#34;&gt;Less-1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;../sql-injection/1.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;这是一个常见的查询页面。&lt;code&gt;http://127.0.0.1/Less-1/?id=1&lt;/code&gt; ，通过 &lt;code&gt;id=1&lt;/code&gt; 传递参数。后端常见的 SQL 写法：&lt;code&gt;SELECT * FROM users WHERE id=&#39;$id&#39; LIMIT 0,1;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;攻击者可以通过构造 &lt;code&gt;id&lt;/code&gt; 的参数值，执行任意的 SQL 语句：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;../sql-injection/2.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;其中关键步骤是构造 &lt;code&gt;1&#39; --+&lt;/code&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过某个具体参数 &lt;code&gt;1&lt;/code&gt; 和 单引号 &lt;code&gt;&#39;&lt;/code&gt; 来结束前面的语句：&lt;code&gt;SELECT * FROM users WHERE id=&#39;&lt;/code&gt;，使其成为合法的 SQL 语句： &lt;code&gt;SELECT * FROM users WHERE id=&#39;1&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;通过 &lt;code&gt;--+&lt;/code&gt; 来注释后面的 &lt;code&gt;&#39; LIMIT 0,1&amp;quot;;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;基于上面的原理，我们就可以在 &lt;code&gt;1&#39;&lt;/code&gt; 和 &lt;code&gt;--+&lt;/code&gt; 之间插入语句了，进行联合注入，具体步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;通过 &lt;code&gt;order by&lt;/code&gt; 测列宽：&lt;code&gt;?id=-1&#39; order by 4 --+&lt;/code&gt;，通过不断尝试和错误提示可以得知列宽为 3
&lt;img loading=&#34;lazy&#34; src=&#34;../sql-injection/3.png&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;判断回显值对应的位置，&lt;code&gt;?id=-1&#39; union select 1,2,3 --+&lt;/code&gt;，2 和 3 这两个位置都可供使用
&lt;img loading=&#34;lazy&#34; src=&#34;../sql-injection/4.png&#34;&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
